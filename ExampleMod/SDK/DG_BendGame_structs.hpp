#pragma once

// DaysGone (00) SDK

#ifdef _MSC_VER
	#pragma pack(push, 0x8)
#endif

namespace SDK
{
//---------------------------------------------------------------------------
//Enums
//---------------------------------------------------------------------------

// Enum BendGame.EDonePlayVocalReason
enum class EDonePlayVocalReason : uint8_t
{
	Success                        = 0,
	FailedPawnDied                 = 1,
	FailedPriority                 = 2,
	Failed                         = 3,
	ConversationAlreadyPlayed      = 4,
	NoConversationData             = 5,
	SpeakerDeleted                 = 6,
	SpeakerDead                    = 7,
	NoSoundClass                   = 8,
	EDonePlayVocalReason_MAX       = 9
};


// Enum BendGame.EBendCoverLeaveReason
enum class EBendCoverLeaveReason : uint8_t
{
	None                           = 0,
	Invalidated                    = 1,
	Flanked                        = 2,
	ThreatTooClose                 = 3,
	TookDamageFromAbove            = 4,
	OutOfPreferredRange            = 5,
	Damaged                        = 6,
	NoLos                          = 7,
	CoverDestroyed                 = 8,
	EBendCoverLeaveReason_MAX      = 9
};


// Enum BendGame.EConfidenceType
enum class EConfidenceType : uint8_t
{
	SMP                            = 0,
	Panicked                       = 1,
	Worried                        = 2,
	Neutral                        = 3,
	Confident                      = 4,
	Heroic                         = 5,
	EConfidenceType_MAX            = 6
};


// Enum BendGame.EFactionLevel
enum class EFactionLevel : uint8_t
{
	VeryLow                        = 0,
	Low                            = 1,
	Medium                         = 2,
	High                           = 3,
	VeryHigh                       = 4,
	Num                            = 5,
	EFactionLevel_MAX              = 6
};


// Enum BendGame.EAIFactionType
enum class EAIFactionType : uint8_t
{
	Player                         = 0,
	Boozer                         = 1,
	Lisa                           = 2,
	Buddy                          = 3,
	Swarmer                        = 4,
	Newt                           = 5,
	LootNewt                       = 6,
	RagerBear                      = 7,
	FreakCougar                    = 8,
	FreakWolf                      = 9,
	FreakCrow                      = 10,
	Horde                          = 11,
	Survivor                       = 12,
	Cannibal                       = 13,
	Marauder                       = 14,
	Militia                        = 15,
	Hostage                        = 16,
	Loner                          = 17,
	Nero                           = 18,
	Pinnacles                      = 19,
	Hotsprings                     = 20,
	Copeland                       = 21,
	IronMikes                      = 22,
	RIP                            = 23,
	Wolf                           = 24,
	Bear                           = 25,
	Crow                           = 26,
	Cougar                         = 27,
	Deer                           = 28,
	Bait                           = 29,
	FreakBait                      = 30,
	Distractor                     = 31,
	FreakDeer                      = 32,
	Screamer                       = 33,
	Breaker                        = 34,
	Reacher                        = 35,
	Bleacher                       = 36,
	Burster                        = 37,
	Spitter                        = 38,
	PreBerserk                     = 39,
	Berserk                        = 40,
	DiamondLake                    = 41,
	WizardIsland                   = 42,
	OBrian                         = 43,
	MaxCount                       = 44,
	EAIFactionType_MAX             = 45
};


// Enum BendGame.ETrustTier
enum class ETrustTier : uint8_t
{
	None                           = 0,
	Low                            = 1,
	Medium                         = 2,
	High                           = 3,
	Num                            = 4,
	ETrustTier_MAX                 = 5
};


// Enum BendGame.EPeformActionFailedReason
enum class EPeformActionFailedReason : uint8_t
{
	FAIL_Invalid                   = 0,
	FAIL_LowPriority               = 1,
	FAIL_AnimationFailedToStart    = 2,
	FAIL_Interrupted               = 3,
	FAIL_Cancelled                 = 4,
	FAIL_PerformActionStateDoesntExit = 5,
	FAIL_InvalidSkeleton           = 6,
	FAIL_PrerequisitesNotMet       = 7,
	FAIL_NoAnimSequence            = 8,
	FAIL_StateMachineHasNotTickedYet = 9,
	FAIL_ContextNotUsedYet         = 10,
	FAIL_PawnIsDead                = 11,
	FAIL_StateMachineDoesNotExist  = 12,
	FAIL_NoFail                    = 13,
	FAIL_MAX                       = 14
};


// Enum BendGame.EConversationInterruptReason
enum class EConversationInterruptReason : uint8_t
{
	WasDamaged                     = 0,
	MeleeingAnEnemy                = 1,
	ShootingAtEnemy                = 2,
	BeingThreatened                = 3,
	Blueprint                      = 4,
	EConversationInterruptReason_MAX = 5
};


// Enum BendGame.EMissionIDs
enum class EMissionIDs : uint8_t
{
	NONE                           = 0,
	HAT                            = 1,
	BMB                            = 2,
	OBR                            = 3,
	OBT                            = 4,
	CRW                            = 5,
	WMB                            = 6,
	NBE                            = 7,
	WAN                            = 8,
	WNG                            = 9,
	CTR                            = 10,
	HGL                            = 11,
	TUB                            = 12,
	ATR                            = 13,
	LOL                            = 14,
	LOL2                           = 15,
	COL                            = 16,
	TFL2                           = 17,
	TTR                            = 18,
	RBC                            = 19,
	FIN                            = 20,
	TLL                            = 21,
	TLL2                           = 22,
	TLL3                           = 23,
	TLL4                           = 24,
	RBB                            = 25,
	OBF                            = 26,
	SFN                            = 27,
	OJ1                            = 28,
	OJ2                            = 29,
	OJ3                            = 30,
	NFS                            = 31,
	NFS2                           = 32,
	NFS4                           = 33,
	NFS6                           = 34,
	FMC                            = 35,
	FMC2                           = 36,
	FMC3                           = 37,
	WAD1                           = 38,
	WAD2                           = 39,
	WADN                           = 40,
	WADR                           = 41,
	WAD3                           = 42,
	BTF                            = 43,
	MBU1                           = 44,
	MBU2                           = 45,
	MBU3                           = 46,
	MBU4                           = 47,
	BIP                            = 48,
	NRS                            = 49,
	NRS2                           = 50,
	MBF1                           = 51,
	MBF2                           = 52,
	LBL1                           = 53,
	LBL2                           = 54,
	RTL1                           = 55,
	PBC2                           = 56,
	PBC3                           = 57,
	PBC4                           = 58,
	AON1                           = 59,
	AON2                           = 60,
	ALL1                           = 61,
	ALL2                           = 62,
	BBD1                           = 63,
	BBD3                           = 64,
	BBD4                           = 65,
	BBD5                           = 66,
	BBD6                           = 67,
	TSR                            = 68,
	AQW                            = 69,
	RNA1                           = 70,
	MUF1                           = 71,
	MUF2                           = 72,
	ANM1                           = 73,
	ANM2                           = 74,
	ANM3                           = 75,
	ANM4                           = 76,
	JWI1                           = 77,
	IPR                            = 78,
	JWI2                           = 79,
	TCA1                           = 80,
	SOM1                           = 81,
	SOM2                           = 82,
	SOM3                           = 83,
	SOM4                           = 84,
	SOM5                           = 85,
	RFS1                           = 86,
	RFS2                           = 87,
	RFS3                           = 88,
	RFS4                           = 89,
	CLO2                           = 90,
	CLO3                           = 91,
	CLO4                           = 92,
	CLO5                           = 93,
	IYK                            = 94,
	LTB1                           = 95,
	ICF1                           = 96,
	ICF2                           = 97,
	ICF3                           = 98,
	AHB5                           = 99,
	LRH1                           = 100,
	BLL1                           = 101,
	LOR1                           = 102,
	WBB1                           = 103,
	AWI1                           = 104,
	AWI2                           = 105,
	SFN1                           = 106,
	DLC_BIKE_WHT                   = 107,
	DLC_BIKE_DRR                   = 108,
	DLC_BIKE_BTH                   = 109,
	DLC_BIKE_TTR                   = 110,
	DLC_BIKE_GOLF                  = 111,
	DLC_COMBAT_KOH                 = 112,
	DLC_COMBAT_ACR                 = 113,
	DLC_COMBAT_GGA                 = 114,
	DLC_COMBAT_IZR                 = 115,
	DLC_HORDE_USC                  = 116,
	DLC_HORDE_HEX                  = 117,
	DLC_HORDE_WBB1                 = 118,
	DLC_HORDE_BRH                  = 119,
	DLC_HORDE_WBB2                 = 120,
	PC                             = 121,
	CinTest                        = 122,
	E3_EXT                         = 123,
	E3_ST                          = 124,
	CinToolKit2                    = 125,
	CinToolkit3                    = 126,
	CinToolkit4                    = 127,
	CinToolKit5                    = 128,
	CinToolkit6                    = 129,
	EMissionIDs_MAX                = 130
};


// Enum BendGame.EInventoryOperation
enum class EInventoryOperation : uint8_t
{
	None                           = 0,
	Add                            = 1,
	Remove                         = 2,
	EInventoryOperation_MAX        = 3
};


// Enum BendGame.EBendPerformActionCollisionMode
enum class EBendPerformActionCollisionMode : uint8_t
{
	Enabled                        = 0,
	Disabled                       = 1,
	Max                            = 2,
	EBendPerformActionCollisionMode_MAX = 3
};


// Enum BendGame.EBendAnimCategory
enum class EBendAnimCategory : uint8_t
{
	None                           = 0,
	GroundMovement                 = 1,
	MeleeAttack                    = 2,
	Bike                           = 3,
	Ladder                         = 4,
	Cover                          = 5,
	PerformAction                  = 6,
	Swimming                       = 7,
	Crawling                       = 8,
	EdgeTraversal                  = 9,
	Falling                        = 10,
	Grappled                       = 11,
	Damage                         = 12,
	NoPerformAction                = 13,
	Jumping                        = 14,
	Ragdoll                        = 15,
	CustomAttack                   = 16,
	FlightMovement                 = 17,
	Perching                       = 18,
	CustomCategory6                = 19,
	CustomCategory7                = 20,
	CustomCategory8                = 21,
	CustomCategory9                = 22,
	CustomCategory10               = 23,
	CustomCategory11               = 24,
	CustomCategory12               = 25,
	CustomCategory13               = 26,
	CustomCategory14               = 27,
	CustomCategory15               = 28,
	CustomCategory16               = 29,
	CustomCategory17               = 30,
	CustomCategory18               = 31,
	EBendAnimCategory_MAX          = 32
};


// Enum BendGame.EBendPerformActionCompletionBehavior
enum class EBendPerformActionCompletionBehavior : uint8_t
{
	CurrentState                   = 0,
	NextState                      = 1,
	LastState                      = 2,
	EBendPerformActionCompletionBehavior_MAX = 3
};


// Enum BendGame.EPerformActionType
enum class EPerformActionType : uint8_t
{
	Invalid                        = 0,
	Ambient                        = 1,
	Awareness                      = 2,
	HitReaction                    = 3,
	Melee                          = 4,
	UpperBody_HitReaction          = 5,
	UpperBody_WeaponHolster        = 6,
	UpperBody_WeaponFire           = 7,
	UpperBody_Melee                = 8,
	POI                            = 9,
	POI_Locked                     = 10,
	Death                          = 11,
	FailureType                    = 12,
	EPerformActionType_MAX         = 13
};


// Enum BendGame.EBendVehicleExitReason
enum class EBendVehicleExitReason : uint8_t
{
	NotSure                        = 0,
	FellOff                        = 1,
	Died                           = 2,
	ForcedNotSure                  = 3,
	EarlyExitPickupAnim            = 4,
	EBendVehicleExitReason_MAX     = 5
};


// Enum BendGame.eDamageLocations
enum class EeDamageLocations : uint8_t
{
	AnyBodyPart                    = 0,
	Head                           = 1,
	Chest                          = 2,
	Stomach                        = 3,
	RightArmUpper                  = 4,
	RightArmLower                  = 5,
	RightLegUpper                  = 6,
	RightLegLower                  = 7,
	RightFoot                      = 8,
	LeftArmUpper                   = 9,
	LeftArmLower                   = 10,
	LeftLegUpper                   = 11,
	LeftLegLower                   = 12,
	LeftFoot                       = 13,
	BodyOnlyNoHead                 = 14,
	eDamageLocations_MAX           = 15
};


// Enum BendGame.EBendSoundEventType
enum class EBendSoundEventType : uint8_t
{
	None                           = 0,
	NonThreatening                 = 1,
	Threatening                    = 2,
	Rock                           = 3,
	Alarm                          = 4,
	Blast                          = 5,
	Gunshot                        = 6,
	EBendSoundEventType_MAX        = 7
};


// Enum BendGame.EWeaponType
enum class EWeaponType : uint8_t
{
	kWeaponType_None               = 0,
	kWeaponType_Pistol             = 1,
	kWeaponType_Rifle              = 2,
	kWeaponType_Assault            = 3,
	kWeaponType_Sniper             = 4,
	kWeaponType_Shotgun            = 5,
	kWeaponType_Melee              = 6,
	kWeaponType_Molotov            = 7,
	kWeaponType_Grenade            = 8,
	kWeaponType_Prop               = 9,
	kWeaponType_HeavyMachineGun    = 10,
	kWeaponType_SubMachineGun      = 11,
	kWeaponType_Special            = 12,
	kWeaponType_Bait               = 13,
	kWeaponType_Trap               = 14,
	kWeaponType_Rock               = 15,
	kWeaponType_Crossbow           = 16,
	kWeaponType_Num                = 17,
	kWeaponType_MAX                = 18
};


// Enum BendGame.EInventoryWeaponID
enum class EInventoryWeaponID : uint8_t
{
	kWeaponID_None                 = 0,
	kWeaponID_M9                   = 1,
	kWeaponID_M9_Silenced          = 2,
	kWeaponID_DesertEagle          = 3,
	kWeaponID_P226                 = 4,
	kWeaponID_P226_HiCap           = 5,
	kWeaponID_P226_LeonsRusty      = 6,
	kWeaponID_FN57                 = 7,
	kWeaponID_Glock                = 8,
	kWeaponID_TheMayor             = 9,
	kWeaponID_WessenPPC            = 10,
	kWeaponID_Snubnose             = 11,
	kWeaponID_SMP9                 = 12,
	kWeaponID_SMP9_                = 13,
	kWeaponID_SMP9__               = 14,
	kWeaponID_AirTaser             = 15,
	kWeaponID_Tranquilizer         = 16,
	kWeaponID_AK47                 = 17,
	kWeaponID_AK47_TLL             = 18,
	kWeaponID_M4A1                 = 19,
	kWeaponID_M4A1_HeavyRecoil     = 20,
	kWeaponID_Tavor                = 21,
	kWeaponID_HoneyBadger          = 22,
	kWeaponID_FlamethrowerHeavy    = 23,
	kWeaponID_FlamethrowerLight    = 24,
	kWeaponID_FlamethrowerMilitary = 25,
	kWeaponID_MiniGun              = 26,
	kWeaponID_TurretMiniGun        = 27,
	kWeaponID_LilStubby            = 28,
	kWeaponID_LilStubby_           = 29,
	kWeaponID_LilStubby__          = 30,
	kWeaponID                      = 31,
	kWeaponID_BoozersShotgun       = 32,
	kWeaponID_SawedOff_HeavyRecoil = 33,
	kWeaponID_SawedOff_HiCap       = 34,
	kWeaponID_TOZ194               = 35,
	kWeaponID_BenelliNova          = 36,
	kWeaponID_Mossberg590          = 37,
	kWeaponID_DP12                 = 38,
	kWeaponID_M4Super90            = 39,
	kWeaponID_M14                  = 40,
	kWeaponID_Ruger22              = 41,
	kWeaponID_ColtRevolvingRifle   = 42,
	kWeaponID_HenryBB              = 43,
	kWeaponID_M40                  = 44,
	kWeaponID_SavageM7             = 45,
	kWeaponID_Sako_TRG             = 46,
	kWeaponID_M79                  = 47,
	kWeaponID_MilkorMGL            = 48,
	kWeaponID_Panzerfaust          = 49,
	kWeaponID_Crossbow             = 50,
	kWeaponID_CrossbowNormal       = 51,
	kWeaponID_Crossbow_PreOrder    = 52,
	kWeaponID_MB150                = 53,
	kWeaponID_NockVolley           = 54,
	kWeaponID_Dragunov             = 55,
	kWeaponID_Dragunov_BBD_DoNotUse = 56,
	kWeaponID_MSG90                = 57,
	kWeaponID_AS50                 = 58,
	kWeaponID_PPSh_41              = 59,
	kWeaponID_M50                  = 60,
	kWeaponID_Thompson             = 61,
	kWeaponID_ScorpionEvo          = 62,
	kWeaponID_MP5                  = 63,
	kWeaponID_MP5Nero              = 64,
	kWeaponID_P90                  = 65,
	kWeaponID_P90_HeavyRecoil      = 66,
	kWeaponID_Steyr_AUG            = 67,
	kWeaponID_MK43                 = 68,
	kWeaponID_MK43_HiCap           = 69,
	kWeaponID_MG45                 = 70,
	kWeaponID_RPD                  = 71,
	kWeaponID_BearTrap             = 72,
	kWeaponID_AirbagConcBombTrap   = 73,
	kWeaponID_IEDTrap              = 74,
	kWeaponID_IEDTrap_AE_Ambush    = 75,
	kWeaponID_ProximityMineTrap    = 76,
	kWeaponID_Detonator            = 77,
	kWeaponID_Bait                 = 78,
	kWeaponID_SmallRock            = 79,
	kWeaponID_Pipebomb             = 80,
	kWeaponID_Attractor            = 81,
	kWeaponID_Grenade_Attractor    = 82,
	kWeaponID_Grenade_Frag         = 83,
	kWeaponID_SmokeBomb            = 84,
	kWeaponID_Flashbang            = 85,
	kWeaponID_Gas_Can              = 86,
	kWeaponID_Oxygen_Tank          = 87,
	kWeaponID_Molotov_Napalm       = 88,
	kWeaponID_Molotov_Small        = 89,
	kWeaponID_Flare                = 90,
	kWeaponID_NoPawnCollisionFlare = 91,
	kWeaponID_DroppableFlare       = 92,
	kWeaponID_FlareWithMap         = 93,
	kWeaponID_Lantern              = 94,
	kWeaponID_LanternWithPistol    = 95,
	kWeaponID_BaseballBat          = 96,
	kWeaponID_BaseballBat_Superior = 97,
	kWeaponID_SpikedBat            = 98,
	kWeaponID_SpikedBat_Superior   = 99,
	kWeaponID_BatAxe               = 100,
	kWeaponID_BatAxe_Superior      = 101,
	kWeaponID_FencePost            = 102,
	kWeaponID_FencePost_Axe        = 103,
	kWeaponID_FencePost_Spiked     = 104,
	kWeaponID_StoolLeg             = 105,
	kWeaponID_StoolLeg_Axe         = 106,
	kWeaponID_StoolLeg_Spiked      = 107,
	kWeaponID_2x4                  = 108,
	kWeaponID_2x4_Axe              = 109,
	kWeaponID_2x4_Spiked           = 110,
	kWeaponID_AluminumBaseballBat  = 111,
	kWeaponID_Pipe                 = 112,
	kWeaponID_Crowbar              = 113,
	kWeaponID_SledgeHammer         = 114,
	kWeaponID_MonkeyWrench         = 115,
	kWeaponID_Hatchet              = 116,
	kWeaponID_Machete              = 117,
	kWeaponID_MowerMachete         = 118,
	kWeaponID_PickAxeSmall         = 119,
	kWeaponID_BootKnife            = 120,
	kWeaponID_BootKnifeOBR         = 121,
	kWeaponID_BikeNPCMover         = 122,
	kWeaponID_FireAxe              = 123,
	kWeaponID_Torch                = 124,
	kWeaponID_PickAxe              = 125,
	kWeaponID_SwarmerArm           = 126,
	kWeaponID_CoolerNBE            = 127,
	kWeaponID_DynamiteCrateMBU3    = 128,
	kWeaponID_MicrocentrifugeRFS4  = 129,
	kWeaponID_CoolerNFS            = 130,
	kWeaponID_EnemyBlock           = 131,
	kWeaponID_SwarmerClaw          = 132,
	kWeaponID_ScreamerClaw         = 133,
	kWeaponID_FullbodyWeapon       = 134,
	kWeaponID_FullbodyWeaponRoll   = 135,
	kWeaponID_NewtClaw             = 136,
	kWeaponID_BreakerClaw          = 137,
	kWeaponID_BleacherClaw         = 138,
	kWeaponID_ReacherSnowball      = 139,
	kWeaponID_ScreamerScream       = 140,
	kWeaponID_BursterBurst         = 141,
	kWeaponID_SpitterSpit          = 142,
	kWeaponID_RagerArm             = 143,
	kWeaponID_RagerBullRush        = 144,
	kWeaponID_GroundPound          = 145,
	kWeaponID_FistWeapon           = 146,
	kWeaponID_FootWeapon           = 147,
	kWeaponID_Binocular            = 148,
	kWeaponID_Flashlight           = 149,
	kWeaponID_CrowBeak             = 150,
	kWeaponID_WolfTeeth            = 151,
	kWeaponID_FreakerWolfTeeth     = 152,
	kWeaponID_CougarTeeth          = 153,
	kWeaponID_CougarClaw           = 154,
	kWeaponID_BearClaw             = 155,
	kWeaponID_BearTeeth            = 156,
	kWeaponID_HordeClaw            = 157,
	kWeaponID_DeaconsFists         = 158,
	kWeaponID_RipperFists          = 159,
	kWeaponID_RedneckFists         = 160,
	kWeaponID_Turret               = 161,
	kWeaponID_BlowTorch            = 162,
	kWeaponID_BoozerKnife          = 163,
	kWeaponID_BoozerHook           = 164,
	kWeaponID_RipperBladed         = 165,
	kWeaponID_RipperBlunt          = 166,
	kWeaponID_RipperAxe            = 167,
	kWeaponID_CarlosMachete        = 168,
	kWeaponID_CarlosBootKnife      = 169,
	kWeaponID_SkizzoBootKnife      = 170,
	kWeaponID_ReacherClaw          = 171,
	kWeaponID_FootWeaponRing       = 172,
	kWeaponID_RipperAxeRing        = 173,
	kWeaponID_MiniGun_Pistolgrip   = 174,
	kWeaponID_MAX                  = 175
};


// Enum BendGame.EAimStance
enum class EAimStance : uint8_t
{
	EAIM_Loose                     = 0,
	EAIM_Aimed                     = 1,
	EAIM_AimedThrow                = 2,
	EAIM_Blindfire                 = 3,
	EAIM_MAX                       = 4
};


// Enum BendGame.EAIAwareState
enum class EAIAwareState : uint8_t
{
	Unaware                        = 0,
	SemiAware                      = 1,
	Aware                          = 2,
	CrowdUnaware                   = 3,
	Num                            = 4,
	EAIAwareState_MAX              = 5
};


// Enum BendGame.ECoverLeanDirection
enum class ECoverLeanDirection : uint8_t
{
	Up                             = 0,
	Left                           = 1,
	Right                          = 2,
	Over                           = 3,
	None                           = 4,
	ECoverLeanDirection_MAX        = 5
};


// Enum BendGame.EBendAIScriptingMode
enum class EBendAIScriptingMode : uint8_t
{
	None                           = 0,
	Min                            = 1,
	MaxWithSensing                 = 2,
	Max                            = 3,
	EBendAIScriptingMode_MAX       = 4
};


// Enum BendGame.EBendAIScriptingCommand
enum class EBendAIScriptingCommand : uint8_t
{
	None                           = 0,
	MoveTo                         = 1,
	TakeCover                      = 2,
	EnterVehicle                   = 3,
	MoveToGrapple                  = 4,
	ThrowThrowable                 = 5,
	MeleeAttack                    = 6,
	EBendAIScriptingCommand_MAX    = 7
};


// Enum BendGame.EPlayerExperience
enum class EPlayerExperience : uint8_t
{
	Standard                       = 0,
	EnemyKill                      = 1,
	Mission                        = 2,
	Job                            = 3,
	Bunker                         = 4,
	Collectible                    = 5,
	Nest                           = 6,
	NeroCheckpoint                 = 7,
	Num                            = 8,
	EPlayerExperience_MAX          = 9
};


// Enum BendGame.EInventorySkillID
enum class EInventorySkillID : uint8_t
{
	kSkillID_None                  = 0,
	kSkillID_GETYOURSTINKINGCLAWSOFFME = 1,
	kSkillID_ONLYFRIEND            = 2,
	kSkillID_JUSTROLLWITHIT        = 3,
	kSkillID_HITTINGTHESWEETSPOT   = 4,
	kSkillID_SLUGGER               = 5,
	kSkillID_BOBANDWEAVE           = 6,
	kSkillID_SPRINTSTUN            = 7,
	kSkillID_STRONGARM             = 8,
	kSkillID_THATLLDO1             = 9,
	kSkillID_LONGERSTAMINABUFFS    = 10,
	kSkillID_SHARPENUP             = 11,
	kSkillID_KEEPITAROUND          = 12,
	kSkillID_DESPERATESTRENGTH     = 13,
	kSkillID_WHAMBAM               = 14,
	kSkillID_GUIRAOSREVENGE        = 15,
	kSkillID_THINGSYOUNEVERKNEWYOUNEVERKNEW = 16,
	kSkillID_EYEFORDETAIL          = 17,
	kSkillID_THENOSEKNOWS          = 18,
	kSkillID_RETRIEVEBOLTS         = 19,
	kSkillID_MEATSBACKONTHEMENU    = 20,
	kSkillID_FASTANDDEADLY         = 21,
	kSkillID_GREASEMONKEY          = 22,
	kSkillID_FIRSTAID              = 23,
	kSkillID_GREENTHUMBS           = 24,
	kSkillID_FULLTHROTTLE          = 25,
	kSkillID_LONGERHEALTHBUFFS     = 26,
	kSkillID_STURDYSTAMINA         = 27,
	kSkillID_EARTOTHEGROUND        = 28,
	kSkillID_RULE1                 = 29,
	kSkillID_SIXFEETOVER           = 30,
	kSkillID_FOCUSEDSHOT           = 31,
	kSkillID_MUSCLEMEMORY          = 32,
	kSkillID_FIGHTANDFLIGHT        = 33,
	kSkillID_CHAINREACTION         = 34,
	kSkillID_FEARLESSRELOAD        = 35,
	kSkillID_STOPITALREADY         = 36,
	kSkillID_CROWDCONTROL          = 37,
	kSkillID_CARRYMAXAMMO          = 38,
	kSkillID_STUBBORNGRIP          = 39,
	kSkillID_LONGERFOCUSBUFFS      = 40,
	kSkillID_WEAKHANDRELOADING     = 41,
	kSkillID_NOMOREWOBBLE          = 42,
	kSkillID_HORDEBUSTER           = 43,
	kSkillID_PINPOINTACCURACY      = 44,
	kSkillID_ADRENALINERUSH        = 45,
	kSkillID_SABOTEUR              = 46,
	kSkillID_KNEESHOT              = 47,
	kSkillID_THEWOLFWASHERE        = 48,
	kSkillID_ACTNATURAL            = 49,
	kSkillID_CARRYMOREAMMO         = 50,
	kSkillID_FOCUSEFFICIENCY       = 51,
	kSkillID_ICANTAKETHIS          = 52,
	kSkillID_THEREAREMANYLIKEITBUTTHISONEISMINE = 53,
	kSkillID_ONESHOTONEKILL        = 54,
	kSkillID_DRIVEBY               = 55,
	kSkillID_DEADEYE               = 56,
	kSkillID_JUDGEJURY             = 57,
	kSkillID_SHOOTANDFRISK         = 58,
	kSkillID_HIGHNOON              = 59,
	kSkillID_TRACKQUARRY           = 60,
	kSkillID_CRAFTBOLTS            = 61,
	kSkillID_MAX                   = 62
};


// Enum BendGame.EInventoryCollectibleID
enum class EInventoryCollectibleID : uint8_t
{
	kCollectibleID_None            = 0,
	kCollectibleID_Leons_Map       = 1,
	kCollectibleID_RIPSermon       = 2,
	kCollectibleID_RIPSermon01     = 3,
	kCollectibleID_RIPSermon02     = 4,
	kCollectibleID_RIPSermon03     = 5,
	kCollectibleID_RIPSermon04     = 6,
	kCollectibleID_RIPSermon05     = 7,
	kCollectibleID_RIPSermon06     = 8,
	kCollectibleID_RIPSermon07     = 9,
	kCollectibleID_RIPSermon08     = 10,
	kCollectibleID_RIPSermon09     = 11,
	kCollectibleID_RIPSermon10     = 12,
	kCollectibleID_RIPSermon11     = 13,
	kCollectibleID_RIPSermon12     = 14,
	kCollectibleID_RadioFreeOregon = 15,
	kCollectibleID_RadioFreeOregon01 = 16,
	kCollectibleID_RadioFreeOregon02 = 17,
	kCollectibleID_RadioFreeOregon03 = 18,
	kCollectibleID_RadioFreeOregon04 = 19,
	kCollectibleID_RadioFreeOregon05 = 20,
	kCollectibleID_RadioFreeOregon06 = 21,
	kCollectibleID_RadioFreeOregon07 = 22,
	kCollectibleID_RadioFreeOregon08 = 23,
	kCollectibleID_RadioFreeOregon09 = 24,
	kCollectibleID_RadioFreeOregon10 = 25,
	kCollectibleID_RadioFreeOregon11 = 26,
	kCollectibleID_RadioFreeOregon12 = 27,
	kCollectibleID_RadioFreeOregon13 = 28,
	kCollectibleID_RadioFreeOregon14 = 29,
	kCollectibleID_RadioFreeOregon15 = 30,
	kCollectibleID_RadioFreeOregon16 = 31,
	kCollectibleID_RadioFreeOregon17 = 32,
	kCollectibleID_RadioFreeOregon18 = 33,
	kCollectibleID_RadioFreeOregon19 = 34,
	kCollectibleID_Characters_Copeland = 35,
	kCollectibleID_Characters_Copeland01 = 36,
	kCollectibleID_Characters_Manny = 37,
	kCollectibleID_Characters_Manny01 = 38,
	kCollectibleID_Characters_Tucker1 = 39,
	kCollectibleID_Characters_Tucker2 = 40,
	kCollectibleID_Characters_Alkai1 = 41,
	kCollectibleID_Characters_Lisa2 = 42,
	kCollectibleID_Characters_Lisa3 = 43,
	kCollectibleID_Characters_Boozer1 = 44,
	kCollectibleID_Characters_Boozer2 = 45,
	kCollectibleID_Characters_Rikki1 = 46,
	kCollectibleID_Characters_Rikki2 = 47,
	kCollectibleID_Characters_Skizzo1 = 48,
	kCollectibleID_Characters_Skizzo3 = 49,
	kCollectibleID_Characters_IronMike1 = 50,
	kCollectibleID_Characters_IronMike2 = 51,
	kCollectibleID_Characters_Addy1 = 52,
	kCollectibleID_Characters_Addy2 = 53,
	kCollectibleID_Characters_Colonel1 = 54,
	kCollectibleID_Characters_Colonel2 = 55,
	kCollectibleID_Characters_Kouri1 = 56,
	kCollectibleID_Characters_Kouri2 = 57,
	kCollectibleID_Characters_Doc1 = 58,
	kCollectibleID_Characters_Weaver1 = 59,
	kCollectibleID_Characters_Weaver2 = 60,
	kCollectibleID_Characters_Taylor1 = 61,
	kCollectibleID_Characters_Taylor2 = 62,
	kCollectibleID_Characters_Sarah1 = 63,
	kCollectibleID_Characters_Jessie1 = 64,
	kCollectibleID_Characters_Jessie2 = 65,
	kCollectibleID_Characters_Jim1 = 66,
	kCollectibleID_Tourism_Cascade1 = 67,
	kCollectibleID_Tourism_Belknap1 = 68,
	kCollectibleID_Tourism_Belknap2 = 69,
	kCollectibleID_Tourism_Belknap3 = 70,
	kCollectibleID_Tourism_Belknap4 = 71,
	kCollectibleID_Tourism_Belknap5 = 72,
	kCollectibleID_Tourism_Belknap6 = 73,
	kCollectibleID_Tourism_Belknap7 = 74,
	kCollectibleID_Tourism_Belknap8 = 75,
	kCollectibleID_Tourism_Belknap9 = 76,
	kCollectibleID_Tourism_LostLake1 = 77,
	kCollectibleID_Tourism_LostLake2 = 78,
	kCollectibleID_Tourism_LostLake3 = 79,
	kCollectibleID_Tourism_LostLake4 = 80,
	kCollectibleID_Tourism_CraterLake1 = 81,
	kCollectibleID_Tourism_CraterLake5 = 82,
	kCollectibleID_Tourism_CraterLake6 = 83,
	kCollectibleID_Tourism_Highway1 = 84,
	kCollectibleID_Tourism_Highway2 = 85,
	kCollectibleID_Tourism_Highway3 = 86,
	kCollectibleID_Tourism_Highway4 = 87,
	kCollectibleID_Tourism_Highway5 = 88,
	kCollectibleID_Tourism_Highway6 = 89,
	kCollectibleID_Tourism_Highway7 = 90,
	kCollectibleID_Tourism_IronButte1 = 91,
	kCollectibleID_Tourism_IronButte2 = 92,
	kCollectibleID_Tourism_IronButte3 = 93,
	kCollectibleID_Tourism_IronButte4 = 94,
	kCollectibleID_SpeechesOnTheMount1 = 95,
	kCollectibleID_SpeechesOnTheMount2 = 96,
	kCollectibleID_SpeechesOnTheMount3 = 97,
	kCollectibleID_SpeechesOnTheMount4 = 98,
	kCollectibleID_SpeechesOnTheMount5 = 99,
	kCollectibleID_SpeechesOnTheMount6 = 100,
	kCollectibleID_Sarah_Radio     = 101,
	kCollectibleID_Sarah_Radio01   = 102,
	kCollectibleID_Sarah_Radio02   = 103,
	kCollectibleID_Sarah_Radio03   = 104,
	kCollectibleID_Sarah_Radio04   = 105,
	kCollectibleID_Sarah_Radio05   = 106,
	kCollectibleID_SHS             = 107,
	kCollectibleID_SHS01           = 108,
	kCollectibleID_SHS02           = 109,
	kCollectibleID_SHS03           = 110,
	kCollectibleID_SHS04           = 111,
	kCollectibleID_Guitar          = 112,
	kCollectibleID_Guitar01        = 113,
	kCollectibleID_Guitar02        = 114,
	kCollectibleID_Guitar03        = 115,
	kCollectibleID_Guitar04        = 116,
	kCollectibleID_Guitar05        = 117,
	kCollectibleID_Peter_Ogden     = 118,
	kCollectibleID_Grotto_Caves    = 119,
	kCollectibleID_Caldera_Reservoir = 120,
	kCollectibleID_Rainbow_Falls   = 121,
	kCollectibleID_Peaceful_Lake   = 122,
	kCollectibleID_Teller_Cabin    = 123,
	kCollectibleID_Belknap_Crater  = 124,
	kCollectibleID_Salome_Hot_Springs = 125,
	kCollectibleID_Belknap_Caves   = 126,
	kCollectibleID_McKenzie_Pass   = 127,
	kCollectibleID_Wasco_Petroglyphs = 128,
	kCollectibleID_Pioneer_Mailman = 129,
	kCollectibleID_Three_Fingered_Jack = 130,
	kCollectibleID_Lava_River_Cave = 131,
	kCollectibleID_Devils_Lake     = 132,
	kCollectibleID_Moon_Trees      = 133,
	kCollectibleID_Metolius_Lava_Cave = 134,
	kCollectibleID_Luther_Metke_Memorial = 135,
	kCollectibleID_Booker_Hicks_Logging_Camp = 136,
	kCollectibleID_Camp_Pioneer    = 137,
	kCollectibleID_Lost_Cabin_Mine = 138,
	kCollectibleID_Crater_Lake     = 139,
	kCollectibleID_Crater_Lake_Legend = 140,
	kCollectibleID_Hank_Vaughn_Memorial = 141,
	kCollectibleID_Captain_Jack    = 142,
	kCollectibleID_45th_Parallel   = 143,
	kCollectibleID_Old_Man         = 144,
	kCollectibleID_Mazama_Village  = 145,
	kCollectibleID_Oregon_Vortex   = 146,
	kCollectibleID_Phantom_Ship    = 147,
	kCollectibleID_Camp_Adair      = 148,
	kCollectibleID_Black_Bart_Memorial = 149,
	kCollectibleID_The_Grey_Fox    = 150,
	kCollectibleID_One_Eyed_Charley = 151,
	kCollectibleID_Balloon_Bomb    = 152,
	kCollectibleID_Weeping_Angel   = 153,
	kCollectibleID_Cone_Peak       = 154,
	kCollectibleID_Waldo_Lake      = 155,
	kCollectibleID_Riverwood_Ranch = 156,
	kCollectibleID_Iron_Butte_Ranch = 157,
	kCollectibleID_Iron_Butte      = 158,
	kCollectibleID_Rabbit_Mines    = 159,
	kCollectibleID_Iron_Butte_Meteorite = 160,
	kCollectibleID_Intel_cave      = 161,
	kCollectibleID_Intel_deliberate = 162,
	kCollectibleID_Intel_memory    = 163,
	kCollectibleID_Intel_nest      = 164,
	kCollectibleID_Intel_decon     = 165,
	kCollectibleID_Intel_duty      = 166,
	kCollectibleID_Intel_fuel      = 167,
	kCollectibleID_Intel_horde     = 168,
	kCollectibleID_Intel_rebel_rock = 169,
	kCollectibleID_Intel_roster    = 170,
	kCollectibleID_Intel_scat      = 171,
	kCollectibleID_NERO_evacuation_notice = 172,
	kCollectibleID_NERO_ironbutte_crash = 173,
	kCollectibleID_NERO_ironbutte_mmu = 174,
	kCollectibleID_intel_turn_away = 175,
	kCollectibleID_intel_all_full  = 176,
	kCollectibleID_intel_santiam_closed = 177,
	kCollectibleID_intel_bridges   = 178,
	kCollectibleID_intel_wigwam_burner = 179,
	kCollectibleID_intel_horde_highway = 180,
	kCollectibleID_intel_rebel_rock_cave = 181,
	kCollectibleID_intel_rip       = 182,
	kCollectibleID_intel_camp_overrun = 183,
	kCollectibleID_intel_missing_patients = 184,
	kCollectibleID_intel_bats      = 185,
	kCollectibleID_intel_white_king_mine = 186,
	kCollectibleID_intel_join_miltia = 187,
	kCollectibleID_intel_train_load = 188,
	kCollectibleID_intel_mmu_overrun = 189,
	kCollectibleID_intel_newt_house = 190,
	kCollectibleID_intel_newts     = 191,
	kCollectibleID_intel_loot_newt = 192,
	kCollectibleID_intel_screamer  = 193,
	kCollectibleID_intel_runners   = 194,
	kCollectibleID_intel_horde_pheromone = 195,
	kCollectibleID_intel_breaker   = 196,
	kCollectibleID_intel_crier     = 197,
	kCollectibleID_intel_non_suicide = 198,
	kCollectibleID_intel_rager     = 199,
	kCollectibleID_intel_horde_california = 200,
	kCollectibleID_intel_hooligan  = 201,
	kCollectibleID_intel_bleacher  = 202,
	kCollectibleID_intel_hive_mind = 203,
	kCollectibleID_intel_start_mutate = 204,
	kCollectibleID_intel_cooper    = 205,
	kCollectibleID_intel_be_n_mass_grave = 206,
	kCollectibleID_intel_ca_mass_grave_a = 207,
	kCollectibleID_intel_ca_mass_grave_b = 208,
	kCollectibleID_intel_rail_tunnel = 209,
	kCollectibleID_intel_cl_mass_grave_a = 210,
	kCollectibleID_intel_intel_coast = 211,
	kCollectibleID_intel_nest_residue = 212,
	kCollectibleID_Event           = 213,
	kCollectibleID_Leons_Letter    = 214,
	kCollectibleID_Herbology_Bearberry = 215,
	kCollectibleID_Herbology_BlackCurrant = 216,
	kCollectibleID_Herbology_BristlyManzanita = 217,
	kCollectibleID_Herbology_BunchBerry = 218,
	kCollectibleID_Herbology_Cloudberry = 219,
	kCollectibleID_Herbology_Crowberry = 220,
	kCollectibleID_Herbology_DesertHackberry = 221,
	kCollectibleID_Herbology_GoldenCurrant = 222,
	kCollectibleID_Herbology_SalmonBerry = 223,
	kCollectibleID_Herbology_Agoseris = 224,
	kCollectibleID_Herbology_Arrowhead = 225,
	kCollectibleID_Herbology_Beargrass = 226,
	kCollectibleID_Herbology_Bistort = 227,
	kCollectibleID_Herbology_Bitterroot = 228,
	kCollectibleID_Herbology_BlueCamas = 229,
	kCollectibleID_Herbology_Bulrush = 230,
	kCollectibleID_Herbology_Coltsfoot = 231,
	kCollectibleID_Herbology_IndianPipe = 232,
	kCollectibleID_Herbology_Mayweed = 233,
	kCollectibleID_Herbology_MountainSorrel = 234,
	kCollectibleID_Herbology_Silverweed = 235,
	kCollectibleID_Herbology_Stonecrop = 236,
	kCollectibleID_Herbology_WildBergamot = 237,
	kCollectibleID_Herbology_WoodLily = 238,
	kCollectibleID_Herbology_Lavender = 239,
	kCollectibleID_Herbology_GoldenChanterelle = 240,
	kCollectibleID_Herbology_HornOfPlenty = 241,
	kCollectibleID_Herbology_InkCap = 242,
	kCollectibleID_Herbology_KingBolete = 243,
	kCollectibleID_Herbology_LarchBolete = 244,
	kCollectibleID_Herbology_MicaCap = 245,
	kCollectibleID_Herbology_ScalyHedgehog = 246,
	kCollectibleID_Herbology_WaterHemlock = 247,
	kCollectibleID_MAX             = 248
};


// Enum BendGame.EMotorcyclePartID
enum class EMotorcyclePartID : uint8_t
{
	kMotorcyclePartID_None         = 0,
	kMotorcyclePartID_Engine1      = 1,
	kMotorcyclePartID_Engine2      = 2,
	kMotorcyclePartID_Engine3      = 3,
	kMotorcyclePartID_Engine4      = 4,
	kMotorcyclePartID_Engine5      = 5,
	kMotorcyclePartID_Exhaust1     = 6,
	kMotorcyclePartID_Exhaust2     = 7,
	kMotorcyclePartID_Exhaust3     = 8,
	kMotorcyclePartID_Exhaust4     = 9,
	kMotorcyclePartID_Exhaust5     = 10,
	kMotorcyclePartID_Headlight1   = 11,
	kMotorcyclePartID_Headlight2   = 12,
	kMotorcyclePartID_Headlight3   = 13,
	kMotorcyclePartID_Headlight4   = 14,
	kMotorcyclePartID_Headlight5   = 15,
	kMotorcyclePartID_Headlight6   = 16,
	kMotorcyclePartID_Headlight7   = 17,
	kMotorcyclePartID_Storage1     = 18,
	kMotorcyclePartID_Storage2     = 19,
	kMotorcyclePartID_Storage3     = 20,
	kMotorcyclePartID_Storage4     = 21,
	kMotorcyclePartID_Storage5     = 22,
	kMotorcyclePartID_Storage6     = 23,
	kMotorcyclePartID_Storage7     = 24,
	kMotorcyclePartID_Storage8     = 25,
	kMotorcyclePartID_Storage9     = 26,
	kMotorcyclePartID_Storage10    = 27,
	kMotorcyclePartID_Tank1        = 28,
	kMotorcyclePartID_Tank2        = 29,
	kMotorcyclePartID_Tank3        = 30,
	kMotorcyclePartID_Tank4        = 31,
	kMotorcyclePartID_Tank5        = 32,
	kMotorcyclePartID_Tank6        = 33,
	kMotorcyclePartID_Tank7        = 34,
	kMotorcyclePartID_Tank8        = 35,
	kMotorcyclePartID_Tank9        = 36,
	kMotorcyclePartID_Tank10       = 37,
	kMotorcyclePartID_Frame1       = 38,
	kMotorcyclePartID_Frame2       = 39,
	kMotorcyclePartID_Frame3       = 40,
	kMotorcyclePartID_Frame4       = 41,
	kMotorcyclePartID_Frame5       = 42,
	kMotorcyclePartID_Frame6       = 43,
	kMotorcyclePartID_Frame7       = 44,
	kMotorcyclePartID_Suspension1  = 45,
	kMotorcyclePartID_Suspension2  = 46,
	kMotorcyclePartID_Suspension3  = 47,
	kMotorcyclePartID_Nitrous1     = 48,
	kMotorcyclePartID_Nitrous2     = 49,
	kMotorcyclePartID_Nitrous3     = 50,
	kMotorcyclePartID_Nitrous4     = 51,
	kMotorcyclePartID_Nitrous5     = 52,
	kMotorcyclePartID_Nitrous6     = 53,
	kMotorcyclePartID_Windscreen1  = 54,
	kMotorcyclePartID_Windscreen2  = 55,
	kMotorcyclePartID_Windscreen3  = 56,
	kMotorcyclePartID_Windscreen4  = 57,
	kMotorcyclePartID_RearWheel1   = 58,
	kMotorcyclePartID_RearWheel2   = 59,
	kMotorcyclePartID_RearWheel3   = 60,
	kMotorcyclePartID_RearWheel4   = 61,
	kMotorcyclePartID_RearWheel5   = 62,
	kMotorcyclePartID_RearWheel6   = 63,
	kMotorcyclePartID_FrontWheel1  = 64,
	kMotorcyclePartID_FrontWheel2  = 65,
	kMotorcyclePartID_FrontWheel3  = 66,
	kMotorcyclePartID_FrontWheel4  = 67,
	kMotorcyclePartID_FrontWheel5  = 68,
	kMotorcyclePartID_FrontWheel6  = 69,
	kMotorcyclePartID_FrontTire1   = 70,
	kMotorcyclePartID_FrontTire2   = 71,
	kMotorcyclePartID_FrontTire3   = 72,
	kMotorcyclePartID_FrontTire4   = 73,
	kMotorcyclePartID_FrontTire5   = 74,
	kMotorcyclePartID_FrontTire6   = 75,
	kMotorcyclePartID_FrontTire7   = 76,
	kMotorcyclePartID_FrontTire8   = 77,
	kMotorcyclePartID_RearTire1    = 78,
	kMotorcyclePartID_RearTire2    = 79,
	kMotorcyclePartID_RearTire3    = 80,
	kMotorcyclePartID_RearTire4    = 81,
	kMotorcyclePartID_RearTire5    = 82,
	kMotorcyclePartID_RearTire6    = 83,
	kMotorcyclePartID_RearTire7    = 84,
	kMotorcyclePartID_RearTire8    = 85,
	kMotorcyclePartID_ExhaustBaffle1 = 86,
	kMotorcyclePartID_ExhaustBaffle2 = 87,
	kMotorcyclePartID_FrontSeat1   = 88,
	kMotorcyclePartID_FrontSeat2   = 89,
	kMotorcyclePartID_FrontSeat3   = 90,
	kMotorcyclePartID_FrontSeat4   = 91,
	kMotorcyclePartID_FrontSeat5   = 92,
	kMotorcyclePartID_FrontSeat6   = 93,
	kMotorcyclePartID_FrontSeat7   = 94,
	kMotorcyclePartID_FrontSeat8   = 95,
	kMotorcyclePartID_FrontSeat9   = 96,
	kMotorcyclePartID_TailLights1  = 97,
	kMotorcyclePartID_TailLights2  = 98,
	kMotorcyclePartID_Handlebars1  = 99,
	kMotorcyclePartID_Handlebars2  = 100,
	kMotorcyclePartID_Handlebars3  = 101,
	kMotorcyclePartID_FrontForks1  = 102,
	kMotorcyclePartID_FrontForks2  = 103,
	kMotorcyclePartID_FrontForks3  = 104,
	kMotorcyclePartID_FrontBrake1  = 105,
	kMotorcyclePartID_FrontBrake2  = 106,
	kMotorcyclePartID_FrontBrake3  = 107,
	kMotorcyclePartID_FrontBrake4  = 108,
	kMotorcyclePartID_FrontBrake5  = 109,
	kMotorcyclePartID_FrontBrakeCaliper1 = 110,
	kMotorcyclePartID_FrontBrakeCaliper2 = 111,
	kMotorcyclePartID_FrontBrakeCaliper3 = 112,
	kMotorcyclePartID_FrontBrakeCaliper4 = 113,
	kMotorcyclePartID_FrontBrakeCaliper5 = 114,
	kMotorcyclePartID_RearBrake1   = 115,
	kMotorcyclePartID_RearBrake2   = 116,
	kMotorcyclePartID_RearBrake3   = 117,
	kMotorcyclePartID_RearBrakeCaliper1 = 118,
	kMotorcyclePartID_RearBrakeCaliper2 = 119,
	kMotorcyclePartID_RearBrakeCaliper3 = 120,
	kMotorcyclePartID_FrontFender1 = 121,
	kMotorcyclePartID_FrontFender2 = 122,
	kMotorcyclePartID_FrontFender3 = 123,
	kMotorcyclePartID_FrontFender4 = 124,
	kMotorcyclePartID_FrontFender5 = 125,
	kMotorcyclePartID_AirIntake1   = 126,
	kMotorcyclePartID_AirIntake2   = 127,
	kMotorcyclePartID_AirIntake3   = 128,
	kMotorcyclePartID_AirIntake4   = 129,
	kMotorcyclePartID_AirIntake5   = 130,
	kMotorcyclePartID_AirIntake6   = 131,
	kMotorcyclePartID_AirIntake7   = 132,
	kMotorcyclePartID_Shroud1      = 133,
	kMotorcyclePartID_Shroud2      = 134,
	kMotorcyclePartID_Shroud3      = 135,
	kMotorcyclePartID_Faceguard1   = 136,
	kMotorcyclePartID_Faceguard2   = 137,
	kMotorcyclePartID_HandlebarMirror1 = 138,
	kMotorcyclePartID_HandlebarMirror2 = 139,
	kMotorcyclePartID_Handguard1   = 140,
	kMotorcyclePartID_Handguard2   = 141,
	kMotorcyclePartID_Tailbag1     = 142,
	kMotorcyclePartID_Tailbag2     = 143,
	kMotorcyclePartID_Tailbag3     = 144,
	kMotorcyclePartID_Tailbag4     = 145,
	kMotorcyclePartID_Tailbag5     = 146,
	kMotorcyclePartID_Radiator1    = 147,
	kMotorcyclePartID_Radiator2    = 148,
	kMotorcyclePartID_Sidelight1   = 149,
	kMotorcyclePartID_Sidelight2   = 150,
	kMotorcyclePartID_Sidelight3   = 151,
	kMotorcyclePartID_Sidelight4   = 152,
	kMotorcyclePartID_RearSeat1    = 153,
	kMotorcyclePartID_RearSeat2    = 154,
	kMotorcyclePartID_RearSeat3    = 155,
	kMotorcyclePartID_ExhaustTip1  = 156,
	kMotorcyclePartID_ExhaustTip2  = 157,
	kMotorcyclePartID_ExhaustTip3  = 158,
	kMotorcyclePartID_ExhaustTip4  = 159,
	kMotorcyclePartID_ExhaustTip5  = 160,
	kMotorcyclePartID_ExhaustTip6  = 161,
	kMotorcyclePartID_WheelFront1  = 162,
	kMotorcyclePartID_WheelFront2  = 163,
	kMotorcyclePartID_WheelFront3  = 164,
	kMotorcyclePartID_WheelFront4  = 165,
	kMotorcyclePartID_WheelFront5  = 166,
	kMotorcyclePartID_WheelFront6  = 167,
	kMotorcyclePartID_WheelRear1   = 168,
	kMotorcyclePartID_WheelRear2   = 169,
	kMotorcyclePartID_WheelRear3   = 170,
	kMotorcyclePartID_WheelRear4   = 171,
	kMotorcyclePartID_WheelRear5   = 172,
	kMotorcyclePartID_Refuel       = 173,
	kMotorcyclePartID_Repair       = 174,
	kMotorcyclePartID_DefaultTheme = 175,
	kMotorcyclePartID_Theme_Base_Standard = 176,
	kMotorcyclePartID_Theme_Paint_Standard = 177,
	kMotorcyclePartID_Theme_Paint_Gloss_Standard = 178,
	kMotorcyclePartID_Theme_Paint_Matte_Standard = 179,
	kMotorcyclePartID_Theme_Paint_Metallic_Standard = 180,
	kMotorcyclePartID_Theme_Base_Black = 181,
	kMotorcyclePartID_Theme_Base_Chrome = 182,
	kMotorcyclePartID_Theme_Base_Copper = 183,
	kMotorcyclePartID_Theme_Base_White = 184,
	kMotorcyclePartID_Theme_Base_Rusted = 185,
	kMotorcyclePartID_Theme_Base_DeathStranding = 186,
	kMotorcyclePartID_Theme_Base_BridgeBaby = 187,
	kMotorcyclePartID_Theme_Paint_Gloss_Ocean = 188,
	kMotorcyclePartID_Theme_Paint_Matte_Ocean = 189,
	kMotorcyclePartID_Theme_Paint_Metallic_Ocean = 190,
	kMotorcyclePartID_Theme_Paint_Gloss_Red = 191,
	kMotorcyclePartID_Theme_Paint_Matte_Red = 192,
	kMotorcyclePartID_Theme_Paint_Metallic_Red = 193,
	kMotorcyclePartID_Theme_Paint_Gloss_Green = 194,
	kMotorcyclePartID_Theme_Paint_Matte_Green = 195,
	kMotorcyclePartID_Theme_Paint_Metallic_Green = 196,
	kMotorcyclePartID_Theme_Paint_Gloss_Charcoal = 197,
	kMotorcyclePartID_Theme_Paint_Matte_Charcoal = 198,
	kMotorcyclePartID_Theme_Paint_Metallic_Charcoal = 199,
	kMotorcyclePartID_Theme_Paint_Gloss_DesertBrown = 200,
	kMotorcyclePartID_Theme_Paint_Matte_DesertBrown = 201,
	kMotorcyclePartID_Theme_Paint_Metallic_DesertBrown = 202,
	kMotorcyclePartID_Theme_Paint_Gloss_DarkBlue = 203,
	kMotorcyclePartID_Theme_Paint_Matte_DarkBlue = 204,
	kMotorcyclePartID_Theme_Paint_Metallic_DarkBlue = 205,
	kMotorcyclePartID_Theme_Paint_Gloss_OpulentSilver = 206,
	kMotorcyclePartID_Theme_Paint_Matte_OpulentSilver = 207,
	kMotorcyclePartID_Theme_Paint_Metallic_OpulentSilver = 208,
	kMotorcyclePartID_Theme_Paint_Gloss_Yellow = 209,
	kMotorcyclePartID_Theme_Paint_Matte_Yellow = 210,
	kMotorcyclePartID_Theme_Paint_Metallic_Yellow = 211,
	kMotorcyclePartID_Theme_Paint_Gloss_Honey = 212,
	kMotorcyclePartID_Theme_Paint_Matte_Honey = 213,
	kMotorcyclePartID_Theme_Paint_Metallic_Honey = 214,
	kMotorcyclePartID_Theme_Paint_Gloss_ArmyGreen = 215,
	kMotorcyclePartID_Theme_Paint_Matte_ArmyGreen = 216,
	kMotorcyclePartID_Theme_Paint_Metallic_ArmyGreen = 217,
	kMotorcyclePartID_Theme_Paint_Gloss_White = 218,
	kMotorcyclePartID_Theme_Paint_Matte_White = 219,
	kMotorcyclePartID_Theme_Paint_Metallic_White = 220,
	kMotorcyclePartID_Theme_Paint_Gloss_Oxblood = 221,
	kMotorcyclePartID_Theme_Paint_Matte_Oxblood = 222,
	kMotorcyclePartID_Theme_Paint_Metallic_Oxblood = 223,
	kMotorcyclePartID_Theme_Paint_Gloss_Cobalt = 224,
	kMotorcyclePartID_Theme_Paint_Matte_Cobalt = 225,
	kMotorcyclePartID_Theme_Paint_Metallic_Cobalt = 226,
	kMotorcyclePartID_Theme_Paint_Gloss_DarkCherry = 227,
	kMotorcyclePartID_Theme_Paint_Matte_DarkCherry = 228,
	kMotorcyclePartID_Theme_Paint_Metallic_DarkCherry = 229,
	kMotorcyclePartID_Theme_Paint_Gloss_FathomGreen = 230,
	kMotorcyclePartID_Theme_Paint_Matte_FathomGreen = 231,
	kMotorcyclePartID_Theme_Paint_Metallic_FathomGreen = 232,
	kMotorcyclePartID_Theme_Paint_Gloss_GunmetalGrey = 233,
	kMotorcyclePartID_Theme_Paint_Matte_GunmetalGrey = 234,
	kMotorcyclePartID_Theme_Paint_Metallic_GunmetalGrey = 235,
	kMotorcyclePartID_Theme_Paint_Gloss_Silver = 236,
	kMotorcyclePartID_Theme_Paint_Matte_Silver = 237,
	kMotorcyclePartID_Theme_Paint_Metallic_Silver = 238,
	kMotorcyclePartID_Theme_Paint_Gloss_Celery = 239,
	kMotorcyclePartID_Theme_Paint_Matte_Celery = 240,
	kMotorcyclePartID_Theme_Paint_Metallic_Celery = 241,
	kMotorcyclePartID_Theme_Paint_Gloss_Blue = 242,
	kMotorcyclePartID_Theme_Paint_Matte_Blue = 243,
	kMotorcyclePartID_Theme_Paint_Metallic_Blue = 244,
	kMotorcyclePartID_Theme_Paint_Gloss_Burgundy = 245,
	kMotorcyclePartID_Theme_Paint_Matte_Burgundy = 246,
	kMotorcyclePartID_Theme_Paint_Metallic_Burgundy = 247,
	kMotorcyclePartID_Theme_Paint_Gloss_JetBlack = 248,
	kMotorcyclePartID_Theme_Paint_Matte_JetBlack = 249,
	kMotorcyclePartID_Theme_Paint_Metallic_JetBlack = 250,
	kMotorcyclePartID_Theme_Paint_Gloss_Cerulean = 251,
	kMotorcyclePartID_Theme_Paint_Matte_Cerulean = 252,
	kMotorcyclePartID_Theme_Paint_Metallic_Cerulean = 253,
	kMotorcyclePartID_Theme_Paint_Gloss_Beige = 254,
	kMotorcyclePartID_MAX          = 255
};


// Enum BendGame.EInventoryUtilityID
enum class EInventoryUtilityID : uint8_t
{
	kUtilityID_None                = 0,
	kUtilityID_Pistol_Silencer     = 1,
	kUtilityID_Lavender_Oil_Poultice = 2,
	kUtilityID_Burn_Salve_Lavender = 3,
	kUtilityID_Burn_Salve          = 4,
	kUtilityID_Bayonet             = 5,
	kUtilityID_BayonetBlade        = 6,
	kUtilityID_BayonetTube         = 7,
	kUtilityID_Freaker_Ear         = 8,
	kUtilityID_Polystyrene         = 9,
	kUtilityID_Scrap               = 10,
	kUtilityID_NeroTestKit         = 11,
	kUtilityID_NeroFuse            = 12,
	kUtilityID_Bag_Yeast           = 13,
	kUtilityID_Bag_Silicate        = 14,
	kUtilityID_Egg_Incubator       = 15,
	kUtilityID_RecipeBook          = 16,
	kUtilityID_WigWamMotelSafeCombination = 17,
	kUtilityID_Fuel_Pump           = 18,
	kUtilityID_UniversalAmmoPickUp = 19,
	kUtilityID_DetonationCords     = 20,
	kUtilityID_Radio               = 21,
	kUtilityID_Large_Bunch_of_Stonecrop = 22,
	kUtilityID_Small_Bunch_of_Stonecrop = 23,
	kUtilityID_Antibiotics         = 24,
	kUtilityID_Sterile_Bandages    = 25,
	kUtilityID_Liston_Knife        = 26,
	kUtilityID_Thunderegg          = 27,
	kUtilityID_SafeCombination     = 28,
	kUtilityID_Camp_Pioneer_Keys   = 29,
	kUtilityID_Grave_Digger_Key    = 30,
	kUtilityID_CommissionerKey     = 31,
	kUtilityID_NERO_Radio          = 32,
	kUtilityID_Lucky_Lad_Keys      = 33,
	kUtilityID_TestKit             = 34,
	kUtilityID_PolystyreneCups     = 35,
	kUtilityID_Cinnabar            = 36,
	kUtilityID_PackingMaterial     = 37,
	kUtilityID_Agar                = 38,
	kUtilityID_Water_Hemlock_Bag   = 39,
	kUtilityID_NERO_Recording      = 40,
	kUtilityID_NERO_Flyer          = 41,
	kUtilityID_NERO_MotionTracker  = 42,
	kUtilityID_NERO_MedicalTreatment = 43,
	kUtilityID_NERO_Tech           = 44,
	kUtilityID_Box_Dog_Treats      = 45,
	kUtilityID_Bible               = 46,
	kUtilityID_Wedding_Ring_Pair   = 47,
	kUtilityID_Locket              = 48,
	kUtilityID_Buck_Knife          = 49,
	kUtilityID_Wristwatch          = 50,
	kUtilityID_Photo_Album         = 51,
	kUtilityID_Tackle_Box_Engraved = 52,
	kUtilityID_Photo_Mom           = 53,
	kUtilityID_Hatchet_Antique     = 54,
	kUtilityID_Crucifix_Gold       = 55,
	kUtilityID_Bracelet_Friendship = 56,
	kUtilityID_Scope_Rifle         = 57,
	kUtilityID_Earring_Hand_Made   = 58,
	kUtilityID_Photo_Kid           = 59,
	kUtilityID_Tennis_Shoes_Baby_Sized = 60,
	kUtilityID_Hairpin_Antique     = 61,
	kUtilityID_Native_American_Artifact_Carved_Turquoise = 62,
	kUtilityID_Antique_Spoon_Silver = 63,
	kUtilityID_Quilt               = 64,
	kUtilityID_Baseball_Signed     = 65,
	kUtilityID_Book_Journal        = 66,
	kUtilityID_Bracelet_Lucky_Charm = 67,
	kUtilityID_Antique_Pole_Fishing = 68,
	kUtilityID_Lure_Fishing_Silver = 69,
	kUtilityID_Flashlight          = 70,
	kUtilityID_Binocular           = 71,
	kUtilityID_Squeaky_Dog_Toy_Green = 72,
	kUtilityID_Squeaky_Dog_Toy     = 73,
	kUtilityID_Venison             = 74,
	kUtilityID_NedWalker_Bandana   = 75,
	kUtilityID_Wheeler_PocketWatch = 76,
	kUtilityID_Marsdon_CowboyHat   = 77,
	kUtilityID_Limbo_TireIron      = 78,
	kUtilityID_Harp_Scarf          = 79,
	kUtilityID_Riley_Boots         = 80,
	kUtilityID_Colonel_Bible       = 81,
	kUtilityID_Meyer_Seeds         = 82,
	kUtilityID_Adkin_Rings         = 83,
	kUtilityID_Anderson_ArmBand    = 84,
	kUtilityID_Anderson_SkiMask    = 85,
	kUtilityID_TwoDog_Knife        = 86,
	kUtilityID_MP3_Weaver          = 87,
	kUtilityID_WaterHemlock        = 88,
	kUtilityID_Freaker_Ear_Swarmer = 89,
	kUtilityID_Freaker_Ear_Newt    = 90,
	kUtilityID_Freaker_Ear_Screamer = 91,
	kUtilityID_Freaker_Ear_Breaker = 92,
	kUtilityID_Freaker_Ear_Bleacher = 93,
	kUtilityID_Freaker_Ear_Reacher = 94,
	kUtilityID_Freaker_Ear_Rager   = 95,
	kUtilityID_Freaker_Ear_Runner  = 96,
	kUtilityID_Freaker_Ear_Crier   = 97,
	kUtilityID_Animal_Meat_Bear    = 98,
	kUtilityID_Animal_Meat_Cougar  = 99,
	kUtilityID_Animal_Meat_Crow    = 100,
	kUtilityID_Animal_Meat_Deer    = 101,
	kUtilityID_Animal_Meat_Wolf    = 102,
	kUtilityID_MAX                 = 103
};


// Enum BendGame.EInventoryConsumableID
enum class EInventoryConsumableID : uint8_t
{
	kConsumableID_None             = 0,
	kConsumableID_TestConsumable   = 1,
	kConsumableID_Herb_Cocktail_Light = 2,
	kConsumableID_Berry_Cocktail_Light = 3,
	kConsumableID_Mushroom_Cocktail_Light = 4,
	kConsumableID_Bandage_Small    = 5,
	kConsumableID_Bandage_Large    = 6,
	kConsumableID_Medkit_Small     = 7,
	kConsumableID_Medkit_Large     = 8,
	kConsumableID_Berry            = 9,
	kConsumableID_Berry_Bearberry  = 10,
	kConsumableID_Berry_Black_Currant = 11,
	kConsumableID_Berry_Bristly_Manzanita = 12,
	kConsumableID_Berry_BunchBerry = 13,
	kConsumableID_Berry_Cloudberry = 14,
	kConsumableID_Berry_Crowberry  = 15,
	kConsumableID_Berry_Desert_Hackberry = 16,
	kConsumableID_Berry_Golden_Currant = 17,
	kConsumableID_Berry_Salmon_Berry = 18,
	kConsumableID_Herb             = 19,
	kConsumableID_Herb_Agoseris    = 20,
	kConsumableID_Herb_Arrowhead   = 21,
	kConsumableID_Herb_Beargrass   = 22,
	kConsumableID_Herb_Bistort     = 23,
	kConsumableID_Herb_Bitterroot  = 24,
	kConsumableID_Herb_Blue_Camas  = 25,
	kConsumableID_Herb_Bulrush     = 26,
	kConsumableID_Herb_Coltsfoot   = 27,
	kConsumableID_Herb_IndianPipe  = 28,
	kConsumableID_Herb_Mayweed     = 29,
	kConsumableID_Herb_Mountain_Sorrel = 30,
	kConsumableID_Herb_Silverweed  = 31,
	kConsumableID_Herb_Stonecrop   = 32,
	kConsumableID_Herb_Wild_Bergamot = 33,
	kConsumableID_Herb_Wood_Lily   = 34,
	kConsumableID_Herb_Lavender    = 35,
	kConsumableID_Herb_WaterHemlock = 36,
	kConsumableID_Herb_Nightshade  = 37,
	kConsumableID_Mushroom         = 38,
	kConsumableID_Mushroom_Golden_Chanterelle = 39,
	kConsumableID_Mushroom_Horn_Of_Plenty = 40,
	kConsumableID_Mushroom_Ink_Cap = 41,
	kConsumableID_Mushroom_King_Bolete = 42,
	kConsumableID_Mushroom_Larch_Bolete = 43,
	kConsumableID_Mushroom_Mica_Cap = 44,
	kConsumableID_Mushroom_Scaly_Hedgehog = 45,
	kConsumableID_Cedar_Sapling    = 46,
	kConsumableID_Heal             = 47,
	kConsumableID_MAX              = 48
};


// Enum BendGame.EInventoryAmmoID
enum class EInventoryAmmoID : uint8_t
{
	kAmmoID_None                   = 0,
	kAmmoID_Pistol                 = 1,
	kAmmoID_M9                     = 2,
	kAmmoID_P226                   = 3,
	kAmmoID_Glock                  = 4,
	kAmmoID_DesertEagle            = 5,
	kAmmoID_FN57                   = 6,
	kAmmoID_DanWesson              = 7,
	kAmmoID_TheMayor               = 8,
	kAmmoID_Rifle                  = 9,
	kAmmoID_Ruger22                = 10,
	kAmmoID_BadlandBigGame         = 11,
	kAmmoID_M14                    = 12,
	kAmmoID_OutbackViper           = 13,
	kAmmoID_M40                    = 14,
	kAmmoID_MSG90                  = 15,
	kAmmoID_SVD                    = 16,
	kAmmoID_SAKO_TRG               = 17,
	kAmmoID_AS50                   = 18,
	kAmmoID_ColtRevolvingRifle     = 19,
	kAmmoID_NockVolley             = 20,
	kAmmoID_SniperRifle            = 21,
	kAmmoID_Shotgun                = 22,
	kAmmoID_LilStubby              = 23,
	kAmmoID                        = 24,
	kAmmoID_BoozersShotgun         = 25,
	kAmmoID_TOZ194                 = 26,
	kAmmoID_Mossberg590            = 27,
	kAmmoID_DP12                   = 28,
	kAmmoID_M4Super90              = 29,
	kAmmoID_FullAuto               = 30,
	kAmmoID_AssaultRifle           = 31,
	kAmmoID_AK47                   = 32,
	kAmmoID_M4A1                   = 33,
	kAmmoID_SteyrAug               = 34,
	kAmmoID_Tavor                  = 35,
	kAmmoID_HoneyBadger            = 36,
	kAmmoID_SubMachineGun          = 37,
	kAmmoID_SMP9                   = 38,
	kAmmoID_M50                    = 39,
	kAmmoID_PPSh                   = 40,
	kAmmoID_Thompson               = 41,
	kAmmoID_ScorpionEvo            = 42,
	kAmmoID_MP5                    = 43,
	kAmmoID_P90                    = 44,
	kAmmoID_LightMachineGun        = 45,
	kAmmoID_MG45                   = 46,
	kAmmoID_MK43                   = 47,
	kAmmoID_RPD                    = 48,
	kAmmoID_Molotov                = 49,
	kAmmoID_Grenade                = 50,
	kAmmoID_Rocket                 = 51,
	kAmmoID_LaunchedGrenade        = 52,
	kAmmoID_AirTaser               = 53,
	kAmmoID_Tranquilizer           = 54,
	kAmmoID_Bolt                   = 55,
	kAmmoID_PoisonBolt             = 56,
	kAmmoID_IncendiaryBolt         = 57,
	kAmmoID_PCPBolt                = 58,
	kAmmoID_ProximityBombArrow     = 59,
	kAmmoID_MB150_6mm              = 60,
	kAmmoID_MB150_Explosive        = 61,
	kAmmoID_MB150_X34Gas           = 62,
	kAmmoID_MB150_EDT              = 63,
	kAmmoID_Pipebomb               = 64,
	kAmmoID_SmokeBomb              = 65,
	kAmmoID_Flashbang              = 66,
	kAmmoID_Attractor              = 67,
	kAmmoID_AttractorGrenade       = 68,
	kAmmoID_ScreamerScreamGrenade  = 69,
	kAmmoID_BursterBurstGrenade    = 70,
	kAmmoID_MolotovNapalm          = 71,
	kAmmoID_Flare                  = 72,
	kAmmoID_NPCFlare               = 73,
	kAmmoID_DroppableFlare         = 74,
	kAmmoID_FlareWithMap           = 75,
	kAmmoID_GasCan                 = 76,
	kAmmoID_AirbagBombTrap_Conc    = 77,
	kAmmoID_IED                    = 78,
	kAmmoID_ProximityMine          = 79,
	kAmmoID_BearTrap               = 80,
	kAmmoID_Flamethrower           = 81,
	kAmmoID_Flamethrower_Heavy     = 82,
	kAmmoID_HiCap                  = 83,
	kAmmoID_OxygenTank             = 84,
	kAmmoID_Rock                   = 85,
	kAmmoID_Bait                   = 86,
	kAmmoID_BikeAmmo               = 87,
	kAmmoID_MenuReloadAllWpns      = 88,
	kAmmoID_MenuReloadWpn          = 89,
	kAmmoID_MenuReloadBike         = 90,
	kAmmoID_MAX                    = 91
};


// Enum BendGame.EInventoryCraftComponentID
enum class EInventoryCraftComponentID : uint8_t
{
	kCraftComponentID_None         = 0,
	kCraftComponentID_Bottle_Beer  = 1,
	kCraftComponentID_RubbingAlcohol = 2,
	kCraftComponentID_AirBag       = 3,
	kCraftComponentID_AlarmClock   = 4,
	kCraftComponentID_Bottle_Growler = 5,
	kCraftComponentID_BoxOfNails   = 6,
	kCraftComponentID_CarAlarm     = 7,
	kCraftComponentID_EmptySoupCan = 8,
	kCraftComponentID_GunPowder    = 9,
	kCraftComponentID_Kerosene     = 10,
	kCraftComponentID_Metal_Pipe   = 11,
	kCraftComponentID_Oil_Filter   = 12,
	kCraftComponentID_Oil_Filter_Primary = 13,
	kCraftComponentID_Oil_Filter_Special = 14,
	kCraftComponentID_Poison       = 15,
	kCraftComponentID_PushButtonSparkIgniter = 16,
	kCraftComponentID_Rag          = 17,
	kCraftComponentID_Sawblade     = 18,
	kCraftComponentID_NestResidue  = 19,
	kCraftComponentID_Whiskey      = 20,
	kCraftComponentID_MAX          = 21
};


// Enum BendGame.ECoverTypeAnimGroup
enum class ECoverTypeAnimGroup : uint8_t
{
	Low                            = 0,
	High                           = 1,
	Tree                           = 2,
	ECoverTypeAnimGroup_MAX        = 3
};


// Enum BendGame.EGameDifficulty
enum class EGameDifficulty : uint8_t
{
	Easy                           = 0,
	Normal                         = 1,
	Hard                           = 2,
	Survival                       = 3,
	Hard2                          = 4,
	Survival2                      = 5,
	EGameDifficulty_MAX            = 6
};


// Enum BendGame.ESemiAwareState
enum class ESemiAwareState : uint8_t
{
	CasualInvestigate              = 0,
	TenseInvestigate               = 1,
	TenseHunt                      = 2,
	CombatHunt                     = 3,
	None                           = 4,
	ESemiAwareState_MAX            = 5
};


// Enum BendGame.eConflictEventType
enum class EeConflictEventType : uint8_t
{
	kConflictEvent_MeleeHit        = 0,
	kConflictEvent_Gunshot         = 1,
	kConflictEvent_Blast           = 2,
	kConflictEvent_FreakDeath      = 3,
	kConflictEvent_Death           = 4,
	kConflictEvent_StealthKill     = 5,
	kConflictEvent_MaxCount        = 6,
	kConflictEvent_MAX             = 7
};


// Enum BendGame.EAIVehicleFailsafe
enum class EAIVehicleFailsafe : uint8_t
{
	FS_Grinding                    = 0,
	FS_ForwardMovement             = 1,
	FS_Grinding_ForwardMovement    = 2,
	FS_OutsideOfLane               = 3,
	FS_MAX                         = 4
};


// Enum BendGame.EWeatherType
enum class EWeatherType : uint8_t
{
	EWeatherType_Clear             = 0,
	EWeatherType_Cloudy            = 1,
	EWeatherType_LightRain         = 2,
	EWeatherType_LightSnow         = 3,
	EWeatherType_HeavyRain         = 4,
	EWeatherType_HeavySnow         = 5,
	EWeatherType_MAX               = 6
};


// Enum BendGame.ESlatePopupButton
enum class ESlatePopupButton : uint8_t
{
	ButtonYes                      = 0,
	ButtonNo                       = 1,
	ButtonOK                       = 2,
	Num                            = 3,
	ESlatePopupButton_MAX          = 4
};


// Enum BendGame.EInteractButton
enum class EInteractButton : uint8_t
{
	None                           = 0,
	Triangle                       = 1,
	Square                         = 2,
	Cross                          = 3,
	Circle                         = 4,
	L1                             = 5,
	L2                             = 6,
	L3                             = 7,
	R1                             = 8,
	R2                             = 9,
	R3                             = 10,
	DpadUp                         = 11,
	DpadDown                       = 12,
	DpadLeft                       = 13,
	DpadRight                      = 14,
	Lstick                         = 15,
	LstickUp                       = 16,
	LstickDown                     = 17,
	LstickLeft                     = 18,
	LstickRight                    = 19,
	Rstick                         = 20,
	RstickUp                       = 21,
	RstickDown                     = 22,
	RstickLeft                     = 23,
	RstickRight                    = 24,
	Option                         = 25,
	TpDown                         = 26,
	EInteractButton_MAX            = 27
};


// Enum BendGame.EBendVehicleDamageType
enum class EBendVehicleDamageType : uint8_t
{
	EBendVehicleDamageType_impact  = 0,
	EBendVehicleDamageType_surface = 1,
	EBendVehicleDamageType_jumpLanding = 2,
	EBendVehicleDamageType_projectile = 3,
	EBendVehicleDamageType_misc    = 4,
	EBendVehicleDamageType_ramming = 5,
	EBendVehicleDamageType_water   = 6,
	EBendVehicleDamageType_MAX     = 7
};


// Enum BendGame.EAmbientEventClass
enum class EAmbientEventClass : uint8_t
{
	EAmbientEventClass_Aftermath   = 0,
	EAmbientEventClass_Ambush      = 1,
	EAmbientEventClass_AmbushBuilding = 2,
	EAmbientEventClass_AmbushCarCrash = 3,
	EAmbientEventClass_AmbushClothesline = 4,
	EAmbientEventClass_AmbushLootNewt = 5,
	EAmbientEventClass_AmbushMotorcycle = 6,
	EAmbientEventClass_AmbushMotorcycleInProgress = 7,
	EAmbientEventClass_AmbushPlayDead = 8,
	EAmbientEventClass_AmbushSnare = 9,
	EAmbientEventClass_AmbushSniper = 10,
	EAmbientEventClass_DeerCrossing = 11,
	EAmbientEventClass_FactionVsFaction = 12,
	EAmbientEventClass_FreakShow   = 13,
	EAmbientEventClass_EncampmentAttack = 14,
	EAmbientEventClass_Helicopter  = 15,
	EAmbientEventClass_Grapple     = 16,
	EAmbientEventClass_Horde       = 17,
	EAmbientEventClass_HuntingParty = 18,
	EAmbientEventClass_Looter      = 19,
	EAmbientEventClass_MiniSurvivorRescue = 20,
	EAmbientEventClass_MotherNature = 21,
	EAmbientEventClass_MotorCycleRide = 22,
	EAmbientEventClass_NestFeast   = 23,
	EAmbientEventClass_Newts       = 24,
	EAmbientEventClass_NewtTrap    = 25,
	EAmbientEventClass_Scrapper    = 26,
	EAmbientEventClass_SurvivorRescue = 27,
	EAmbientEventClass_SurvivorTrapped = 28,
	EAmbientEventClass_Traps       = 29,
	EAmbientEventClass_Global      = 30,
	Count                          = 31,
	EAmbientEventClass_MAX         = 32
};


// Enum BendGame.EAmbientEventCompletionStatus
enum class EAmbientEventCompletionStatus : uint8_t
{
	EAmbientEventCompletion_Success = 0,
	EAmbientEventCompletion_Failure = 1,
	EAmbientEventCompletion_OnGoing = 2,
	EAmbientEventCompletion_MAX    = 3
};


// Enum BendGame.EAmbientEventFailedReason
enum class EAmbientEventFailedReason : uint8_t
{
	EAmbientEventFailedReason_LowPriority = 0,
	EAmbientEventFailedReason_TooClose = 1,
	EAmbientEventFailedReason_TooFar = 2,
	EAmbientEventFailedReason_Conditions = 3,
	EAmbientEventFailedReason_Blocked = 4,
	EAmbientEventFailedReason_TooManyTries = 5,
	EAmbientEventFailedReason_DemoReady = 6,
	EAmbientEventFailedReason_PlayedOnce = 7,
	EAmbientEventFailedReason_Invalid = 8,
	EAmbientEventFailedReason_MAX  = 9
};


// Enum BendGame.EAmbientEventManagerBlockMsg
enum class EAmbientEventManagerBlockMsg : uint8_t
{
	EAmbientEventManager_ActorPackagesThrottled = 0,
	EAmbientEventManager_AsyncPackagesThrottled = 1,
	EAmbientEventManager_LoadedPackagesThrottled = 2,
	EAmbientEventManager_FPSIsLow  = 3,
	EAmbientEventManager_AvailableMemoryLow = 4,
	EAmbientEventManager_AvailableMemoryCritical = 5,
	EAmbientEventManager_MAX       = 6
};


// Enum BendGame.EJobResetTypes
enum class EJobResetTypes : uint8_t
{
	Horde                          = 0,
	AmbushCamp                     = 1,
	Infestation                    = 2,
	EJobResetTypes_MAX             = 3
};


// Enum BendGame.EBendGameEventAction
enum class EBendGameEventAction : uint8_t
{
	Discover                       = 0,
	Purchase                       = 1,
	Sell                           = 2,
	BuyBack                        = 3,
	Consume                        = 4,
	Equip                          = 5,
	Repair                         = 6,
	Refuel                         = 7,
	PartInstall                    = 8,
	Craft                          = 9,
	PurchaseWeaponPart             = 10,
	PurchaseBikePart               = 11,
	WeaponSwap                     = 12,
	BikeStorageAmmo                = 13,
	Num                            = 14,
	EBendGameEventAction_MAX       = 15
};


// Enum BendGame.EBendGameEvent
enum class EBendGameEvent : uint8_t
{
	Inventory                      = 0,
	Weapon                         = 1,
	Bike                           = 2,
	Num                            = 3,
	EBendGameEvent_MAX             = 4
};


// Enum BendGame.EXpecPOICountReport
enum class EXpecPOICountReport : uint8_t
{
	EnterPOI                       = 0,
	LeavePOI                       = 1,
	OrderComplete                  = 2,
	DummyEntry                     = 3,
	EXpecPOICountReport_MAX        = 4
};


// Enum BendGame.EXpecRallyEvent
enum class EXpecRallyEvent : uint8_t
{
	OnRallyStart                   = 0,
	OnRallyEnd                     = 1,
	OnDismissStart                 = 2,
	OnDismissEnd                   = 3,
	EXpecRallyEvent_MAX            = 4
};


// Enum BendGame.EObjectiveStates
enum class EObjectiveStates : uint8_t
{
	Locked                         = 0,
	Unlocked                       = 1,
	Completed                      = 2,
	Failed                         = 3,
	EObjectiveStates_MAX           = 4
};


// Enum BendGame.EPlayerSaveProfileType
enum class EPlayerSaveProfileType : uint8_t
{
	Audio_SFXVolume                = 0,
	Audio_MusicVolume              = 1,
	Audio_SpeechVolume             = 2,
	Audio_MovieVolume              = 3,
	Audio_Format                   = 4,
	Audio_CenterSpeaker            = 5,
	Audio_DynamicRange             = 6,
	Controller_AimSensitivity      = 7,
	Controller_AimHorizontalInverted = 8,
	Controller_AimVerticalInverted = 9,
	Controller_AimCameraAcceleration = 10,
	Controller_AimZoomRemember     = 11,
	Controller_CameraSensitivity   = 12,
	Controller_CameraHorizontalInverted = 13,
	Controller_CameraVerticalInverted = 14,
	Controller_CameraFollowAcceleration = 15,
	Controller_CameraFollowTracking = 16,
	Controller_VehicleSensitivity  = 17,
	Controller_VehicleHorizontalInverted = 18,
	Controller_VehicleVerticalInverted = 19,
	Controller_VehicleFollowAcceleration = 20,
	Controller_VehicleFollowTracking = 21,
	Controller_CrouchToggle        = 22,
	Controller_BikeManualAim       = 23,
	Controller_BikeAutoDrive       = 24,
	Display_Brightness             = 25,
	Display_HDR                    = 26,
	Game_Difficulty                = 27,
	Game_HintsEnabled              = 28,
	Language_Language              = 29,
	Language_Speech                = 30,
	Language_SubtitlesEnabled      = 31,
	Menu_NewGame                   = 32,
	Menu_SaveGame                  = 33,
	Menu_LoadGame                  = 34,
	Menu_Continue                  = 35,
	Menu_RestartCheckpoint         = 36,
	Menu_QuitMission               = 37,
	Menu_QuitToMainMenu            = 38,
	Menu_SkipGameplaySection       = 39,
	Menu_PhotoMode                 = 40,
	Menu_ResetJobMenu              = 41,
	Menu_ResetHorde                = 42,
	Menu_ResetAmbush               = 43,
	Menu_ResetInfestation          = 44,
	Menu_ResetAllJobs              = 45,
	Menu_ScreenAdjust              = 46,
	Menu_ResetDefaults             = 47,
	Menu_DisplayController         = 48,
	Display_4k                     = 49,
	UserType0                      = 50,
	UserType1                      = 51,
	UserType2                      = 52,
	UserType3                      = 53,
	UserType4                      = 54,
	UserType5                      = 55,
	Controller_Vibration           = 56,
	Controller_VehicleAimYaw       = 57,
	Controller_VehicleAimTrackYaw  = 58,
	Controller_VehicleAimSpeed     = 59,
	Controller_SprintToggle        = 60,
	Controller_SixAxisAiming       = 61,
	Game_HardCoreSurvivalMode      = 62,
	Game_DisplayDamageMarkers      = 63,
	Game_TouchpadMode              = 64,
	Game_RadarMode                 = 65,
	Game_ReticleAimMode            = 66,
	Game_ReticleFriction           = 67,
	Game_BikeReverseCamera         = 68,
	Game_RememberAimSide           = 69,
	Game_SwapTargetFireInput       = 70,
	Language_SubtitleLanguage      = 71,
	Menu_GoToChallengeMenu         = 72,
	Menu_RestartChallenge          = 73,
	Menu_QuitChallenge             = 74,
	Accessibility_RepeatedButtonPresses = 75,
	Accessibility_SurvivalWheelToggle = 76,
	Accessibility_IconSize         = 77,
	Accessibility_PlayerCameraAssist = 78,
	Accessibility_BikeCameraAssist = 79,
	Accessibility_ColorBlindMode   = 80,
	Accessibility_SimplifySurvivalVision = 81,
	Accessibility_AimToggle        = 82,
	Accessibility_DriveToggle      = 83,
	Accessibility_SimplifyGrapples = 84,
	Accessibility_AlternateSurvivalWheel = 85,
	Audio_UseControllerSpeaker     = 86,
	Audio_ControllerSpeakerVolume  = 87,
	Controller_TouchpadDeadzoneLeft = 88,
	Controller_TouchpadDeadzoneTop = 89,
	Controller_TouchpadDeadzoneRight = 90,
	Controller_TouchpadDeadzoneBottom = 91,
	Controller_TouchpadSwipeLength = 92,
	Accessibility_UseTouchpad      = 93,
	Language_SubtitleSize          = 94,
	Language_SubtitleBackground    = 95,
	Language_SubtitleSpeakerName   = 96,
	Game_AimAssistMagnetism        = 97,
	Game_AimAssistFriction         = 98,
	Controller_DeadzoneSensitivity = 99,
	Display_HdrGameBrightness      = 100,
	Display_HdrGamePeakBrightness  = 101,
	Display_HdrUserInterfaceBrightness = 102,
	Display_ChromaticAberration    = 103,
	Display_MotionBlur             = 104,
	Display_Monitor                = 105,
	Display_Mode                   = 106,
	Display_Resolution             = 107,
	Display_RenderScale            = 108,
	Display_RefreshRate            = 109,
	Display_LightingQuality        = 110,
	Display_GeometryQuality        = 111,
	Display_FoliageDrawDistance    = 112,
	Display_ShadowQuality          = 113,
	Display_CloudAndFogQuality     = 114,
	Display_TextureFilterQuality   = 115,
	Display_TextureStreamingQuality = 116,
	Display_GraphicsQuality        = 117,
	Display_VideoSettings          = 118,
	Display_FOV                    = 119,
	Display_Framerate              = 120,
	Display_VSync                  = 121,
	Num                            = 122,
	EPlayerSaveProfileType_MAX     = 123
};


// Enum BendGame.EInputType
enum class EInputType : uint8_t
{
	Action                         = 0,
	AxisPositive                   = 1,
	AxisNegative                   = 2,
	EInputType_MAX                 = 3
};


// Enum BendGame.EBendGroupFormationType
enum class EBendGroupFormationType : uint8_t
{
	ESingleFile                    = 0,
	EStaggered                     = 1,
	EBendGroupFormationType_MAX    = 2
};


// Enum BendGame.WaypointEnd
enum class EWaypointEnd : uint8_t
{
	DISABLE_AUTODRIVE              = 0,
	StopVehicleAI                  = 1,
	STOPAT                         = 2,
	STOP_AND_EXIT_VEHICLE          = 3,
	WaypointEnd_MAX                = 4
};


// Enum BendGame.EPlayerAttributeType
enum class EPlayerAttributeType : uint8_t
{
	Health                         = 0,
	Stamina                        = 1,
	Focus                          = 2,
	Num                            = 3,
	EPlayerAttributeType_MAX       = 4
};


// Enum BendGame.EWeaponRarity
enum class EWeaponRarity : uint8_t
{
	Dilapidated                    = 0,
	Common                         = 1,
	Uncommon                       = 2,
	Rare                           = 3,
	MythicRare                     = 4,
	Unique                         = 5,
	EWeaponRarity_MAX              = 6
};


// Enum BendGame.EItemRarity
enum class EItemRarity : uint8_t
{
	Common                         = 0,
	Uncommon                       = 1,
	Rare                           = 2,
	Epic                           = 3,
	Legendary                      = 4,
	EItemRarity_MAX                = 5
};


// Enum BendGame.ECollectibleType
enum class ECollectibleType : uint8_t
{
	kCollectibleType_One           = 0,
	kCollectibleType_Two           = 1,
	kCollectibleType_Three         = 2,
	kCollectibleType_Four          = 3,
	kCollectibleType_Five          = 4,
	kCollectibleType_Six           = 5,
	kCollectibleType_Num           = 6,
	kCollectibleType_MAX           = 7
};


// Enum BendGame.EInventoryRecipeID
enum class EInventoryRecipeID : uint8_t
{
	kRecipeID_None                 = 0,
	kRecipeID_SmallBandage         = 1,
	kRecipeID_HealthCocktail       = 2,
	kRecipeID_StaminaCocktail      = 3,
	kRecipeID_FocusCocktail        = 4,
	kRecipeID_Molotov              = 5,
	kRecipeID_NapalmMolotov        = 6,
	kRecipeID_Pipebomb             = 7,
	kRecipeID_SmokeBomb            = 8,
	kRecipeID_Attractor            = 9,
	kRecipeID_AttractorGrenade     = 10,
	kRecipeID_AirbagBomb           = 11,
	kRecipeID_IED                  = 12,
	kRecipeID_SpikedStoolLeg       = 13,
	kRecipeID_StoolLegAxe          = 14,
	kRecipeID_SpikedFencePost      = 15,
	kRecipeID_FencePostAxe         = 16,
	kRecipeID_Spiked2x4            = 17,
	kRecipeID_2x4Axe               = 18,
	kRecipeID_SpikedBat            = 19,
	kRecipeID_BatAxe               = 20,
	kRecipeID_SuperiorClub         = 21,
	kRecipeID_RipperBlunt          = 22,
	kRecipeID_RipperBladed         = 23,
	kRecipeID_RipperAxe            = 24,
	kRecipeID_Bolt                 = 25,
	kRecipeID_PoisonBolt           = 26,
	kRecipeID_PCPBolt              = 27,
	kRecipeID_ExplosiveBolt        = 28,
	kRecipeID_IncendiaryBolt       = 29,
	kRecipeID_Taser                = 30,
	kRecipeID_MB150_Explosive      = 31,
	kRecipeID_MB150_X34Gas         = 32,
	kRecipeID_MB150_EDT            = 33,
	kRecipeID_MAX                  = 34
};


// Enum BendGame.ESkillTier
enum class ESkillTier : uint8_t
{
	One                            = 0,
	Two                            = 1,
	Three                          = 2,
	Four                           = 3,
	Five                           = 4,
	Num                            = 5,
	ESkillTier_MAX                 = 6
};


// Enum BendGame.ESkillType
enum class ESkillType : uint8_t
{
	kSkillType_Focus               = 0,
	kSkillType_Herbology           = 1,
	kSkillType_Hunting             = 2,
	kSkillType_WeaponCraft         = 3,
	kSkillType_Mechanic            = 4,
	kSkillType_Melee               = 5,
	kSkillType_PlayerAttributes    = 6,
	kSkillType_RangedCombat        = 7,
	kSkillType_Stealth             = 8,
	kSkillType_TrapBuilding        = 9,
	kSkillType_Num                 = 10,
	kSkillType_MAX                 = 11
};


// Enum BendGame.ESkillClass
enum class ESkillClass : uint8_t
{
	kSkillClass_Mercenary          = 0,
	kSkillClass_Survivalist        = 1,
	kSkillClass_BountyHunter       = 2,
	kSkillClass_Num                = 3,
	kSkillClass_MAX                = 4
};


// Enum BendGame.EWeaponHardPoint
enum class EWeaponHardPoint : uint8_t
{
	kWeaponHardPoint_None          = 0,
	kWeaponHardPoint_Scope         = 1,
	kWeaponHardPoint_Silencer      = 2,
	kWeaponHardPoint_Clip          = 3,
	kWeaponHardPoint_ForeGrip      = 4,
	kWeaponHardPoint_Receiver      = 5,
	kWeaponHardPoint_Barrel        = 6,
	kWeaponHardPoint_Material      = 7,
	kWeaponHardPoint_LaserBeam     = 8,
	kWeaponHardPoint_Num           = 9,
	kWeaponHardPoint_MAX           = 10
};


// Enum BendGame.EWeaponPartID
enum class EWeaponPartID : uint8_t
{
	kWeaponPartID_None             = 0,
	kWeaponPartID_SilencerFoundOilCan = 1,
	kWeaponPartID_SilencerMerchantOilCan = 2,
	kWeaponPartID_SilencerMerchantOilCanBetter = 3,
	kWeaponPartID_SilencerSmall    = 4,
	kWeaponPartID_SilencerMedium   = 5,
	kWeaponPartID_SilencerLarge    = 6,
	kWeaponPartID_M9OilFilterSilencer = 7,
	kWeaponPartID_M9Magazine       = 8,
	kWeaponPartID_LaserBeam        = 9,
	kWeaponPartID_226Silencer      = 10,
	kWeaponPartID_226Magazine      = 11,
	kWeaponPartID_CrossbowPoisonArrow = 12,
	kWeaponPartID_DragunovSilencer = 13,
	kWeaponPartID_DragunovScopeSmooth = 14,
	kWeaponPartID_DragunovScopeStep = 15,
	kWeaponPartID_DragunovScopeFixed = 16,
	kWeaponPartID_AK47Silencer     = 17,
	kWeaponPartID_AK47ScopeSmooth  = 18,
	kWeaponPartID_AK47ScopeStep    = 19,
	kWeaponPartID_AK47ScopeFixed   = 20,
	kWeaponPartID_HenryBBSilencer  = 21,
	kWeaponPartID_HenryBBScopeSmooth = 22,
	kWeaponPartID_HenryBBScopeStep = 23,
	kWeaponPartID_HenryBBScopeFixed = 24,
	kWeaponPartID_KvarSilencer     = 25,
	kWeaponPartID_KvarScopeSmooth  = 26,
	kWeaponPartID_KvarScopeStep    = 27,
	kWeaponPartID_KvarScopeFixed   = 28,
	kWeaponPartID_M4A1Silencer     = 29,
	kWeaponPartID_M4A1ScopeSmooth  = 30,
	kWeaponPartID_M4A1ScopeStep    = 31,
	kWeaponPartID_M4A1ScopeFixed   = 32,
	kWeaponPartID_M7Silencer       = 33,
	kWeaponPartID_M7ScopeSmooth    = 34,
	kWeaponPartID_M7ScopeStep      = 35,
	kWeaponPartID_M7ScopeFixed     = 36,
	kWeaponPartID_HoneyBadgerSilencer = 37,
	kWeaponPartID_MagUpgrade_Crossbow = 38,
	kWeaponPartID_MagUpgrade_Crossbow01 = 39,
	kWeaponPartID_MagUpgrade_Crossbow02 = 40,
	kWeaponPartID_MagUpgrade_Crossbow03 = 41,
	kWeaponPartID_MagUpgrade_Crossbow04 = 42,
	kWeaponPartID_MagUpgrade_Pistol = 43,
	kWeaponPartID_MagUpgrade_Pistol01 = 44,
	kWeaponPartID_MagUpgrade_Pistol02 = 45,
	kWeaponPartID_MagUpgrade_Shotgun = 46,
	kWeaponPartID_MagUpgrade_Shotgun01 = 47,
	kWeaponPartID_MagUpgrade_Shotgun02 = 48,
	kWeaponPartID_MagUpgrade_AR    = 49,
	kWeaponPartID_MagUpgrade_AR01  = 50,
	kWeaponPartID_MagUpgrade_AR02  = 51,
	kWeaponPartID_MagUpgrade_SMG   = 52,
	kWeaponPartID_MagUpgrade_SMG01 = 53,
	kWeaponPartID_MagUpgrade_SMG02 = 54,
	kWeaponPartID_MagUpgrade_Rifle = 55,
	kWeaponPartID_MagUpgrade_Rifle01 = 56,
	kWeaponPartID_MagUpgrade_Rifle02 = 57,
	kWeaponPartID_MagUpgrade_Sniper = 58,
	kWeaponPartID_MagUpgrade_Sniper01 = 59,
	kWeaponPartID_MagUpgrade_Sniper02 = 60,
	kWeaponPartID_MagUpgrade_LMG   = 61,
	kWeaponPartID_MagUpgrade_LMG01 = 62,
	kWeaponPartID_MagUpgrade_LMG02 = 63,
	kWeaponPartID_MagUpgrade_P226  = 64,
	kWeaponPartID_MagUpgrade_Glock = 65,
	kWeaponPartID_MagUpgrade_Deagle = 66,
	kWeaponPartID_MagUpgrade_FN57  = 67,
	kWeaponPartID_MagUpgrade_LilStubbyRusted = 68,
	kWeaponPartID_MagUpgrade_LilStubbyUsed = 69,
	kWeaponPartID_MagUpgrade_LilStubbyPristine = 70,
	kWeaponPartID_MagUpgrade_TOZ   = 71,
	kWeaponPartID_MagUpgrade_Mossberg = 72,
	kWeaponPartID_MagUpgrade_DP12  = 73,
	kWeaponPartID_MagUpgrade_M4Super90 = 74,
	kWeaponPartID_MagUpgrade_AutoShot = 75,
	kWeaponPartID_MagUpgrade_M4A1  = 76,
	kWeaponPartID_MagUpgrade_Steyr = 77,
	kWeaponPartID_MagUpgrade_Tavor = 78,
	kWeaponPartID_MagUpgrade_HoneyBadger = 79,
	kWeaponPartID_MagUpgrade_SMP9Rusted = 80,
	kWeaponPartID_MagUpgrade_SMP9Used = 81,
	kWeaponPartID_MagUpgrade_SMP9Pristine = 82,
	kWeaponPartID_MagUpgrade_PPSh  = 83,
	kWeaponPartID_MagUpgrade_M50   = 84,
	kWeaponPartID_MagUpgrade_Thompson = 85,
	kWeaponPartID_MagUpgrade_Scorpion = 86,
	kWeaponPartID_MagUpgrade_MP5   = 87,
	kWeaponPartID_MagUpgrade_P90   = 88,
	kWeaponPartID_MagUpgrade_Badlands = 89,
	kWeaponPartID_MagUpgrade_M14   = 90,
	kWeaponPartID_MagUpgrade_Savage = 91,
	kWeaponPartID_MagUpgrade_M40   = 92,
	kWeaponPartID_MagUpgrade_MSG90 = 93,
	kWeaponPartID_MagUpgrade_SVD   = 94,
	kWeaponPartID_MagUpgrade_SAKO  = 95,
	kWeaponPartID_MagUpgrade_AS50  = 96,
	kWeaponPartID_MagUpgrade_MG45  = 97,
	kWeaponPartID_MagUpgrade_RPD   = 98,
	kWeaponPartID_MagUpgrade_MK43  = 99,
	kWeaponPartID_MAX              = 100
};


// Enum BendGame.EMotorcycleFrameID
enum class EMotorcycleFrameID : uint8_t
{
	kMotorcycleFrameID_One         = 0,
	kMotorcycleFrameID_MAX         = 1
};


// Enum BendGame.EMotorcyclePartType
enum class EMotorcyclePartType : uint8_t
{
	kMotorcyclePartType_Engine     = 0,
	kMotorcyclePartType_Exhaust    = 1,
	kMotorcyclePartType_Headlight  = 2,
	kMotorcyclePartType_Storage    = 3,
	kMotorcyclePartType_Tank       = 4,
	kMotorcyclePartType_Frame      = 5,
	kMotorcyclePartType_Suspension = 6,
	kMotorcyclePartType_Nitrous    = 7,
	kMotorcyclePartType_SideLights = 8,
	kMotorcyclePartType_Wheels     = 9,
	kMotorcyclePartType_FrontTire  = 10,
	kMotorcyclePartType_RearTire   = 11,
	kMotorcyclePartType_ExhaustBaffle = 12,
	kMotorcyclePartType_SeatFront  = 13,
	kMotorcyclePartType_TailLights = 14,
	kMotorcyclePartType_Handlebars = 15,
	kMotorcyclePartType_FrontForks = 16,
	kMotorcyclePartType_FrontBrakes = 17,
	kMotorcyclePartType_FrontBrakesCaliper = 18,
	kMotorcyclePartType_RearBrakes = 19,
	kMotorcyclePartType_RearBrakesCaliper = 20,
	kMotorcyclePartType_FrontFender = 21,
	kMotorcyclePartType_AirIntake  = 22,
	kMotorcyclePartType_Shroud     = 23,
	kMotorcyclePartType_FaceGuard  = 24,
	kMotorcyclePartType_Mirrors    = 25,
	kMotorcyclePartType_HandGuard  = 26,
	kMotorcyclePartType_TailBag    = 27,
	kMotorcyclePartType_Radiator   = 28,
	kMotorcyclePartType_SideLight  = 29,
	kMotorcyclePartType_SeatRear   = 30,
	kMotorcyclePartType_ExhaustTip = 31,
	kMotorcyclePartType_WheelFront = 32,
	kMotorcyclePartType_WheelRear  = 33,
	kMotorcyclePartType_Refuel     = 34,
	kMotorcyclePartType_Repair     = 35,
	kMotorcyclePartType_Theme      = 36,
	kMotorcyclePartType_Num        = 37,
	kMotorcyclePartType_MAX        = 38
};


// Enum BendGame.EInventoryClothingID
enum class EInventoryClothingID : uint8_t
{
	kClothingID_None               = 0,
	kClothingID_MAX                = 1
};


// Enum BendGame.EMeleeType
enum class EMeleeType : uint8_t
{
	kMeleeType_None                = 0,
	kMeleeType_Sharp               = 1,
	kMeleeType_Blunt               = 2,
	kMeleeType_Num                 = 3,
	kMeleeType_MAX                 = 4
};


// Enum BendGame.ECraftComponentType
enum class ECraftComponentType : uint8_t
{
	kCraftComponentType_None       = 0,
	kCraftComponentType_Explosive  = 1,
	kCraftComponentType_Medical    = 2,
	kCraftComponentType_NoiseMaker = 3,
	kCraftComponentType_Rag        = 4,
	kCraftComponentType_Pipe       = 5,
	kCraftComponentType_FlammableLiquid = 6,
	kCraftComponentType_Trigger    = 7,
	kCraftComponentType_Can        = 8,
	kCraftComponentType_Poison     = 9,
	kCraftComponentType_Bait       = 10,
	kCraftComponentType_Wood       = 11,
	kCraftComponentType_Bottle     = 12,
	kCraftComponentType_Bottle_Large = 13,
	kCraftComponentType_Berry      = 14,
	kCraftComponentType_Cocktail   = 15,
	kCraftComponentType_Currency   = 16,
	kCraftComponentType_Health     = 17,
	kCraftComponentType_Herb       = 18,
	kCraftComponentType_Mushroom   = 19,
	kCraftComponentType_Scrap      = 20,
	kCraftComponentType_Special    = 21,
	kCraftComponentType_Valuable   = 22,
	kCraftComponentType_Airbag     = 23,
	kCraftComponentType_StoolLeg   = 24,
	kCraftComponentType_BaseballBat = 25,
	kCraftComponentType_AlumBaseballBat = 26,
	kCraftComponentType_2x4        = 27,
	kCraftComponentType_FencePost  = 28,
	kCraftComponentType_Bolt       = 29,
	kCraftComponentType_BoxOfNails = 30,
	kCraftComponentType_Sawblade   = 31,
	kCraftComponentType_NestResidue = 32,
	kCraftComponentType_PCP        = 33,
	kCraftComponentType_Lavender   = 34,
	kCraftComponentType_Polystyrene = 35,
	kCraftComponentType_MeleeWeaponAccessory = 36,
	kCraftComponentType_GunAccessory = 37,
	kCraftComponentType_NEROTech   = 38,
	kCraftComponentType_Fiber      = 39,
	kCraftComponentType_Gas        = 40,
	kCraftComponentType_Glass      = 41,
	kCraftComponentType_Liquid     = 42,
	kCraftComponentType_Metal      = 43,
	kCraftComponentType_Plastic    = 44,
	kCraftComponentType_Powder     = 45,
	kCraftComponentType_Cable      = 46,
	kCraftComponentType_Container  = 47,
	kCraftComponentType_Fastener   = 48,
	kCraftComponentType_FireSource = 49,
	kCraftComponentType_Flammable  = 50,
	kCraftComponentType_Wrap       = 51,
	kCraftComponentType_Large      = 52,
	kCraftComponentType_AnimalMeat = 53,
	kCraftComponentType_Timer      = 54,
	kCraftComponentType_MAX        = 55
};


// Enum BendGame.ECraftCategory
enum class ECraftCategory : uint8_t
{
	kCraftItemCatagory_Explosive   = 0,
	kCraftItemCatagory_Medical     = 1,
	kCraftItemCatagory_Melee       = 2,
	kCraftItemCatagory_Utility     = 3,
	kCraftItemCatagory_Trap        = 4,
	kCraftItemCatagory_Num         = 5,
	kCraftItemCatagory_MAX         = 6
};


// Enum BendGame.EInventoryBaseType
enum class EInventoryBaseType : uint8_t
{
	kBaseType_None                 = 0,
	kBaseType_CraftComponentType   = 1,
	kBaseType_CraftComponent       = 2,
	kBaseType_Ammo                 = 3,
	kBaseType_Weapon               = 4,
	kBaseType_Consumable           = 5,
	kBaseType_Utility              = 6,
	kBaseType_Clothing             = 7,
	kBaseType_MotorcyclePart       = 8,
	kBaseType_WeaponPart           = 9,
	kBaseType_Skill                = 10,
	kBaseType_Recipe               = 11,
	kBaseType_Collectible          = 12,
	kBaseType_Num                  = 13,
	kBaseType_MAX                  = 14
};


// Enum BendGame.EInventoryItemStorage
enum class EInventoryItemStorage : uint8_t
{
	Equipment                      = 0,
	Loot                           = 1,
	Recipes                        = 2,
	Pouch                          = 3,
	EquipmentAmmo                  = 4,
	WeaponParts                    = 5,
	BikeParts                      = 6,
	Bike                           = 7,
	BikeAmmo                       = 8,
	Mission                        = 9,
	Num                            = 10,
	EInventoryItemStorage_MAX      = 11
};


// Enum BendGame.eNavWalkingTypes
enum class EeNavWalkingTypes : uint8_t
{
	Damage                         = 0,
	Melee                          = 1,
	MeleeStun                      = 2,
	eNavWalkingTypes_MAX           = 3
};


// Enum BendGame.EFlowingWater
enum class EFlowingWater : uint8_t
{
	None                           = 0,
	River                          = 1,
	Stream                         = 2,
	Canal                          = 3,
	EFlowingWater_MAX              = 4
};


// Enum BendGame.eBloodOnBodyParts
enum class EeBloodOnBodyParts : uint8_t
{
	RightHand                      = 0,
	MaxCount                       = 1,
	eBloodOnBodyParts_MAX          = 2
};


// Enum BendGame.EDefendZoneBindingStrength
enum class EDefendZoneBindingStrength : uint8_t
{
	Invalid                        = 0,
	Loose                          = 1,
	Normal                         = 2,
	Tight                          = 3,
	VeryTight                      = 4,
	Hard                           = 5,
	EDefendZoneBindingStrength_MAX = 6
};


// Enum BendGame.EPhotoModePresetSetting
enum class EPhotoModePresetSetting : uint8_t
{
	FLOAT_VALUES_START             = 0,
	DepthOfFieldFstop              = 1,
	CCBrightness                   = 2,
	WhiteTemp                      = 3,
	GrainIntensity                 = 4,
	BendDepthGrade_TransitionPoint = 5,
	BendDepthGrade_TransitionSpread = 6,
	WhiteTint                      = 7,
	CCSaturation                   = 8,
	CCContrast                     = 9,
	CVibrance                      = 10,
	ScreenOverlay_VignetteStrength = 11,
	ScreenOverlay_VignetteFalloff  = 12,
	BendBloomScale                 = 13,
	BendBloomScale2                = 14,
	BendBloomInputMinimum          = 15,
	BendBloomInputMaximum          = 16,
	BendBloomInput2Minimum         = 17,
	BendBloomInput2Maximum         = 18,
	BendBloomTonemapMaximum        = 19,
	BendBloomTonemap2Maximum       = 20,
	FocalDist                      = 21,
	Contrast                       = 22,
	Brightness                     = 23,
	FLOAT_VALUES_END               = 24,
	LINEAR_COLOR_VALUES_START      = 25,
	BendDepthGrade_NearTint        = 26,
	BendDepthGrade_NearSaturation  = 27,
	BendDepthGrade_NearGamma       = 28,
	BendDepthGrade_FarTint         = 29,
	BendDepthGrade_FarSaturation   = 30,
	BendDepthGrade_FarGamma        = 31,
	BendBloom1Color                = 32,
	BendBloom2Color                = 33,
	LINEAR_COLOR_VALUES_END        = 34,
	VECTOR_VALUES_START            = 35,
	ColorContrast                  = 36,
	ColorGain                      = 37,
	ColorOffset                    = 38,
	ColorGamma                     = 39,
	VECTOR_VALUES_END              = 40,
	VECTOR2D_VALUES_START          = 41,
	BendBloom1Size                 = 42,
	BendBloom2Size                 = 43,
	VECTOR2D_VALUES_END            = 44,
	SPECIAL_CASES_START            = 45,
	DepthOfFieldMethod             = 46,
	SPECIAL_CASES_END              = 47,
	EPhotoModePresetSetting_MAX    = 48
};


// Enum BendGame.ESaveGameFailureReasons
enum class ESaveGameFailureReasons : uint8_t
{
	Default                        = 0,
	TooEarlyInLoadProcessForSaves  = 1,
	MissionActive                  = 2,
	CinematicActive                = 3,
	BlackScreenActive              = 4,
	EnemiesAware                   = 5,
	EnemiesNearby                  = 6,
	PlayerDead                     = 7,
	InTheMiddleOfLoadingSaveStuff  = 8,
	PlayerNotInValidAnimState      = 9,
	TooSoonSinceLastOWSave         = 10,
	GameCurrentlySaving            = 11,
	NonSavableMenuOpen             = 12,
	JobBlockingSave                = 13,
	NotNearSaveInteract            = 14,
	NotOnPlayerBike                = 15,
	BikeTiresDontHaveGroundContact = 16,
	BikeIsMoving                   = 17,
	BikeAtSteepAngle               = 18,
	NoMissionAutoSave              = 19,
	IsInWater                      = 20,
	BikeIsInWater                  = 21,
	BikeIsNotUpright               = 22,
	BlockedByBlueprint             = 23,
	ProcessingFreezeStreamingRequest = 24,
	MaxCount                       = 25,
	ESaveGameFailureReasons_MAX    = 26
};


// Enum BendGame.ESaveZoneTypes
enum class ESaveZoneTypes : uint8_t
{
	None                           = 0,
	Bed                            = 1,
	Bike                           = 2,
	MaxCount                       = 3,
	ESaveZoneTypes_MAX             = 4
};


// Enum BendGame.ESaveGameRequestTypes
enum class ESaveGameRequestTypes : uint8_t
{
	SaveGameOW                     = 0,
	SaveGameMenu                   = 1,
	FastTravel                     = 2,
	MaxCount                       = 3,
	ESaveGameRequestTypes_MAX      = 4
};


// Enum BendGame.EIconTypes
enum class EIconTypes : uint8_t
{
	Default                        = 0,
	OpenLocked                     = 1,
	AutoPickup                     = 2,
	Ammo                           = 3,
	AmmoBolt                       = 4,
	Medical                        = 5,
	Food                           = 6,
	PickupFuel                     = 7,
	PickupCarry                    = 8,
	Repair                         = 9,
	Refuel                         = 10,
	Scrap                          = 11,
	Search                         = 12,
	Trap                           = 13,
	RecipeBook                     = 14,
	CollectableHistoricalMarker    = 15,
	CollectableNeroIntel           = 16,
	CollectableCharacters          = 17,
	CollectableTales               = 18,
	CollectableNeroRecording       = 19,
	MaterialBait                   = 20,
	MaterialBinding                = 21,
	MaterialBolts                  = 22,
	MaterialCloth                  = 23,
	MaterialContainer              = 24,
	MaterialDetonator              = 25,
	MaterialDistraction            = 26,
	MaterialDrugs                  = 27,
	MaterialExplosive              = 28,
	MaterialFlammable              = 29,
	MaterialFuse                   = 30,
	MaterialPoison                 = 31,
	MaterialSawblade               = 32,
	MaterialShrapnel               = 33,
	MaterialWeaponAttachment       = 34,
	MaterialWood                   = 35,
	Grenade                        = 36,
	Molotov                        = 37,
	Bomb                           = 38,
	Crossbow                       = 39,
	Pistol                         = 40,
	Shotgun                        = 41,
	SubmachineGun                  = 42,
	AssaultRifle                   = 43,
	MarksmanRifle                  = 44,
	SniperRifle                    = 45,
	MachineGun                     = 46,
	GrenadeLauncher                = 47,
	MeleeBladed                    = 48,
	MeleeBluntWood                 = 49,
	MeleeBluntMetal                = 50,
	MeleeAxe                       = 51,
	ObjectiveStory                 = 52,
	ObjectiveEncampment            = 53,
	ObjectiveKill                  = 54,
	ObjectiveKillArea              = 55,
	ObjectiveDefend                = 56,
	ObjectiveDefendArea            = 57,
	ObjectiveSearch                = 58,
	ObjectiveTrack                 = 59,
	ObjectiveNeroCheckpoint        = 60,
	ObjectiveInfestationZone       = 61,
	ObjectiveAmbushCamp            = 62,
	BikeAvailable                  = 63,
	BikeNotAvailable               = 64,
	NeedsFuel                      = 65,
	Hide                           = 66,
	Push                           = 67,
	Startup                        = 68,
	Merchant                       = 69,
	Mechanic                       = 70,
	GunLocker                      = 71,
	Collector                      = 72,
	Collector_Meat                 = 73,
	FullyLocked                    = 74,
	CollectableRadioFreeOregon     = 75,
	CollectableRIPSermons          = 76,
	CollectableSpeechesOnTheMount  = 77,
	CollectableTourism             = 78,
	CollectableHerbology           = 79,
	Bike_Ammo                      = 80,
	MaxCount                       = 81,
	EIconTypes_MAX                 = 82
};


// Enum BendGame.EStatusEffects
enum class EStatusEffects : uint8_t
{
	VE_None                        = 0,
	VE_Fire                        = 1,
	VE_SuicideFire                 = 2,
	VE_Poisoned                    = 3,
	VE_Acid                        = 4,
	VE_Stunned                     = 5,
	VE_Paralyzed                   = 6,
	VE_Concussed                   = 7,
	VE_Sleep                       = 8,
	VE_Bleed                       = 9,
	VE_Smoke                       = 10,
	VE_Electrocuted                = 11,
	VE_Berserk                     = 12,
	VE_Gas                         = 13,
	VE_Count                       = 14,
	VE_MAX                         = 15
};


// Enum BendGame.EControllerInputButton
enum class EControllerInputButton : uint8_t
{
	Cross                          = 0,
	Circle                         = 1,
	Square                         = 2,
	Triangle                       = 3,
	L1                             = 4,
	L2                             = 5,
	L3                             = 6,
	R1                             = 7,
	R2                             = 8,
	R3                             = 9,
	DPUp                           = 10,
	DPDown                         = 11,
	DPLeft                         = 12,
	DPRight                        = 13,
	L                              = 14,
	LSUp                           = 15,
	LSDown                         = 16,
	LSLeft                         = 17,
	LSRight                        = 18,
	R                              = 19,
	RSUp                           = 20,
	RSDown                         = 21,
	RSLeft                         = 22,
	RSRight                        = 23,
	Option                         = 24,
	TPDown                         = 25,
	UI_Confirm                     = 26,
	UI_Cancel                      = 27,
	None                           = 28,
	EControllerInputButton_MAX     = 29
};


// Enum BendGame.EClassDCinAnchorType
enum class EClassDCinAnchorType : uint8_t
{
	CinematicAnchor                = 0,
	PersonalAnchor                 = 1,
	NoAnchor                       = 2,
	EClassDCinAnchorType_MAX       = 3
};


// Enum BendGame.EClassDCinPawnStates
enum class EClassDCinPawnStates : uint8_t
{
	OnFoot                         = 0,
	BikeFrontSeat                  = 1,
	BikeBackSeat                   = 2,
	EClassDCinPawnStates_MAX       = 3
};


// Enum BendGame.EDodgeDirections
enum class EDodgeDirections : uint8_t
{
	Forward                        = 0,
	Right                          = 1,
	Back                           = 2,
	Left                           = 3,
	EDodgeDirections_MAX           = 4
};


// Enum BendGame.EWaitForInputType
enum class EWaitForInputType : uint8_t
{
	None                           = 0,
	StabWithBrokenWeapon           = 1,
	CanDodge                       = 2,
	AttackDuringDodge              = 3,
	StunBrutalKill                 = 4,
	EarlyExitHitReactionAndAttack  = 5,
	EWaitForInputType_MAX          = 6
};


// Enum BendGame.EVehicleSeat
enum class EVehicleSeat : uint8_t
{
	EVEHICLESEAT_BikeDriver        = 0,
	EVEHICLESEAT_BikePassenger     = 1,
	EVEHICLESEAT_CarDriverLeft     = 2,
	EVEHICLESEAT_CarDriverRight    = 3,
	EVEHICLESEAT_CarPassengerFrontLeft = 4,
	EVEHICLESEAT_CarPassengerFrontRight = 5,
	EVEHICLESEAT_CarPassengerBackLeft = 6,
	EVEHICLESEAT_CarPassengerBackRight = 7,
	EVEHICLESEAT_MAX               = 8
};


// Enum BendGame.EVehicleRiderState
enum class EVehicleRiderState : uint8_t
{
	EVEHICLERIDERSTATE_Unseated    = 0,
	EVEHICLERIDERSTATE_EnteringSeat = 1,
	EVEHICLERIDERSTATE_Seated      = 2,
	EVEHICLERIDERSTATE_ExitingSeat = 3,
	EVEHICLERIDERSTATE_MAX         = 4
};


// Enum BendGame.EWeatherTransitionRateType
enum class EWeatherTransitionRateType : uint8_t
{
	EWeatherTransitionRateType_Slow = 0,
	EWeatherTransitionRateType_Medium = 1,
	EWeatherTransitionRateType_Fast = 2,
	EWeatherTransitionRateType_MAX = 3
};


// Enum BendGame.EWeatherTransitionType
enum class EWeatherTransitionType : uint8_t
{
	EWeatherTransitionType_Same    = 0,
	EWeatherTransitionType_Increasing = 1,
	EWeatherTransitionType_Decreasing = 2,
	EWeatherTransitionType_MAX     = 3
};


// Enum BendGame.ePOIType
enum class EePOIType : uint8_t
{
	FirePit                        = 0,
	GuardingGate                   = 1,
	MaxCount                       = 2,
	ePOIType_MAX                   = 3
};


// Enum BendGame.ePOIStateForVO
enum class EePOIStateForVO : uint8_t
{
	Enter                          = 0,
	Exit                           = 1,
	Low                            = 2,
	Out                            = 3,
	Full                           = 4,
	FullResponse                   = 5,
	TimeDawn                       = 6,
	TimeDusk                       = 7,
	TravelTo                       = 8,
	WaitFull                       = 9,
	WeatherCold                    = 10,
	WeatherRain                    = 11,
	WeatherSnow                    = 12,
	WhileAt                        = 13,
	MaxCount                       = 14,
	ePOIStateForVO_MAX             = 15
};


// Enum BendGame.eEventForVO
enum class EeEventForVO : uint8_t
{
	HeardSomething                 = 0,
	EnemySpotted                   = 1,
	SawSomething                   = 2,
	TimeDawn                       = 3,
	TimeDusk                       = 4,
	WeatherCold                    = 5,
	WeatherRain                    = 6,
	WeatherSnow                    = 7,
	Bored                          = 8,
	Hungry                         = 9,
	Hunting                        = 10,
	HasWeapon                      = 11,
	InCombat                       = 12,
	LostSight                      = 13,
	SearchForEnemy                 = 14,
	EnemyKilled                    = 15,
	Gloat                          = 16,
	EnemyHasWeapon                 = 17,
	OnDie                          = 18,
	BeingEaten                     = 19,
	BeingHit                       = 20,
	Fall                           = 21,
	Exertion                       = 22,
	Eating                         = 23,
	MaxCount                       = 24,
	eEventForVO_MAX                = 25
};


// Enum BendGame.eRepeatRulesVO
enum class EeRepeatRulesVO : uint8_t
{
	CanRepeat                      = 0,
	NeverRepeat                    = 1,
	NeverRepeatThisGame            = 2,
	CanRepeatIn30Mins              = 3,
	CanRepeatIn1Hours              = 4,
	CanRepeatIn2Hours              = 5,
	CanRepeatIn4Hours              = 6,
	CanRepeatIn6Hours              = 7,
	CanRepeatIn8Hours              = 8,
	CanRepeatIn10Hours             = 9,
	CanRepeatIn12Hours             = 10,
	MaxCount                       = 11,
	eRepeatRulesVO_MAX             = 12
};


// Enum BendGame.ePawnRespondVO
enum class EePawnRespondVO : uint8_t
{
	None                           = 0,
	ClosestPawnToSpeaker           = 1,
	ClosestPawnToPlayer            = 2,
	ClosestPawnToSpeakerSameFaction = 3,
	ClosestPawnToPlayerSameFaction = 4,
	ClosestPawnToSpeakerDiffFaction = 5,
	ClosestPawnToPlayerDiffFaction = 6,
	ePawnRespondVO_MAX             = 7
};


// Enum BendGame.eAlternateResponedVO
enum class EeAlternateResponedVO : uint8_t
{
	None                           = 0,
	GenericFunny                   = 1,
	GenericAngry                   = 2,
	Grunt                          = 3,
	eAlternateResponedVO_MAX       = 4
};


// Enum BendGame.eNPCVoiceTypes
enum class EeNPCVoiceTypes : uint8_t
{
	None                           = 0,
	Swarmer                        = 1,
	Rager                          = 2,
	Newt                           = 3,
	Runner                         = 4,
	TreeHugger                     = 5,
	Survivor_Male                  = 6,
	Survivor_Female                = 7,
	Cannibal_Male                  = 8,
	Cannibal_Female                = 9,
	RatPack_Male                   = 10,
	RatPack_Female                 = 11,
	Militia_Male                   = 12,
	Militia_Female                 = 13,
	Nero_Male                      = 14,
	Nero_Female                    = 15,
	Screamers                      = 16,
	Deacon                         = 17,
	Boozer                         = 18,
	Marauder_Male                  = 19,
	Marauder_Female                = 20,
	Wolf                           = 21,
	Crow                           = 22,
	Crow_Freaker                   = 23,
	Bear                           = 24,
	Wolf_Freaker                   = 25,
	Cougar                         = 26,
	Cougar_Freaker                 = 27,
	Deer                           = 28,
	Deer_Freaker                   = 29,
	LootNewt                       = 30,
	Breaker                        = 31,
	Reacher                        = 32,
	Bleacher                       = 33,
	Burster                        = 34,
	Spitter                        = 35,
	Lisa                           = 36,
	Hostage_Male                   = 37,
	Hostage_Female                 = 38,
	RIP_Male                       = 39,
	RIP_Female                     = 40,
	Loner_Male                     = 41,
	Loner_Female                   = 42,
	Pinnacles_Male                 = 43,
	Pinnacles_Female               = 44,
	Copeland_Male                  = 45,
	Copeland_Female                = 46,
	IronMikes_Male                 = 47,
	IronMikes_Female               = 48,
	Swarmer_Female                 = 49,
	IronMikes_Guard                = 50,
	Redneck_Male                   = 51,
	Redneck_Female                 = 52,
	MaxCount                       = 53,
	eNPCVoiceTypes_MAX             = 54
};


// Enum BendGame.EBendPawnBodyType
enum class EBendPawnBodyType : uint8_t
{
	None                           = 0,
	Human                          = 1,
	Swarmer                        = 2,
	Newt                           = 3,
	Horde                          = 4,
	Wolf                           = 5,
	Cougar                         = 6,
	Deer                           = 7,
	Bear                           = 8,
	Crow                           = 9,
	EBendPawnBodyType_MAX          = 10
};


// Enum BendGame.ePawnGender
enum class EePawnGender : uint8_t
{
	Male                           = 0,
	Female                         = 1,
	Undefined                      = 2,
	ePawnGender_MAX                = 3
};


// Enum BendGame.EHumanBaseCharacterType
enum class EHumanBaseCharacterType : uint8_t
{
	HumanBase                      = 0,
	CampResident                   = 1,
	EHumanBaseCharacterType_MAX    = 2
};


// Enum BendGame.EBendPhysicalSurface
enum class EBendPhysicalSurface : uint8_t
{
	Asphalt                        = 0,
	Dirt                           = 1,
	Gravel                         = 2,
	Wood                           = 3,
	Rock                           = 4,
	Mulch                          = 5,
	Moss                           = 6,
	Foliage                        = 7,
	Water                          = 8,
	Ice                            = 9,
	Snow                           = 10,
	Metal                          = 11,
	Glass                          = 12,
	Rubber                         = 13,
	Cardboard                      = 14,
	TrailDirt                      = 15,
	TrailGravel                    = 16,
	Mud                            = 17,
	Cinder                         = 18,
	TrailCinder                    = 19,
	SheetMetal                     = 20,
	Meat                           = 21,
	Brick                          = 22,
	ClothCushion                   = 23,
	ClothThinFabric                = 24,
	Concrete                       = 25,
	DeepestSnow                    = 26,
	Drywall                        = 27,
	LeatherCushion                 = 28,
	LeatherFabric                  = 29,
	MetalChainLinkFence            = 30,
	PlasticTech                    = 31,
	PlasticThick                   = 32,
	PlasticThinContainer           = 33,
	Pottery                        = 34,
	Sand                           = 35,
	Stones                         = 36,
	StoneSlab                      = 37,
	TileAcrylic                    = 38,
	TileStone                      = 39,
	TrashDebris                    = 40,
	WoodDeck                       = 41,
	Flesh                          = 42,
	FleshCritical                  = 43,
	RedGravel                      = 44,
	Greenleaf                      = 45,
	Boxwood                        = 46,
	PineHemlock                    = 47,
	Glass2                         = 48,
	MetalAirTank                   = 49,
	GunRangeTarget                 = 50,
	DirtRoad                       = 51,
	AsphaltWet                     = 52,
	WoodWet                        = 53,
	RockWet                        = 54,
	MetalWet                       = 55,
	SheetMetalWet                  = 56,
	PlasticTarp                    = 57,
	RoofMetal                      = 58,
	RoofShingle                    = 59,
	BodyBag                        = 60,
	CarpetFloor                    = 61,
	CharredDebris                  = 62,
	Nylon                          = 63,
	MetalCar                       = 64,
	ArmorMetal                     = 65,
	ArmorCloth                     = 66,
	MetalGrate                     = 67,
	WoodLong                       = 68,
	PontoonBridge                  = 69,
	Glass_Durable                  = 70,
	Railroad                       = 71,
	SurfaceType74                  = 72,
	SurfaceType75                  = 73,
	SurfaceType76                  = 74,
	SurfaceType77                  = 75,
	SurfaceType78                  = 76,
	SurfaceType79                  = 77,
	SurfaceType80                  = 78,
	SurfaceType81                  = 79,
	SurfaceType82                  = 80,
	SurfaceType83                  = 81,
	SurfaceType84                  = 82,
	SurfaceType85                  = 83,
	SurfaceType86                  = 84,
	SurfaceType87                  = 85,
	SurfaceType88                  = 86,
	SurfaceType89                  = 87,
	SurfaceType90                  = 88,
	SurfaceType91                  = 89,
	SurfaceType92                  = 90,
	SurfaceType93                  = 91,
	SurfaceType94                  = 92,
	SurfaceType95                  = 93,
	SurfaceType96                  = 94,
	SurfaceType97                  = 95,
	SurfaceType98                  = 96,
	SurfaceType99                  = 97,
	EBendPhysicalSurface_MAX       = 98
};


// Enum BendGame.EPhysMaterialType
enum class EPhysMaterialType : uint8_t
{
	Unknown                        = 0,
	Concrete                       = 1,
	Dirt                           = 2,
	Water                          = 3,
	Metal                          = 4,
	Wood                           = 5,
	Grass                          = 6,
	Glass                          = 7,
	Flesh                          = 8,
	EPhysMaterialType_MAX          = 9
};


// Enum BendGame.ECoverExitAnim
enum class ECoverExitAnim : uint8_t
{
	CoverToIdle                    = 0,
	RushExit                       = 1,
	CoverRound                     = 2,
	Retreat                        = 3,
	Vault                          = 4,
	ECoverExitAnim_MAX             = 5
};


// Enum BendGame.EFootState
enum class EFootState : uint8_t
{
	L2                             = 0,
	L1                             = 1,
	R2                             = 2,
	R1                             = 3,
	EFootState_MAX                 = 4
};


// Enum BendGame.ECoverState
enum class ECoverState : uint8_t
{
	Hunkered                       = 0,
	PopLeft                        = 1,
	PopRight                       = 2,
	PopUp                          = 3,
	PopOver                        = 4,
	Transitioning                  = 5,
	HitReaction                    = 6,
	Entering                       = 7,
	Exiting                        = 8,
	Peeking                        = 9,
	ChangeDirection                = 10,
	None                           = 11,
	ECoverState_MAX                = 12
};


// Enum BendGame.EUnawareAnim
enum class EUnawareAnim : uint8_t
{
	ReactionAuto                   = 0,
	ReactionSawSomething           = 1,
	MaxCount                       = 2,
	EUnawareAnim_MAX               = 3
};


// Enum BendGame.ESemiAwareAnim
enum class ESemiAwareAnim : uint8_t
{
	ReactionAuto                   = 0,
	ReactionSawNear                = 1,
	ReactionSawFar                 = 2,
	ReactionSawBody                = 3,
	ReactionHeardNear              = 4,
	ReactionHeardMid               = 5,
	ReactionHeardFar               = 6,
	ReactionNonThreatNear          = 7,
	ReactionNonThreat              = 8,
	ReactionNonThreatFar           = 9,
	ReactionCombatHunt             = 10,
	ReactionBlast                  = 11,
	ReactionRemoteNoise            = 12,
	ArriveLastKnown                = 13,
	ArriveBody                     = 14,
	ArriveBodyNotThere             = 15,
	SecondaryInvest                = 16,
	NothingFound                   = 17,
	AreaSearchBeginSearch          = 18,
	AreaSearchEndSearch            = 19,
	AreaSearchBush                 = 20,
	AreaSearchCoverSlot            = 21,
	AreaSearchCoverPortalInsideOut = 22,
	AreaSearchCoverPortalOutsideIn = 23,
	AreaSearchCoverPortalRoomToRoom = 24,
	AreaSearchTree                 = 25,
	AreaSearchPerimeter            = 26,
	MaxCount                       = 27,
	ESemiAwareAnim_MAX             = 28
};


// Enum BendGame.ESemiAwareActionType
enum class ESemiAwareActionType : uint8_t
{
	Auditory                       = 0,
	Visual                         = 1,
	Body                           = 2,
	ESemiAwareActionType_MAX       = 3
};


// Enum BendGame.EBlindFireAnimMoveStyle
enum class EBlindFireAnimMoveStyle : uint8_t
{
	Unarmed                        = 0,
	TwoHandedLongGun               = 1,
	OneHandedPistol                = 2,
	OneHandThrowing                = 3,
	EBlindFireAnimMoveStyle_MAX    = 4
};


// Enum BendGame.EExplosiveType
enum class EExplosiveType : uint8_t
{
	None                           = 0,
	Pipebomb                       = 1,
	Airbag                         = 2,
	Mine                           = 3,
	Grenade                        = 4,
	Flashbang                      = 5,
	Smoke                          = 6,
	EExplosiveType_MAX             = 7
};


// Enum BendGame.EEquippableSlot
enum class EEquippableSlot : uint8_t
{
	RightHand                      = 0,
	LeftHand                       = 1,
	RightFoot                      = 2,
	LeftFoot                       = 3,
	Head                           = 4,
	FullBody                       = 5,
	BikeImpactWeapon               = 6,
	RollingWeapon                  = 7,
	MaxCount                       = 8,
	EEquippableSlot_MAX            = 9
};


// Enum BendGame.EBendPropGripStyle
enum class EBendPropGripStyle : uint8_t
{
	None                           = 0,
	OneHandedPistol                = 1,
	TwoHandedLongGun               = 2,
	TwoHandedShotgun               = 3,
	TwoHandedHenryBB               = 4,
	TwoHandedMeleeWeapon           = 5,
	Knife                          = 6,
	OneHandedMeleeWeapon           = 7,
	OneHandedHeavyObject           = 8,
	Binoculars                     = 9,
	EBendPropGripStyle_MAX         = 10
};


// Enum BendGame.EBendAnimationSetMovement
enum class EBendAnimationSetMovement : uint8_t
{
	Normal                         = 0,
	BoxCarrier                     = 1,
	BoxBeingCarried                = 2,
	BodyCarrier                    = 3,
	BodyBeingCarried               = 4,
	EBendAnimationSetMovement_MAX  = 5
};


// Enum BendGame.EBendPairedStateMovement
enum class EBendPairedStateMovement : uint8_t
{
	None                           = 0,
	Engage                         = 1,
	Disengage                      = 2,
	Idle                           = 3,
	Move                           = 4,
	EBendPairedStateMovement_MAX   = 5
};


// Enum BendGame.EBendMoveSpeedEnum
enum class EBendMoveSpeedEnum : uint8_t
{
	StoppedOrNearlyStopped         = 0,
	Slow                           = 1,
	Medium                         = 2,
	Fast                           = 3,
	EBendMoveSpeedEnum_MAX         = 4
};


// Enum BendGame.EBendAIThrowableReaction
enum class EBendAIThrowableReaction : uint8_t
{
	None                           = 0,
	Panic                          = 1,
	Dodge                          = 2,
	EBendAIThrowableReaction_MAX   = 3
};


// Enum BendGame.EBendAIReactionZone
enum class EBendAIReactionZone : uint8_t
{
	None                           = 0,
	PreCombat                      = 1,
	Combat                         = 2,
	Retreat                        = 3,
	EBendAIReactionZone_MAX        = 4
};


// Enum BendGame.ETensePose
enum class ETensePose : uint8_t
{
	Relaxed                        = 0,
	Tense                          = 1,
	Stealth                        = 2,
	PunchyCombat                   = 3,
	PreStealthKill                 = 4,
	Combat                         = 5,
	LookAt                         = 6,
	None                           = 7,
	ETensePose_MAX                 = 8
};


// Enum BendGame.EAIMoveSpeed
enum class EAIMoveSpeed : uint8_t
{
	Walk                           = 0,
	FastWalk                       = 1,
	Jog                            = 2,
	Run                            = 3,
	Sprint                         = 4,
	EAIMoveSpeed_MAX               = 5
};


// Enum BendGame.EAimedAnimMoveStyle
enum class EAimedAnimMoveStyle : uint8_t
{
	Unarmed                        = 0,
	TwoHandedLongGun               = 1,
	TwoHandPistol                  = 2,
	OneHandThrowing                = 3,
	OneHandHeavyObject             = 4,
	Trap                           = 5,
	Binoculars                     = 6,
	Rocket                         = 7,
	EAimedAnimMoveStyle_MAX        = 8
};


// Enum BendGame.EBendBloodSplatType
enum class EBendBloodSplatType : uint8_t
{
	None                           = 0,
	Small                          = 1,
	Med                            = 2,
	Shotgun                        = 3,
	EBendBloodSplatType_MAX        = 4
};


// Enum BendGame.EUnaimedAnimMoveStyle
enum class EUnaimedAnimMoveStyle : uint8_t
{
	Unarmed                        = 0,
	OneHandedPistol                = 1,
	TwoHandedLongGun               = 2,
	RightHandMelee                 = 3,
	OneHandThrowing                = 4,
	Trap                           = 5,
	OneHandHeavyObject             = 6,
	Binoculars                     = 7,
	Rocket                         = 8,
	OneHandedMelee                 = 9,
	EUnaimedAnimMoveStyle_MAX      = 10
};


// Enum BendGame.EVocalEventFaceState
enum class EVocalEventFaceState : uint8_t
{
	None                           = 0,
	Attack_Short                   = 1,
	Attack_Medium                  = 2,
	Attack_Long                    = 3,
	Pain_Short                     = 4,
	Pain_Medium                    = 5,
	Pain_Long                      = 6,
	Scream_Short                   = 7,
	Scream_Medium                  = 8,
	Scream_Long                    = 9,
	Death                          = 10,
	EVocalEventFaceState_MAX       = 11
};


// Enum BendGame.EPlayerLocationType
enum class EPlayerLocationType : uint8_t
{
	Inside_Default                 = 0,
	Outside_Default                = 1,
	Water_Wade                     = 2,
	EPlayerLocationType_MAX        = 3
};


// Enum BendGame.EBendEdgeClimbFailedReason
enum class EBendEdgeClimbFailedReason : uint8_t
{
	NoFail                         = 0,
	InvalidCharacterSetup          = 1,
	CarryingObject                 = 2,
	LateralProbeFailed             = 3,
	LateralStartProbeFailed        = 4,
	DidntFindProperClimbAnim       = 5,
	FinalSurfaceInvalid            = 6,
	NPCWasInAir                    = 7,
	ClimbingAlready                = 8,
	InvalidAnimState               = 9,
	EBendEdgeClimbFailedReason_MAX = 10
};


// Enum BendGame.EBendVehicleType
enum class EBendVehicleType : uint8_t
{
	Motorcycle                     = 0,
	GolfCart                       = 1,
	Truck                          = 2,
	EBendVehicleType_MAX           = 3
};


// Enum BendGame.EVehicleAILoopType
enum class EVehicleAILoopType : uint8_t
{
	EBendAIDrive_NoLoop            = 0,
	EBendAIDrive_LoopEndToStart    = 1,
	EBendAIDrive_LoopEndToStartReversed = 2,
	EBendAIDrive_MAX               = 3
};


// Enum BendGame.EVehicleAI
enum class EVehicleAI : uint8_t
{
	kInline                        = 0,
	kOffset                        = 1,
	EVehicleAI_MAX                 = 2
};


// Enum BendGame.EWorldRegions
enum class EWorldRegions : uint8_t
{
	Belknap                        = 0,
	Cascade                        = 1,
	IronButte                      = 2,
	LostLake                       = 3,
	CraterLake                     = 4,
	Higway97                       = 5,
	Tumalo                         = 6,
	EWorldRegions_MAX              = 7
};


// Enum BendGame.EUI_Color_Names
enum class EUI_Color_Names : uint8_t
{
	Light_Blue                     = 0,
	Blue                           = 1,
	Green                          = 2,
	Yellow                         = 3,
	Orange                         = 4,
	Red                            = 5,
	Story                          = 6,
	Encampment                     = 7,
	NERO                           = 8,
	Infestation                    = 9,
	AmbushCamp                     = 10,
	Story_Task                     = 11,
	EUI_Color_MAX                  = 12
};


// Enum BendGame.EDebugPickupType
enum class EDebugPickupType : uint8_t
{
	All                            = 0,
	AmmoAll                        = 1,
	AmmoAssaultRifle               = 2,
	AmmoLightMachineGun            = 3,
	AmmoPistol                     = 4,
	AmmoRifle                      = 5,
	AmmoShotgun                    = 6,
	AmmoSniperRifle                = 7,
	AmmoSubMachineGun              = 8,
	CollectableAll                 = 9,
	ConsumableAll                  = 10,
	ConsumableBerry                = 11,
	ConsumableHerb                 = 12,
	ConsumableMedkit               = 13,
	ConsumableMushroom             = 14,
	CraftComponentAll              = 15,
	UtilityAll                     = 16,
	WeaponAll                      = 17,
	WeaponAssaultRifle             = 18,
	WeaponGuns                     = 19,
	WeaponLightMachineGun          = 20,
	WeaponMelee                    = 21,
	WeaponPistol                   = 22,
	WeaponRifle                    = 23,
	WeaponShotgun                  = 24,
	WeaponSniperRifle              = 25,
	WeaponSpecial                  = 26,
	WeaponSubMachineGun            = 27,
	WeaponThrowable                = 28,
	WeaponTrap                     = 29,
	EDebugPickupType_MAX           = 30
};


// Enum BendGame.EWorldAreas
enum class EWorldAreas : uint8_t
{
	BaseArea                       = 0,
	SantiamPass                    = 1,
	CraterLake                     = 2,
	SistersWilderness              = 3,
	FarwellValley                  = 4,
	MaxCount                       = 5,
	EWorldAreas_MAX                = 6
};


// Enum BendGame.EScreamerPawn_States
enum class EScreamerPawn_States : uint8_t
{
	None                           = 0,
	Unaware                        = 1,
	Semiaware                      = 2,
	Aware                          = 3,
	Hiding                         = 4,
	Fleeing                        = 5,
	Eating                         = 6,
	Blinded                        = 7,
	Frustrated                     = 8,
	OnFire                         = 9,
	EScreamerPawn_MAX              = 10
};


// Enum BendGame.EOverlayType
enum class EOverlayType : uint8_t
{
	None                           = 0,
	Spine                          = 1,
	LeftArm                        = 2,
	RightArm                       = 3,
	BothArms                       = 4,
	MaxCount                       = 5,
	EOverlayType_MAX               = 6
};


// Enum BendGame.EFootForward
enum class EFootForward : uint8_t
{
	Left                           = 0,
	Right                          = 1,
	EFootForward_MAX               = 2
};


// Enum BendGame.EBodyCarryState
enum class EBodyCarryState : uint8_t
{
	None                           = 0,
	Pickup                         = 1,
	Carry                          = 2,
	Drop                           = 3,
	EBodyCarryState_MAX            = 4
};


// Enum BendGame.EStrafeOverride
enum class EStrafeOverride : uint8_t
{
	NoOverride                     = 0,
	ForceStrafe                    = 1,
	ForceNoStrafe                  = 2,
	EStrafeOverride_MAX            = 3
};


// Enum BendGame.EDamageSource
enum class EDamageSource : uint8_t
{
	Enemy                          = 0,
	EnemyPlayer                    = 1,
	Friendly                       = 2,
	Self                           = 3,
	EDamageSource_MAX              = 4
};


// Enum BendGame.ESurfaceOrientation
enum class ESurfaceOrientation : uint8_t
{
	Any                            = 0,
	Vertical                       = 1,
	Horizontal                     = 2,
	ESurfaceOrientation_MAX        = 3
};


// Enum BendGame.EBND150TrophyKillType
enum class EBND150TrophyKillType : uint8_t
{
	None                           = 0,
	GasDart                        = 1,
	ElectricDart                   = 2,
	ExplosiveDart                  = 3,
	Bullet                         = 4,
	Num                            = 5,
	EBND150TrophyKillType_MAX      = 6
};


// Enum BendGame.ETrophyKillType
enum class ETrophyKillType : uint8_t
{
	None                           = 0,
	NormalBolt                     = 1,
	PoisonBolt                     = 2,
	BerserkBolt                    = 3,
	FireBolt                       = 4,
	ExplosiveBolt                  = 5,
	Num                            = 6,
	ETrophyKillType_MAX            = 7
};


// Enum BendGame.EWeaponScariness
enum class EWeaponScariness : uint8_t
{
	NotScary                       = 0,
	KindaScary                     = 1,
	Scary                          = 2,
	ReallyScary                    = 3,
	UltraScary                     = 4,
	PleaseDontKillMe               = 5,
	EWeaponScariness_MAX           = 6
};


// Enum BendGame.EWeaponFireMode
enum class EWeaponFireMode : uint8_t
{
	SingleShot                     = 0,
	Burst                          = 1,
	Automatic                      = 2,
	Thrown                         = 3,
	Melee                          = 4,
	Trap                           = 5,
	Bow                            = 6,
	None                           = 7,
	EWeaponFireMode_MAX            = 8
};


// Enum BendGame.EMeleeUpDownSwingDirection
enum class EMeleeUpDownSwingDirection : uint8_t
{
	SwingingDown                   = 0,
	SwingingStraight               = 1,
	SwingingUp                     = 2,
	EMeleeUpDownSwingDirection_MAX = 3
};


// Enum BendGame.EMeleeSwingDirection
enum class EMeleeSwingDirection : uint8_t
{
	SwingingForward                = 0,
	SwingingRight                  = 1,
	SwingingLeft                   = 2,
	EMeleeSwingDirection_MAX       = 3
};


// Enum BendGame.EReloadState
enum class EReloadState : uint8_t
{
	None                           = 0,
	Start                          = 1,
	ClipRemoved                    = 2,
	Cocked                         = 3,
	ClipInserted                   = 4,
	EReloadState_MAX               = 5
};


// Enum BendGame.EWeaponBonusTypes
enum class EWeaponBonusTypes : uint8_t
{
	Global                         = 0,
	NoScopeZoom                    = 1,
	ScopeZoom                      = 2,
	Crouched                       = 3,
	OnBike                         = 4,
	OnLadder                       = 5,
	InSlocus                       = 6,
	FightOrFlight                  = 7,
	StopItAlready                  = 8,
	CarryMaxAmmo                   = 9,
	StubbornGrip                   = 10,
	MuscleMemory                   = 11,
	NoMoreWobble                   = 12,
	HordeBuster                    = 13,
	PinpointAccuracy               = 14,
	NumBonusTypes                  = 15,
	EWeaponBonusTypes_MAX          = 16
};


// Enum BendGame.ESpecificWpnPartType
enum class ESpecificWpnPartType : uint8_t
{
	None                           = 0,
	SuppressorOilCan               = 1,
	SuppressorMetal                = 2,
	ESpecificWpnPartType_MAX       = 3
};


// Enum BendGame.EWeaponSocketLocation
enum class EWeaponSocketLocation : uint8_t
{
	WSL_Primary0                   = 0,
	WSL_Primary1                   = 1,
	WSL_Secondary                  = 2,
	WSL_Melee                      = 3,
	WSL_BootKnife                  = 4,
	WSL_Heavy                      = 5,
	WSL_MaxCount                   = 6,
	WSL_MAX                        = 7
};


// Enum BendGame.EWeaponState
enum class EWeaponState : uint8_t
{
	Idle                           = 0,
	Firing                         = 1,
	Reloading                      = 2,
	Equipping                      = 3,
	UnEquipping                    = 4,
	EWeaponState_MAX               = 5
};


// Enum BendGame.EBendWorldTier
enum class EBendWorldTier : uint8_t
{
	Tier1                          = 0,
	Tier2                          = 1,
	Tier3                          = 2,
	Tier4                          = 3,
	Tier5                          = 4,
	MaxCount                       = 5,
	EBendWorldTier_MAX             = 6
};


// Enum BendGame.ESpawnImportance
enum class ESpawnImportance : uint8_t
{
	OpenWorld                      = 0,
	Nest                           = 1,
	AmbientEvent                   = 2,
	Job                            = 3,
	Encampment                     = 4,
	Mission                        = 5,
	ObjectiveCritial               = 6,
	Num                            = 7,
	ESpawnImportance_MAX           = 8
};


// Enum BendGame.EWeaponEquipOnSpawn
enum class EWeaponEquipOnSpawn : uint8_t
{
	None                           = 0,
	Primary                        = 1,
	Melee                          = 2,
	EWeaponEquipOnSpawn_MAX        = 3
};


// Enum BendGame.ESpawnPoolTickState
enum class ESpawnPoolTickState : uint8_t
{
	NoTick                         = 0,
	StartLoad                      = 1,
	Loading                        = 2,
	Spawn                          = 3,
	LoadLooks                      = 4,
	LoadingLooks                   = 5,
	SwappingLooks                  = 6,
	ESpawnPoolTickState_MAX        = 7
};


// Enum BendGame.EBendAnimState
enum class EBendAnimState : uint8_t
{
	Invalid                        = 0,
	GroundMovement                 = 1,
	PerformAction                  = 2,
	MeleeAttack                    = 3,
	PairedKill                     = 4,
	FlightMovement                 = 5,
	EBendAnimState_MAX             = 6
};


// Enum BendGame.EBendPerformActionPriority
enum class EBendPerformActionPriority : uint8_t
{
	MIN                            = 0,
	LOW                            = 1,
	MID                            = 2,
	HIGH                           = 3,
	MAX                            = 4,
	EBendPerformActionPriority_MAX = 5
};


// Enum BendGame.ECurrentStateForHitReaction
enum class ECurrentStateForHitReaction : uint8_t
{
	OnGround                       = 0,
	Crouched                       = 1,
	OnBike                         = 2,
	OnLadder                       = 3,
	OnEdge                         = 4,
	Moving                         = 5,
	InCoverHighRight               = 6,
	InCoverHighLeft                = 7,
	InCoverHighRightTransitioning  = 8,
	InCoverHighLeftTransitioning   = 9,
	InCoverHighRightPopOut         = 10,
	InCoverHighLeftPopOut          = 11,
	InCoverLowRight                = 12,
	InCoverLowLeft                 = 13,
	InCoverLowRightTransitioning   = 14,
	InCoverLowLeftTransitioning    = 15,
	InCoverLowRightPopOut          = 16,
	InCoverLowLeftPopOut           = 17,
	InCoverLowLeftPopOutUp         = 18,
	InCoverLowRightPopOutUp        = 19,
	OnAllFours                     = 20,
	OnKnees                        = 21,
	OnStomach                      = 22,
	OnBack                         = 23,
	EnteringCover                  = 24,
	InBearTrap                     = 25,
	Stunned                        = 26,
	InSnareTrap                    = 27,
	PlayerCover                    = 28,
	SittingOnGround                = 29,
	SittingInChair                 = 30,
	ArmorWasHit                    = 31,
	HasArmor                       = 32,
	MeleeStuck                     = 33,
	InPOI                          = 34,
	None                           = 35,
	ECurrentStateForHitReaction_MAX = 36
};


// Enum BendGame.EAnimForceRotation
enum class EAnimForceRotation : uint8_t
{
	NoRotation                     = 0,
	FaceTowardsDamage              = 1,
	FaceAwayDamage                 = 2,
	SnapToAxis                     = 3,
	EAnimForceRotation_MAX         = 4
};


// Enum BendGame.EAnimationSlot
enum class EAnimationSlot : uint8_t
{
	UpperBody                      = 0,
	FullBody                       = 1,
	Additive                       = 2,
	None                           = 3,
	EAnimationSlot_MAX             = 4
};


// Enum BendGame.EDamageAnimationTypes
enum class EDamageAnimationTypes : uint8_t
{
	Small                          = 0,
	Medium                         = 1,
	Large                          = 2,
	None                           = 3,
	EDamageAnimationTypes_MAX      = 4
};


// Enum BendGame.EAudioListenerDistanceTypes
enum class EAudioListenerDistanceTypes : uint8_t
{
	NearDistance                   = 0,
	FarDistance                    = 1,
	DistantNoises                  = 2,
	EAudioListenerDistanceTypes_MAX = 3
};


// Enum BendGame.EAudioListenerWorldObjects
enum class EAudioListenerWorldObjects : uint8_t
{
	Trees                          = 0,
	Rocks                          = 1,
	Foliage                        = 2,
	None                           = 3,
	EAudioListenerWorldObjects_MAX = 4
};


// Enum BendGame.EAudioListenerTypes
enum class EAudioListenerTypes : uint8_t
{
	Trees                          = 0,
	Foliage                        = 1,
	Wildlife                       = 2,
	DistantNoises                  = 3,
	NumListenerTypes               = 4,
	EAudioListenerTypes_MAX        = 5
};


// Enum BendGame.EInteractiveMusicState
enum class EInteractiveMusicState : uint8_t
{
	Silence                        = 0,
	Mood                           = 1,
	Low                            = 2,
	Medium                         = 3,
	High                           = 4,
	Num                            = 5,
	EInteractiveMusicState_MAX     = 6
};


// Enum BendGame.EInteractiveMusicLayer
enum class EInteractiveMusicLayer : uint8_t
{
	Mood                           = 0,
	Low                            = 1,
	Medium                         = 2,
	High                           = 3,
	Num                            = 4,
	EInteractiveMusicLayer_MAX     = 5
};


// Enum BendGame.EMusicPlaybackState
enum class EMusicPlaybackState : uint8_t
{
	None                           = 0,
	Playing                        = 1,
	Paused                         = 2,
	FadeOut                        = 3,
	EMusicPlaybackState_MAX        = 4
};


// Enum BendGame.EMusicPriority
enum class EMusicPriority : uint8_t
{
	Normal                         = 0,
	Medium                         = 1,
	High                           = 2,
	EMusicPriority_MAX             = 3
};


// Enum BendGame.EMusic
enum class EMusic : uint8_t
{
	EventMusic                     = 0,
	InteractiveMusic               = 1,
	OverlayMusic                   = 2,
	EMusic_MAX                     = 3
};


// Enum BendGame.EMusicLayer
enum class EMusicLayer : uint8_t
{
	Primary                        = 0,
	Secondary                      = 1,
	Last                           = 2,
	Overlay                        = 3,
	MaxNum                         = 4,
	EMusicLayer_MAX                = 5
};


// Enum BendGame.EDoorSoundType
enum class EDoorSoundType : uint8_t
{
	None                           = 0,
	DoorOpen                       = 1,
	DoorKickOpen                   = 2,
	DoorChargeOpen                 = 3,
	DoorCloseStart                 = 4,
	DoorCloseEnd                   = 5,
	DoorLocked                     = 6,
	DoorChargeFail                 = 7,
	EDoorSoundType_MAX             = 8
};


// Enum BendGame.EDoorAnimType
enum class EDoorAnimType : uint8_t
{
	None                           = 0,
	Open                           = 1,
	KickOpen                       = 2,
	CloseLeft                      = 3,
	CloseRight                     = 4,
	PushClose                      = 5,
	Locked                         = 6,
	EDoorAnimType_MAX              = 7
};


// Enum BendGame.EDoorHandleType
enum class EDoorHandleType : uint8_t
{
	Knob                           = 0,
	Handle                         = 1,
	Lever                          = 2,
	PushBar                        = 3,
	MaxCount                       = 4,
	EDoorHandleType_MAX            = 5
};


// Enum BendGame.EInventoryItemStat
enum class EInventoryItemStat : uint8_t
{
	Health                         = 0,
	Acceleration                   = 1,
	TopSpeed                       = 2,
	MPG                            = 3,
	AmmoStorage                    = 4,
	DamageReduction                = 5,
	BrakeDistance                  = 6,
	GasCapacity                    = 7,
	LootStorage                    = 8,
	Noise                          = 9,
	Traction                       = 10,
	LightBrightness                = 11,
	FalloffResistance              = 12,
	BoostIncrease                  = 13,
	BoostDuration                  = 14,
	ClipCount                      = 15,
	UseCount                       = 16,
	DamagePerShot                  = 17,
	MaxDamagePerShot               = 18,
	TimeBetweenShots               = 19,
	ClipSize                       = 20,
	Accuracy                       = 21,
	ReloadRate                     = 22,
	NumProjectiles                 = 23,
	Durability                     = 24,
	SpawnedByNPCOrPickup           = 25,
	Rarity                         = 26,
	AppliedWeaponHealthIncrease    = 27,
	MeleeHealthMax                 = 28,
	WeaponAmmoID                   = 29,
	Num                            = 30,
	EInventoryItemStat_MAX         = 31
};


// Enum BendGame.EInventoryItemAction
enum class EInventoryItemAction : uint8_t
{
	None                           = 0,
	Equip                          = 1,
	Consume                        = 2,
	Craft                          = 3,
	Attach                         = 4,
	Drop                           = 5,
	Purchase                       = 6,
	Sell                           = 7,
	Pickup                         = 8,
	PartInstall                    = 9,
	BikeRefuel                     = 10,
	BikeRepair                     = 11,
	ModifyWeapon                   = 12,
	WeaponRepair                   = 13,
	WeaponUpgrade                  = 14,
	DetachWeaponPart               = 15,
	SetWeaponAmmo                  = 16,
	ReloadWeapon                   = 17,
	ReloadBike                     = 18,
	MechanicPreviewMode_Enter      = 19,
	MechanicPreviewMode_Exit       = 20,
	ApplyBikeSkin                  = 21,
	Num                            = 22,
	EInventoryItemAction_MAX       = 23
};


// Enum BendGame.EInventoryItemSound
enum class EInventoryItemSound : uint8_t
{
	OnUse                          = 0,
	OnEquip                        = 1,
	OnPickup                       = 2,
	OnDrop                         = 3,
	OnEnterBag                     = 4,
	VODeconUse                     = 5,
	VODeconPickup                  = 6,
	VODeconDrop                    = 7,
	Num                            = 8,
	EInventoryItemSound_MAX        = 9
};


// Enum BendGame.EInventoryItemFlag
enum class EInventoryItemFlag : uint8_t
{
	NoSell                         = 0,
	NoDrop                         = 1,
	CarryOnly                      = 2,
	MissionItem                    = 3,
	UsedInRecipe                   = 4,
	EInventoryItemFlag_MAX         = 5
};


// Enum BendGame.EBendDoorState
enum class EBendDoorState : uint8_t
{
	OpeningCW                      = 0,
	OpenCW                         = 1,
	ClosingCW                      = 2,
	Closed                         = 3,
	OpeningCCW                     = 4,
	OpenCCW                        = 5,
	ClosingCCW                     = 6,
	EBendDoorState_MAX             = 7
};


// Enum BendGame.EFoliageType
enum class EFoliageType : uint8_t
{
	Tree                           = 0,
	Shrub                          = 1,
	Grass                          = 2,
	Rock                           = 3,
	Shrub_Leafy                    = 4,
	Shrub_Branches                 = 5,
	EFoliageType_MAX               = 6
};


// Enum BendGame.ERadioType
enum class ERadioType : uint8_t
{
	Default                        = 0,
	Boozer                         = 1,
	Bike                           = 2,
	Nero                           = 3,
	Boozer_Toy                     = 4,
	Rikki_ALL                      = 5,
	ERadioType_MAX                 = 6
};


// Enum BendGame.EPreSendFilterType
enum class EPreSendFilterType : uint8_t
{
	None                           = 0,
	LowPass                        = 1,
	HighPass                       = 2,
	AllPass                        = 3,
	BandPass                       = 4,
	Notch                          = 5,
	Peaking                        = 6,
	LowShelf                       = 7,
	HighShelf                      = 8,
	EPreSendFilterType_MAX         = 9
};


// Enum BendGame.EBendAnimNotifyEarlyExitType
enum class EBendAnimNotifyEarlyExitType : uint8_t
{
	Generic                        = 0,
	MoveStart                      = 1,
	MoveStopOrPivot                = 2,
	Fall                           = 3,
	FootSync                       = 4,
	Crouch                         = 5,
	Always                         = 6,
	DamageRecovery                 = 7,
	MovePivot                      = 8,
	MoveStartVehicle               = 9,
	Combat                         = 10,
	FreeDodge                      = 11,
	DeathRagdoll                   = 12,
	Unused13                       = 13,
	Num                            = 14,
	EBendAnimNotifyEarlyExitType_MAX = 15
};


// Enum BendGame.EBendAnimStateEvent
enum class EBendAnimStateEvent : uint8_t
{
	Entered                        = 0,
	Left                           = 1,
	FullyBlended                   = 2,
	MAX                            = 3,
	EBendAnimStateEvent_MAX        = 4
};


// Enum BendGame.EBendAnimTransitionEvent
enum class EBendAnimTransitionEvent : uint8_t
{
	Start                          = 0,
	End                            = 1,
	Interrupt                      = 2,
	MAX                            = 3,
	EBendAnimTransitionEvent_MAX   = 4
};


// Enum BendGame.EBendRVOGroups
enum class EBendRVOGroups : uint8_t
{
	RVO_Default                    = 0,
	RVO_Vehicle_Player             = 1,
	RVO_Vehicle_Buddy              = 2,
	RVO_Vehicle_NPC                = 3,
	RVO_Vehicle_NoDriver           = 4,
	RVO_Generic_CantMoveItself     = 5,
	RVO_Vehicle_Pacing             = 6,
	RVO_Vehicle_BuddyCurrentInteract = 7,
	RVO_ALL                        = 8,
	RVO_NONE                       = 9,
	RVO_MAX                        = 10
};


// Enum BendGame.ECharacterClass
enum class ECharacterClass : uint8_t
{
	Human                          = 0,
	Freaker                        = 1,
	Animal                         = 2,
	UniqueFreaker                  = 3,
	ECharacterClass_MAX            = 4
};


// Enum BendGame.EMapZoom
enum class EMapZoom : uint8_t
{
	Level                          = 0,
	Level01                        = 1,
	Level02                        = 2,
	Level03                        = 3,
	Level04                        = 4,
	Level_MAX                      = 5
};


// Enum BendGame.EMiniMapLocationEvent
enum class EMiniMapLocationEvent : uint8_t
{
	NewLocation                    = 0,
	EMiniMapLocationEvent_MAX      = 1
};


// Enum BendGame.EMiniMapLocationState
enum class EMiniMapLocationState : uint8_t
{
	None                           = 0,
	SafeHouseSecured               = 1,
	Secured                        = 2,
	EMiniMapLocationState_MAX      = 3
};


// Enum BendGame.EMiniMapEdgeDistance
enum class EMiniMapEdgeDistance : uint8_t
{
	Infinite                       = 0,
	Large                          = 1,
	Medium                         = 2,
	Small                          = 3,
	EMiniMapEdgeDistance_MAX       = 4
};


// Enum BendGame.EMiniMapEdgeDisplay
enum class EMiniMapEdgeDisplay : uint8_t
{
	Off                            = 0,
	On                             = 1,
	EMiniMapEdgeDisplay_MAX        = 2
};


// Enum BendGame.EMiniMapDisplayRule
enum class EMiniMapDisplayRule : uint8_t
{
	AlwaysVisible                  = 0,
	OnlyVisibleInEncampments       = 1,
	HiddenInEncampments            = 2,
	AlwaysHidden                   = 3,
	EMiniMapDisplayRule_MAX        = 4
};


// Enum BendGame.EMapRolloverType
enum class EMapRolloverType : uint8_t
{
	Objective                      = 0,
	Encampment                     = 1,
	EncampmentJob                  = 2,
	AmbushCamp                     = 3,
	InfestationZone                = 4,
	NeroCheckpoint                 = 5,
	Featured                       = 6,
	Basic                          = 7,
	ObjectiveTask                  = 8,
	EMapRolloverType_MAX           = 9
};


// Enum BendGame.EMiniMapLocation
enum class EMiniMapLocation : uint8_t
{
	Player                         = 0,
	Motorcycle                     = 1,
	Enemy                          = 2,
	Nest                           = 3,
	Objective                      = 4,
	SideObjective                  = 5,
	SafeHouse                      = 6,
	FuelSupply                     = 7,
	Merchant                       = 8,
	MapWaypoint                    = 9,
	CustomMapMarker                = 10,
	ObjectiveRegion                = 11,
	DeadFriend                     = 12,
	NestZone                       = 13,
	Mission                        = 14,
	Job                            = 15,
	JobObjective                   = 16,
	Bunker                         = 17,
	Encampment                     = 18,
	CampSite                       = 19,
	HistoricalMarker               = 20,
	NeroCheckpoint                 = 21,
	AmbushCamp                     = 22,
	Plant                          = 23,
	DeadBody                       = 24,
	AmbushZone                     = 25,
	Collectible                    = 26,
	TrackingClue                   = 27,
	JobGiver                       = 28,
	Num                            = 29,
	EMiniMapLocation_MAX           = 30
};


// Enum BendGame.ENGPCarryOverDataVersion
enum class ENGPCarryOverDataVersion : uint8_t
{
	VER_NGP_SAV_INVALID_VERSION    = 0,
	VER_NGP_SAV_INITIAL_VERSION    = 1,
	VER_NGP_SAV_COLLECTIBLES_VERSION = 2,
	VER_NGP_SAV_TASER_UNLOCK_VERSION = 3,
	VER_NGP_SAV_UNSPENT_SKILL_POINTS_VERSION = 4,
	VER_NGP_SAV_XPLEVEL_VERSION    = 5,
	VER_NGP_SAV_RECIPES_VERSION    = 6,
	VER_NGP_SAV_TROPHY_VERSION     = 7,
	VER_NGP_SAV_TROPHY_WITH_DATABSE_VERSION = 8,
	VER_NGP_SAV_TROPHY_ADDED_MISSING_ONES_VERSION = 9,
	VER_NGP_SAV_WEAPON_PARTS_ADDED_VERSION = 10,
	VER_NGP_SAV_AUTOMATIC_VERSION_PLUS_ONE = 11,
	VER_NGP_SAV_MAX                = 12
};


// Enum BendGame.EGameDataType
enum class EGameDataType : uint8_t
{
	EGameDataType_Bool             = 0,
	EGameDataType_Int              = 1,
	EGameDataType_Float            = 2,
	EGameDataType_String           = 3,
	EGameDataType_FVector          = 4,
	EGameDataType_MAX              = 5
};


// Enum BendGame.EGameDatabaseCategory
enum class EGameDatabaseCategory : uint8_t
{
	EGameDataCategory_GameState    = 0,
	EGameDataCategory_Statistics   = 1,
	EGameDataCategory_NPC          = 2,
	EGameDataCategory_Location     = 3,
	EGameDataCategory_Events       = 4,
	EGameDataCategory_Unlocks      = 5,
	EGameDataCategory_Misc         = 6,
	EGameDataCategory_MAX          = 7
};


// Enum BendGame.EBendVehiclePartLevel
enum class EBendVehiclePartLevel : uint8_t
{
	Level0                         = 0,
	Level1                         = 1,
	Level2                         = 2,
	Level3                         = 3,
	Level4                         = 4,
	Level5                         = 5,
	Level6                         = 6,
	Level7                         = 7,
	Level8                         = 8,
	Level9                         = 9,
	Level10                        = 10,
	Level11                        = 11,
	Level12                        = 12,
	Level13                        = 13,
	Level14                        = 14,
	Level15                        = 15,
	EBendVehiclePartLevel_MAX      = 16
};


// Enum BendGame.EStoryLineRewardType
enum class EStoryLineRewardType : uint8_t
{
	UNCATEGORIZED                  = 0,
	BikeSkin                       = 1,
	LockerWeapon                   = 2,
	Recipe                         = 3,
	Collectible                    = 4,
	BikePart                       = 5,
	WeaponPart                     = 6,
	MagazineUpgrade                = 7,
	PhotoModeFilter                = 8,
	Trophy                         = 9,
	EStoryLineRewardType_MAX       = 10
};


// Enum BendGame.EStoryLineState
enum class EStoryLineState : uint8_t
{
	NotDiscovered                  = 0,
	Discovered                     = 1,
	Completed                      = 2,
	Failed                         = 3,
	EStoryLineState_MAX            = 4
};


// Enum BendGame.EDebugDemoTypes
enum class EDebugDemoTypes : uint8_t
{
	NoDemo                         = 0,
	PublicDemo                     = 1,
	PrivateDemo                    = 2,
	TestDemo                       = 3,
	EDebugDemoTypes_MAX            = 4
};


// Enum BendGame.EMissionPreReqFailureReasons
enum class EMissionPreReqFailureReasons : uint8_t
{
	ReLockReqs                     = 0,
	AutoFailReqs                   = 1,
	JobReqs                        = 2,
	MissionReqs                    = 3,
	TimeToWaitReqs                 = 4,
	ConditionsReqs                 = 5,
	DistanceReqs                   = 6,
	EMissionPreReqFailureReasons_MAX = 7
};


// Enum BendGame.EMissionFailureType
enum class EMissionFailureType : uint8_t
{
	Distance_TooFarFromSpecificSubject = 0,
	Distance_LeavingBehindSpecificSubject = 1,
	Distance_LeavingArea           = 2,
	Death                          = 3,
	Caught                         = 4,
	KilledByPlayer                 = 5,
	OutOfTranqAmmo                 = 6,
	MadeTooMuchNoise               = 7,
	ManualRestart                  = 8,
	Alerted                        = 9,
	RanAway                        = 10,
	DLCChallengeRestart            = 11,
	EMissionFailureType_MAX        = 12
};


// Enum BendGame.EMissionFailureSubject
enum class EMissionFailureSubject : uint8_t
{
	Default_Area                   = 0,
	Boozer                         = 1,
	Lisa                           = 2,
	Rikki                          = 3,
	IronMike                       = 4,
	Sarah                          = 5,
	Skizzo                         = 6,
	Kouri                          = 7,
	Colonel                        = 8,
	Bike                           = 9,
	Player                         = 10,
	Nero                           = 11,
	Generic                        = 12,
	Helicopter                     = 13,
	Guards                         = 14,
	Rippers                        = 15,
	Marauders                      = 16,
	Researcher                     = 17,
	Obrian                         = 18,
	Weaver                         = 19,
	Militia                        = 20,
	Deer                           = 21,
	Horde                          = 22,
	Hostage                        = 23,
	Russell                        = 24,
	Mullins                        = 25,
	EMissionFailureSubject_MAX     = 26
};


// Enum BendGame.EObjectiveAttachTypes
enum class EObjectiveAttachTypes : uint8_t
{
	NONE                           = 0,
	Pawn                           = 1,
	Bike                           = 2,
	Helicopter                     = 3,
	GenericObject                  = 4,
	ObjectiveRegion                = 5,
	EObjectiveAttachTypes_MAX      = 6
};


// Enum BendGame.EMissionCategories
enum class EMissionCategories : uint8_t
{
	Uncategorized                  = 0,
	Prologue                       = 1,
	Episode                        = 2,
	Episode01                      = 3,
	Episode02                      = 4,
	Episode03                      = 5,
	Episode04                      = 6,
	Episode05                      = 7,
	Episode06                      = 8,
	Episode07                      = 9,
	Episode08                      = 10,
	Episode09                      = 11,
	Epilogue                       = 12,
	Copelands_Camp                 = 13,
	Salome_Hotsprings              = 14,
	Pinnacles                      = 15,
	Iron_Mikes                     = 16,
	Demo                           = 17,
	Miscellaneous                  = 18,
	Boozer                         = 19,
	Crater_Lake                    = 20,
	Diamond_Lake                   = 21,
	EMissionCategories_MAX         = 22
};


// Enum BendGame.EMissionStates
enum class EMissionStates : uint8_t
{
	Locked                         = 0,
	Unlocked                       = 1,
	Active                         = 2,
	Paused                         = 3,
	Completed                      = 4,
	Failed                         = 5,
	EMissionStates_MAX             = 6
};


// Enum BendGame.EObjectiveVisualType
enum class EObjectiveVisualType : uint8_t
{
	Basic                          = 0,
	Kill_VIP                       = 1,
	Kill_Area                      = 2,
	Defend                         = 3,
	Defend_Area                    = 4,
	Search_Area                    = 5,
	Track_Area                     = 6,
	No_Kill                        = 7,
	Nero_Research                  = 8,
	EObjectiveVisualType_MAX       = 9
};


// Enum BendGame.ERewardScreenType
enum class ERewardScreenType : uint8_t
{
	Accept                         = 0,
	Reward                         = 1,
	ERewardScreenType_MAX          = 2
};


// Enum BendGame.EObjectiveHudState
enum class EObjectiveHudState : uint8_t
{
	Update                         = 0,
	New                            = 1,
	Travel                         = 2,
	UpdateData                     = 3,
	Remove                         = 4,
	Complete                       = 5,
	Failed                         = 6,
	Override                       = 7,
	HideOverride                   = 8,
	EObjectiveHudState_MAX         = 9
};


// Enum BendGame.EObjectiveCategories
enum class EObjectiveCategories : uint8_t
{
	Story                          = 0,
	Encampment                     = 1,
	Infestation_Zone               = 2,
	Ambush_Camp                    = 3,
	Nero_Checkpoint                = 4,
	Killed_NPC                     = 5,
	NestDestroyed                  = 6,
	Horde                          = 7,
	Encampment_Mission             = 8,
	Task                           = 9,
	None                           = 10,
	EObjectiveCategories_MAX       = 11
};


// Enum BendGame.EObjectiveType
enum class EObjectiveType : uint8_t
{
	RequiredObjective              = 0,
	SideObjective                  = 1,
	EObjectiveType_MAX             = 2
};


// Enum BendGame.ECinematicForceStreamingType
enum class ECinematicForceStreamingType : uint8_t
{
	UseDistanceCheck               = 0,
	ForceSynchronousStreaming      = 1,
	NeverForceSynchronousStreaming = 2,
	ECinematicForceStreamingType_MAX = 3
};


// Enum BendGame.ECinematicFadingColors
enum class ECinematicFadingColors : uint8_t
{
	Black                          = 0,
	White                          = 1,
	ECinematicFadingColors_MAX     = 2
};


// Enum BendGame.ECinematicHidingTypes
enum class ECinematicHidingTypes : uint8_t
{
	HidePawns                      = 0,
	UnHidePawns                    = 1,
	DoNothing                      = 2,
	ECinematicHidingTypes_MAX      = 3
};


// Enum BendGame.ECinematicFadingTypes
enum class ECinematicFadingTypes : uint8_t
{
	None                           = 0,
	Intro                          = 1,
	MidLevel                       = 2,
	Ending                         = 3,
	FadeOnly                       = 4,
	ECinematicFadingTypes_MAX      = 5
};


// Enum BendGame.EStoryLines
enum class EStoryLines : uint8_t
{
	Uncategorized                  = 0,
	Sarah_Part1                    = 1,
	Sarah_Part2                    = 2,
	Boozer_Part1                   = 3,
	Boozer_Part2                   = 4,
	Nero                           = 5,
	Rippers                        = 6,
	CopelandsAndHotsprings         = 7,
	Leon                           = 8,
	Lisa                           = 9,
	LostLakeEarningKeep            = 10,
	Rikki                          = 11,
	Addy                           = 12,
	IronMike                       = 13,
	Skizzo                         = 14,
	ProtectLostLake                = 15,
	Kouri                          = 16,
	Taylor                         = 17,
	Colonel                        = 18,
	Weaver                         = 19,
	StopTheMilitia                 = 20,
	SurvivorRescues                = 21,
	BikeChaseAndBounties           = 22,
	InfestationZones               = 23,
	AmbushCamps                    = 24,
	Horde                          = 25,
	NeroIntel                      = 26,
	EnemyCamps                     = 27,
	Militia                        = 28,
	MAX_STORYLINE                  = 29,
	EStoryLines_MAX                = 30
};


// Enum BendGame.EInventoryPickupAnimState
enum class EInventoryPickupAnimState : uint8_t
{
	None                           = 0,
	Begin                          = 1,
	Middle                         = 2,
	End                            = 3,
	EInventoryPickupAnimState_MAX  = 4
};


// Enum BendGame.EPairedKillType
enum class EPairedKillType : uint8_t
{
	TargetStandingAttackerStanding = 0,
	TargetStandingAttackerCrouched = 1,
	TargetStandingAttackerIsHiding = 2,
	TargetCrouchedAttackerStanding = 3,
	TargetCrouchedAttackerCrouched = 4,
	TargetCrouchedAttackerIsHiding = 5,
	TargetTrappedAttackerStanding  = 6,
	TargetFacingAttackerInCornerCoverRight = 7,
	TargetAwayAttackerInCornerCoverRight = 8,
	TargetFacingAttackerInCornerCoverLeft = 9,
	TargetAwayAttackerInCornerCoverLeft = 10,
	TargetFacingAttackerInLowCover = 11,
	TargetAwayAttackerInLowCover   = 12,
	TargetFacingAttackerInLowCornerCoverRight = 13,
	TargetAwayAttackerInLowCornerCoverRight = 14,
	TargetFacingAttackerInLowCornerCoverLeft = 15,
	TargetAwayAttackerInLowCornerCoverLeft = 16,
	MeleeDeathBlow                 = 17,
	MeleeDeathBlowFists            = 18,
	MeleeDeathBlowSharp            = 19,
	MeleeDeathBlowBlunt            = 20,
	MeleeDeathBlowSharpTwoHand     = 21,
	MeleeDeathBlowBluntTwoHand     = 22,
	MeleeDeathBlowBehind           = 23,
	MeleeDeathBlowBehindFists      = 24,
	MeleeDeathBlowBehindSharp      = 25,
	MeleeDeathBlowBehindBlunt      = 26,
	MeleeDeathBlowBehindSharpTwoHand = 27,
	MeleeDeathBlowBehindBluntTwoHand = 28,
	MaxCount                       = 29,
	EPairedKillType_MAX            = 30
};


// Enum BendGame.ECoolMeleeType
enum class ECoolMeleeType : uint8_t
{
	None                           = 0,
	LastManKill                    = 1,
	WallKill                       = 2,
	TableKill                      = 3,
	CliffKill                      = 4,
	ECoolMeleeType_MAX             = 5
};


// Enum BendGame.EMeleeAttackBasedOnHeight
enum class EMeleeAttackBasedOnHeight : uint8_t
{
	None                           = 0,
	HighAttack                     = 1,
	MiddleAttack                   = 2,
	LowAttack                      = 3,
	OverheadAttack                 = 4,
	GroundAttack                   = 5,
	EMeleeAttackBasedOnHeight_MAX  = 6
};


// Enum BendGame.EMeleeRingType
enum class EMeleeRingType : uint8_t
{
	Close                          = 0,
	Far                            = 1,
	EMeleeRingType_MAX             = 2
};


// Enum BendGame.EBendAnimStates
enum class EBendAnimStates : uint8_t
{
	GroundMovement                 = 0,
	Falling                        = 1,
	Jumping                        = 2,
	Ladder                         = 3,
	PerformAction                  = 4,
	MeleeAttack                    = 5,
	Grapple                        = 6,
	PairedKill                     = 7,
	Cover                          = 8,
	Bike                           = 9,
	Ragdoll                        = 10,
	Sliding                        = 11,
	SprintSliding                  = 12,
	EdgeTraversal                  = 13,
	Dodge                          = 14,
	Damage                         = 15,
	FallStumble                    = 16,
	FreeDodge                      = 17,
	Perching                       = 18,
	FlightMovement                 = 19,
	BodyCarry                      = 20,
	DodgeMiss                      = 21,
	Swimming                       = 22,
	Max                            = 23,
	EBendAnimStates_MAX            = 24
};


// Enum BendGame.EBendCrowdAwarenessZone_AwareDistVsFrenzyAlphaPower
enum class EBendCrowdAwarenessZone_AwareDistVsFrenzyAlphaPower : uint8_t
{
	FirstPower                     = 0,
	SecondPower                    = 1,
	ThirdPower                     = 2,
	FourthPower                    = 3,
	FifthPower                     = 4,
	EBendCrowdAwarenessZone_MAX    = 5
};


// Enum BendGame.EBendCrowdAwarenessTriggerType
enum class EBendCrowdAwarenessTriggerType : uint8_t
{
	Prey                           = 0,
	Sound                          = 1,
	Damage                         = 2,
	IntruderSighted                = 3,
	DeadBody                       = 4,
	Max                            = 5,
	EBendCrowdAwarenessTriggerType_MAX = 6
};


// Enum BendGame.ECalloutWidgetType
enum class ECalloutWidgetType : uint8_t
{
	EDefault                       = 0,
	EBuddy                         = 1,
	EFriendly                      = 2,
	EHostile                       = 3,
	ETarget                        = 4,
	ENERO                          = 5,
	EAnimal                        = 6,
	EFreaker                       = 7,
	EInteract                      = 8,
	EStory                         = 9,
	EJobGiver                      = 10,
	ENoiseAlert                    = 11,
	EPoison                        = 12,
	EBerserk                       = 13,
	EBuddywarning                  = 14,
	EAwareSuspicious               = 15,
	EAware_Alert                   = 16,
	ENERO_Researcher               = 17,
	ENo_Kill                       = 18,
	ECalloutWidgetType_MAX         = 19
};


// Enum BendGame.eHitReactionType
enum class EeHitReactionType : uint8_t
{
	Light                          = 0,
	Normal                         = 1,
	Hard                           = 2,
	eHitReactionType_MAX           = 3
};


// Enum BendGame.EMeleeAttackType
enum class EMeleeAttackType : uint8_t
{
	Normal                         = 0,
	Kill                           = 1,
	KillQuick                      = 2,
	KillStunState                  = 3,
	KillBrutalStunState            = 4,
	KillWithBrokenWeapon           = 5,
	KillWallContextual             = 6,
	KillTableContextual            = 7,
	KillCliffContextual            = 8,
	AttackWallContextual           = 9,
	AttackTableContextual          = 10,
	AttackCliffContextual          = 11,
	DodgedByEnemy                  = 12,
	DodgingEnemySwing              = 13,
	EMeleeAttackType_MAX           = 14
};


// Enum BendGame.EMeleeAttackBaseType
enum class EMeleeAttackBaseType : uint8_t
{
	Swing                          = 0,
	MissSwing                      = 1,
	KillSwing                      = 2,
	StunSwing                      = 3,
	Dodge                          = 4,
	EMeleeAttackBaseType_MAX       = 5
};


// Enum BendGame.EBendCoverTestParams
enum class EBendCoverTestParams : uint8_t
{
	AdvanceSearch                  = 0,
	AdvanceSearchMelee             = 1,
	CombatHuntSearch               = 2,
	CombatSearch                   = 3,
	HidingSearch                   = 4,
	RetreatSearch                  = 5,
	FlankSearch                    = 6,
	CoveringSearch                 = 7,
	RepositioningSearch            = 8,
	DisentangleFrontlineSearch     = 9,
	MoveToDZ                       = 10,
	MoveToFL                       = 11,
	EBendCoverTestParams_MAX       = 12
};


// Enum BendGame.ETargetLocationType
enum class ETargetLocationType : uint8_t
{
	AdvanceTarget                  = 0,
	AmbushPoint                    = 1,
	Target                         = 2,
	EnemyCOG                       = 3,
	ETargetLocationType_MAX        = 4
};


// Enum BendGame.EBendCoverMoveVerificationPackages
enum class EBendCoverMoveVerificationPackages : uint8_t
{
	Advancing                      = 0,
	CombatEnclosedSpace            = 1,
	CombatFortification            = 2,
	CombatSquad                    = 3,
	CombatSquadHome                = 4,
	Covering                       = 5,
	CoveringOffFrontline           = 6,
	DisentangleFrontline           = 7,
	Flanking                       = 8,
	Hiding                         = 9,
	MeleeAdvance                   = 10,
	MoveToDZ                       = 11,
	MoveToFL                       = 12,
	Retreat                        = 13,
	Default                        = 14,
	Suppressed                     = 15,
	Count                          = 16,
	Invalid                        = 17,
	EBendCoverMoveVerificationPackages_MAX = 18
};


// Enum BendGame.EBendCoverVerificationPackages
enum class EBendCoverVerificationPackages : uint8_t
{
	Advancing                      = 0,
	CombatEnclosedSpace            = 1,
	CombatFortification            = 2,
	CombatSquad                    = 3,
	CombatSquadHome                = 4,
	Covering                       = 5,
	CoveringOffFrontLine           = 6,
	DisentangleFrontline           = 7,
	Flanking                       = 8,
	Hiding                         = 9,
	MeleeAdvance                   = 10,
	MoveToDZ                       = 11,
	MoveToFL                       = 12,
	Retreat                        = 13,
	Suppressed                     = 14,
	Default                        = 15,
	Count                          = 16,
	Invalid                        = 17,
	EBendCoverVerificationPackages_MAX = 18
};


// Enum BendGame.EBendCoverTestPackages
enum class EBendCoverTestPackages : uint8_t
{
	AdvanceSearch                  = 0,
	AdvanceSearchMelee             = 1,
	CombatSearch                   = 2,
	CombatSearchBuddy              = 3,
	CombatEnclosedSpace            = 4,
	CombatFortification            = 5,
	CombatSquad                    = 6,
	CombatSquadHome                = 7,
	CombatHuntAdvance              = 8,
	CombatHuntFlank                = 9,
	CombatHuntHide                 = 10,
	CombatHuntSearch               = 11,
	CoveringSearch                 = 12,
	CoveringSearchOffFrontLine     = 13,
	DisentangleFrontlineSearch     = 14,
	FlankSearch                    = 15,
	HidingSearch                   = 16,
	MoveToDZ                       = 17,
	MoveToFL                       = 18,
	RepositioningSearch            = 19,
	RepositioningSearchBehind      = 20,
	RepositioningSearchInFront     = 21,
	RetreatSearch                  = 22,
	RetreatSearchHome              = 23,
	Suppressed                     = 24,
	ModificationBehindQuerier      = 25,
	ModificationInFrontOfQuerier   = 26,
	ModificationInFrontOfAndBehindQuerier = 27,
	ModificationLOS                = 28,
	Default                        = 29,
	Count                          = 30,
	Invalid                        = 31,
	EBendCoverTestPackages_MAX     = 32
};


// Enum BendGame.EBendCoverTestParameters
enum class EBendCoverTestParameters : uint8_t
{
	BehindQuerier                  = 0,
	BehindTarget                   = 1,
	BuddyCombatRange               = 2,
	BuddyWithinCombatRadius        = 3,
	CanAimAtTarget                 = 4,
	DistanceToFriend               = 5,
	DistanceFromThreats            = 6,
	DistanceFromUnavailableCover   = 7,
	DistanceTo                     = 8,
	DistanceToTarget               = 9,
	DistanceToLane                 = 10,
	FrontLine                      = 11,
	FlankFrontLine                 = 12,
	NearFrontLine                  = 13,
	OnFrontLine                    = 14,
	OpenBackFrontLine              = 15,
	InAdvanceRange                 = 16,
	InDefendZone                   = 17,
	InDefendZoneAlwaysTest         = 18,
	InFrontOfQuerier               = 19,
	InFrontOfTarget                = 20,
	InIdealRange                   = 21,
	IsCovered                      = 22,
	IsCoveredHiding                = 23,
	IsCoveredTarget                = 24,
	IsPortal                       = 25,
	IsSafe                         = 26,
	LOSToTarget                    = 27,
	NonTree                        = 28,
	NotInNoMansLandOrEnemyTerritory = 29,
	NotPrevious                    = 30,
	NotRecentlyVacated             = 31,
	PathDistance                   = 32,
	PathReachable                  = 33,
	ProvidesCover                  = 34,
	Count                          = 35,
	EBendCoverTestParameters_MAX   = 36
};


// Enum BendGame.ECoverAnimDirection
enum class ECoverAnimDirection : uint8_t
{
	Left                           = 0,
	Right                          = 1,
	UpLeft                         = 2,
	UpRight                        = 3,
	UpLeftOver                     = 4,
	UpRightOver                    = 5,
	ECoverAnimDirection_MAX        = 6
};


// Enum BendGame.ECoverAnimGroup
enum class ECoverAnimGroup : uint8_t
{
	Idle                           = 0,
	Peek                           = 1,
	StepOut                        = 2,
	StepIn                         = 3,
	Aim                            = 4,
	ChangeDirection                = 5,
	ECoverAnimGroup_MAX            = 6
};


// Enum BendGame.EBendAnimFaceExpressionMood
enum class EBendAnimFaceExpressionMood : uint8_t
{
	Neutral                        = 0,
	Tense                          = 1,
	Crazed                         = 2,
	Dazed                          = 3,
	Effort                         = 4,
	Exhausted                      = 5,
	Fear                           = 6,
	Focus                          = 7,
	Happy                          = 8,
	Injured                        = 9,
	KillEffort                     = 10,
	Struggle                       = 11,
	Unused0                        = 12,
	Unused1                        = 13,
	Unused2                        = 14,
	Unused3                        = 15,
	Max                            = 16,
	EBendAnimFaceExpressionMood_MAX = 17
};


// Enum BendGame.EBendAnimFaceExpression
enum class EBendAnimFaceExpression : uint8_t
{
	Pain                           = 0,
	Attack                         = 1,
	Impact                         = 2,
	Dazed                          = 3,
	Fear                           = 4,
	EffortEnd                      = 5,
	YellLong                       = 6,
	YellShort                      = 7,
	Unused0                        = 8,
	Unused1                        = 9,
	Unused2                        = 10,
	Unused3                        = 11,
	EBendAnimFaceExpression_MAX    = 12
};


// Enum BendGame.EImpactEvent_Notify_Enum_Force
enum class EImpactEvent_Notify_Enum_Force : uint8_t
{
	Heavy                          = 0,
	Normal                         = 1,
	Soft                           = 2,
	EImpactEvent_Notify_Enum_MAX   = 3
};


// Enum BendGame.EImpactEvent_Notify_Enum_BodyPartSide
enum class EImpactEvent_Notify_Enum_BodyPartSide : uint8_t
{
	Right                          = 0,
	Left                           = 1,
	None                           = 2,
	EImpactEvent_Notify_Enum_MAX   = 3
};


// Enum BendGame.EImpactEvent_Notify_Enum_BodyPart
enum class EImpactEvent_Notify_Enum_BodyPart : uint8_t
{
	Foot                           = 0,
	Hand                           = 1,
	Body                           = 2,
	Legbrush                       = 3,
	MaxCount                       = 4,
	EImpactEvent_Notify_Enum_MAX   = 5
};


// Enum BendGame.EImpactEvent_Notify_Enum_Type
enum class EImpactEvent_Notify_Enum_Type : uint8_t
{
	scuff                          = 0,
	bodyfall                       = 1,
	step                           = 2,
	hand_pat                       = 3,
	jump                           = 4,
	land                           = 5,
	slide                          = 6,
	bodyfall_newt                  = 7,
	step_stealth_newt              = 8,
	scuff_newt                     = 9,
	slide_newt                     = 10,
	step_newt                      = 11,
	step_deer                      = 12,
	step_big                       = 13,
	bodyfall_big                   = 14,
	scuff_big                      = 15,
	land_big                       = 16,
	jump_claw                      = 17,
	land_claw                      = 18,
	step_rager                     = 19,
	bodyfall_deer                  = 20,
	bodyfall_paw                   = 21,
	bodyfall_claw                  = 22,
	step_paw                       = 23,
	step_claw                      = 24,
	jump_big                       = 25,
	jump_deer                      = 26,
	jump_paw                       = 27,
	land_deer                      = 28,
	land_paw                       = 29,
	foo                            = 30,
	MaxCount                       = 31,
	EImpactEvent_Notify_Enum_MAX   = 32
};


// Enum BendGame.EVocalEvent_Notify_Enum_Force
enum class EVocalEvent_Notify_Enum_Force : uint8_t
{
	Loud                           = 0,
	Soft                           = 1,
	Quiet                          = 2,
	EVocalEvent_Notify_Enum_MAX    = 3
};


// Enum BendGame.EVocalEvent_Notify_Enum_Amount
enum class EVocalEvent_Notify_Enum_Amount : uint8_t
{
	Random                         = 0,
	Quick                          = 1,
	Short                          = 2,
	Long                           = 3,
	EVocalEvent_Notify_Enum_MAX    = 4
};


// Enum BendGame.EInputInteractState
enum class EInputInteractState : uint8_t
{
	None                           = 0,
	WaitingForInput                = 1,
	InProgress                     = 2,
	Completed                      = 3,
	Aborted                        = 4,
	EInputInteractState_MAX        = 5
};


// Enum BendGame.ENotification
enum class ENotification : uint8_t
{
	Standard                       = 0,
	PlayerLevelUp                  = 1,
	BikeLevelUp                    = 2,
	ItemRecipeAvailable            = 3,
	MissionObjective               = 4,
	SideObjective                  = 5,
	UnlockedObjective              = 6,
	LeavingMissionZone             = 7,
	Hint                           = 8,
	Checkpoint                     = 9,
	ItemPickup                     = 10,
	AmmoPickup                     = 11,
	ConsumablePickup               = 12,
	RadioJob                       = 13,
	AmbientChallenge               = 14,
	Num                            = 15,
	ENotification_MAX              = 16
};


// Enum BendGame.EUIAlignment
enum class EUIAlignment : uint8_t
{
	None                           = 0,
	Left                           = 1,
	Center                         = 2,
	Right                          = 3,
	EUIAlignment_MAX               = 4
};


// Enum BendGame.EUISoundID
enum class EUISoundID : uint8_t
{
	MenuSelect                     = 0,
	MenuEnter                      = 1,
	MenuExit                       = 2,
	MenuScroll                     = 3,
	MenuInvalidSelection           = 4,
	OnCraftItemDefault             = 5,
	OnBuySell                      = 6,
	OnEnterBag                     = 7,
	OnPickupDefault                = 8,
	Num                            = 9,
	EUISoundID_MAX                 = 10
};


// Enum BendGame.EUserInputActionType
enum class EUserInputActionType : uint8_t
{
	MENU_CONFIRM                   = 0,
	MENU_CANCEL                    = 1,
	MENU_SELECT1                   = 2,
	MENU_SELECT2                   = 3,
	MENU_TAB_PREVIOUS              = 4,
	MENU_TAB_NEXT                  = 5,
	MENU_PAGE_PREVIOUS             = 6,
	MENU_PAGE_NEXT                 = 7,
	MENU_UP                        = 8,
	MENU_DOWN                      = 9,
	MENU_LEFT                      = 10,
	MENU_RIGHT                     = 11,
	MENU_TUTORIAL_CLOSE            = 12,
	MENU_MAX                       = 13
};


// Enum BendGame.EHudWeaponEquipState
enum class EHudWeaponEquipState : uint8_t
{
	None                           = 0,
	Equip                          = 1,
	Active                         = 2,
	Holster                        = 3,
	EHudWeaponEquipState_MAX       = 4
};


// Enum BendGame.EHudWeaponWidgetSlot
enum class EHudWeaponWidgetSlot : uint8_t
{
	Primary0                       = 0,
	Primary1                       = 1,
	Secondary                      = 2,
	Melee                          = 3,
	Throw                          = 4,
	Num                            = 5,
	EHudWeaponWidgetSlot_MAX       = 6
};


// Enum BendGame.EMapWaypointMarker
enum class EMapWaypointMarker : uint8_t
{
	MissionWaypoint                = 0,
	UserWaypoint                   = 1,
	FastTravelWaypoint             = 2,
	ScriptWaypoint                 = 3,
	Num                            = 4,
	EMapWaypointMarker_MAX         = 5
};


// Enum BendGame.EScriptVisibility
enum class EScriptVisibility : uint8_t
{
	None                           = 0,
	Visible                        = 1,
	NotVisible                     = 2,
	EScriptVisibility_MAX          = 3
};


// Enum BendGame.EWeaponHud
enum class EWeaponHud : uint8_t
{
	Primary                        = 0,
	Secondary                      = 1,
	Melee                          = 2,
	Thrown                         = 3,
	EWeaponHud_MAX                 = 4
};


// Enum BendGame.EHudMiniMapZoomLevel
enum class EHudMiniMapZoomLevel : uint8_t
{
	Level1                         = 0,
	Level2                         = 1,
	Level3                         = 2,
	Level4                         = 3,
	Num                            = 4,
	EHudMiniMapZoomLevel_MAX       = 5
};


// Enum BendGame.EHudCollectibleClueState
enum class EHudCollectibleClueState : uint8_t
{
	None                           = 0,
	Active                         = 1,
	Interact                       = 2,
	Inspect                        = 3,
	EHudCollectibleClueState_MAX   = 4
};


// Enum BendGame.EAttributeUseEffect
enum class EAttributeUseEffect : uint8_t
{
	ActivateCost                   = 0,
	Active                         = 1,
	Recover                        = 2,
	Cooldown                       = 3,
	Recharge                       = 4,
	Num                            = 5,
	EAttributeUseEffect_MAX        = 6
};


// Enum BendGame.ETrackingAnimationType
enum class ETrackingAnimationType : uint8_t
{
	LowHeight_HoverTouch           = 0,
	MidHeight_HoverTouch           = 1,
	MidToHigh_NoTouch              = 2,
	High_Touch                     = 3,
	ETrackingAnimationType_MAX     = 4
};


// Enum BendGame.ECurrentTrackingVisualSetting
enum class ECurrentTrackingVisualSetting : uint8_t
{
	NotInvestigated                = 0,
	InvestigatedGood               = 1,
	InvestigatedBad                = 2,
	InvestigatedAfterImage         = 3,
	ECurrentTrackingVisualSetting_MAX = 4
};


// Enum BendGame.EAudioStateCondition
enum class EAudioStateCondition : uint8_t
{
	Day                            = 0,
	Night                          = 1,
	WasUnaware                     = 2,
	WasAware                       = 3,
	LowAwareness                   = 4,
	HighAwareness                  = 5,
	EAudioStateCondition_MAX       = 6
};


// Enum BendGame.EAudioStateType
enum class EAudioStateType : uint8_t
{
	None                           = 0,
	Unaware                        = 1,
	SemiAware                      = 2,
	Aware                          = 3,
	Blinded                        = 4,
	Eating                         = 5,
	Drinking                       = 6,
	Grapple                        = 7,
	Hiding                         = 8,
	Nest                           = 9,
	NestEnraged                    = 10,
	Frustrated                     = 11,
	Enraged                        = 12,
	OnFire                         = 13,
	AwareWaiting                   = 14,
	Fleeing                        = 15,
	Ambush                         = 16,
	HidingInEnclosedSpace          = 17,
	EAudioStateType_MAX            = 18
};


// Enum BendGame.EAITargetPreference
enum class EAITargetPreference : uint8_t
{
	Normal                         = 0,
	Player                         = 1,
	Buddy                          = 2,
	EAITargetPreference_MAX        = 3
};


// Enum BendGame.EFlyingNavType
enum class EFlyingNavType : uint8_t
{
	Ground                         = 0,
	Flying                         = 1,
	Perch                          = 2,
	EFlyingNavType_MAX             = 3
};


// Enum BendGame.EPerchType
enum class EPerchType : uint8_t
{
	SpawnLocation                  = 0,
	GroundLanding                  = 1,
	AnyPerch                       = 2,
	DefendZonePerch                = 3,
	EPerchType_MAX                 = 4
};


// Enum BendGame.EFlyingNavigationState
enum class EFlyingNavigationState : uint8_t
{
	None                           = 0,
	Takeoff                        = 1,
	Waypoint                       = 2,
	Target                         = 3,
	Landing                        = 4,
	EFlyingNavigationState_MAX     = 5
};


// Enum BendGame.EBendCharacterLookPartialSet
enum class EBendCharacterLookPartialSet : uint8_t
{
	None                           = 0,
	HeadAndNeck                    = 1,
	UpperBody                      = 2,
	MAX                            = 3,
	EBendCharacterLookPartialSet_MAX = 4
};


// Enum BendGame.eInputCurveSetting
enum class EeInputCurveSetting : uint8_t
{
	kInputCurveLessDZ              = 0,
	kInputCurveMidDZ               = 1,
	kInputCurveDefault             = 2,
	kInputCurveMoreDZ              = 3,
	kInputCurveLinear              = 4,
	kNumInputCurveSettings         = 5,
	eInputCurveSetting_MAX         = 6
};


// Enum BendGame.eTransType
enum class EeTransType : uint8_t
{
	kTrans_Cut                     = 0,
	kTrans_Linear                  = 1,
	kTrans_SlowIn                  = 2,
	kTrans_SlowOut                 = 3,
	kTrans_SlowInOut               = 4,
	kNumTransTypes                 = 5,
	eTransType_MAX                 = 6
};


// Enum BendGame.ePriority
enum class EePriority : uint8_t
{
	kPri_None                      = 0,
	kPri_Follow                    = 1,
	kPri_Flashlight                = 2,
	kPri_Combat                    = 3,
	kPri_Crouch                    = 4,
	kPri_Cover                     = 5,
	kPri_Melee                     = 6,
	kPri_Sprint                    = 7,
	kPri_Climbing                  = 8,
	kPri_Falling                   = 9,
	kPri_Environment               = 10,
	kPri_Aim                       = 11,
	kPri_Scope                     = 12,
	kPri_Death                     = 13,
	kPri_Anim                      = 14,
	kPri_Special                   = 15,
	kPri_Cinematic                 = 16,
	kPri_Debug                     = 17,
	kNumCamPriorities              = 18,
	ePriority_MAX                  = 19
};


// Enum BendGame.ESkillStatus
enum class ESkillStatus : uint8_t
{
	Locked                         = 0,
	Unlocked                       = 1,
	Acquired                       = 2,
	None                           = 3,
	ESkillStatus_MAX               = 4
};


// Enum BendGame.ENavInterruptEnum
enum class ENavInterruptEnum : uint8_t
{
	NIE_ONDEATH                    = 0,
	NIE_ONDAMAGED                  = 1,
	NIE_ONANY                      = 2,
	NIE_MAX                        = 3
};


// Enum BendGame.ENavTargetEnum
enum class ENavTargetEnum : uint8_t
{
	NTE_ACTOR                      = 0,
	NTE_LOCATION                   = 1,
	NTE_MAX                        = 2
};


// Enum BendGame.EStrafeTypeEnum
enum class EStrafeTypeEnum : uint8_t
{
	STE_None                       = 0,
	STE_STRAFE_SLOW                = 1,
	STE_STRAFE_FAST                = 2,
	STE_MAX                        = 3
};


// Enum BendGame.EInventoryStorageQueryResult
enum class EInventoryStorageQueryResult : uint8_t
{
	InvalidItem                    = 0,
	Valid                          = 1,
	Valid_PartialCount             = 2,
	StorageFull                    = 3,
	None                           = 4,
	EInventoryStorageQueryResult_MAX = 5
};


// Enum BendGame.EAISurrenderState
enum class EAISurrenderState : uint8_t
{
	Normal                         = 0,
	Cower                          = 1,
	Run                            = 2,
	Exit                           = 3,
	None                           = 4,
	EAISurrenderState_MAX          = 5
};


// Enum BendGame.EBendPaceType
enum class EBendPaceType : uint8_t
{
	EBendPaceInvalid               = 0,
	EBendPaceAhead                 = 1,
	EBendPaceBehind                = 2,
	EBendPaceAlongside             = 3,
	EBendPaceNone                  = 4,
	EBendPace_NEW                  = 5,
	EBendPaceType_MAX              = 6
};


// Enum BendGame.eMotorcycleAttackMode
enum class EeMotorcycleAttackMode : uint8_t
{
	NOT_ATTACKING                  = 0,
	ATTACKING                      = 1,
	eMotorcycleAttackMode_MAX      = 2
};


// Enum BendGame.EMotoCombatVOEvent
enum class EMotoCombatVOEvent : uint8_t
{
	AttackingClose                 = 0,
	AttackingNotClose              = 1,
	GroupMemberBecameAware         = 2,
	AllyKilled                     = 3,
	BikeTakesDamage                = 4,
	BikeTakesRamDamage             = 5,
	BikeCrashing                   = 6,
	FellOffBike                    = 7,
	HitOnBike                      = 8,
	EMotoCombatVOEvent_MAX         = 9
};


// Enum BendGame.EBuddyVOEvent
enum class EBuddyVOEvent : uint8_t
{
	IdentifyThreat                 = 0,
	StartedLeading                 = 1,
	StartedWaiting                 = 2,
	KeepWaiting                    = 3,
	KeepWaitingWrongDirection      = 4,
	ResumedLeading                 = 5,
	LeadBlocked                    = 6,
	FollowIdle                     = 7,
	TeamEmotionCursingCombat       = 8,
	CombatHurtByEnemy              = 9,
	CombatAllyHurtByBullet         = 10,
	GrenadeLandsNearby             = 11,
	TeamOrderAttackTarget          = 12,
	CombatEndVictory               = 13,
	CombatEndFlee                  = 14,
	CombatFlankedByEnemy           = 15,
	CombatAllyDies                 = 16,
	VOEventCount                   = 17,
	EBuddyVOEvent_MAX              = 18
};


// Enum BendGame.EBuddyEnemyEngagement
enum class EBuddyEnemyEngagement : uint8_t
{
	None                           = 0,
	Alert                          = 1,
	Combat                         = 2,
	EBuddyEnemyEngagement_MAX      = 3
};


// Enum BendGame.EBuddyBehavior
enum class EBuddyBehavior : uint8_t
{
	None                           = 0,
	Follow                         = 1,
	Lead                           = 2,
	EBuddyBehavior_MAX             = 3
};


// Enum BendGame.EBendVehicleRoadSurfaceType
enum class EBendVehicleRoadSurfaceType : uint8_t
{
	EBENDROADSURFACETYPE_onRoad    = 0,
	EBENDROADSURFACETYPE_trails    = 1,
	EBENDROADSURFACETYPE_offRoad   = 2,
	EBENDROADSURFACETYPE_extreme   = 3,
	EBENDROADSURFACETYPE_dirtRoad  = 4,
	EBENDROADSURFACETYPE_MAX       = 5
};


// Enum BendGame.EVehicleBikeWheelIndex
enum class EVehicleBikeWheelIndex : uint8_t
{
	EVEHICLEBIKEWHEELINDEX_Front   = 0,
	EVEHICLEBIKEWHEELINDEX_FrontDisabled = 1,
	EVEHICLEBIKEWHEELINDEX_Rear    = 2,
	EVEHICLEBIKEWHEELINDEX_RearDisabled = 3,
	EVEHICLEBIKEWHEELINDEX_MAX     = 4
};


// Enum BendGame.EBendVehicleCarWheelIndex
enum class EBendVehicleCarWheelIndex : uint8_t
{
	FrontLeft                      = 0,
	FrontRight                     = 1,
	RearLeft                       = 2,
	RearRight                      = 3,
	EBendVehicleCarWheelIndex_MAX  = 4
};


// Enum BendGame.EBendVehicleTailLightState
enum class EBendVehicleTailLightState : uint8_t
{
	Off                            = 0,
	On                             = 1,
	Braking                        = 2,
	EBendVehicleTailLightState_MAX = 3
};


// Enum BendGame.EBendVehicleGear
enum class EBendVehicleGear : uint8_t
{
	EBENDVEHICLEGEAR_reverse       = 0,
	EBENDVEHICLEGEAR_neutral       = 1,
	EBENDVEHICLEGEAR_first         = 2,
	EBENDVEHICLEGEAR_second        = 3,
	EBENDVEHICLEGEAR_third         = 4,
	EBENDVEHICLEGEAR_fourth        = 5,
	EBENDVEHICLEGEAR_fifth         = 6,
	EBENDVEHICLEGEAR_sixth         = 7,
	EBENDVEHICLEGEAR_seventh       = 8,
	EBENDVEHICLEGEAR_eighth        = 9,
	EBENDVEHICLEGEAR_ninth         = 10,
	EBENDVEHICLEGEAR_tenth         = 11,
	EBENDVEHICLEGEAR_eleventh      = 12,
	EBENDVEHICLEGEAR_twelfth       = 13,
	EBENDVEHICLEGEAR_thirteenth    = 14,
	EBENDVEHICLEGEAR_fourteenth    = 15,
	EBENDVEHICLEGEAR_fifteenth     = 16,
	EBENDVEHICLEGEAR_sixteenth     = 17,
	EBENDVEHICLEGEAR_seventeenth   = 18,
	EBENDVEHICLEGEAR_eighteenth    = 19,
	EBENDVEHICLEGEAR_nineteenth    = 20,
	EBENDVEHICLEGEAR_twentieth     = 21,
	EBENDVEHICLEGEAR_twentyfirst   = 22,
	EBENDVEHICLEGEAR_twentysecond  = 23,
	EBENDVEHICLEGEAR_twentythird   = 24,
	EBENDVEHICLEGEAR_twentyfourth  = 25,
	EBENDVEHICLEGEAR_twentyfifth   = 26,
	EBENDVEHICLEGEAR_twentysixth   = 27,
	EBENDVEHICLEGEAR_twentyseventh = 28,
	EBENDVEHICLEGEAR_twentyeighth  = 29,
	EBENDVEHICLEGEAR_twentyninth   = 30,
	EBENDVEHICLEGEAR_thirtieth     = 31,
	EBENDVEHICLEGEAR_MAX           = 32
};


// Enum BendGame.ETeamBehaviorPriorityType
enum class ETeamBehaviorPriorityType : uint8_t
{
	Normal                         = 0,
	High                           = 1,
	Critical                       = 2,
	ETeamBehaviorPriorityType_MAX  = 3
};


// Enum BendGame.EAIVehicleDebug
enum class EAIVehicleDebug : uint8_t
{
	All                            = 0,
	BumperLane                     = 1,
	NumTypes                       = 2,
	EAIVehicleDebug_MAX            = 3
};


// Enum BendGame.EBendAIExcitationLevel
enum class EBendAIExcitationLevel : uint8_t
{
	EBENDAIEXCITATION_neutral      = 0,
	EBENDAIEXCITATION_hunt         = 1,
	EBENDAIEXCITATION_frenzied     = 2,
	EBENDAIEXCITATION_MAX          = 3
};


// Enum BendGame.EAmbientEventContextAllowed
enum class EAmbientEventContextAllowed : uint8_t
{
	EAmbientEventContext_OpenWorld = 0,
	EAmbientEventContext_Mission   = 1,
	EAmbientEventContext_Jobs      = 2,
	EAmbientEventContext_Global    = 3,
	EAmbientEventContext_MAX       = 4
};


// Enum BendGame.EAmbientEventType
enum class EAmbientEventType : uint8_t
{
	EAmbientEventType_Main         = 0,
	EAmbientEventType_Side         = 1,
	EAmbientEventType_Environment  = 2,
	EAmbientEventType_Global       = 3,
	EAmbientEventType_MAX          = 4
};


// Enum BendGame.EAmbientEventChooseEventResult
enum class EAmbientEventChooseEventResult : uint8_t
{
	EAmbientEventChooseEvent_Available = 0,
	EAmbientEventChooseEvent_Failed = 1,
	EAmbientEventChooseEvent_Succeeded = 2,
	EAmbientEventChooseEvent_Completed = 3,
	EAmbientEventChooseEvent_MAX   = 4
};


// Enum BendGame.EAmbientEventRepeatMode
enum class EAmbientEventRepeatMode : uint8_t
{
	EAmbientEventRepeat_PlayOnce   = 0,
	EAmbientEventRepeat_RepeatAny  = 1,
	EAmbientEventRepeat_RepeatAfterClassUsed = 2,
	EAmbientEventRepeat_MAX        = 3
};


// Enum BendGame.EAmbientEventLocationRequirement
enum class EAmbientEventLocationRequirement : uint8_t
{
	EAmbientEventLocation_Anywhere = 0,
	EAmbientEventLocation_Inside   = 1,
	EAmbientEventLocation_Outside  = 2,
	EAmbientEventLocation_MAX      = 3
};


// Enum BendGame.EAmbientEventTransportationMode
enum class EAmbientEventTransportationMode : uint8_t
{
	ETransportMode_FootOrBike      = 0,
	ETransportMode_OnFoot          = 1,
	ETransportMode_OnBike          = 2,
	ETransportMode_MAX             = 3
};


// Enum BendGame.EAmbientEventManagerMode
enum class EAmbientEventManagerMode : uint8_t
{
	EAmbientEventManagerMode_Normal = 0,
	EAmbientEventManagerMode_Mission = 1,
	EAmbientEventManagerMode_Job   = 2,
	EAmbientEventManagerMode_Debug = 3,
	EAmbientEventManagerMode_MAX   = 4
};


// Enum BendGame.EBendAnimSampleTime
enum class EBendAnimSampleTime : uint8_t
{
	FirstFrame                     = 0,
	LastFrame                      = 1,
	SpecifiedTime                  = 2,
	EBendAnimSampleTime_MAX        = 3
};


// Enum BendGame.EBendAnimHelperRigMultiplyDivide
enum class EBendAnimHelperRigMultiplyDivide : uint8_t
{
	Multiply                       = 0,
	Divide                         = 1,
	Power                          = 2,
	EBendAnimHelperRigMultiplyDivide_MAX = 3
};


// Enum BendGame.EBendAnimHelperRigAimAxes
enum class EBendAnimHelperRigAimAxes : uint8_t
{
	XAim_YUp                       = 0,
	XAim_ZUp                       = 1,
	YAim_XUp                       = 2,
	YAim_ZUp                       = 3,
	ZAim_XUp                       = 4,
	ZAim_YUp                       = 5,
	EBendAnimHelperRigAimAxes_MAX  = 6
};


// Enum BendGame.IKFrameData
enum class EIKFrameData : uint8_t
{
	IKFD_CurrentFrame              = 0,
	IKFD_LastFrame                 = 1,
	IKFD_MAX                       = 2
};


// Enum BendGame.eVehicleSideLayingType
enum class EeVehicleSideLayingType : uint8_t
{
	Vehicle_LayingLeftSide         = 0,
	Vehicle_LayingRightSide        = 1,
	Vehicle_LayingNoSide           = 2,
	Vehicle_MAX                    = 3
};


// Enum BendGame.eVehicleSideType
enum class EeVehicleSideType : uint8_t
{
	Vehicle_Left                   = 0,
	Vehicle_Right                  = 1,
	Vehicle_None                   = 2,
	Vehicle_MAX                    = 3
};


// Enum BendGame.ERipAltarSermons
enum class ERipAltarSermons : uint8_t
{
	TheRising                      = 0,
	DontRun                        = 1,
	Pain                           = 2,
	SetYouFree                     = 3,
	Ego                            = 4,
	Sacrifice                      = 5,
	OneMind                        = 6,
	FoundersTale                   = 7,
	UltimateGoal                   = 8,
	RestInPeace                    = 9,
	TheFree                        = 10,
	TheRisingIsComing              = 11,
	JoinOrDie                      = 12,
	ERipAltarSermons_MAX           = 13
};


// Enum BendGame.EBikeInteractionTypes
enum class EBikeInteractionTypes : uint8_t
{
	Base                           = 0,
	Repair                         = 1,
	Sabotage                       = 2,
	EBikeInteractionTypes_MAX      = 3
};


// Enum BendGame.ECompareDirection
enum class ECompareDirection : uint8_t
{
	None                           = 0,
	Left                           = 1,
	Right                          = 2,
	MaxCount                       = 3,
	ECompareDirection_MAX          = 4
};


// Enum BendGame.EBendDistanceCalculation
enum class EBendDistanceCalculation : uint8_t
{
	Distance                       = 0,
	DistanceXY                     = 1,
	Height                         = 2,
	EBendDistanceCalculation_MAX   = 3
};


// Enum BendGame.EBendDistanceCheck
enum class EBendDistanceCheck : uint8_t
{
	MoveFocus                      = 0,
	FireFocus                      = 1,
	Location                       = 2,
	CombatSlot                     = 3,
	ClosestEdge                    = 4,
	ClosestAlly                    = 5,
	ClosestRangedAlly              = 6,
	ClosestEnemy                   = 7,
	Target                         = 8,
	TeamCenter                     = 9,
	PathStart                      = 10,
	PathEnd                        = 11,
	Self                           = 12,
	EBendDistanceCheck_MAX         = 13
};


// Enum BendGame.EFireFocusOfType
enum class EFireFocusOfType : uint8_t
{
	Player                         = 0,
	Human                          = 1,
	Freaker                        = 2,
	Animal                         = 3,
	Dummy                          = 4,
	EFireFocusOfType_MAX           = 5
};


// Enum BendGame.EIdealRangeTestType
enum class EIdealRangeTestType : uint8_t
{
	Close                          = 0,
	InRange                        = 1,
	Far                            = 2,
	EIdealRangeTestType_MAX        = 3
};


// Enum BendGame.EBuddyRelativeMoveSpeed
enum class EBuddyRelativeMoveSpeed : uint8_t
{
	Slower                         = 0,
	Same                           = 1,
	Faster                         = 2,
	EBuddyRelativeMoveSpeed_MAX    = 3
};


// Enum BendGame.EBuddyLeadRangeType
enum class EBuddyLeadRangeType : uint8_t
{
	Wait                           = 0,
	Ahead                          = 1,
	Close                          = 2,
	Behind                         = 3,
	FarBehind                      = 4,
	Blocked                        = 5,
	EBuddyLeadRangeType_MAX        = 6
};


// Enum BendGame.EAnimalAnimSequenceType
enum class EAnimalAnimSequenceType : uint8_t
{
	Alert                          = 0,
	Rest                           = 1,
	Sleep                          = 2,
	Retreat                        = 3,
	Scent                          = 4,
	Sit                            = 5,
	Taunt                          = 6,
	Startled                       = 7,
	EAnimalAnimSequenceType_MAX    = 8
};


// Enum BendGame.EMoveFocusType
enum class EMoveFocusType : uint8_t
{
	FireFocus                      = 0,
	Target                         = 1,
	LastSeenPos                    = 2,
	LastSeenPosDZ                  = 3,
	WarningLoc                     = 4,
	CombatLoc                      = 5,
	CombatRing                     = 6,
	DefendZone                     = 7,
	POI                            = 8,
	BikeChaseLoc                   = 9,
	CombatLocForTarget             = 10,
	DefendZoneCenter               = 11,
	CurrentPosition                = 12,
	EMoveFocusType_MAX             = 13
};


// Enum BendGame.EButtonPressEventType
enum class EButtonPressEventType : uint8_t
{
	Single                         = 0,
	Multi                          = 1,
	Hold                           = 2,
	EButtonPressEventType_MAX      = 3
};


// Enum BendGame.EBendCustomMovementMode
enum class EBendCustomMovementMode : uint8_t
{
	BENDCUSTOMMOVE_Anchored        = 0,
	BENDCUSTOMMOVE_ClimbingSurface = 1,
	BENDCUSTOMMOVE_Ragdoll         = 2,
	BENDCUSTOMMOVE_FlyingWithGroundFixup = 3,
	BENDCUSTOMMOVE_AttachedToDynamicBody = 4,
	BENDCUSTOMMOVE_Swimming        = 5,
	BENDCUSTOMMOVE_Unused4         = 6,
	BENDCUSTOMMOVE_MAX             = 7
};


// Enum BendGame.EBendCharacterTurnType
enum class EBendCharacterTurnType : uint8_t
{
	TurnInPlace                    = 0,
	TurnToMove                     = 1,
	MAX                            = 2,
	EBendCharacterTurnType_MAX     = 3
};


// Enum BendGame.EBendCharacterTurnAngleSnapType
enum class EBendCharacterTurnAngleSnapType : uint8_t
{
	Snap45                         = 0,
	Snap45_90                      = 1,
	Snap90                         = 2,
	Snap90_NoSmallTurns            = 3,
	MAX                            = 4,
	EBendCharacterTurnAngleSnapType_MAX = 5
};


// Enum BendGame.EBendCharacterTurnAngleSnapped
enum class EBendCharacterTurnAngleSnapped : uint8_t
{
	Turn180Left                    = 0,
	Turn90Left                     = 1,
	Turn0                          = 2,
	Turn90Right                    = 3,
	Turn180Right                   = 4,
	Turn135Left                    = 5,
	Turn45Left                     = 6,
	Turn45Right                    = 7,
	Turn135Right                   = 8,
	MAX                            = 9,
	EBendCharacterTurnAngleSnapped_MAX = 10
};


// Enum BendGame.EBendCharacterCollisionShapeId
enum class EBendCharacterCollisionShapeId : uint8_t
{
	EBENDCHARCOLLISIONSHAPE_Default = 0,
	EBENDCHARCOLLISIONSHAPE_Crouching = 1,
	EBENDCHARCOLLISIONSHAPE_InVehicle = 2,
	EBENDCHARCOLLISIONSHAPE_Crawling = 3,
	EBENDCHARCOLLISIONSHAPE_Rolling = 4,
	EBENDCHARCOLLISIONSHAPE_MAX    = 5
};


// Enum BendGame.EBendClimbFeature
enum class EBendClimbFeature : uint8_t
{
	EBENDCLIMBFEATURE_None         = 0,
	EBENDCLIMBFEATURE_InnerEdge    = 1,
	EBENDCLIMBFEATURE_OuterEdge    = 2,
	EBENDCLIMBFEATURE_MAX          = 3
};


// Enum BendGame.ECinFlickeringLightPresets
enum class ECinFlickeringLightPresets : uint8_t
{
	NoPreset                       = 0,
	LowFrequency                   = 1,
	HighFrequency                  = 2,
	SpookyFrequency                = 3,
	EmergencyFrequency             = 4,
	Custom                         = 5,
	Custom01                       = 6,
	Custom02                       = 7,
	ECinFlickeringLightPresets_MAX = 8
};


// Enum BendGame.EEmergencyLightPresets
enum class EEmergencyLightPresets : uint8_t
{
	NoPreset                       = 0,
	RotatingRedBlue                = 1,
	FlashingWhite                  = 2,
	Custom                         = 3,
	Custom01                       = 4,
	Custom02                       = 5,
	EEmergencyLightPresets_MAX     = 6
};


// Enum BendGame.eClothFXType
enum class EeClothFXType : uint8_t
{
	clothDefault                   = 0,
	cotton                         = 1,
	eClothFXType_MAX               = 2
};


// Enum BendGame.EBendCrowdAnimTimeType
enum class EBendCrowdAnimTimeType : uint8_t
{
	EBENDCROWDANIMTIMETYPE_Phase   = 0,
	EBENDCROWDANIMTIMETYPE_TimeInState = 1,
	EBENDCROWDANIMTIMETYPE_MAX     = 2
};


// Enum BendGame.EBendCrowdAnimState
enum class EBendCrowdAnimState : uint8_t
{
	EBENDCROWDANIMSTATE_none       = 0,
	EBENDCROWDANIMSTATE_run        = 1,
	EBENDCROWDANIMSTATE_runOnFire  = 2,
	EBENDCROWDANIMSTATE_walk       = 3,
	EBENDCROWDANIMSTATE_climbCrowd = 4,
	EBENDCROWDANIMSTATE_fall       = 5,
	EBENDCROWDANIMSTATE_fallenOnFloor = 6,
	EBENDCROWDANIMSTATE_stumble    = 7,
	EBENDCROWDANIMSTATE_eating0    = 8,
	EBENDCROWDANIMSTATE_eating1    = 9,
	EBENDCROWDANIMSTATE_dead       = 10,
	EBENDCROWDANIMSTATE_dying      = 11,
	EBENDCROWDANIMSTATE_idle       = 12,
	EBENDCROWDANIMSTATE_hangIdle   = 13,
	EBENDCROWDANIMSTATE_onFireStandToKneel = 14,
	EBENDCROWDANIMSTATE_onFireRollDying = 15,
	EBENDCROWDANIMSTATE_onFireRollDead = 16,
	EBENDCROWDANIMSTATE_onFireCrawl = 17,
	EBENDCROWDANIMSTATE_onFireCrawlDying = 18,
	EBENDCROWDANIMSTATE_onFireCrawlDead = 19,
	EBENDCROWDANIMSTATE_land       = 20,
	EBENDCROWDANIMSTATE_climbCrowdOnTop = 21,
	EBENDCROWDANIMSTATE_melee      = 22,
	EBENDCROWDANIMSTATE_hibernate  = 23,
	EBENDCROWDANIMSTATE_walkOnMovingObject = 24,
	EBENDCROWDANIMSTATE_stumbleForward = 25,
	EBENDCROWDANIMSTATE_runWhileTurn = 26,
	EBENDCROWDANIMSTATE_climbWall  = 27,
	EBENDCROWDANIMSTATE_climbWallTop = 28,
	EBENDCROWDANIMSTATE_climbHalfM = 29,
	EBENDCROWDANIMSTATE_climb1M    = 30,
	EBENDCROWDANIMSTATE_climb1AndHalfM = 31,
	EBENDCROWDANIMSTATE_climb2M    = 32,
	EBENDCROWDANIMSTATE_runningAttack = 33,
	EBENDCROWDANIMSTATE_vault      = 34,
	EBENDCROWDANIMSTATE_frustrated = 35,
	EBENDCROWDANIMSTATE_frustratedAtWall = 36,
	EBENDCROWDANIMSTATE_turn180Left = 37,
	EBENDCROWDANIMSTATE_turn180Right = 38,
	EBENDCROWDANIMSTATE_turn90Left = 39,
	EBENDCROWDANIMSTATE_turn90Right = 40,
	EBENDCROWDANIMSTATE_eatGetUp   = 41,
	EBENDCROWDANIMSTATE_eatGetDown = 42,
	EBENDCROWDANIMSTATE_sleepGetUp = 43,
	EBENDCROWDANIMSTATE_sleepGetDown = 44,
	EBENDCROWDANIMSTATE_onFireDying = 45,
	EBENDCROWDANIMSTATE_landStumble = 46,
	EBENDCROWDANIMSTATE_landHard   = 47,
	EBENDCROWDANIMSTATE_landHardStumble = 48,
	EBENDCROWDANIMSTATE_idleToRun  = 49,
	EBENDCROWDANIMSTATE_runToIdle  = 50,
	EBENDCROWDANIMSTATE_jukeLeft   = 51,
	EBENDCROWDANIMSTATE_jukeRight  = 52,
	EBENDCROWDANIMSTATE_runTurnLeft = 53,
	EBENDCROWDANIMSTATE_runTurnRight = 54,
	EBENDCROWDANIMSTATE_flashBanged = 55,
	EBENDCROWDANIMSTATE_inSmoke    = 56,
	EBENDCROWDANIMSTATE_climb2AndHalfM = 57,
	EBENDCROWDANIMSTATE_MAX        = 58
};


// Enum BendGame.EBendCrowdControllerState
enum class EBendCrowdControllerState : uint8_t
{
	EBENDCROWDCONTROLLERSTATE_run  = 0,
	EBENDCROWDCONTROLLERSTATE_runOnFire = 1,
	EBENDCROWDCONTROLLERSTATE_walk = 2,
	EBENDCROWDCONTROLLERSTATE_climbCrowd = 3,
	EBENDCROWDCONTROLLERSTATE_fall = 4,
	EBENDCROWDCONTROLLERSTATE_fallenOnFloor = 5,
	EBENDCROWDCONTROLLERSTATE_stumble = 6,
	EBENDCROWDCONTROLLERSTATE_eating0 = 7,
	EBENDCROWDCONTROLLERSTATE_eating1 = 8,
	EBENDCROWDCONTROLLERSTATE_dead = 9,
	EBENDCROWDCONTROLLERSTATE_hangIdle = 10,
	EBENDCROWDCONTROLLERSTATE_onFireRoll = 11,
	EBENDCROWDCONTROLLERSTATE_onFireCrawl = 12,
	EBENDCROWDCONTROLLERSTATE_climbCrowdOnTop = 13,
	EBENDCROWDCONTROLLERSTATE_idle = 14,
	EBENDCROWDCONTROLLERSTATE_melee = 15,
	EBENDCROWDCONTROLLERSTATE_hibernate = 16,
	EBENDCROWDCONTROLLERSTATE_walkOnMovingObject = 17,
	EBENDCROWDCONTROLLERSTATE_stumbleForward = 18,
	EBENDCROWDCONTROLLERSTATE_runWhileTurn = 19,
	EBENDCROWDCONTROLLERSTATE_climbWall = 20,
	EBENDCROWDCONTROLLERSTATE_climbWallTop = 21,
	EBENDCROWDCONTROLLERSTATE_climbHalfM = 22,
	EBENDCROWDCONTROLLERSTATE_climb1M = 23,
	EBENDCROWDCONTROLLERSTATE_climb1AndHalfM = 24,
	EBENDCROWDCONTROLLERSTATE_climb2M = 25,
	EBENDCROWDCONTROLLERSTATE_runningAttack = 26,
	EBENDCROWDCONTROLLERSTATE_stallBeforeClimb = 27,
	EBENDCROWDCONTROLLERSTATE_vault = 28,
	EBENDCROWDCONTROLLERSTATE_frustrated = 29,
	EBENDCROWDCONTROLLERSTATE_frustratedAtWall = 30,
	EBENDCROWDCONTROLLERSTATE_turn180Left = 31,
	EBENDCROWDCONTROLLERSTATE_turn180Right = 32,
	EBENDCROWDCONTROLLERSTATE_turn90Left = 33,
	EBENDCROWDCONTROLLERSTATE_turn90Right = 34,
	EBENDCROWDCONTROLLERSTATE_land = 35,
	EBENDCROWDCONTROLLERSTATE_landStumble = 36,
	EBENDCROWDCONTROLLERSTATE_landHard = 37,
	EBENDCROWDCONTROLLERSTATE_landHardStumble = 38,
	EBENDCROWDCONTROLLERSTATE_jukeLeft = 39,
	EBENDCROWDCONTROLLERSTATE_jukeRight = 40,
	EBENDCROWDCONTROLLERSTATE_runTurnLeft = 41,
	EBENDCROWDCONTROLLERSTATE_runTurnRight = 42,
	EBENDCROWDCONTROLLERSTATE_flashBanged = 43,
	EBENDCROWDCONTROLLERSTATE_inSmoke = 44,
	EBENDCROWDCONTROLLERSTATE_climb2AndHalfM = 45,
	EBENDCROWDCONTROLLERSTATE_autoTransition = 46,
	EBENDCROWDCONTROLLERSTATE_MAX_includingAutoTransition = 47,
	EBENDCROWDCONTROLLERSTATE_MAX  = 48
};


// Enum BendGame.EBendCrowdBehavior
enum class EBendCrowdBehavior : uint8_t
{
	None                           = 0,
	StumbleForward                 = 1,
	Walk                           = 2,
	Frustrated                     = 3,
	FrustratedAtWall               = 4,
	Eating                         = 5,
	EBendCrowdBehavior_MAX         = 6
};


// Enum BendGame.EBendCrowdPOIActivity
enum class EBendCrowdPOIActivity : uint8_t
{
	Idle                           = 0,
	Eat                            = 1,
	Hibernate                      = 2,
	Frustrated                     = 3,
	FrustratedAtWall               = 4,
	Drink                          = 5,
	EBendCrowdPOIActivity_MAX      = 6
};


// Enum BendGame.EBendCrowdPOIPriority
enum class EBendCrowdPOIPriority : uint8_t
{
	UserRequestedPOI               = 0,
	InitialPOI                     = 1,
	BaseBehaviorPOI                = 2,
	Default                        = 3,
	EBendCrowdPOIPriority_MAX      = 4
};


// Enum BendGame.EBendCrowdTrackerType
enum class EBendCrowdTrackerType : uint8_t
{
	ClosestMember                  = 0,
	ClosestGroupingCenter          = 1,
	EBendCrowdTrackerType_MAX      = 2
};


// Enum BendGame.EJobLevelLoadRequestType
enum class EJobLevelLoadRequestType : uint8_t
{
	None                           = 0,
	Load                           = 1,
	Unload                         = 2,
	EJobLevelLoadRequestType_MAX   = 3
};


// Enum BendGame.EHudJobType
enum class EHudJobType : uint8_t
{
	AcceptJob                      = 0,
	RewardJob                      = 1,
	EHudJobType_MAX                = 2
};


// Enum BendGame.EJobTypes
enum class EJobTypes : uint8_t
{
	None                           = 0,
	main_story                     = 1,
	task                           = 2,
	enemy_camp                     = 3,
	survivor                       = 4,
	bounty                         = 5,
	hunting                        = 6,
	traps                          = 7,
	gathering                      = 8,
	escort                         = 9,
	ambush_camp                    = 10,
	Infestations                   = 11,
	Nero_Checkpoints               = 12,
	Horde                          = 13,
	EJobTypes_MAX                  = 14
};


// Enum BendGame.EEnvTestDetectedPawnType
enum class EEnvTestDetectedPawnType : uint8_t
{
	Friend                         = 0,
	Enemy                          = 1,
	Any                            = 2,
	EEnvTestDetectedPawnType_MAX   = 3
};


// Enum BendGame.EBendDefaultClimbDataType
enum class EBendDefaultClimbDataType : uint8_t
{
	ClimbHalfM                     = 0,
	Climb1M                        = 1,
	Climb1AndHalfM                 = 2,
	Climb2M                        = 3,
	Climb3M                        = 4,
	Climb4M                        = 5,
	VaultHalfM                     = 6,
	Vault1M                        = 7,
	Vault1AndHalfM                 = 8,
	Vault2M                        = 9,
	VaultFall                      = 10,
	VaultToPlatform                = 11,
	ClimbDownHalfM                 = 12,
	ClimbDown1M                    = 13,
	ClimbDown1AndHalfM             = 14,
	ClimbDown2M                    = 15,
	ClimbDownFall                  = 16,
	Num                            = 17,
	EBendDefaultClimbDataType_MAX  = 18
};


// Enum BendGame.ESlatePopupStyle
enum class ESlatePopupStyle : uint8_t
{
	YesNo                          = 0,
	OK                             = 1,
	ESlatePopupStyle_MAX           = 2
};


// Enum BendGame.EPopupID
enum class EPopupID : uint8_t
{
	None                           = 0,
	GenericOK                      = 1,
	InventoryFull                  = 2,
	PurchaseItem                   = 3,
	SellItem                       = 4,
	InvalidFactionTrust            = 5,
	CannotAfford                   = 6,
	NoSkillPoints                  = 7,
	SkillLocked                    = 8,
	EPopupID_MAX                   = 9
};


// Enum BendGame.EContactingServerPopupType
enum class EContactingServerPopupType : uint8_t
{
	CONTACTING_SERVER              = 0,
	CONTACTING_SERVER_ERROR        = 1,
	CONTACTING_MAX                 = 2
};


// Enum BendGame.EDLCChallengeRank
enum class EDLCChallengeRank : uint8_t
{
	Incomplete                     = 0,
	Bronze                         = 1,
	Silver                         = 2,
	Gold                           = 3,
	EDLCChallengeRank_MAX          = 4
};


// Enum BendGame.EDLCChallengeType
enum class EDLCChallengeType : uint8_t
{
	Bike                           = 0,
	Combat                         = 1,
	Horde                          = 2,
	EDLCChallengeType_MAX          = 3
};


// Enum BendGame.EDLCValueDisplayType
enum class EDLCValueDisplayType : uint8_t
{
	Integer                        = 0,
	Time                           = 1,
	Percent                        = 2,
	EDLCValueDisplayType_MAX       = 3
};


// Enum BendGame.eTiresInAir
enum class EeTiresInAir : uint8_t
{
	FRONT_IN_AIR                   = 0,
	REAR_IN_AIR                    = 1,
	BOTH_IN_AIR                    = 2,
	None                           = 3,
	eTiresInAir_MAX                = 4
};


// Enum BendGame.EBendInputPrimaryType
enum class EBendInputPrimaryType : uint8_t
{
	UNDETERMINED_INPUT             = 0,
	PRIMARY_INPUT                  = 1,
	ALTERNATE_INPUT                = 2,
	ALL_INPUT                      = 3,
	EBendInputPrimaryType_MAX      = 4
};


// Enum BendGame.EBendInputActionType
enum class EBendInputActionType : uint8_t
{
	ACTION                         = 0,
	AXIS                           = 1,
	NONE                           = 2,
	EBendInputActionType_MAX       = 3
};


// Enum BendGame.EBendMouseSettingType
enum class EBendMouseSettingType : uint8_t
{
	GENERAL                        = 0,
	AIM                            = 1,
	VEHICLE                        = 2,
	EBendMouseSettingType_MAX      = 3
};


// Enum BendGame.EBendMouseSettingAxis
enum class EBendMouseSettingAxis : uint8_t
{
	BOTH                           = 0,
	X_AXIS                         = 1,
	Y_AXIS                         = 2,
	EBendMouseSettingAxis_MAX      = 3
};


// Enum BendGame.EColorIndex
enum class EColorIndex : uint8_t
{
	CI_Unassigned                  = 0,
	CI_HitIndicator                = 1,
	CI_NPCRed                      = 2,
	CI_NPCYellow                   = 3,
	CI_NPCWhite                    = 4,
	CI_NPCBlack                    = 5,
	CI_NPCBlue                     = 6,
	CI_NPCBronze                   = 7,
	CI_RadarDanger                 = 8,
	CI_ValueIncrease               = 9,
	CI_ValueDecrease               = 10,
	CI_UIColorLightBlue            = 11,
	CI_UIColorBlue                 = 12,
	CI_UIColorGreen                = 13,
	CI_UIColorYellow               = 14,
	CI_UIColorOrange               = 15,
	CI_UIColorRed                  = 16,
	CI_UIColorStory                = 17,
	CI_UIColorEncampment           = 18,
	CI_UIColorNERO                 = 19,
	CI_UIColorInfestation          = 20,
	CI_UIColorAmbushCamp           = 21,
	CI_UIColorStoryTask            = 22,
	CI_MAX                         = 23
};


// Enum BendGame.EMissionFailureOptions
enum class EMissionFailureOptions : uint8_t
{
	None                           = 0,
	VolumeDistance                 = 1,
	SphereDistance                 = 2,
	EMissionFailureOptions_MAX     = 3
};


// Enum BendGame.EFastTravelState
enum class EFastTravelState : uint8_t
{
	Available                      = 0,
	MissionInProgess               = 1,
	InvalidTrust                   = 2,
	BunkerLocked                   = 3,
	NestNotCleared                 = 4,
	None                           = 5,
	EFastTravelState_MAX           = 6
};


// Enum BendGame.eOWVOManager
enum class EeOWVOManager : uint8_t
{
	Ignore                         = 0,
	Addy                           = 1,
	Boozer                         = 2,
	Colonel                        = 3,
	Copeland                       = 4,
	IronMike                       = 5,
	Kouri                          = 6,
	OBrian                         = 7,
	Tucker                         = 8,
	RFO                            = 9,
	Rikki                          = 10,
	Russel                         = 11,
	Sarah                          = 12,
	Skizzo                         = 13,
	Taylor                         = 14,
	Weaver                         = 15,
	Num                            = 16,
	eOWVOManager_MAX               = 17
};


// Enum BendGame.ePOIReasonForLeaving
enum class EePOIReasonForLeaving : uint8_t
{
	kRFL_NoReason                  = 0,
	kRFL_UserLeavesSlot            = 1,
	kRFL_UserChangesSlot           = 2,
	kRFL_SlotNotActive             = 3,
	kRFL_TimeBetweenUsers          = 4,
	kRFL_RequestLeave              = 5,
	kRFL_RequestLeaveAllUsers      = 6,
	kRFL_ForceLeave                = 7,
	kRFL_ForceLeavePrevious        = 8,
	kRFL_ForceLeaveUnposses        = 9,
	kRFL_UserInvalid               = 10,
	kRFL_POIInvalid                = 11,
	kRFL_AutoNavTimeOut            = 12,
	kRFL_POITimeOut                = 13,
	kRFL_POIMaxLoops               = 14,
	kRFL_BecameAware               = 15,
	kRFL_BecameSemiAware           = 16,
	kRFL_BecameUnaware             = 17,
	kRFL_TookDamage                = 18,
	kRFL_CloseThreat               = 19,
	kRFL_NestDestroyed             = 20,
	kRFL_NestDespawn               = 21,
	kRFL_MoveToScripted            = 22,
	kRFL_TakeScriptedCover         = 23,
	kRFL_ScriptedEnterVehicle      = 24,
	kRFL_ScriptedMoveToGrapple     = 25,
	kRFL_ScriptedMeleeAttack       = 26,
	kRFL_ScriptedThrow             = 27,
	kRFL_PatrolAdvance             = 28,
	kRFL_PatrolTimeOut             = 29,
	kRFL_PatrolOneCircuit          = 30,
	kRFL_PatrolInvalid             = 31,
	kRFL_PathBlocked               = 32,
	kRFL_OffPath                   = 33,
	kRFL_PathAborted               = 34,
	kRFL_PathSkipped               = 35,
	kRFL_PathInvalid               = 36,
	kRFL_EnterAnimInvalid          = 37,
	kRFL_EnterAnimLowPriority      = 38,
	kRFL_EnterAnimFailedToStart    = 39,
	kRFL_EnterAnimInterrupted      = 40,
	kRFL_EnterAnimCancelled        = 41,
	kRFL_EnterAnimStateDoesntExit  = 42,
	kRFL_EnterAnimInvalidSkeleton  = 43,
	kRFL_EnterAnimPrereqsNotMet    = 44,
	kRFL_EnterAnimNoAnimSequence   = 45,
	kRFL_EnterAnimSMHasNotTickedYet = 46,
	kRFL_EnterAnimContextNotUsedYet = 47,
	kRFL_EnterAnimPawnIsDead       = 48,
	kRFL_EnterAnimSMDoesNotExist   = 49,
	kRFL_EnterAnimNoFail           = 50,
	kRFL_LoopAnimInvalid           = 51,
	kRFL_LoopAnimLowPriority       = 52,
	kRFL_LoopAnimFailedToStart     = 53,
	kRFL_LoopAnimInterrupted       = 54,
	kRFL_LoopAnimCancelled         = 55,
	kRFL_LoopAnimStateDoesntExit   = 56,
	kRFL_LoopAnimInvalidSkeleton   = 57,
	kRFL_LoopAnimPrereqsNotMet     = 58,
	kRFL_LoopAnimNoAnimSequence    = 59,
	kRFL_LoopAnimSMHasNotTickedYet = 60,
	kRFL_LoopAnimContextNotUsedYet = 61,
	kRFL_LoopAnimPawnIsDead        = 62,
	kRFL_LoopAnimSMDoesNotExist    = 63,
	kRFL_LoopAnimNoFail            = 64,
	kRFL_ExitAnimInvalid           = 65,
	kRFL_ExitAnimLowPriority       = 66,
	kRFL_ExitAnimFailedToStart     = 67,
	kRFL_ExitAnimInterrupted       = 68,
	kRFL_ExitAnimCancelled         = 69,
	kRFL_ExitAnimStateDoesntExit   = 70,
	kRFL_ExitAnimInvalidSkeleton   = 71,
	kRFL_ExitAnimPrereqsNotMet     = 72,
	kRFL_ExitAnimNoAnimSequence    = 73,
	kRFL_ExitAnimSMHasNotTickedYet = 74,
	kRFL_ExitAnimContextNotUsedYet = 75,
	kRFL_ExitAnimPawnIsDead        = 76,
	kRFL_ExitAnimSMDoesNotExist    = 77,
	kRFL_ExitAnimNoFail            = 78,
	kRFL_ExitAnimCompleted         = 79,
	kRFL_SkipExitAnimIfThreat      = 80,
	kRFL_AmbientFacePlayer         = 81,
	kRFL_MAX                       = 82
};


// Enum BendGame.ePOITenseType
enum class EePOITenseType : uint8_t
{
	kPOITense_AnyPose              = 0,
	kPOITense_NeverUse             = 1,
	kPOITense_OnlyUse              = 2,
	kPOITense_MAX                  = 3
};


// Enum BendGame.ePOIUserType
enum class EePOIUserType : uint8_t
{
	kPOI_Player                    = 0,
	kPOI_Human                     = 1,
	kPOI_Freaker                   = 2,
	kPOI_Animal                    = 3,
	kPOI_Custom                    = 4,
	kPOI_MAX                       = 5
};


// Enum BendGame.EPatrolPOIType
enum class EPatrolPOIType : uint8_t
{
	Forward                        = 0,
	Backward                       = 1,
	PingPong                       = 2,
	Random                         = 3,
	EPatrolPOIType_MAX             = 4
};


// Enum BendGame.EXpecActionType
enum class EXpecActionType : uint8_t
{
	Normal                         = 0,
	Idle                           = 1,
	Transition                     = 2,
	EXpecActionType_MAX            = 3
};


// Enum BendGame.EXpecEventPawnState
enum class EXpecEventPawnState : uint8_t
{
	DESPAWNED                      = 0,
	TRY_TO_SPAWN                   = 1,
	SPAWNED                        = 2,
	TRY_TO_FLEE                    = 3,
	FLEE                           = 4,
	TRY_TO_HIDE                    = 5,
	HIDDEN                         = 6,
	TRY_TO_DESPAWN                 = 7,
	UNKOWN                         = 8,
	EXpecEventPawnState_MAX        = 9
};


// Enum BendGame.EXpecMigrationAction
enum class EXpecMigrationAction : uint8_t
{
	NONE                           = 0,
	UNARMED_SMOKE                  = 1,
	SIT_ON_ROCK                    = 2,
	SIT_ON_GROUND                  = 3,
	SIT_ON_CHAIR                   = 4,
	PLANT                          = 5,
	EXpecMigrationAction_MAX       = 6
};


// Enum BendGame.EXpecPawnLODChangeState
enum class EXpecPawnLODChangeState : uint8_t
{
	InitDummy                      = 0,
	PreDummyToPawn                 = 1,
	PostDummyToPawn                = 2,
	PawnToDummy                    = 3,
	DummyPreorderCancelled         = 4,
	PreDummyToPawnCancelled        = 5,
	EXpecPawnLODChangeState_MAX    = 6
};


// Enum BendGame.EXpecPawnLODPriority
enum class EXpecPawnLODPriority : uint8_t
{
	Important                      = 0,
	NearInSight                    = 1,
	NearOutOfSight                 = 2,
	InSight                        = 3,
	OutOfSight                     = 4,
	EXpecPawnLODPriority_MAX       = 5
};


// Enum BendGame.EXpecPawnLODLevel
enum class EXpecPawnLODLevel : uint8_t
{
	FullyFunctional                = 0,
	EventPawn                      = 1,
	Dummy                          = 2,
	HiddenDummy                    = 3,
	EXpecPawnLODLevel_MAX          = 4
};


// Enum BendGame.EXpecVOClass
enum class EXpecVOClass : uint8_t
{
	vo_ew_m01                      = 0,
	vo_ew_f02                      = 1,
	vo_ew_m03                      = 2,
	vo_ew_f04                      = 3,
	vo_ew_m05                      = 4,
	vo_ew_f06                      = 5,
	vo_ew_m07                      = 6,
	vo_ew_f08                      = 7,
	vo_ew_m09                      = 8,
	vo_ew_f10                      = 9,
	vo_ew_m11                      = 10,
	vo_ew_f12                      = 11,
	vo_ew_m13                      = 12,
	vo_ew_m15                      = 13,
	vo_ew_m17                      = 14,
	vo_e_m01                       = 15,
	vo_e_f02                       = 16,
	vo_e_m03                       = 17,
	vo_e_f04                       = 18,
	vo_gl_militia_officer_m01      = 19,
	vo_gl_militia_officer_f02      = 20,
	vo_gl_militia_soldier_m01      = 21,
	vo_gl_militia_soldier_f02      = 22,
	vo_gl_militia_soldier_m03      = 23,
	vo_gl_militia_soldier_f04      = 24,
	vo_gl_militia_m01              = 25,
	vo_gl_militia_m02              = 26,
	vo_gl_militia_m03              = 27,
	vo_gl_militia_m04              = 28,
	vo_gl_militia_f01              = 29,
	vo_gl_militia_f02              = 30,
	none                           = 31,
	EXpecVOClass_MAX               = 32
};


// Enum BendGame.EXpecUsePOIResult
enum class EXpecUsePOIResult : uint8_t
{
	Success                        = 0,
	UserNotFound                   = 1,
	InvalidPOI                     = 2,
	NotAllowed                     = 3,
	CannotGetSlot                  = 4,
	UnexpectableError              = 5,
	EXpecUsePOIResult_MAX          = 6
};


// Enum BendGame.EXpecPOISlotActionState
enum class EXpecPOISlotActionState : uint8_t
{
	None                           = 0,
	Queue                          = 1,
	Launched                       = 2,
	Complete                       = 3,
	Canceled                       = 4,
	EXpecPOISlotActionState_MAX    = 5
};


// Enum BendGame.EXpecScenarioActionState
enum class EXpecScenarioActionState : uint8_t
{
	None                           = 0,
	Delivered                      = 1,
	Launched                       = 2,
	Complete                       = 3,
	EXpecScenarioActionState_MAX   = 4
};


// Enum BendGame.EXpecScenarioFinishLevel
enum class EXpecScenarioFinishLevel : uint8_t
{
	Normal                         = 0,
	Interrupted                    = 1,
	NumFinishLevel                 = 2,
	EXpecScenarioFinishLevel_MAX   = 3
};


// Enum BendGame.EXpecScenarioState
enum class EXpecScenarioState : uint8_t
{
	Ready                          = 0,
	Waiting                        = 1,
	Running                        = 2,
	Finishing                      = 3,
	EXpecScenarioState_MAX         = 4
};


// Enum BendGame.EXpecScenarioExecuteResult
enum class EXpecScenarioExecuteResult : uint8_t
{
	Finish                         = 0,
	InterruptedByScenario          = 1,
	InterruptedByEvent             = 2,
	InterruptedAware               = 3,
	InterruptedSemiaware           = 4,
	InterruptedRequestLeave        = 5,
	InterruptedExpired             = 6,
	InterruptedLowLOD              = 7,
	InterruptedDueToEventScenarioFailed = 8,
	InterruptedBlocked             = 9,
	FailedToPerformAction          = 10,
	FailedToMove                   = 11,
	FailedToRotate                 = 12,
	FailedToGetAnimSequence        = 13,
	FailedToPlayVO                 = 14,
	FailedToPlayConversation       = 15,
	FailInvalidActor               = 16,
	EXpecScenarioExecuteResult_MAX = 17
};


// Enum BendGame.EXpecScenarioRequestResult
enum class EXpecScenarioRequestResult : uint8_t
{
	Success                        = 0,
	FailInvalidArg                 = 1,
	FailScenarioNotFound           = 2,
	FailNotEnoughResources         = 3,
	FailNotEnoughActors            = 4,
	FailCanceledByClient           = 5,
	FailCannotLaunchEvent          = 6,
	FailFatalError                 = 7,
	EXpecScenarioRequestResult_MAX = 8
};


// Enum BendGame.EXpecScenarioCommand
enum class EXpecScenarioCommand : uint8_t
{
	PerformAction                  = 0,
	MoveTo                         = 1,
	RotateTo                       = 2,
	AlignWith                      = 3,
	PlayVO                         = 4,
	PlayConversation               = 5,
	SetLookBlendPart               = 6,
	LookAt                         = 7,
	Jump                           = 8,
	EventJump                      = 9,
	Goto                           = 10,
	SetEvent                       = 11,
	ClearEvent                     = 12,
	Gate                           = 13,
	Delay                          = 14,
	WaitForAction                  = 15,
	WaitForEvent                   = 16,
	SendEvent                      = 17,
	RunScenario                    = 18,
	Lock                           = 19,
	Unlock                         = 20,
	Release                        = 21,
	ReleaseEvent                   = 22,
	Cancel                         = 23,
	Checkpoint                     = 24,
	EnableLowLOD                   = 25,
	DisableLowLOD                  = 26,
	SetIdleGroup                   = 27,
	Grant                          = 28,
	StartTimer                     = 29,
	StopTimer                      = 30,
	Return                         = 31,
	Finish                         = 32,
	None                           = 33,
	EXpecScenarioCommand_MAX       = 34
};


// Enum BendGame.EXpecPOISlotState
enum class EXpecPOISlotState : uint8_t
{
	Empty                          = 0,
	Moving                         = 1,
	Turning                        = 2,
	PartialWeaponTransition        = 3,
	PerformAction                  = 4,
	Finish                         = 5,
	Unknown                        = 6,
	Error                          = 7,
	EXpecPOISlotState_MAX          = 8
};


// Enum BendGame.EXpecPOILeaveReason
enum class EXpecPOILeaveReason : uint8_t
{
	Finish                         = 0,
	EXpecPOILeaveReason_MAX        = 1
};


// Enum BendGame.EXpecPawnState
enum class EXpecPawnState : uint8_t
{
	Unknown                        = 0,
	UsingPOI                       = 1,
	EXpecPawnState_MAX             = 2
};


// Enum BendGame.EXpecPOIUserGender
enum class EXpecPOIUserGender : uint8_t
{
	Both                           = 0,
	Male                           = 1,
	Female                         = 2,
	EXpecPOIUserGender_MAX         = 3
};


// Enum BendGame.EXpecPOIUserType
enum class EXpecPOIUserType : uint8_t
{
	Survivor                       = 0,
	Guard                          = 1,
	Worker                         = 2,
	EXpecPOIUserType_MAX           = 3
};


// Enum BendGame.EXpecTimeZone
enum class EXpecTimeZone : uint8_t
{
	Morning                        = 0,
	Afternoon                      = 1,
	Evening                        = 2,
	Night                          = 3,
	SIZE                           = 4,
	EXpecTimeZone_MAX              = 5
};


// Enum BendGame.ePOIAnimType
enum class EePOIAnimType : uint8_t
{
	kAnimSlot_None                 = 0,
	kAnimSlot_Group                = 1,
	kAnimSlot_List                 = 2,
	kAnimSlot_MAX                  = 3
};


// Enum BendGame.ETypeTimeOfDay
enum class ETypeTimeOfDay : uint8_t
{
	AlwaysOn                       = 0,
	DayTimeRig                     = 1,
	NightTimeRig                   = 2,
	AlwaysOff                      = 3,
	ENUM_SIZE                      = 4,
	ETypeTimeOfDay_MAX             = 5
};


// Enum BendGame.ETypePropFlickering
enum class ETypePropFlickering : uint8_t
{
	Off                            = 0,
	LowFreq                        = 1,
	LowFreqOffset                  = 2,
	HighFreq                       = 3,
	HighFreqOffset                 = 4,
	SpookyFreqMostlyOff            = 5,
	SpookyFreqMostlyOn             = 6,
	AWIFreq                        = 7,
	AWIFreqOffset                  = 8,
	Custom                         = 9,
	CustomOffset                   = 10,
	ENUM_SIZE                      = 11,
	ETypePropFlickering_MAX        = 12
};


// Enum BendGame.ETypePropRigColorOffset
enum class ETypePropRigColorOffset : uint8_t
{
	Cooler                         = 0,
	Cool                           = 1,
	Neutral                        = 2,
	Warm                           = 3,
	Warmer                         = 4,
	ENUM_SIZE                      = 5,
	ETypePropRigColorOffset_MAX    = 6
};


// Enum BendGame.ETypeLightIntensityPreset
enum class ETypeLightIntensityPreset : uint8_t
{
	Bright                         = 0,
	Normal                         = 1,
	Dim                            = 2,
	Dimmer                         = 3,
	ENUM_SIZE                      = 4,
	ETypeLightIntensityPreset_MAX  = 5
};


// Enum BendGame.EAudioProfileDynamicRange
enum class EAudioProfileDynamicRange : uint8_t
{
	Bookshelf                      = 0,
	TV                             = 1,
	FullRange                      = 2,
	Headphone                      = 3,
	NightMode                      = 4,
	Standard                       = 5,
	Num                            = 6,
	EAudioProfileDynamicRange_MAX  = 7
};


// Enum BendGame.EAudioProfileFormat
enum class EAudioProfileFormat : uint8_t
{
	Stereo                         = 0,
	Surround51                     = 1,
	Surround71                     = 2,
	HeadphoneStereo                = 3,
	Headphone3D                    = 4,
	Headphone51                    = 5,
	TVSpeakers                     = 6,
	SoundBar                       = 7,
	Num                            = 8,
	EAudioProfileFormat_MAX        = 9
};


// Enum BendGame.EProfileOption
enum class EProfileOption : uint8_t
{
	Audio                          = 0,
	Controller                     = 1,
	Display                        = 2,
	Game                           = 3,
	Language                       = 4,
	MenuOnly                       = 5,
	UserInterface                  = 6,
	Num                            = 7,
	EProfileOption_MAX             = 8
};


// Enum BendGame.EScriptedEncounterRoleEnum
enum class EScriptedEncounterRoleEnum : uint8_t
{
	Soldier                        = 0,
	Commander                      = 1,
	Researcher                     = 2,
	EScriptedEncounterRoleEnum_MAX = 3
};


// Enum BendGame.EBendEffectRotationSpace
enum class EBendEffectRotationSpace : uint8_t
{
	BERS_WorldSpace                = 0,
	BERS_ComponentSpace            = 1,
	BERS_ParentBoneSpace           = 2,
	BERS_BoneSpace                 = 3,
	BERS_ActorSpace                = 4,
	BERS_MAX                       = 5
};


// Enum BendGame.EStreamingOverrideType
enum class EStreamingOverrideType : uint8_t
{
	EOverrideOnBeginPlay           = 0,
	EOverrideViaVolume             = 1,
	EOverrideViaScript             = 2,
	EStreamingOverrideType_MAX     = 3
};


// Enum BendGame.ESwipeDirection
enum class ESwipeDirection : uint8_t
{
	NoSwipe                        = 0,
	SwipeUp                        = 1,
	SwipeLeft                      = 2,
	SwipeDown                      = 3,
	SwipeRight                     = 4,
	ESwipeDirection_MAX            = 5
};


// Enum BendGame.ESwipeResult
enum class ESwipeResult : uint8_t
{
	TooShort                       = 0,
	DeadzoneBlocked                = 1,
	Success                        = 2,
	ESwipeResult_MAX               = 3
};


// Enum BendGame.EEarlyUnlockVersion
enum class EEarlyUnlockVersion : uint8_t
{
	None                           = 0,
	CollectorsEdition              = 1,
	PreOrder                       = 2,
	HardModeCompleted              = 3,
	DLC1                           = 4,
	DLC2                           = 5,
	DLC3                           = 6,
	SurvivalMode                   = 7,
	NewGamePlus                    = 8,
	DeathStranding                 = 9,
	EEarlyUnlockVersion_MAX        = 10
};


// Enum BendGame.eGameDBComparison
enum class EeGameDBComparison : uint8_t
{
	Equal                          = 0,
	Greater                        = 1,
	GreaterOrEqual                 = 2,
	Less                           = 3,
	LessOrEqual                    = 4,
	eGameDBComparison_MAX          = 5
};


// Enum BendGame.EComparison
enum class EComparison : uint8_t
{
	Equal                          = 0,
	NotEqual                       = 1,
	Less                           = 2,
	LessOrEqual                    = 3,
	Greater                        = 4,
	GreaterOrEqual                 = 5,
	EComparison_MAX                = 6
};


// Enum BendGame.EMapMenuState
enum class EMapMenuState : uint8_t
{
	None                           = 0,
	Default                        = 1,
	LocationFocus                  = 2,
	Script                         = 3,
	EMapMenuState_MAX              = 4
};


// Enum BendGame.ESaveMenuMode
enum class ESaveMenuMode : uint8_t
{
	Save                           = 0,
	Load                           = 1,
	CriticalLoad                   = 2,
	ESaveMenuMode_MAX              = 3
};


// Enum BendGame.EBendVehicleSpeedLimiterMethod
enum class EBendVehicleSpeedLimiterMethod : uint8_t
{
	BodyDrag                       = 0,
	EngineBraking                  = 1,
	EBendVehicleSpeedLimiterMethod_MAX = 2
};


// Enum BendGame.EBlindfireTargetSelect
enum class EBlindfireTargetSelect : uint8_t
{
	BFTS_Top                       = 0,
	BFTS_Bottom                    = 1,
	BFTS_Left                      = 2,
	BFTS_Right                     = 3,
	BFTS_Max                       = 4
};


// Enum BendGame.EWeaponMeleeTier
enum class EWeaponMeleeTier : uint8_t
{
	One                            = 0,
	Two                            = 1,
	Three                          = 2,
	Four                           = 3,
	Five                           = 4,
	Num                            = 5,
	EWeaponMeleeTier_MAX           = 6
};


// Enum BendGame.XPEC_Enum_LerpType
enum class EXPEC_Enum_LerpType : uint8_t
{
	ROTATION_ONLY                  = 0,
	TRANSFORM                      = 1,
	RELATIVE_TRANSFORM             = 2,
	LOCATION_ONLY                  = 3,
	LOCATION_Z_ONLY                = 4,
	Num                            = 5,
	XPEC_Enum_MAX                  = 6
};


// Enum BendGame.ECustomBlackBoardEntryComparison
enum class ECustomBlackBoardEntryComparison : uint8_t
{
	Equal                          = 0,
	NotEqual                       = 1,
	LessThan                       = 2,
	GreaterThan                    = 3,
	LessThanOrEqual                = 4,
	GreaterThanOrEqual             = 5,
	ECustomBlackBoardEntryComparison_MAX = 6
};


// Enum BendGame.EBendCrowdPromotionMode
enum class EBendCrowdPromotionMode : uint8_t
{
	EnabledFully                   = 0,
	EnabledOnlyUserRequestedPromotions = 1,
	DisabledFully                  = 2,
	EBendCrowdPromotionMode_MAX    = 3
};


// Enum BendGame.EDLCScoreSubmissionResult
enum class EDLCScoreSubmissionResult : uint8_t
{
	IncreasedRank                  = 0,
	IncreasedScore                 = 1,
	NoChange                       = 2,
	EDLCScoreSubmissionResult_MAX  = 3
};


// Enum BendGame.EDLCDataFetchResult
enum class EDLCDataFetchResult : uint8_t
{
	Found                          = 0,
	NotFound                       = 1,
	EDLCDataFetchResult_MAX        = 2
};


// Enum BendGame.EWidgetVisibilityOverride
enum class EWidgetVisibilityOverride : uint8_t
{
	None                           = 0,
	Hidden                         = 1,
	EWidgetVisibilityOverride_MAX  = 2
};


// Enum BendGame.EDetonateAttemptResultType
enum class EDetonateAttemptResultType : uint8_t
{
	Success                        = 0,
	NoExplosives                   = 1,
	CurrentlyAnimating             = 2,
	Other                          = 3,
	EDetonateAttemptResultType_MAX = 4
};


// Enum BendGame.EInteractManagerTypeToUse
enum class EInteractManagerTypeToUse : uint8_t
{
	Default                        = 0,
	Secondary                      = 1,
	EInteractManagerTypeToUse_MAX  = 2
};


// Enum BendGame.ERecipeCraftState
enum class ERecipeCraftState : uint8_t
{
	Craftable                      = 0,
	MissingComponent               = 1,
	MissingAllComponents           = 2,
	None                           = 3,
	ERecipeCraftState_MAX          = 4
};


// Enum BendGame.EInventoryItemWidgetBadgeIcon
enum class EInventoryItemWidgetBadgeIcon : uint8_t
{
	None                           = 0,
	Cross                          = 1,
	Check                          = 2,
	Minus                          = 3,
	Lock                           = 4,
	Purchase                       = 5,
	Equipped                       = 6,
	NewItem                        = 7,
	MissionItem                    = 8,
	FactionLocked                  = 9,
	EInventoryItemWidgetBadgeIcon_MAX = 10
};


// Enum BendGame.EInventoryItemWidgetBadge
enum class EInventoryItemWidgetBadge : uint8_t
{
	NewItem                        = 0,
	Status                         = 1,
	Mission                        = 2,
	Num                            = 3,
	EInventoryItemWidgetBadge_MAX  = 4
};


// Enum BendGame.EInventoryEquipmentSlot
enum class EInventoryEquipmentSlot : uint8_t
{
	Primary0                       = 0,
	Primary1                       = 1,
	Secondary                      = 2,
	Melee                          = 3,
	Explosive0                     = 4,
	Explosive1                     = 5,
	Explosive2                     = 6,
	Explosive3                     = 7,
	Trap0                          = 8,
	Trap1                          = 9,
	Trap2                          = 10,
	Trap3                          = 11,
	Flashlight                     = 12,
	Binoculars                     = 13,
	Rock                           = 14,
	Meat                           = 15,
	Num                            = 16,
	EInventoryEquipmentSlot_MAX    = 17
};


// Enum BendGame.EInventoryItemTextureTag
enum class EInventoryItemTextureTag : uint8_t
{
	Icon                           = 0,
	BackgroundImage                = 1,
	Num                            = 2,
	EInventoryItemTextureTag_MAX   = 3
};


// Enum BendGame.EMapWaypointMarker3D
enum class EMapWaypointMarker3D : uint8_t
{
	MissionWaypoint                = 0,
	UserWaypoint                   = 1,
	FastTravelWaypoint             = 2,
	ScriptWaypoint                 = 3,
	Num                            = 4,
	EMapWaypointMarker3D_MAX       = 5
};


// Enum BendGame.EBikePartMenuCategory
enum class EBikePartMenuCategory : uint8_t
{
	Performance                    = 0,
	Accessory                      = 1,
	Paint                          = 2,
	Theme                          = 3,
	EBikePartMenuCategory_MAX      = 4
};


// Enum BendGame.EMerchantType
enum class EMerchantType : uint8_t
{
	kMerchantType_Standard         = 0,
	kMerchantType_Mechanic         = 1,
	kMerchantType_StorageLocker    = 2,
	kMerchantType_MAX              = 3
};


// Enum BendGame.EOptionListReply
enum class EOptionListReply : uint8_t
{
	OLR_MenuChangeAllowed          = 0,
	OLR_MenuChangeBlocked          = 1,
	OLR_Max                        = 2
};


// Enum BendGame.EOptionWrapStyle
enum class EOptionWrapStyle : uint8_t
{
	Wrap                           = 0,
	Clamp                          = 1,
	EOptionWrapStyle_MAX           = 2
};


// Enum BendGame.ESurvivalWheelMouseMode
enum class ESurvivalWheelMouseMode : uint8_t
{
	Scroll                         = 0,
	Cursor                         = 1,
	Hybrid                         = 2,
	ESurvivalWheelMouseMode_MAX    = 3
};


// Enum BendGame.ESurvivalWheelCategoryState
enum class ESurvivalWheelCategoryState : uint8_t
{
	Collapsed                      = 0,
	Previewed                      = 1,
	Expanded                       = 2,
	ESurvivalWheelCategoryState_MAX = 3
};


// Enum BendGame.AttrDataType
enum class EAttrDataType : uint8_t
{
	None                           = 0,
	String                         = 1,
	StringArray                    = 2,
	Text                           = 3,
	TextArray                      = 4,
	Integer                        = 5,
	IntegerArray                   = 6,
	Float                          = 7,
	FloatArray                     = 8,
	Boolean                        = 9,
	BooleanArray                   = 10,
	AttrDataType_MAX               = 11
};


// Enum BendGame.BPStreamingStatId
enum class EBPStreamingStatId : uint8_t
{
	STAT_OPTIMAL_TEXTURE_SIZE      = 0,
	STAT_STREAMING_TEXTURES_SIZE   = 1,
	STAT_NON_STREAMING_TEXTURES_SIZE = 2,
	STAT_STREAMING_OVER_BUDGET     = 3,
	STAT_TEXTURE_POOLSIZE          = 4,
	STAT_TEXTURE_POOL_ALLOCATED_SIZE = 5,
	STAT_MAX                       = 6
};


// Enum BendGame.BPMallocTrackerGroupExternal
enum class EBPMallocTrackerGroupExternal : uint8_t
{
	GARLIC_SYSTEM_GLOBAL           = 0,
	GARLIC_ENV_SCRIM_VISTAS        = 1,
	GARLIC_ENV_REGION_GLOBAL       = 2,
	GARLIC_GAMEPLAY                = 3,
	GARLIC_ENV_LOD0                = 4,
	GARLIC_ENV_LOD1                = 5,
	GARLIC_ENV_LOD2                = 6,
	GARLIC_ENV_INTERIOR            = 7,
	GARLIC_UI                      = 8,
	GARLIC_CHARACTERS              = 9,
	GARLIC_CINEMATICS              = 10,
	GARLIC_CODE_OVERHEAD           = 11,
	GARLIC_MAX                     = 12
};


// Enum BendGame.BPMallocTrackerGroup
enum class EBPMallocTrackerGroup : uint8_t
{
	MALLOC_SYSTEM_GLOBAL           = 0,
	MALLOC_ENV_SCRIM_VISTAS        = 1,
	MALLOC_ENV_REGION_GLOBAL       = 2,
	MALLOC_GAMEPLAY                = 3,
	MALLOC_ENV_LOD0                = 4,
	MALLOC_ENV_LOD1                = 5,
	MALLOC_ENV_LOD2                = 6,
	MALLOC_ENV_INTERIOR            = 7,
	MALLOC_UI                      = 8,
	MALLOC_CHARACTERS              = 9,
	MALLOC_ANIMATION               = 10,
	MALLOC_CINEMATICS              = 11,
	MALLOC_AUDIO                   = 12,
	MALLOC_CODE_OVERHEAD           = 13,
	MALLOC_MAX                     = 14
};


// Enum BendGame.EWidgetMenuClass
enum class EWidgetMenuClass : uint8_t
{
	Hud                            = 0,
	Map                            = 1,
	Inventory                      = 2,
	FieldInventory                 = 3,
	InputInteract                  = 4,
	Popup                          = 5,
	PauseMenu                      = 6,
	OptionsMenu                    = 7,
	MerchantMenu                   = 8,
	MechanicMenu                   = 9,
	WeaponWheel                    = 10,
	SkillTreeMenu                  = 11,
	CollectiblesMenu               = 12,
	WeaponPartSelectMenu           = 13,
	InventoryNew                   = 14,
	WeaponWheelNew                 = 15,
	MerchantMenuNew                = 16,
	MechanicMenuNew                = 17,
	MissionStatMenu                = 18,
	SubtitlesWidget                = 19,
	PopupControllerDisconnect      = 20,
	PopupContactingServer          = 21,
	Num                            = 22,
	EWidgetMenuClass_MAX           = 23
};


// Enum BendGame.EXpecBlockingPawnLeaveDirection
enum class EXpecBlockingPawnLeaveDirection : uint8_t
{
	LEFT                           = 0,
	RIGHT                          = 1,
	EXpecBlockingPawnLeaveDirection_MAX = 2
};


// Enum BendGame.EXpecBlockingPawnType
enum class EXpecBlockingPawnType : uint8_t
{
	STAND                          = 0,
	SIT                            = 1,
	EXpecBlockingPawnType_MAX      = 2
};


// Enum BendGame.EXpecBlockingPawnState
enum class EXpecBlockingPawnState : uint8_t
{
	DESPAWNED                      = 0,
	TRY_TO_SPAWN                   = 1,
	IDLE                           = 2,
	WARN                           = 3,
	HIDDEN                         = 4,
	OPENING                        = 5,
	OPEN_IDLE                      = 6,
	OPEN_WARN                      = 7,
	CLOSING                        = 8,
	MISSION                        = 9,
	UNKOWN                         = 10,
	EXpecBlockingPawnState_MAX     = 11
};


// Enum BendGame.EXpecPawnRallyState
enum class EXpecPawnRallyState : uint8_t
{
	NotJoined                      = 0,
	Joined                         = 1,
	Moving                         = 2,
	LongRangeMoving                = 3,
	Turning                        = 4,
	Listening                      = 5,
	Dismissing                     = 6,
	Finished                       = 7,
	EXpecPawnRallyState_MAX        = 8
};


// Enum BendGame.EXpecRallySystemState
enum class EXpecRallySystemState : uint8_t
{
	NotActivated                   = 0,
	PreRally                       = 1,
	Rallying                       = 2,
	Speeching                      = 3,
	Dismissing                     = 4,
	Finishing                      = 5,
	EXpecRallySystemState_MAX      = 6
};


// Enum BendGame.EXpecShiftState
enum class EXpecShiftState : uint8_t
{
	NORMAL                         = 0,
	SHIFTING                       = 1,
	UNKOWN                         = 2,
	EXpecShiftState_MAX            = 3
};


// Enum BendGame.EXpecTalkingPawnVOType
enum class EXpecTalkingPawnVOType : uint8_t
{
	TalkingDummy                   = 0,
	FreakerEar                     = 1,
	None                           = 2,
	EXpecTalkingPawnVOType_MAX     = 3
};


// Enum BendGame.EBendAnimAnchorRootBoneSampleTime
enum class EBendAnimAnchorRootBoneSampleTime : uint8_t
{
	FirstFrame                     = 0,
	LastFrame                      = 1,
	SpecifiedTime                  = 2,
	EBendAnimAnchorRootBoneSampleTime_MAX = 3
};


// Enum BendGame.EBendAnimAnchorTransformSource
enum class EBendAnimAnchorTransformSource : uint8_t
{
	None                           = 0,
	CurrentTransform               = 1,
	PinInput                       = 2,
	DesiredRotation                = 3,
	DesiredMovementDirection       = 4,
	CurrentMovementDirection       = 5,
	EBendAnimAnchorTransformSource_MAX = 6
};



//---------------------------------------------------------------------------
//Script Structs
//---------------------------------------------------------------------------

// ScriptStruct BendGame.CornerRank
// 0x000C
struct FCornerRank
{
	float                                              Min;                                                      // 0x0000(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Max;                                                      // 0x0004(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                Rank;                                                     // 0x0008(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.CornerInfo
// 0x0010
struct FCornerInfo
{
	struct FCornerRank                                 Rank;                                                     // 0x0000(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              maxVelocity;                                              // 0x000C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.GroupFormationSettings
// 0x0010
struct FGroupFormationSettings
{
	TEnumAsByte<EBendGroupFormationType>               formationType;                                            // 0x0000(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	float                                              seperation;                                               // 0x0004(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                desiredLane;                                              // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              desiredSpeed;                                             // 0x000C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.DecalData
// 0x0028
struct FDecalData
{
	class UMaterialInstance*                           DecalMaterial;                                            // 0x0000(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DecalSize;                                                // 0x0008(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DecalMinSize;                                             // 0x000C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DecalDepth;                                               // 0x0010(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              LifeSpan;                                                 // 0x0014(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FadeScreenSizeStart;                                      // 0x0018(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FadeScreenSizeEnd;                                        // 0x001C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SpawnDelay;                                               // 0x0020(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0024(0x0004) MISSED OFFSET
};

// ScriptStruct BendGame.DecalDataImpactAngle
// 0x0030
struct FDecalDataImpactAngle
{
	float                                              MinAngle;                                                 // 0x0000(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxAngle;                                                 // 0x0004(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FDecalData                                  DecalFXData;                                              // 0x0008(0x0028) (Edit, DisableEditOnInstance)
};

// ScriptStruct BendGame.DecalDataExitSprayItem
// 0x0020
struct FDecalDataExitSprayItem
{
	class UMaterialInstance*                           DecalMaterial;                                            // 0x0000(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              OffsetHorizontal;                                         // 0x0008(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              OffsetVertical;                                           // 0x000C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DecalSize;                                                // 0x0010(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DecalDepth;                                               // 0x0014(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<ESurfaceOrientation>                   SurfaceOrientation;                                       // 0x0018(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               UseRandomRotation;                                        // 0x0019(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x001A(0x0002) MISSED OFFSET
	float                                              LifeSpan;                                                 // 0x001C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
};

// ScriptStruct BendGame.DecalDataExitSpray
// 0x0018
struct FDecalDataExitSpray
{
	TArray<struct FDecalDataExitSprayItem>             DecalExitSprayList;                                       // 0x0000(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	float                                              FadeScreenSizeStart;                                      // 0x0010(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FadeScreenSizeEnd;                                        // 0x0014(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
};

// ScriptStruct BendGame.ImpactFxData
// 0x0198
struct FImpactFxData
{
	TEnumAsByte<EPhysicalSurface>                      TypeOfSurface;                                            // 0x0000(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	int                                                PenetrationCost;                                          // 0x0004(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               DontPlayDefaultSoundFX;                                   // 0x0008(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0009(0x0007) MISSED OFFSET
	class USoundCue*                                   PlayerSoundFX;                                            // 0x0010(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class USoundCue*                                   PlayerSoundFXWetSurface;                                  // 0x0018(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class USoundCue*                                   SoundFX;                                                  // 0x0020(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class USoundCue*                                   SoundFXWetSurface;                                        // 0x0028(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class USoundCue*                                   SoundExitSurface;                                         // 0x0030(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SoundOffsetPosition;                                      // 0x0038(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ParticleOffsetPosition;                                   // 0x003C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               UseMovementDirection;                                     // 0x0040(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               UseSurfaceNormal;                                         // 0x0041(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               UseCodeRotation;                                          // 0x0042(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               DontPlayDefaultParticleFX;                                // 0x0043(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0044(0x0004) MISSED OFFSET
	class UParticleSystem*                             ParticleFX;                                               // 0x0048(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TAssetPtr<class UClass>                            ParticleFX_BP;                                            // 0x0050(0x0020) (Edit, DisableEditOnInstance)
	TEnumAsByte<EBendBloodSplatType>                   ParticleFX_Enum;                                          // 0x0070(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x7];                                       // 0x0071(0x0007) MISSED OFFSET
	class UParticleSystem*                             ParticleFXWet;                                            // 0x0078(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TAssetPtr<class UClass>                            ParticleFXWet_BP;                                         // 0x0080(0x0020) (Edit, DisableEditOnInstance)
	class UParticleSystem*                             ParticleExitFX;                                           // 0x00A0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TAssetPtr<class UClass>                            ParticleExitFX_BP;                                        // 0x00A8(0x0020) (Edit, DisableEditOnInstance)
	float                                              DecalOffsetPosition;                                      // 0x00C8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               DontRenderDefaultDecals;                                  // 0x00CC(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x3];                                       // 0x00CD(0x0003) MISSED OFFSET
	struct FDecalData                                  DecalFX;                                                  // 0x00D0(0x0028) (Edit, DisableEditOnInstance)
	struct FDecalDataImpactAngle                       DecalFXImpactAngle;                                       // 0x00F8(0x0030) (Edit, DisableEditOnInstance)
	struct FDecalData                                  DecalFXWet;                                               // 0x0128(0x0028) (Edit, DisableEditOnInstance)
	struct FDecalDataImpactAngle                       DecalFXWetImpactAngle;                                    // 0x0150(0x0030) (Edit, DisableEditOnInstance)
	struct FDecalDataExitSpray                         DecalExitSpray;                                           // 0x0180(0x0018) (Edit, DisableEditOnInstance)
};

// ScriptStruct BendGame.WeaponWeightData
// 0x000C
struct FWeaponWeightData
{
	TEnumAsByte<EInventoryWeaponID>                    Weapon;                                                   // 0x0000(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	float                                              Weight;                                                   // 0x0004(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0008(0x0004) MISSED OFFSET
};

// ScriptStruct BendGame.WeaponLoadoutTierData
// 0x0050
struct FWeaponLoadoutTierData
{
	struct FName                                       Name;                                                     // 0x0000(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<struct FWeaponWeightData>                   PrimaryWeapon;                                            // 0x0008(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FWeaponWeightData>                   MeleeWeapon;                                              // 0x0018(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FWeaponWeightData>                   ThrowingWeapon;                                           // 0x0028(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FWeaponWeightData>                   RetreatThrowingWeapon;                                    // 0x0038(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	class UBendArchetypeDataBase*                      DefaultArchetype;                                         // 0x0048(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
};

// ScriptStruct BendGame.WeaponLoadoutData
// 0x0018
struct FWeaponLoadoutData
{
	struct FName                                       LoadoutName;                                              // 0x0000(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<struct FWeaponLoadoutTierData>              Tiers;                                                    // 0x0008(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
};

// ScriptStruct BendGame.FactionTierData
// 0x0020
struct FFactionTierData
{
	TArray<TEnumAsByte<EAIFactionType>>                Factions;                                                 // 0x0000(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FWeaponLoadoutData>                  Loadouts;                                                 // 0x0010(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
};

// ScriptStruct BendGame.BendFNameDropdown
// 0x0018
struct FBendFNameDropdown
{
	struct FName                                       SelectedFName;                                            // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FString                                     FormattedFNamesAsString;                                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, EditConst)
};

// ScriptStruct BendGame.NPCAccuracyOverrideData
// 0x0108
struct FNPCAccuracyOverrideData
{
	bool                                               m_bNPCGunAccuracyGraphOverride;                           // 0x0000(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               m_bNPCLoSAccuracyGraphOverride;                           // 0x0001(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x0002(0x0006) MISSED OFFSET
	struct FRuntimeFloatCurve                          NPCGunAccuracyGraphOverride;                              // 0x0008(0x0080) (Edit, BlueprintVisible)
	struct FRuntimeFloatCurve                          NPCLoSAccuracyGraphOverride;                              // 0x0088(0x0080) (Edit, BlueprintVisible)
};

// ScriptStruct BendGame.WeaponInitializationData
// 0x0003
struct FWeaponInitializationData
{
	TEnumAsByte<EInventoryWeaponID>                    WeaponID;                                                 // 0x0000(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EInventoryAmmoID>                      AmmoID_Override;                                          // 0x0001(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               EquipOnAdd;                                               // 0x0002(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.WeaponInitializationList
// 0x0018
struct FWeaponInitializationList
{
	struct FWeaponInitializationData                   Data[0x8];                                                // 0x0000(0x0003) (Edit)
};

// ScriptStruct BendGame.BendAmbientSpawnType
// 0x0418
struct FBendAmbientSpawnType
{
	TEnumAsByte<EAIFactionType>                        FactionToSpawn;                                           // 0x0000(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0001(0x0007) MISSED OFFSET
	class UBendRegionWeaponData*                       RegionAndTierData;                                        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EBendWorldTier>                        WorldTier;                                                // 0x0010(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0011(0x0007) MISSED OFFSET
	struct FBendFNameDropdown                          LoadoutOverride;                                          // 0x0018(0x0018) (Edit, BlueprintVisible)
	class UBendVehiclePartsDatabase*                   VehiclePartsDatabase;                                     // 0x0030(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	class UBendVehiclePartsDatabase*                   VehiclePartsDatabaseOverride;                             // 0x0038(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TAssetPtr<class UClass>                            m_VehiclePawnClass;                                       // 0x0040(0x0020) (Edit, BlueprintVisible)
	class UClass*                                      m_LoadedVehiclePawn;                                      // 0x0060(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TArray<class UBendVehicleMeshAttachmentSpecs*>     m_LoadedVehicleParts;                                     // 0x0068(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData02[0x10];                                      // 0x0078(0x0010) MISSED OFFSET
	TAssetPtr<class USoundClass>                       m_SoundClass;                                             // 0x0088(0x0020) (Edit, BlueprintVisible)
	class USoundClass*                                 m_LoadedSoundClass;                                       // 0x00A8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TEnumAsByte<EWeaponEquipOnSpawn>                   AutoEquipType;                                            // 0x00B0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x7];                                       // 0x00B1(0x0007) MISSED OFFSET
	TAssetPtr<class UBendArchetypeDataBase>            Archetype;                                                // 0x00B8(0x0020) (Edit, BlueprintVisible)
	class UBendArchetypeDataBase*                      LoadedArchetype;                                          // 0x00D8(0x0008) (ZeroConstructor, IsPlainOldData)
	TAssetPtr<class UClass>                            m_ControllerClass;                                        // 0x00E0(0x0020) (Edit, BlueprintVisible)
	class UClass*                                      m_LoadedController;                                       // 0x0100(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TEnumAsByte<EAIFactionType>                        FactionOfController;                                      // 0x0108(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x7];                                       // 0x0109(0x0007) MISSED OFFSET
	TAssetPtr<class UClass>                            m_PawnClass;                                              // 0x0110(0x0020) (Edit, BlueprintVisible)
	class UClass*                                      m_LoadedPawn;                                             // 0x0130(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UBendSkeletalMeshArrayData*                  m_PawnSkeletalMeshes;                                     // 0x0138(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UBendSkeletalMeshArrayData*                  m_LoadedPawnSkeletalMeshes;                               // 0x0140(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TAssetPtr<class UBehaviorTree>                     m_BehaviorTree;                                           // 0x0148(0x0020) (Edit, BlueprintVisible)
	class UBehaviorTree*                               m_LoadedBehaviorTree;                                     // 0x0168(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TAssetPtr<class UClass>                            m_AnimInstance;                                           // 0x0170(0x0020) (Edit, BlueprintVisible)
	class UClass*                                      m_LoadedAnimInstance;                                     // 0x0190(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TArray<class UObject*>                             m_LoadedArmorPieces;                                      // 0x0198(0x0010) (ZeroConstructor, Transient)
	int                                                m_LevelDark;                                              // 0x01A8(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                m_LevelBright;                                            // 0x01AC(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                m_LevelVariance;                                          // 0x01B0(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                m_GoalSpawnsDark;                                         // 0x01B4(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                m_GoalSpawnsBright;                                       // 0x01B8(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x4];                                       // 0x01BC(0x0004) MISSED OFFSET
	struct FName                                       LoadoutOverrideName;                                      // 0x01C0(0x0008) (ZeroConstructor, IsPlainOldData)
	float                                              m_fShootingAccuracyNPC;                                   // 0x01C8(0x0004) (ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EInventoryWeaponID>                    NPCWeaponOverrideID;                                      // 0x01CC(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EInventoryWeaponID>                    NPCMeleeWeaponOverrideID;                                 // 0x01CD(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EInventoryWeaponID>                    NPCThrowableWeaponOverrideID;                             // 0x01CE(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EInventoryWeaponID>                    NPCRetreatThrowableWeaponOverrideID;                      // 0x01CF(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FNPCAccuracyOverrideData                    NPCAccuracyOverrideData;                                  // 0x01D0(0x0108) (Edit, BlueprintVisible)
	TArray<class UObject*>                             LoadedWeapons;                                            // 0x02D8(0x0010) (ZeroConstructor, Transient)
	TArray<class UObject*>                             LoadedAmmo;                                               // 0x02E8(0x0010) (ZeroConstructor, Transient)
	TEnumAsByte<EInventoryWeaponID>                    NPCWeaponID;                                              // 0x02F8(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x7];                                       // 0x02F9(0x0007) MISSED OFFSET
	class UObject*                                     LoadedNPCWeapon;                                          // 0x0300(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UObject*                                     LoadedNPCAmmo;                                            // 0x0308(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TEnumAsByte<EInventoryWeaponID>                    NPCThrowableID;                                           // 0x0310(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0x7];                                       // 0x0311(0x0007) MISSED OFFSET
	class UObject*                                     LoadedNPCThrowable;                                       // 0x0318(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TEnumAsByte<EInventoryWeaponID>                    NPCRetreatThrowableID;                                    // 0x0320(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData08[0x7];                                       // 0x0321(0x0007) MISSED OFFSET
	class UObject*                                     LoadedNPCRetreatThrowable;                                // 0x0328(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TEnumAsByte<EInventoryWeaponID>                    NPCMeleeID;                                               // 0x0330(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData09[0x7];                                       // 0x0331(0x0007) MISSED OFFSET
	class UObject*                                     LoadedNPCMelee;                                           // 0x0338(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FWeaponInitializationList                   NPCDefaultWeapons;                                        // 0x0340(0x0018) (Edit)
	class UObject*                                     LoadedDefaultWeapons[0x8];                                // 0x0358(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UObject*                                     LoadedDefaultAmmo[0x8];                                   // 0x0398(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	int                                                MaxSpawnsOfType;                                          // 0x03D8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                NumSpawnsOfType;                                          // 0x03DC(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                Weight;                                                   // 0x03E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData10[0x4];                                       // 0x03E4(0x0004) MISSED OFFSET
	class UClass*                                      m_ConditionsObject;                                       // 0x03E8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UBendConditionsObject*                       m_ConditionsObjectInstance;                               // 0x03F0(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      CanJoinCrowd : 1;                                         // 0x03F8(0x0001) (Edit, BlueprintVisible)
	bool                                               m_bTierOverride;                                          // 0x03F9(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               m_bControllerOverride;                                    // 0x03FA(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               m_bPawnOverride;                                          // 0x03FB(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               m_bBTOverridden;                                          // 0x03FC(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               m_bMeshOverridden;                                        // 0x03FD(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               m_bVIMOverridden;                                         // 0x03FE(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               m_bWeaponOverride;                                        // 0x03FF(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               m_bMeleeWeaponOverride;                                   // 0x0400(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               m_bThrowableWeaponOverride;                               // 0x0401(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               m_bRetreatThrowableWeaponOverride;                        // 0x0402(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               m_bArchetypeOverride;                                     // 0x0403(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               m_bAccuracyOverride;                                      // 0x0404(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               m_bVehiclePartsDatabaseOverride;                          // 0x0405(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData11[0x12];                                      // 0x0406(0x0012) MISSED OFFSET
};

// ScriptStruct BendGame.MeshListArray
// 0x0028
struct FMeshListArray
{
	int                                                ListsToLoad;                                              // 0x0000(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0004(0x0004) MISSED OFFSET
	TArray<class UBendSkeletalMeshArrayData*>          MeshListArray;                                            // 0x0008(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0018(0x0010) MISSED OFFSET
};

// ScriptStruct BendGame.SpawnPool
// 0x0018
struct FSpawnPool
{
	unsigned char                                      UnknownData00[0x18];                                      // 0x0000(0x0018) MISSED OFFSET
};

// ScriptStruct BendGame.BehaviorParams
// 0x0004
struct FBehaviorParams
{
	bool                                               ScreamOnAware;                                            // 0x0000(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	bool                                               CanGrapple;                                               // 0x0001(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	bool                                               DisableFlashlight;                                        // 0x0002(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	bool                                               DisableDrops;                                             // 0x0003(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
};

// ScriptStruct BendGame.SecondaryDefendZoneInfo
// 0x0010
struct FSecondaryDefendZoneInfo
{
	TWeakObjectPtr<class AVolume>                      Zone;                                                     // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EDefendZoneBindingStrength>            BindingStrength;                                          // 0x0008(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               ignoreZoneIfLos;                                          // 0x0009(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               allowRetreatOutsideZone;                                  // 0x000A(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               ignoreSoundsOutsideZone;                                  // 0x000B(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               ignoreSightsOutsideZone;                                  // 0x000C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               UseTeamDefendZones;                                       // 0x000D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x000E(0x0002) MISSED OFFSET
};

// ScriptStruct BendGame.DefendZoneInfo
// 0x0030
struct FDefendZoneInfo
{
	TWeakObjectPtr<class AVolume>                      Zone;                                                     // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FSecondaryDefendZoneInfo                    secondaryZone;                                            // 0x0008(0x0010) (Edit, BlueprintVisible)
	float                                              radiusFromSpawn;                                          // 0x0018(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     spawnPos;                                                 // 0x001C(0x000C) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	TEnumAsByte<EDefendZoneBindingStrength>            BindingStrength;                                          // 0x0028(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               ignoreZoneIfLos;                                          // 0x0029(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               allowRetreatOutsideZone;                                  // 0x002A(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               ignoreSoundsOutsideZone;                                  // 0x002B(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               ignoreSightsOutsideZone;                                  // 0x002C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               doNotSearchOutsideZone;                                   // 0x002D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               UseTeamDefendZones;                                       // 0x002E(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1];                                       // 0x002F(0x0001) MISSED OFFSET
};

// ScriptStruct BendGame.BendSpawnRequestData
// 0x0490
struct FBendSpawnRequestData
{
	struct FBendAmbientSpawnType                       Type;                                                     // 0x0000(0x0418) (Edit, BlueprintVisible)
	class ABendSpawnLocationBase*                      Location;                                                 // 0x0418(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0420(0x0008) MISSED OFFSET
	struct FString                                     POIType;                                                  // 0x0428(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	bool                                               POITypeExclusive;                                         // 0x0438(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0439(0x0007) MISSED OFFSET
	class ABendPOI*                                    ForceUsePOI;                                              // 0x0440(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FBehaviorParams                             BehaviorParams;                                           // 0x0448(0x0004) (Edit, BlueprintVisible)
	struct FDefendZoneInfo                             defendZone;                                               // 0x044C(0x0030) (Edit, BlueprintVisible)
	TEnumAsByte<ESpawnImportance>                      importance;                                               // 0x047C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x047D(0x0003) MISSED OFFSET
	struct FScriptDelegate                             OnSpawnedDelegate;                                        // 0x0480(0x0010) (Edit, BlueprintVisible, ZeroConstructor, InstancedReference)
};

// ScriptStruct BendGame.AnimStateRotationScaleCurvePoint
// 0x0008
struct FAnimStateRotationScaleCurvePoint
{
	float                                              Speed;                                                    // 0x0000(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              RotationScale;                                            // 0x0004(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.AnimStateRotationParams
// 0x0040
struct FAnimStateRotationParams
{
	unsigned char                                      bDisableRotation : 1;                                     // 0x0000(0x0001) (Edit)
	unsigned char                                      UnknownData00 : 1;                                        // 0x0000(0x0001)
	unsigned char                                      bOverrideRotationRate : 1;                                // 0x0000(0x0001) (Edit)
	unsigned char                                      bScaleRotationRateBasedOnMoveSpeed : 1;                   // 0x0000(0x0001) (Edit)
	unsigned char                                      UnknownData01[0xF];                                       // 0x0001(0x000F) MISSED OFFSET
	struct FRotator                                    RotationRateOverride;                                     // 0x0010(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x001C(0x0004) MISSED OFFSET
	TArray<struct FAnimStateRotationScaleCurvePoint>   RotationScaleCurve;                                       // 0x0020(0x0010) (Edit, ZeroConstructor)
	float                                              ZeroRotationMovementSpeed;                                // 0x0030(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              FullRotationMovementSpeed;                                // 0x0034(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bConvertedRotationParamsToUsingRotationScaleCurve : 1;    // 0x0038(0x0001)
	unsigned char                                      UnknownData03[0x7];                                       // 0x0039(0x0007) MISSED OFFSET
};

// ScriptStruct BendGame.BendActionData
// 0x00A0
struct FBendActionData
{
	unsigned char                                      bUseAnchor : 1;                                           // 0x0000(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bAnchorAffectsTranslation : 1;                            // 0x0000(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bUseAnchorGroundFixup : 1;                                // 0x0000(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bUseGroundFixup : 1;                                      // 0x0000(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bCanTurn : 1;                                             // 0x0000(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bUseProp : 1;                                             // 0x0000(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bForceHolster : 1;                                        // 0x0000(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bLooping : 1;                                             // 0x0000(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bCanBeMeleeAttacked : 1;                                  // 0x0001(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bCanBeGrappled : 1;                                       // 0x0001(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bCanGrapple : 1;                                          // 0x0001(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bCanBeStealthKilled : 1;                                  // 0x0001(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bCanBePairKilled : 1;                                     // 0x0001(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bCanBePausedByMovementStopRequest : 1;                    // 0x0001(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bHoldLastFrame : 1;                                       // 0x0001(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bBlockHitReactions : 1;                                   // 0x0001(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bEnableHeadLook : 1;                                      // 0x0002(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bPlayEvenIfDead : 1;                                      // 0x0002(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0003(0x0001) MISSED OFFSET
	TEnumAsByte<EPerformActionType>                    ActionType;                                               // 0x0004(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0005(0x0003) MISSED OFFSET
	class UAnimationAsset*                             AnimationSequence;                                        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       SlotName;                                                 // 0x0010(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BlendInTime;                                              // 0x0018(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BlendOutTime;                                             // 0x001C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BlendOutTriggerTime;                                      // 0x0020(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PlayRate;                                                 // 0x0024(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TWeakObjectPtr<class USkeletalMeshComponent>       PairedAnimParent;                                         // 0x0028(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UClass*                                      PropClass;                                                // 0x0030(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           PropAnimationSequence;                                    // 0x0038(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       PropSocketAttachName;                                     // 0x0040(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EAttachLocation>                       PropAttachLocationType;                                   // 0x0048(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0049(0x0007) MISSED OFFSET
	struct FName                                       AnchorName;                                               // 0x0050(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       AnchorReferenceBoneName;                                  // 0x0058(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      Priority;                                                 // 0x0060(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EBendPerformActionCompletionBehavior>  CompleteTransitionBehavior;                               // 0x0061(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EBendAnimCategory>                     NextAnimCategory;                                         // 0x0062(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x5];                                       // 0x0063(0x0005) MISSED OFFSET
	class UBendPrerequisiteAnimCategoryData*           PrerequisiteAnimCategory;                                 // 0x0068(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     RotateToTargetLocation;                                   // 0x0070(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              RotationBlendTime;                                        // 0x007C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              LoopingTime;                                              // 0x0080(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EBendPerformActionCollisionMode>       CollisionMode;                                            // 0x0084(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x3];                                       // 0x0085(0x0003) MISSED OFFSET
	unsigned char                                      bIgnoreCollision : 1;                                     // 0x0088(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData05[0x17];                                      // 0x0089(0x0017) MISSED OFFSET
};

// ScriptStruct BendGame.PerformActionRequest
// 0x0120
struct FPerformActionRequest
{
	struct FBendActionData                             ActionData;                                               // 0x0000(0x00A0) (Transient)
	unsigned char                                      UnknownData00[0x30];                                      // 0x00A0(0x0030) MISSED OFFSET
	class AActor*                                      PropActor;                                                // 0x00D0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x48];                                      // 0x00D8(0x0048) MISSED OFFSET
};

// ScriptStruct BendGame.FactionEntry
// 0x0090
struct FFactionEntry
{
	TEnumAsByte<EAIFactionType>                        Type;                                                     // 0x0000(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0001(0x0007) MISSED OFFSET
	struct FText                                       DisplayName;                                              // 0x0008(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FText                                       DisplayDescription;                                       // 0x0020(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	TAssetPtr<class UClass>                            DefaultController;                                        // 0x0038(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	TAssetPtr<class UClass>                            DefaultPawn;                                              // 0x0058(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FVector2D                                   ClampMinMax;                                              // 0x0078(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<float>                                      Values;                                                   // 0x0080(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, SaveGame)
};

// ScriptStruct BendGame.BaseConfidenceEntry
// 0x0010
struct FBaseConfidenceEntry
{
	TArray<float>                                      Values;                                                   // 0x0000(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, SaveGame)
};

// ScriptStruct BendGame.BendAnimSetCompatibilityRating
// 0x0010
struct FBendAnimSetCompatibilityRating
{
	TWeakObjectPtr<class USkeleton>                    Skeleton;                                                 // 0x0000(0x0008) (Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	float                                              StrictCompatibility;                                      // 0x0008(0x0004) (Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	float                                              LooseCompatibility;                                       // 0x000C(0x0004) (Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData)
};

// ScriptStruct BendGame.BendAnimSequenceEntry
// 0x0010
struct FBendAnimSequenceEntry
{
	class UAnimSequenceBase*                           AnimSequence;                                             // 0x0000(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                Weight;                                                   // 0x0008(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x000C(0x0004) MISSED OFFSET
};

// ScriptStruct BendGame.BendAnimSequenceGroup
// 0x0018
struct FBendAnimSequenceGroup
{
	struct FName                                       AnimSequenceGroupName;                                    // 0x0000(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<struct FBendAnimSequenceEntry>              AnimSequenceEntries;                                      // 0x0008(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
};

// ScriptStruct BendGame.BendAnimBlendSpaceEntry
// 0x0010
struct FBendAnimBlendSpaceEntry
{
	class UBlendSpaceBase*                             BlendSpace;                                               // 0x0000(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                Weight;                                                   // 0x0008(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x000C(0x0004) MISSED OFFSET
};

// ScriptStruct BendGame.BendAnimBlendSpaceGroup
// 0x0018
struct FBendAnimBlendSpaceGroup
{
	struct FName                                       AnimBlendSpaceGroupName;                                  // 0x0000(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<struct FBendAnimBlendSpaceEntry>            BlendSpaceEntries;                                        // 0x0008(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
};

// ScriptStruct BendGame.BendPairedAnimData
// 0x0018
struct FBendPairedAnimData
{
	class UAnimationAsset*                             AttackerAnim;                                             // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UAnimationAsset*                             VictimAnim;                                               // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               UseFocusMode;                                             // 0x0010(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0011(0x0007) MISSED OFFSET
};

// ScriptStruct BendGame.BendPairedAnimDodgeAttackData
// 0x0070
struct FBendPairedAnimDodgeAttackData
{
	struct FBendPairedAnimData                         DodgeAnim;                                                // 0x0000(0x0018) (Edit, BlueprintVisible)
	struct FBendPairedAnimData                         DirectionalDodgeAnim;                                     // 0x0018(0x0018) (Edit, BlueprintVisible)
	struct FBendPairedAnimData                         KillAnim;                                                 // 0x0030(0x0018) (Edit, BlueprintVisible)
	struct FBendPairedAnimData                         CounterAttackAnim;                                        // 0x0048(0x0018) (Edit, BlueprintVisible)
	class UBendPairedCounterData*                      DefaultCounterAttackData;                                 // 0x0060(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               UseMeleeWeapon;                                           // 0x0068(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0069(0x0007) MISSED OFFSET
};

// ScriptStruct BendGame.BendCounterAnimData
// 0x0028
struct FBendCounterAnimData
{
	TEnumAsByte<EAIFactionType>                        Faction;                                                  // 0x0000(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0001(0x0007) MISSED OFFSET
	TArray<struct FBendPairedAnimDodgeAttackData>      CounterAnims;                                             // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	class UAnimSequenceBase*                           PairedAnim;                                               // 0x0018(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxCounterDistance;                                       // 0x0020(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxCounterSpreadAngle;                                    // 0x0024(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.BendAttackData
// 0x0060
struct FBendAttackData
{
	class UAnimSequenceBase*                           AttackAnim;                                               // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           AttackFailedAnim;                                         // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           AttackSuccessAnim;                                        // 0x0010(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<struct FBendCounterAnimData>                VictimsCounterAnimData;                                   // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	bool                                               Anchor;                                                   // 0x0028(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EMovementMode>                         MovementMode;                                             // 0x0029(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x002A(0x0002) MISSED OFFSET
	unsigned char                                      RequiresLeftArm : 1;                                      // 0x002C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      RequiresRightArm : 1;                                     // 0x002C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData01[0x3];                                       // 0x002D(0x0003) MISSED OFFSET
	float                                              VictimsMaxMoveDistance;                                   // 0x0030(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MinCancelAngle;                                           // 0x0034(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxCancelAngle;                                           // 0x0038(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MinDistanceModifierOverride;                              // 0x003C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxDistanceModifierOverride;                              // 0x0040(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MinVerticalDistance;                                      // 0x0044(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxVerticalDistance;                                      // 0x0048(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MinHorizontalDistance;                                    // 0x004C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxHorizontalDistance;                                    // 0x0050(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bAdjustAttackToTargetCapsuleSize;                         // 0x0054(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bDisableCollisionAgainstTarget;                           // 0x0055(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bMustBeFrustrated;                                        // 0x0056(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x1];                                       // 0x0057(0x0001) MISSED OFFSET
	float                                              TargetToPawnAnchorOffset;                                 // 0x0058(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AttackDistance;                                           // 0x005C(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
};

// ScriptStruct BendGame.BendAttackAnim
// 0x0068
struct FBendAttackAnim
{
	struct FBendAttackData                             AttackData;                                               // 0x0000(0x0060) (Edit, BlueprintVisible)
	float                                              MinAngle;                                                 // 0x0060(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxAngle;                                                 // 0x0064(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.BendNamedAttackList
// 0x0018
struct FBendNamedAttackList
{
	struct FName                                       CategoryName;                                             // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<struct FBendAttackAnim>                     Attacks;                                                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
};

// ScriptStruct BendGame.BendArmorParts
// 0x0090
struct FBendArmorParts
{
	bool                                               PartOfMesh;                                               // 0x0000(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0001(0x0007) MISSED OFFSET
	TAssetPtr<class USkeletalMesh>                     SkeletalMesh;                                             // 0x0008(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	TAssetPtr<class UStaticMesh>                       StaticMesh;                                               // 0x0028(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FName                                       Socket;                                                   // 0x0048(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               AutoFallOff;                                              // 0x0050(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0051(0x0007) MISSED OFFSET
	TArray<TEnumAsByte<EeDamageLocations>>             ProtectedBodyParts;                                       // 0x0058(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	float                                              Health;                                                   // 0x0068(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x24];                                      // 0x006C(0x0024) MISSED OFFSET
};

// ScriptStruct BendGame.BendPawnArmorParts
// 0x0010
struct FBendPawnArmorParts
{
	TArray<struct FBendArmorParts>                     ArmorParts;                                               // 0x0000(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
};

// ScriptStruct BendGame.BendDamageAnimationData
// 0x0010
struct FBendDamageAnimationData
{
	float                                              MinValidRange;                                            // 0x0000(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxValidRange;                                            // 0x0004(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HitReactionMinMoveDistance;                               // 0x0008(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HitReactionMaxMoveDistance;                               // 0x000C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
};

// ScriptStruct BendGame.BendAnimDamageAnimationData
// 0x0040
struct FBendAnimDamageAnimationData
{
	bool                                               ForceExitVehicle;                                         // 0x0000(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               ExitFromFalling;                                          // 0x0001(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               ForceReaction;                                            // 0x0002(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<EAnimationSlot>                        AnimSlot;                                                 // 0x0003(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               LockBlendSpaceToAxis;                                     // 0x0004(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0005(0x0003) MISSED OFFSET
	TArray<class UBlendSpace*>                         BlendSpaces;                                              // 0x0008(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class UAnimSequenceBase*>                   AnimSequences;                                            // 0x0018(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TEnumAsByte<EAnimationSlot>                        RecoveryAnimSlot;                                         // 0x0028(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0029(0x0007) MISSED OFFSET
	TArray<class UAnimSequenceBase*>                   RecoveryAnimSequences;                                    // 0x0030(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
};

// ScriptStruct BendGame.BendAnimDamageBaseData
// 0x00C8
struct FBendAnimDamageBaseData
{
	TEnumAsByte<EeDamageLocations>                     DamageLocation;                                           // 0x0000(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<EAnimForceRotation>                    ApplyRotation;                                            // 0x0001(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x0002(0x0006) MISSED OFFSET
	struct FBendAnimDamageAnimationData                AnimationsSmall;                                          // 0x0008(0x0040) (Edit, DisableEditOnInstance)
	struct FBendAnimDamageAnimationData                AnimationsMedium;                                         // 0x0048(0x0040) (Edit, DisableEditOnInstance)
	struct FBendAnimDamageAnimationData                AnimationsHard;                                           // 0x0088(0x0040) (Edit, DisableEditOnInstance)
};

// ScriptStruct BendGame.BendDamageAnimationSetBasedOnState
// 0x0020
struct FBendDamageAnimationSetBasedOnState
{
	TArray<TEnumAsByte<ECurrentStateForHitReaction>>   CurrentState;                                             // 0x0000(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FBendAnimDamageBaseData>             AnimDamageData;                                           // 0x0010(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
};

// ScriptStruct BendGame.BendAnimDamageTopLayerData
// 0x0078
struct FBendAnimDamageTopLayerData
{
	TArray<class UClass*>                              SpecificallyDamagedBy;                                    // 0x0000(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	bool                                               UseMeleeSystem;                                           // 0x0010(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               UseDistanceSystem;                                        // 0x0011(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               UseStaminaSystem;                                         // 0x0012(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               UseStoppingPowerSystem;                                   // 0x0013(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               UseVelocitySystem;                                        // 0x0014(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               UseVictimsVelocitySystem;                                 // 0x0015(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               UseRamSystem;                                             // 0x0016(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               UseAttackersLocation;                                     // 0x0017(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinMovingVelocity;                                        // 0x0018(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxMovingVelocity;                                        // 0x001C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FBendDamageAnimationData                    SmallAnimationData;                                       // 0x0020(0x0010) (Edit, DisableEditOnInstance)
	struct FBendDamageAnimationData                    MediumAnimationData;                                      // 0x0030(0x0010) (Edit, DisableEditOnInstance)
	struct FBendDamageAnimationData                    HardAnimationData;                                        // 0x0040(0x0010) (Edit, DisableEditOnInstance)
	float                                              MediumHitCoolDownTimerMin;                                // 0x0050(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MediumHitCoolDownTimerMax;                                // 0x0054(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MediumHitHealthPercentage;                                // 0x0058(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HardHitCoolDownTimerMin;                                  // 0x005C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HardHitCoolDownTimerMax;                                  // 0x0060(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HardHitHealthPercentage;                                  // 0x0064(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<struct FBendDamageAnimationSetBasedOnState> AnimationSet;                                             // 0x0068(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
};

// ScriptStruct BendGame.DyingPairedAnimSeqs
// 0x0010
struct FDyingPairedAnimSeqs
{
	class UAnimSequenceBase*                           AttackerAnimation;                                        // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           VictimAnimation;                                          // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.BendAnimDyingAnimationData
// 0x0028
struct FBendAnimDyingAnimationData
{
	bool                                               LockBlendSpaceToAxis;                                     // 0x0000(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0001(0x0007) MISSED OFFSET
	TArray<class UBlendSpace*>                         BlendSpaces;                                              // 0x0008(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FDyingPairedAnimSeqs>                PairedAnimSeq;                                            // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
};

// ScriptStruct BendGame.BendDyingAnimationSelectionData
// 0x0008
struct FBendDyingAnimationSelectionData
{
	float                                              MinValidRange;                                            // 0x0000(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxValidRange;                                            // 0x0004(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
};

// ScriptStruct BendGame.BendAnimDyingBaseData
// 0x0060
struct FBendAnimDyingBaseData
{
	TEnumAsByte<EeDamageLocations>                     DamageLocation;                                           // 0x0000(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<EAnimForceRotation>                    ApplyRotation;                                            // 0x0001(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               CanPlayFromFullBody;                                      // 0x0002(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x5];                                       // 0x0003(0x0005) MISSED OFFSET
	struct FBendAnimDyingAnimationData                 Animations;                                               // 0x0008(0x0028) (Edit, DisableEditOnInstance)
	struct FBendDyingAnimationSelectionData            AltAnimationData;                                         // 0x0030(0x0008) (Edit, DisableEditOnInstance)
	struct FBendAnimDyingAnimationData                 AltAnimations;                                            // 0x0038(0x0028) (Edit, DisableEditOnInstance)
};

// ScriptStruct BendGame.BendDyingAnimationSetBasedOnState
// 0x0020
struct FBendDyingAnimationSetBasedOnState
{
	TArray<TEnumAsByte<ECurrentStateForHitReaction>>   CurrentState;                                             // 0x0000(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FBendAnimDyingBaseData>              AnimDyingData;                                            // 0x0010(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
};

// ScriptStruct BendGame.BendAnimDyingTopLayerData
// 0x0020
struct FBendAnimDyingTopLayerData
{
	TArray<class UClass*>                              SpecificallyDamagedBy;                                    // 0x0000(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FBendDyingAnimationSetBasedOnState>  AnimationSet;                                             // 0x0010(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
};

// ScriptStruct BendGame.BendAnimFlinchAnimationData
// 0x0020
struct FBendAnimFlinchAnimationData
{
	TArray<class UAnimSequenceBase*>                   AnimSequences;                                            // 0x0000(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class UBlendSpace1D*>                       BlendSpaces;                                              // 0x0010(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
};

// ScriptStruct BendGame.BendFlinchAnimationSetBasedOnState
// 0x0030
struct FBendFlinchAnimationSetBasedOnState
{
	TArray<TEnumAsByte<ECurrentStateForHitReaction>>   CurrentState;                                             // 0x0000(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FBendAnimFlinchAnimationData                AnimFlinchData;                                           // 0x0010(0x0020) (Edit, DisableEditOnInstance)
};

// ScriptStruct BendGame.BendAnimFlinchTopLayerData
// 0x0020
struct FBendAnimFlinchTopLayerData
{
	TArray<class UClass*>                              DamageType;                                               // 0x0000(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FBendFlinchAnimationSetBasedOnState> AnimationSet;                                             // 0x0010(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
};

// ScriptStruct BendGame.BendAudioVolume
// 0x000C
struct FBendAudioVolume
{
	float                                              Volume;                                                   // 0x0000(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              VolumeTarget;                                             // 0x0004(0x0004) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              VolumeDelta;                                              // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
};

// ScriptStruct BendGame.MusicTrack
// 0x0010
struct FMusicTrack
{
	TEnumAsByte<EMusic>                                Type;                                                     // 0x0000(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EMusicPriority>                        Priority;                                                 // 0x0001(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x0002(0x0006) MISSED OFFSET
	class USoundCue*                                   Track;                                                    // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.BendHandleAnimData
// 0x0018
struct FBendHandleAnimData
{
	TEnumAsByte<EDoorHandleType>                       DoorHandleType;                                           // 0x0000(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0001(0x0007) MISSED OFFSET
	class UAnimSequenceBase*                           AnimationSequence;                                        // 0x0008(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAnimSequenceBase*                           CrouchAnimationSequence;                                  // 0x0010(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
};

// ScriptStruct BendGame.BendDoorAnimData
// 0x0018
struct FBendDoorAnimData
{
	TEnumAsByte<EBendPawnBodyType>                     PawnBodyType;                                             // 0x0000(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0001(0x0007) MISSED OFFSET
	TArray<struct FBendHandleAnimData>                 HandleAnimData;                                           // 0x0008(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
};

// ScriptStruct BendGame.InventoryItemTagContainer
// 0x0030
struct FInventoryItemTagContainer
{
	struct FName                                       TagKey;                                                   // 0x0000(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	struct FGameplayTag                                Tag;                                                      // 0x0008(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)
	struct FGameplayTagContainer                       TagContainer;                                             // 0x0010(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)
};

// ScriptStruct BendGame.InventoryItemHashKey
// 0x0004
struct FInventoryItemHashKey
{
	int                                                HashKey;                                                  // 0x0000(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
};

// ScriptStruct BendGame.InventoryItemLink
// 0x000C (0x0010 - 0x0004)
struct FInventoryItemLink : public FInventoryItemHashKey
{
	unsigned char                                      UnknownData00[0x4];                                       // 0x0004(0x0004) MISSED OFFSET
	class UInventoryItem*                              ItemLink;                                                 // 0x0008(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
};

// ScriptStruct BendGame.InventoryItemFlagSet
// 0x0004
struct FInventoryItemFlagSet
{
	unsigned char                                      bNoSell : 1;                                              // 0x0000(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)
	unsigned char                                      bNoDrop : 1;                                              // 0x0000(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)
	unsigned char                                      bCarryOnly : 1;                                           // 0x0000(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)
	unsigned char                                      bMissionItem : 1;                                         // 0x0000(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)
	unsigned char                                      bUsedInRecipe : 1;                                        // 0x0000(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
};

// ScriptStruct BendGame.EdgeEntry
// 0x0040
struct FEdgeEntry
{
	TWeakObjectPtr<class UStaticMeshComponent>         pMesh;                                                    // 0x0000(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	TArray<struct FTraversalEdge>                      transformedEdges;                                         // 0x0008(0x0010) (ZeroConstructor)
	TArray<struct FTraversalEdge>                      Edges;                                                    // 0x0018(0x0010) (ZeroConstructor)
	struct FName                                       EntryName;                                                // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData)
	bool                                               bWorldEdge;                                               // 0x0030(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0031(0x0007) MISSED OFFSET
	uint64_t                                           internalID;                                               // 0x0038(0x0008) (ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.BendEdgeSector
// 0x0028
struct FBendEdgeSector
{
	TArray<struct FEdgeEntry>                          Entries;                                                  // 0x0000(0x0010) (ZeroConstructor)
	TArray<struct FTraversalEdge>                      Edges;                                                    // 0x0010(0x0010) (ZeroConstructor)
	struct FVector2D                                   Sector;                                                   // 0x0020(0x0008) (ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.ReservedPerchLocation
// 0x0018
struct FReservedPerchLocation
{
	struct FVector                                     Location;                                                 // 0x0000(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x000C(0x0004) MISSED OFFSET
	class ABendPawn*                                   Pawn;                                                     // 0x0010(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.BendTraversalSettings
// 0x0028
struct FBendTraversalSettings
{
	TArray<TEnumAsByte<EAIFactionType>>                FactionType;                                              // 0x0000(0x0010) (Edit, ZeroConstructor)
	TArray<TEnumAsByte<EBendPawnBodyType>>             BodyType;                                                 // 0x0010(0x0010) (Edit, ZeroConstructor)
	bool                                               OnlyUseWhenFrustrated;                                    // 0x0020(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               CanUseWhenAware;                                          // 0x0021(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               CanUseWhenSemiaware;                                      // 0x0022(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               CanUseWhenUnaware;                                        // 0x0023(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0024(0x0004) MISSED OFFSET
};

// ScriptStruct BendGame.ConversationInterruptData
// 0x0040
struct FConversationInterruptData
{
	struct FName                                       m_nPainSndName;                                           // 0x0000(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       m_nHoldOnSndName;                                         // 0x0008(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       m_nIWasSayingSndName;                                     // 0x0010(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       m_nIWasSayingOnBikeSndName;                               // 0x0018(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       m_nYouWereSayingSndName;                                  // 0x0020(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       m_nYouWereSayingOnBikeSndName;                            // 0x0028(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              fWaitTimeAfterSafe;                                       // 0x0030(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinNearDistForConversationToResume;                       // 0x0034(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinAwareDistForConversationToResume;                      // 0x0038(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinTargetingDistForConversationToResume;                  // 0x003C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
};

// ScriptStruct BendGame.RadioPreSendFilterData
// 0x0050
struct FRadioPreSendFilterData
{
	TEnumAsByte<ERadioType>                            RadioType;                                                // 0x0000(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0001(0x0007) MISSED OFFSET
	class USoundCue*                                   SquelchOnSound;                                           // 0x0008(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class USoundCue*                                   SquelchOffSound;                                          // 0x0010(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class USoundCue*                                   LoopingStaticSound;                                       // 0x0018(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               DistortionEnable;                                         // 0x0020(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0021(0x0003) MISSED OFFSET
	float                                              DistortionDrive;                                          // 0x0024(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DistortionOutputGain;                                     // 0x0028(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DistortionPassThruGain;                                   // 0x002C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<EPreSendFilterType>                    FilterType;                                               // 0x0030(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0031(0x0003) MISSED OFFSET
	float                                              FilterGain;                                               // 0x0034(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FilterCutOff;                                             // 0x0038(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FilterCenter;                                             // 0x003C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FilterResonance;                                          // 0x0040(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FilterSlope;                                              // 0x0044(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FilterBandwidth;                                          // 0x0048(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x004C(0x0004) MISSED OFFSET
};

// ScriptStruct BendGame.DynamicAudioListenerDistance
// 0x000C
struct FDynamicAudioListenerDistance
{
	float                                              Radius;                                                   // 0x0000(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DistanceAway;                                             // 0x0004(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinRadius;                                                // 0x0008(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
};

// ScriptStruct BendGame.DynamicAudioListenersMinMax
// 0x0008
struct FDynamicAudioListenersMinMax
{
	float                                              MinDistance;                                              // 0x0000(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxDistance;                                              // 0x0004(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
};

// ScriptStruct BendGame.DynamicAudioListeners
// 0x0048
struct FDynamicAudioListeners
{
	TEnumAsByte<EAudioListenerTypes>                   TypeOfListener;                                           // 0x0000(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<EAudioListenerDistanceTypes>           DistanceType;                                             // 0x0001(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x0002(0x0006) MISSED OFFSET
	TArray<TEnumAsByte<EAudioListenerWorldObjects>>    ObjectTypeAssociatedWith;                                 // 0x0008(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TAssetPtr<class UClass>                            BlueprintListener;                                        // 0x0018(0x0020) (Edit, DisableEditOnInstance)
	struct FDynamicAudioListenersMinMax                DistanceAboveObject;                                      // 0x0038(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               UseMinRadius;                                             // 0x0040(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0041(0x0003) MISSED OFFSET
	int                                                NumberOfListeners;                                        // 0x0044(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
};

// ScriptStruct BendGame.OpenWorldDynamicAudioListeners
// 0x0050
struct FOpenWorldDynamicAudioListeners
{
	struct FDynamicAudioListenerDistance               NearDistanceValues;                                       // 0x0000(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FDynamicAudioListenerDistance               FarDistanceValues;                                        // 0x000C(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FDynamicAudioListenerDistance               DistantNoisesValues;                                      // 0x0018(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0024(0x0004) MISSED OFFSET
	TArray<struct FDynamicAudioListeners>              Listeners;                                                // 0x0028(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData01[0x18];                                      // 0x0038(0x0018) MISSED OFFSET
};

// ScriptStruct BendGame.PlayerDebugVOData
// 0x0010
struct FPlayerDebugVOData
{
	class USoundClass*                                 SoundClass;                                               // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       SoundName;                                                // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
};

// ScriptStruct BendGame.RegionBasedOpenWorldMusicData
// 0x0028
struct FRegionBasedOpenWorldMusicData
{
	TEnumAsByte<ERegions>                              Region;                                                   // 0x0000(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0001(0x0007) MISSED OFFSET
	TAssetPtr<class UClass>                            MusicManagerClass;                                        // 0x0008(0x0020) (Edit, DisableEditOnInstance)
};

// ScriptStruct BendGame.PlayedConversation
// 0x0010
struct FPlayedConversation
{
	unsigned char                                      UnknownData00[0x10];                                      // 0x0000(0x0010) MISSED OFFSET
};

// ScriptStruct BendGame.DelayRadialForce
// 0x0028
struct FDelayRadialForce
{
	unsigned char                                      UnknownData00[0x28];                                      // 0x0000(0x0028) MISSED OFFSET
};

// ScriptStruct BendGame.DelayImpulseAtPoint
// 0x0030
struct FDelayImpulseAtPoint
{
	unsigned char                                      UnknownData00[0x30];                                      // 0x0000(0x0030) MISSED OFFSET
};

// ScriptStruct BendGame.VOSoundData
// 0x0050
struct FVOSoundData
{
	unsigned char                                      UnknownData00[0x50];                                      // 0x0000(0x0050) MISSED OFFSET
};

// ScriptStruct BendGame.LipSyncVisemeData
// 0x0010
struct FLipSyncVisemeData
{
	class UAnimSequenceBase*                           AnimSequence;                                             // 0x0000(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              Weight;                                                   // 0x0008(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x000C(0x0004) MISSED OFFSET
};

// ScriptStruct BendGame.BendSpringInterpolatedFloat
// 0x0028
struct FBendSpringInterpolatedFloat
{
	unsigned char                                      UnknownData00[0x8];                                       // 0x0000(0x0008) MISSED OFFSET
	float                                              Current;                                                  // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              Target;                                                   // 0x000C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              Velocity;                                                 // 0x0010(0x0004) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              NaturalFrequency;                                         // 0x0014(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DampingRatio;                                             // 0x0018(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              NumIterations;                                            // 0x001C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0020(0x0004) MISSED OFFSET
	unsigned char                                      bIsUnwindAngleEnabled : 1;                                // 0x0024(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bUseRadians : 1;                                          // 0x0024(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0025(0x0003) MISSED OFFSET
};

// ScriptStruct BendGame.BendSpringInterp_WithAngleHysteresis
// 0x0008 (0x0030 - 0x0028)
struct FBendSpringInterp_WithAngleHysteresis : public FBendSpringInterpolatedFloat
{
	float                                              HysteresisThresholdAngle;                                 // 0x0028(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x002C(0x0004) MISSED OFFSET
};

// ScriptStruct BendGame.InventoryItemStatDef
// 0x0014
struct FInventoryItemStatDef
{
	TEnumAsByte<EInventoryItemStat>                    Type;                                                     // 0x0000(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	struct FVector2D                                   MinMaxValue;                                              // 0x0004(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector2D                                   StatMinMaxValue;                                          // 0x000C(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.RecipeComponent
// 0x0028
struct FRecipeComponent
{
	struct FGameplayTagContainer                       TagContainer;                                             // 0x0000(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst)
	int                                                ComponentCount;                                           // 0x0020(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0024(0x0004) MISSED OFFSET
};

// ScriptStruct BendGame.BendInventoryItem
// 0x0010
struct FBendInventoryItem
{
	unsigned char                                      UnknownData00[0x8];                                       // 0x0000(0x0008) MISSED OFFSET
	int                                                InventoryItem;                                            // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x000C(0x0004) MISSED OFFSET
};

// ScriptStruct BendGame.InventoryDropItem
// 0x0018
struct FInventoryDropItem
{
	struct FBendInventoryItem                          Item;                                                     // 0x0000(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FIntPoint                                   DropCount;                                                // 0x0010(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
};

// ScriptStruct BendGame.InventoryDropTableEntry
// 0x0018
struct FInventoryDropTableEntry
{
	float                                              Percentage;                                               // 0x0000(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0004(0x0004) MISSED OFFSET
	TArray<struct FInventoryDropItem>                  Items;                                                    // 0x0008(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
};

// ScriptStruct BendGame.BendInventoryItemCount
// 0x0008 (0x0018 - 0x0010)
struct FBendInventoryItemCount : public FBendInventoryItem
{
	int                                                Count;                                                    // 0x0010(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0014(0x0004) MISSED OFFSET
};

// ScriptStruct BendGame.CharacterSubClassDropTable
// 0x0010
struct FCharacterSubClassDropTable
{
	struct FName                                       CharacterSubClass;                                        // 0x0000(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      DropTable;                                                // 0x0008(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
};

// ScriptStruct BendGame.CharacterClassDropTable
// 0x0038
struct FCharacterClassDropTable
{
	TEnumAsByte<ECharacterClass>                       CharacterClass;                                           // 0x0000(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	unsigned char                                      bDropsItems : 1;                                          // 0x0004(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	unsigned char                                      bIsSearchable : 1;                                        // 0x0004(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	unsigned char                                      bDropsEquippedItem : 1;                                   // 0x0004(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0005(0x0003) MISSED OFFSET
	TArray<class UAnimSequenceBase*>                   SearchAnimations;                                         // 0x0008(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TArray<class UAnimSequenceBase*>                   CrouchedSearchAnimations;                                 // 0x0018(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FCharacterSubClassDropTable>         SubClassTables;                                           // 0x0028(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
};

// ScriptStruct BendGame.InventoryItemTag
// 0x0010
struct FInventoryItemTag
{
	unsigned char                                      UnknownData00[0x8];                                       // 0x0000(0x0008) MISSED OFFSET
	struct FGameplayTag                                ItemTag;                                                  // 0x0008(0x0008) (Edit, BlueprintVisible)
};

// ScriptStruct BendGame.InventoryDropTagItem
// 0x0018
struct FInventoryDropTagItem
{
	struct FInventoryItemTag                           ItemTag;                                                  // 0x0000(0x0010) (Edit, BlueprintVisible)
	float                                              Percentage;                                               // 0x0010(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0014(0x0004) MISSED OFFSET
};

// ScriptStruct BendGame.MapLocationDetails
// 0x0014
struct FMapLocationDetails
{
	struct FVector2D                                   IconSize;                                                 // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              IconScale;                                                // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EMapZoom>                              DisplayZoomLevelMin;                                      // 0x000C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EMapZoom>                              DisplayZoomLevelMax;                                      // 0x000D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x000E(0x0002) MISSED OFFSET
	unsigned char                                      bHidden : 1;                                              // 0x0010(0x0001) (Edit, BlueprintVisible, SaveGame)
	unsigned char                                      bIsSelectableOnMap : 1;                                   // 0x0010(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0011(0x0003) MISSED OFFSET
};

// ScriptStruct BendGame.MapObjectiveRegionDetails
// 0x0048
struct FMapObjectiveRegionDetails
{
	class UTexture2D*                                  RegionTexture;                                            // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UMaterialInterface*                          RegionMaterial;                                           // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UMaterialInstanceDynamic*                    RegionMID;                                                // 0x0010(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FLinearColor                                RegionTextureColor;                                       // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              RegionMaxTextureSize;                                     // 0x0028(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              RegionTextureScale;                                       // 0x002C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x14];                                      // 0x0030(0x0014) MISSED OFFSET
	unsigned char                                      bDiscovered : 1;                                          // 0x0044(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0045(0x0003) MISSED OFFSET
};

// ScriptStruct BendGame.BendTrophy
// 0x0050
struct FBendTrophy
{
	struct FName                                       Name;                                                     // 0x0000(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FGameplayTag                                Tag;                                                      // 0x0008(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FText                                       TranslatedName;                                           // 0x0010(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FText                                       Description;                                              // 0x0028(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly)
	int                                                TrophyID;                                                 // 0x0040(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FIntPoint                                   MinMaxCounter;                                            // 0x0044(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bHidden : 1;                                              // 0x004C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUnlocked : 1;                                            // 0x004C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)
	unsigned char                                      UnknownData00[0x3];                                       // 0x004D(0x0003) MISSED OFFSET
};

// ScriptStruct BendGame.GameDatabaseSaveRecord
// 0x0038
struct FGameDatabaseSaveRecord
{
	TEnumAsByte<EGameDatabaseCategory>                 Category;                                                 // 0x0000(0x0001) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	TEnumAsByte<EGameDataType>                         Type;                                                     // 0x0001(0x0001) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x0002(0x0006) MISSED OFFSET
	struct FName                                       Key;                                                      // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	bool                                               BoolValue;                                                // 0x0010(0x0001) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0011(0x0003) MISSED OFFSET
	int                                                IntValue;                                                 // 0x0014(0x0004) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	float                                              FloatValue;                                               // 0x0018(0x0004) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	struct FVector                                     FVectorValue;                                             // 0x001C(0x000C) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	struct FString                                     StringValue;                                              // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, SaveGame)
};

// ScriptStruct BendGame.PermFlashbackLevelSaveRecord
// 0x0008
struct FPermFlashbackLevelSaveRecord
{
	int                                                LevelHashKey;                                             // 0x0000(0x0004) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	int                                                LevelIndex;                                               // 0x0004(0x0004) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
};

// ScriptStruct BendGame.BendSaveGameImageData
// 0x0020
struct FBendSaveGameImageData
{
	int                                                SizeX;                                                    // 0x0000(0x0004) (ZeroConstructor, SaveGame, IsPlainOldData)
	int                                                SizeY;                                                    // 0x0004(0x0004) (ZeroConstructor, SaveGame, IsPlainOldData)
	TEnumAsByte<EPixelFormat>                          PixelFormat;                                              // 0x0008(0x0001) (ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0009(0x0007) MISSED OFFSET
	TArray<unsigned char>                              PixelData;                                                // 0x0010(0x0010) (ZeroConstructor, SaveGame)
};

// ScriptStruct BendGame.EncampmentCarryOverData
// 0x0018
struct FEncampmentCarryOverData
{
	struct FString                                     CampName;                                                 // 0x0000(0x0010) (ZeroConstructor, SaveGame)
	float                                              Credits;                                                  // 0x0010(0x0004) (ZeroConstructor, SaveGame, IsPlainOldData)
	float                                              Trust;                                                    // 0x0014(0x0004) (ZeroConstructor, SaveGame, IsPlainOldData)
};

// ScriptStruct BendGame.TrophyCarryOverData
// 0x0018
struct FTrophyCarryOverData
{
	struct FName                                       Trophy;                                                   // 0x0000(0x0008) (ZeroConstructor, SaveGame, IsPlainOldData)
	struct FName                                       GameplayDatabaseKey;                                      // 0x0008(0x0008) (ZeroConstructor, SaveGame, IsPlainOldData)
	int                                                Value;                                                    // 0x0010(0x0004) (ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0014(0x0004) MISSED OFFSET
};

// ScriptStruct BendGame.NewGamePlusCarryOverData
// 0x0158
struct FNewGamePlusCarryOverData
{
	TArray<struct FName>                               SkillTagNames;                                            // 0x0000(0x0010) (ZeroConstructor, SaveGame)
	TArray<struct FGameplayTag>                        SkillTags;                                                // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, Transient)
	TArray<struct FName>                               WeaponTagNames;                                           // 0x0020(0x0010) (ZeroConstructor, SaveGame)
	TArray<struct FName>                               WeaponPartTagNames;                                       // 0x0030(0x0010) (ZeroConstructor, SaveGame)
	TArray<struct FGameplayTag>                        WeaponTags;                                               // 0x0040(0x0010) (Edit, BlueprintVisible, ZeroConstructor, Transient)
	TArray<struct FGameplayTag>                        WeaponPartTags;                                           // 0x0050(0x0010) (Edit, BlueprintVisible, ZeroConstructor, Transient)
	TArray<struct FName>                               UnlockedBikePartTagNames;                                 // 0x0060(0x0010) (ZeroConstructor, SaveGame)
	TArray<struct FGameplayTag>                        UnlockedBikePartTags;                                     // 0x0070(0x0010) (Edit, BlueprintVisible, ZeroConstructor, Transient)
	TArray<struct FName>                               PlayerBikePartTagNames;                                   // 0x0080(0x0010) (ZeroConstructor, SaveGame)
	TArray<struct FGameplayTag>                        PlayerBikePartTags;                                       // 0x0090(0x0010) (Edit, BlueprintVisible, ZeroConstructor, Transient)
	TArray<struct FName>                               UnlockedBikeSkinTagNames;                                 // 0x00A0(0x0010) (ZeroConstructor, SaveGame)
	TArray<struct FGameplayTag>                        UnlockedBikeSkinTags;                                     // 0x00B0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, Transient)
	TArray<struct FName>                               PlayerBikeSkinTagNamesInOrder;                            // 0x00C0(0x0010) (ZeroConstructor, SaveGame)
	TArray<struct FGameplayTag>                        PlayerBikeSkinTagsInOrder;                                // 0x00D0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, Transient)
	TArray<struct FName>                               PlayerRecipesNames;                                       // 0x00E0(0x0010) (ZeroConstructor, SaveGame)
	TArray<struct FGameplayTag>                        PlayerRecipesTags;                                        // 0x00F0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, Transient)
	TArray<struct FEncampmentCarryOverData>            EncampmentStats;                                          // 0x0100(0x0010) (Edit, BlueprintVisible, ZeroConstructor, SaveGame)
	TArray<TEnumAsByte<EInventoryCollectibleID>>       DiscoveredCollectibles;                                   // 0x0110(0x0010) (Edit, BlueprintVisible, ZeroConstructor, SaveGame)
	TArray<struct FTrophyCarryOverData>                TrophyCounts;                                             // 0x0120(0x0010) (Edit, BlueprintVisible, ZeroConstructor, SaveGame)
	int                                                PlayerHealth;                                             // 0x0130(0x0004) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	int                                                PlayerFocus;                                              // 0x0134(0x0004) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	int                                                PlayerStamina;                                            // 0x0138(0x0004) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	bool                                               HasTaserBeenCrafted;                                      // 0x013C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x013D(0x0003) MISSED OFFSET
	int                                                UnspentSkillPoints;                                       // 0x0140(0x0004) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	int                                                PlayerXP;                                                 // 0x0144(0x0004) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	TEnumAsByte<ENGPCarryOverDataVersion>              NGPDataVersion;                                           // 0x0148(0x0001) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0149(0x0003) MISSED OFFSET
	int                                                NGPCompletionCount;                                       // 0x014C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	bool                                               CanStartNewGamePlus;                                      // 0x0150(0x0001) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	bool                                               InitalizedTags;                                           // 0x0151(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x6];                                       // 0x0152(0x0006) MISSED OFFSET
};

// ScriptStruct BendGame.VehiclePartStats
// 0x0038
struct FVehiclePartStats
{
	float                                              EngineNoiseReductionPercent;                              // 0x0000(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0004(0x0004) MISSED OFFSET
	TArray<int>                                        AmmoStorageQuantities;                                    // 0x0008(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FGameplayTag>                        AmmoStorageTags;                                          // 0x0018(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	float                                              DamageReductionPercent;                                   // 0x0028(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x002C(0x0004) MISSED OFFSET
	class UTireType*                                   TireType;                                                 // 0x0030(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
};

// ScriptStruct BendGame.InventoryItemStatProperty
// 0x0010
struct FInventoryItemStatProperty
{
	TEnumAsByte<EInventoryItemStat>                    StatType;                                                 // 0x0000(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0001(0x0007) MISSED OFFSET
	struct FName                                       PropertyName;                                             // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.InventoryItemStat
// 0x000C
struct FInventoryItemStat
{
	TEnumAsByte<EInventoryItemStat>                    Type;                                                     // 0x0000(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	float                                              Value;                                                    // 0x0004(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ValuePercent;                                             // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.InventoryItemStats
// 0x0010
struct FInventoryItemStats
{
	TArray<struct FInventoryItemStat>                  Stats;                                                    // 0x0000(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
};

// ScriptStruct BendGame.InventoryStorageItemBase
// 0x0010
struct FInventoryStorageItemBase
{
	unsigned char                                      UnknownData00[0x8];                                       // 0x0000(0x0008) MISSED OFFSET
	class UInventoryItem*                              Item;                                                     // 0x0008(0x0008) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
};

// ScriptStruct BendGame.InventoryStorageItem
// 0x0008 (0x0018 - 0x0010)
struct FInventoryStorageItem : public FInventoryStorageItemBase
{
	int                                                Count;                                                    // 0x0010(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0014(0x0004) MISSED OFFSET
};

// ScriptStruct BendGame.InventoryStorageStatItem
// 0x0010 (0x0028 - 0x0018)
struct FInventoryStorageStatItem : public FInventoryStorageItem
{
	struct FInventoryItemStats                         Stats;                                                    // 0x0018(0x0010) (Edit, BlueprintVisible)
};

// ScriptStruct BendGame.InventoryGuid
// 0x0010
struct FInventoryGuid
{
	struct FGuid                                       InventoryGuid;                                            // 0x0000(0x0010) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
};

// ScriptStruct BendGame.InventoryStorageGuidItem
// 0x0018 (0x0040 - 0x0028)
struct FInventoryStorageGuidItem : public FInventoryStorageStatItem
{
	struct FInventoryGuid                              Guid;                                                     // 0x0028(0x0010) (Edit, BlueprintVisible, EditConst)
	bool                                               bNewBadgeVisible;                                         // 0x0038(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0039(0x0007) MISSED OFFSET
};

// ScriptStruct BendGame.InventoryPart
// 0x0000 (0x0040 - 0x0040)
struct FInventoryPart : public FInventoryStorageGuidItem
{

};

// ScriptStruct BendGame.BookKeepingData
// 0x0028
struct FBookKeepingData
{
	int                                                BookKeepingID;                                            // 0x0000(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData)
	int                                                NumberSpawned;                                            // 0x0004(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData)
	int                                                NumberKilled;                                             // 0x0008(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData)
	int                                                NumberDespawned;                                          // 0x000C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData)
	int                                                NumberSpawnsExpected;                                     // 0x0010(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0014(0x0004) MISSED OFFSET
	TArray<class ABendSpawnLocationBase*>              SpawnLocations;                                           // 0x0018(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame)
};

// ScriptStruct BendGame.MissionBookKeepingEntry
// 0x0058
struct FMissionBookKeepingEntry
{
	struct FBookKeepingData                            BookKeepingData;                                          // 0x0000(0x0028) (BlueprintVisible, BlueprintReadOnly, SaveGame)
	struct FScriptDelegate                             OnSpawnedDelegate;                                        // 0x0028(0x0010) (ZeroConstructor, InstancedReference, SaveGame)
	struct FScriptDelegate                             OnKilledDelegate;                                         // 0x0038(0x0010) (ZeroConstructor, InstancedReference, SaveGame)
	struct FScriptDelegate                             OnDespawnedDelegate;                                      // 0x0048(0x0010) (ZeroConstructor, InstancedReference, SaveGame)
};

// ScriptStruct BendGame.VehicleMissionBookKeepingEntry
// 0x0010 (0x0068 - 0x0058)
struct FVehicleMissionBookKeepingEntry : public FMissionBookKeepingEntry
{
	struct FScriptDelegate                             OnSpawnedWithVehicleDelegate;                             // 0x0058(0x0010) (ZeroConstructor, InstancedReference, SaveGame)
};

// ScriptStruct BendGame.LevelWaitActionEntry
// 0x0020
struct FLevelWaitActionEntry
{
	int                                                UUID;                                                     // 0x0000(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                Linkage;                                                  // 0x0004(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              TimeRemaining;                                            // 0x0008(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x000C(0x0004) MISSED OFFSET
	struct FName                                       ExecutionFunction;                                        // 0x0010(0x0008) (ZeroConstructor, IsPlainOldData)
	TWeakObjectPtr<class ABendLevelScriptActor>        OwningLevelScript;                                        // 0x0018(0x0008) (ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.BendStoryLineRewards
// 0x0078
struct FBendStoryLineRewards
{
	struct FText                                       RewardTitle;                                              // 0x0000(0x0018) (Edit, BlueprintVisible)
	struct FText                                       RewardDescription;                                        // 0x0018(0x0018) (Edit, BlueprintVisible)
	TEnumAsByte<EStoryLineRewardType>                  RewardType;                                               // 0x0030(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0031(0x0003) MISSED OFFSET
	int                                                NumberOfThingsToCompleteToUnlock;                         // 0x0034(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FGameplayTag                                UnlockedGamePlayAsset;                                    // 0x0038(0x0008) (Edit, BlueprintVisible)
	TAssetPtr<class UTexture2D>                        AssociatedImage;                                          // 0x0040(0x0020) (Edit, BlueprintVisible)
	struct FGameplayTag                                TrophyToUnlock;                                           // 0x0060(0x0008) (Edit, BlueprintVisible)
	bool                                               SuppressReward;                                           // 0x0068(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               HardModeOnlyReward;                                       // 0x0069(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x6];                                       // 0x006A(0x0006) MISSED OFFSET
	struct FName                                       OtherSpecificMiscIdentifiers;                             // 0x0070(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.BendStoryLinesBasicDataForUI
// 0x0108
struct FBendStoryLinesBasicDataForUI
{
	TEnumAsByte<EStoryLines>                           StoryLineID;                                              // 0x0000(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	int                                                CompletedCount;                                           // 0x0004(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                TotalCount;                                               // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x000C(0x0004) MISSED OFFSET
	struct FText                                       StoryLineTitle;                                           // 0x0010(0x0018) (Edit, BlueprintVisible)
	struct FText                                       CurrentDescription;                                       // 0x0028(0x0018) (Edit, BlueprintVisible)
	struct FBendStoryLineRewards                       NextRewardThatUnlocks;                                    // 0x0040(0x0078) (Edit, BlueprintVisible)
	class UTexture2D*                                  StoryLineIcon;                                            // 0x00B8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TAssetPtr<class UTexture2D>                        StoryLineCoverImage;                                      // 0x00C0(0x0020) (Edit, BlueprintVisible)
	struct FText                                       StoryLineIconGlyph;                                       // 0x00E0(0x0018) (Edit, BlueprintVisible)
	struct FLinearColor                                StoryLineColor;                                           // 0x00F8(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.MatineeVehicleInfo
// 0x0020
struct FMatineeVehicleInfo
{
	bool                                               EndCinematicOnVehicle;                                    // 0x0000(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0001(0x0007) MISSED OFFSET
	struct FName                                       CharacterSwapTag;                                         // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       VehicleSwapTag;                                           // 0x0010(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       VehicleSeatName;                                          // 0x0018(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.MatineeWeaponSwapInfo
// 0x0018
struct FMatineeWeaponSwapInfo
{
	struct FName                                       CinematicMeshSwapTag;                                     // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       OwnerActorSwapTag;                                        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EWeaponSocketLocation>                 FromOwnerSocket;                                          // 0x0010(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0011(0x0007) MISSED OFFSET
};

// ScriptStruct BendGame.BendCinematicLevelData
// 0x00D8
struct FBendCinematicLevelData
{
	struct FName                                       CinematicID;                                              // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       CinematicLevel;                                           // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               PreLoadsAlongWithIntroCin;                                // 0x0010(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ECinematicFadingTypes>                 CinematicType;                                            // 0x0011(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               FadeIntoCin;                                              // 0x0012(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ECinematicFadingColors>                FadeInColorType;                                          // 0x0013(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               FadeOutAtEndOfCin;                                        // 0x0014(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               Skippable;                                                // 0x0015(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ECinematicForceStreamingType>          CinematicForceStreamingType;                              // 0x0016(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ECinematicFadingColors>                FadeOutColorType;                                         // 0x0017(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FString                                     SoundSnapshot;                                            // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FName                                       TimeAndWeatherIDOverride;                                 // 0x0028(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TAssetPtr<class UClass>                            MusicManager;                                             // 0x0030(0x0020) (Edit, BlueprintVisible)
	struct FName                                       MusicEventUpdate;                                         // 0x0050(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               PlayDynamicWildlifeSounds;                                // 0x0058(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0059(0x0007) MISSED OFFSET
	TArray<struct FName>                               LevelsToLoadList;                                         // 0x0060(0x0010) (ZeroConstructor)
	TArray<struct FMatineeVehicleInfo>                 CinematicVehicleMatchingInfos;                            // 0x0070(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FMatineeWeaponSwapInfo>              CinematicWeaponMatchingInfos;                             // 0x0080(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FName>                               RemoteEventsToCallAfterSyncStream;                        // 0x0090(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00A0(0x0004) MISSED OFFSET
	float                                              LightFadeInTime;                                          // 0x00A4(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              TargetFadeInIntensity;                                    // 0x00A8(0x0004) (ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EEasingFunc>                           FadeInEasingFunc;                                         // 0x00AC(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x00AD(0x0003) MISSED OFFSET
	float                                              FadeInBlendExp;                                           // 0x00B0(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                FadeInSteps;                                              // 0x00B4(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x00B8(0x0004) MISSED OFFSET
	float                                              LightFadeOutTime;                                         // 0x00BC(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              TargetFadeOutIntensity;                                   // 0x00C0(0x0004) (ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EEasingFunc>                           FadeOutEasingFunc;                                        // 0x00C4(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x3];                                       // 0x00C5(0x0003) MISSED OFFSET
	float                                              FadeOutBlendExp;                                          // 0x00C8(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                FadeOutSteps;                                             // 0x00CC(0x0004) (ZeroConstructor, IsPlainOldData)
	bool                                               AutoPreLoadMatineeActors;                                 // 0x00D0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               AutoPreLoadUsePlayerDistanceTrigger;                      // 0x00D1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x2];                                       // 0x00D2(0x0002) MISSED OFFSET
	float                                              AutoPreLoadPlayerTriggerDistance;                         // 0x00D4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.BendMissionObjectiveData
// 0x0048
struct FBendMissionObjectiveData
{
	struct FName                                       ObjectiveIdentifierID;                                    // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FText                                       ObjectiveNameText;                                        // 0x0008(0x0018) (Edit, BlueprintVisible)
	struct FText                                       ObjectiveNameTextRuntimeModified;                         // 0x0020(0x0018) (Edit, BlueprintVisible, EditConst)
	struct FVector2D                                   ObjectiveStage;                                           // 0x0038(0x0008) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               IsMainObjective;                                          // 0x0040(0x0001) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               ShouldDisplayToMenu;                                      // 0x0041(0x0001) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               DontDisplayIfCompleted;                                   // 0x0042(0x0001) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	TEnumAsByte<EObjectiveStates>                      CurrentObjState;                                          // 0x0043(0x0001) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0044(0x0004) MISSED OFFSET
};

// ScriptStruct BendGame.BendMissionStartConditions
// 0x0040
struct FBendMissionStartConditions
{
	TArray<TAssetPtr<class UClass>>                    ConditionsForAllowing;                                    // 0x0000(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FText                                       ReasonForNotStarting;                                     // 0x0010(0x0018) (Edit, BlueprintVisible)
	struct FText                                       RequirementText;                                          // 0x0028(0x0018) (Edit, BlueprintVisible)
};

// ScriptStruct BendGame.TimeAndWeatherSettings
// 0x0030
struct FTimeAndWeatherSettings
{
	struct FName                                       TimeAndWeatherID;                                         // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               OverrideWorldTime;                                        // 0x0008(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0009(0x0003) MISSED OFFSET
	float                                              StartTime;                                                // 0x000C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              EndTime;                                                  // 0x0010(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              EndYawOffset;                                             // 0x0014(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              EndPitchOffset;                                           // 0x0018(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              EndRollOffset;                                            // 0x001C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CinematicOffsetMultiplier;                                // 0x0020(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               OverrideDefaultMissionWallClockDurationInMinutes;         // 0x0024(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0025(0x0003) MISSED OFFSET
	float                                              MissionWallClockDurationInMinutes;                        // 0x0028(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x002C(0x0004) MISSED OFFSET
};

// ScriptStruct BendGame.BendRewardData
// 0x000C
struct FBendRewardData
{
	TEnumAsByte<EAIFactionType>                        Faction;                                                  // 0x0000(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	int                                                Trust;                                                    // 0x0004(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                Credits;                                                  // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.BendBoozerRewardData
// 0x0018
struct FBendBoozerRewardData
{
	int                                                MoraleForCompletion;                                      // 0x0000(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0004(0x0004) MISSED OFFSET
	struct FName                                       GameplayDatabaseString;                                   // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                MoraleForTrue;                                            // 0x0010(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                MoraleForFalse;                                           // 0x0014(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.BendFlashBackData
// 0x0010
struct FBendFlashBackData
{
	struct FName                                       FlashbackKey;                                             // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                FlashbackIndex;                                           // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x000C(0x0004) MISSED OFFSET
};

// ScriptStruct BendGame.InventoryWeaponPartSpec
// 0x0018
struct FInventoryWeaponPartSpec
{
	struct FGameplayTag                                Weapon;                                                   // 0x0000(0x0008) (Edit, BlueprintVisible)
	TArray<struct FGameplayTag>                        Parts;                                                    // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
};

// ScriptStruct BendGame.InventoryStorageWeaponPart
// 0x0000 (0x0040 - 0x0040)
struct FInventoryStorageWeaponPart : public FInventoryPart
{

};

// ScriptStruct BendGame.InventoryStorageWeapon
// 0x0010 (0x0050 - 0x0040)
struct FInventoryStorageWeapon : public FInventoryStorageGuidItem
{
	TArray<struct FInventoryStorageWeaponPart>         Parts;                                                    // 0x0040(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
};

// ScriptStruct BendGame.InventoryIDDetails
// 0x000C
struct FInventoryIDDetails
{
	TEnumAsByte<EInventoryCraftComponentID>            CraftComponent;                                           // 0x0000(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EInventoryAmmoID>                      Ammo;                                                     // 0x0001(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EInventoryWeaponID>                    Weapon;                                                   // 0x0002(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EInventoryConsumableID>                Consumable;                                               // 0x0003(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EInventoryUtilityID>                   Utility;                                                  // 0x0004(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EMotorcyclePartID>                     BikePart;                                                 // 0x0005(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EInventoryCollectibleID>               Collectible;                                              // 0x0006(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0007(0x0001) MISSED OFFSET
	int                                                Count;                                                    // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.InventoryOperation
// 0x0018
struct FInventoryOperation
{
	int                                                ItemKey;                                                  // 0x0000(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0004(0x0004) MISSED OFFSET
	class UInventoryItem*                              InventoryItem;                                            // 0x0008(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	TEnumAsByte<EInventoryOperation>                   OpType;                                                   // 0x0010(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0011(0x0003) MISSED OFFSET
	int                                                OpCount;                                                  // 0x0014(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
};

// ScriptStruct BendGame.PairedKillAnims
// 0x0010
struct FPairedKillAnims
{
	class UAnimationAsset*                             AttackerAnimation;                                        // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UAnimationAsset*                             DefenderAnimation;                                        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.PairedKillType
// 0x0010
struct FPairedKillType
{
	TArray<struct FPairedKillAnims>                    PairedAnims;                                              // 0x0000(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
};

// ScriptStruct BendGame.PairedKill
// 0x01E8
struct FPairedKill
{
	TArray<TEnumAsByte<EAIFactionType>>                FactionTypes;                                             // 0x0000(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FPairedKillType                             PairedKillTypesNew[0x1D];                                 // 0x0010(0x0010) (Edit)
	class UClass*                                      AttackerProp;                                             // 0x01E0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.FactionCombatData
// 0x0028
struct FFactionCombatData
{
	TArray<TEnumAsByte<EAIFactionType>>                Factions;                                                 // 0x0000(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	float                                              TimeBetweenMeleeAttacks;                                  // 0x0010(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinTimeBetweenMeleeAttacks;                               // 0x0014(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TimeBetweenGrappleAttacks;                                // 0x0018(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ForceGrappleDistance;                                     // 0x001C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              GrappleChance;                                            // 0x0020(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0024(0x0004) MISSED OFFSET
};

// ScriptStruct BendGame.ValidAttackAngleData
// 0x000C
struct FValidAttackAngleData
{
	float                                              Rotation;                                                 // 0x0000(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              Spread;                                                   // 0x0004(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0008(0x0004) MISSED OFFSET
};

// ScriptStruct BendGame.MeleePairedAnimData
// 0x0018
struct FMeleePairedAnimData
{
	class UAnimSequenceBase*                           AttackerAnim;                                             // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           VictimAnim;                                               // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0010(0x0008) MISSED OFFSET
};

// ScriptStruct BendGame.MeleePairedAnimSeqRLGroupData
// 0x0050
struct FMeleePairedAnimSeqRLGroupData
{
	unsigned char                                      UnknownData00[0x30];                                      // 0x0000(0x0030) MISSED OFFSET
	TArray<struct FMeleePairedAnimData>                Right;                                                    // 0x0030(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FMeleePairedAnimData>                Left;                                                     // 0x0040(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
};

// ScriptStruct BendGame.EnterIntoMeleeAttackData
// 0x0190
struct FEnterIntoMeleeAttackData
{
	struct FMeleePairedAnimSeqRLGroupData              HighAttack;                                               // 0x0000(0x0050) (Edit, DisableEditOnInstance)
	struct FMeleePairedAnimSeqRLGroupData              MiddleAttack;                                             // 0x0050(0x0050) (Edit, DisableEditOnInstance)
	struct FMeleePairedAnimSeqRLGroupData              LowAttack;                                                // 0x00A0(0x0050) (Edit, DisableEditOnInstance)
	struct FMeleePairedAnimSeqRLGroupData              OverheadAttack;                                           // 0x00F0(0x0050) (Edit, DisableEditOnInstance)
	struct FMeleePairedAnimSeqRLGroupData              GroundAttack;                                             // 0x0140(0x0050) (Edit, DisableEditOnInstance)
};

// ScriptStruct BendGame.BlockPairedAnimSeqRLGroupData
// 0x0068
struct FBlockPairedAnimSeqRLGroupData
{
	TArray<TEnumAsByte<EAIFactionType>>                VictimsFaction;                                           // 0x0000(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	bool                                               RandomlyUseVictimDodgeAnims;                              // 0x0010(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0011(0x0003) MISSED OFFSET
	float                                              PercentChanceToPlayDodgeAnim;                             // 0x0014(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FMeleePairedAnimSeqRLGroupData              BlockAnims;                                               // 0x0018(0x0050) (Edit, BlueprintVisible)
};

// ScriptStruct BendGame.BlockVictimFactionGroupData
// 0x0020
struct FBlockVictimFactionGroupData
{
	TArray<TEnumAsByte<EInventoryWeaponID>>            VictimWeaponTypes;                                        // 0x0000(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FBlockPairedAnimSeqRLGroupData>      BlockAnimsBasedOnFaction;                                 // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
};

// ScriptStruct BendGame.MeleePairedAnimSeqData
// 0x0010
struct FMeleePairedAnimSeqData
{
	class UAnimSequenceBase*                           AttackerAnimation;                                        // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           AttackedAnimation;                                        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.MeleeStunAndBrutalKillData
// 0x0110
struct FMeleeStunAndBrutalKillData
{
	float                                              NumSecWaitExitLoopingAnim;                                // 0x0000(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinDistAwayToExitLoopingAnim;                             // 0x0004(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FMeleePairedAnimSeqRLGroupData              StunAttack;                                               // 0x0008(0x0050) (Edit, DisableEditOnInstance)
	struct FMeleePairedAnimSeqRLGroupData              StunAttackSprinting;                                      // 0x0058(0x0050) (Edit, DisableEditOnInstance)
	class UAnimSequenceBase*                           VictimStunLoopingAnim;                                    // 0x00A8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAnimSequenceBase*                           VictimExitStunAnim_Normal;                                // 0x00B0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<struct FMeleePairedAnimData>                MeleeKillAnims;                                           // 0x00B8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FMeleePairedAnimData>                BrutalKillAnims;                                          // 0x00C8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x38];                                      // 0x00D8(0x0038) MISSED OFFSET
};

// ScriptStruct BendGame.MeleeBrokenWeaponPairedAnimSeqData
// 0x0018
struct FMeleeBrokenWeaponPairedAnimSeqData
{
	struct FName                                       LeaveWeaponSocket;                                        // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FMeleePairedAnimSeqData                     PairedAnimSeq;                                            // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.MeleePairedAnimBasedOnFactionTypeData
// 0x0EF0
struct FMeleePairedAnimBasedOnFactionTypeData
{
	TArray<TEnumAsByte<EAIFactionType>>                FactionType;                                              // 0x0000(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FEnterIntoMeleeAttackData                   EnterIntoMeleeAttack;                                     // 0x0010(0x0190) (Edit, DisableEditOnInstance)
	struct FEnterIntoMeleeAttackData                   EnterIntoMeleeAttack180;                                  // 0x01A0(0x0190) (Edit, DisableEditOnInstance)
	struct FEnterIntoMeleeAttackData                   EnterIntoMeleeAttackSprinting;                            // 0x0330(0x0190) (Edit, DisableEditOnInstance)
	struct FEnterIntoMeleeAttackData                   HeavyMeleeAttack;                                         // 0x04C0(0x0190) (Edit, DisableEditOnInstance)
	struct FEnterIntoMeleeAttackData                   HeavyMeleeAttackSprinting;                                // 0x0650(0x0190) (Edit, DisableEditOnInstance)
	struct FMeleePairedAnimSeqRLGroupData              HighAttack;                                               // 0x07E0(0x0050) (Edit, DisableEditOnInstance)
	struct FMeleePairedAnimSeqRLGroupData              MiddleAttack;                                             // 0x0830(0x0050) (Edit, DisableEditOnInstance)
	struct FMeleePairedAnimSeqRLGroupData              LowAttack;                                                // 0x0880(0x0050) (Edit, DisableEditOnInstance)
	struct FMeleePairedAnimSeqRLGroupData              OverheadAttack;                                           // 0x08D0(0x0050) (Edit, DisableEditOnInstance)
	struct FMeleePairedAnimSeqRLGroupData              GroundAttack;                                             // 0x0920(0x0050) (Edit, DisableEditOnInstance)
	struct FMeleePairedAnimSeqRLGroupData              ComboEnderAttack;                                         // 0x0970(0x0050) (Edit, DisableEditOnInstance)
	struct FMeleePairedAnimSeqRLGroupData              ComboEnderAttackSprinting;                                // 0x09C0(0x0050) (Edit, DisableEditOnInstance)
	struct FMeleePairedAnimSeqRLGroupData              LowStaminaAttack;                                         // 0x0A10(0x0050) (Edit, DisableEditOnInstance)
	struct FMeleePairedAnimSeqRLGroupData              OutOfStaminaAttack;                                       // 0x0A60(0x0050) (Edit, DisableEditOnInstance)
	struct FMeleePairedAnimSeqRLGroupData              VictimDodgeAttack;                                        // 0x0AB0(0x0050) (Edit, DisableEditOnInstance)
	TArray<struct FBlockVictimFactionGroupData>        VictimBlockAttack;                                        // 0x0B00(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FMeleePairedAnimSeqRLGroupData              CounterAttack;                                            // 0x0B10(0x0050) (Edit, DisableEditOnInstance)
	struct FMeleePairedAnimSeqRLGroupData              Kill;                                                     // 0x0B60(0x0050) (Edit, DisableEditOnInstance)
	TArray<struct FMeleePairedAnimSeqData>             OverheadKill;                                             // 0x0BB0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x18];                                      // 0x0BC0(0x0018) MISSED OFFSET
	struct FMeleePairedAnimSeqRLGroupData              LastAttackerKill;                                         // 0x0BD8(0x0050) (Edit, DisableEditOnInstance)
	TArray<struct FMeleePairedAnimData>                LastAttackerOverheadKill;                                 // 0x0C28(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData01[0x18];                                      // 0x0C38(0x0018) MISSED OFFSET
	TArray<struct FMeleeStunAndBrutalKillData>         StunAndBrutalKill;                                        // 0x0C50(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FMeleeStunAndBrutalKillData>         StunAndBrutalKillFromBehind;                              // 0x0C60(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FMeleeBrokenWeaponPairedAnimSeqData> MeleeKillWithBrokenWeapon;                                // 0x0C70(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData02[0x18];                                      // 0x0C80(0x0018) MISSED OFFSET
	struct FMeleePairedAnimSeqRLGroupData              HeavyMeleeKill;                                           // 0x0C98(0x0050) (Edit, DisableEditOnInstance)
	struct FMeleePairedAnimSeqRLGroupData              LastAttackerHeavyMeleeKill;                               // 0x0CE8(0x0050) (Edit, DisableEditOnInstance)
	TArray<struct FMeleePairedAnimData>                ContextualWallAttack;                                     // 0x0D38(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData03[0x18];                                      // 0x0D48(0x0018) MISSED OFFSET
	TArray<struct FMeleePairedAnimData>                ContextualTableAttack;                                    // 0x0D60(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData04[0x18];                                      // 0x0D70(0x0018) MISSED OFFSET
	TArray<struct FMeleePairedAnimData>                ContextualCliffAttack;                                    // 0x0D88(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData05[0x18];                                      // 0x0D98(0x0018) MISSED OFFSET
	TArray<struct FMeleePairedAnimData>                ContextualWallKill;                                       // 0x0DB0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData06[0x18];                                      // 0x0DC0(0x0018) MISSED OFFSET
	TArray<struct FMeleePairedAnimData>                ContextualTableKill;                                      // 0x0DD8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData07[0x18];                                      // 0x0DE8(0x0018) MISSED OFFSET
	TArray<struct FMeleePairedAnimData>                ContextualCliffKill;                                      // 0x0E00(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData08[0x18];                                      // 0x0E10(0x0018) MISSED OFFSET
	struct FMeleePairedAnimSeqRLGroupData              OnBikeAttack;                                             // 0x0E28(0x0050) (Edit, DisableEditOnInstance)
	struct FMeleePairedAnimSeqRLGroupData              OnBikeBehindAttack;                                       // 0x0E78(0x0050) (Edit, DisableEditOnInstance)
	float                                              StaminaPercentageOutOfStaminaAttack;                      // 0x0EC8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                RefOffsetAmount;                                          // 0x0ECC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData09[0x8];                                       // 0x0ED0(0x0008) MISSED OFFSET
	float                                              HighAttackHeight;                                         // 0x0ED8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MiddleAttackHeight;                                       // 0x0EDC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              LowAttackHeight;                                          // 0x0EE0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              OverheadAttackHeight;                                     // 0x0EE4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              GroundAttackHeight;                                       // 0x0EE8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               UseHeadVelocityToCalcAttackHeight;                        // 0x0EEC(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData10[0x3];                                       // 0x0EED(0x0003) MISSED OFFSET
};

// ScriptStruct BendGame.MeleeMissSwingAnims
// 0x0018
struct FMeleeMissSwingAnims
{
	class UAnimSequenceBase*                           Right;                                                    // 0x0000(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAnimSequenceBase*                           Left;                                                     // 0x0008(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAnimSequenceBase*                           OverHead;                                                 // 0x0010(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
};

// ScriptStruct BendGame.BendMeleeAttackData
// 0x0140
struct FBendMeleeAttackData
{
	unsigned char                                      UnknownData00[0x18];                                      // 0x0000(0x0018) MISSED OFFSET
	TEnumAsByte<EInventoryWeaponID>                    WeaponType;                                               // 0x0018(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0019(0x0007) MISSED OFFSET
	TArray<TEnumAsByte<EInventoryWeaponID>>            WeaponTypes;                                              // 0x0020(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData02[0xC];                                       // 0x0030(0x000C) MISSED OFFSET
	float                                              ChanceToDoKillOnFirstAttack;                              // 0x003C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<struct FRuntimeFloatCurve>                  MeleeComboPlayRateCurve;                                  // 0x0040(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FMeleePairedAnimBasedOnFactionTypeData> MeleeAnimations;                                          // 0x0050(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FMeleePairedAnimSeqRLGroupData              WeaponBreakingReaction;                                   // 0x0060(0x0050) (Edit, DisableEditOnInstance)
	struct FMeleeMissSwingAnims                        MissSwingNoMovement;                                      // 0x00B0(0x0018) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FMeleeMissSwingAnims                        MissSwingDefault;                                         // 0x00C8(0x0018) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FMeleeMissSwingAnims                        MissSwingRunning;                                         // 0x00E0(0x0018) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FMeleeMissSwingAnims                        MissSwingOnBike;                                          // 0x00F8(0x0018) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FMeleeMissSwingAnims                        MissCounterAttack;                                        // 0x0110(0x0018) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FMeleeMissSwingAnims                        CounterAttackReady;                                       // 0x0128(0x0018) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
};

// ScriptStruct BendGame.ProvokedWithWeaponData
// 0x0030
struct FProvokedWithWeaponData
{
	TArray<TEnumAsByte<EInventoryWeaponID>>            WeaponTypes;                                              // 0x0000(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	float                                              ReduceMeleeHitVictimCountPerSecond;                       // 0x0010(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                MinNumMeleeHitVictimDoProvoke;                            // 0x0014(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                MaxNumMeleeHitVictimDoProvoke;                            // 0x0018(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                MinNumProvokesBeforeProvokeAttack;                        // 0x001C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                MaxNumProvokesBeforeProvokeAttack;                        // 0x0020(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               AllowProvokeDodge;                                        // 0x0024(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               AllowProvokeGrapple;                                      // 0x0025(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               AllowProvokeBigAttack;                                    // 0x0026(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               AllowBlockedBigAttack;                                    // 0x0027(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               ClearAllProvokeFlags;                                     // 0x0028(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0029(0x0003) MISSED OFFSET
	float                                              CooldownTimeAfterProvoke;                                 // 0x002C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
};

// ScriptStruct BendGame.GrapplePairAnimData
// 0x0020
struct FGrapplePairAnimData
{
	class UAnimationAsset*                             VictimAnim;                                               // 0x0000(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAnimationAsset*                             GrapplerAnim;                                             // 0x0008(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAnimationAsset*                             SecondaryGrapplerAnim;                                    // 0x0010(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	uint32_t                                           Weight;                                                   // 0x0018(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               NearCollision;                                            // 0x001C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x001D(0x0003) MISSED OFFSET
};

// ScriptStruct BendGame.MeleeHitThrowPairedAnimData
// 0x0010
struct FMeleeHitThrowPairedAnimData
{
	class UAnimationAsset*                             AttackerAnim;                                             // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UAnimationAsset*                             VictimAnim;                                               // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.MeleeHitThrowPairedAnimBasedOnFactionTypeData
// 0x0020
struct FMeleeHitThrowPairedAnimBasedOnFactionTypeData
{
	TArray<TEnumAsByte<EAIFactionType>>                FactionType;                                              // 0x0000(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FMeleeHitThrowPairedAnimData                MeleeHitThrowDirectionalAnim;                             // 0x0010(0x0010) (Edit, DisableEditOnInstance)
};

// ScriptStruct BendGame.DodgeInfoData
// 0x0020
struct FDodgeInfoData
{
	TEnumAsByte<EAIFactionType>                        AttackerType;                                             // 0x0000(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	float                                              ForwardFacingAngle;                                       // 0x0004(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              Spread;                                                   // 0x0008(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxDistanceAwayFromAttacker;                              // 0x000C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinWaitTimeAfterDodge;                                    // 0x0010(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxWaitTimeAfterDodge;                                    // 0x0014(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ChanceDodgeDuringMelee;                                   // 0x0018(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x001C(0x0004) MISSED OFFSET
};

// ScriptStruct BendGame.BlockAttackInfoData
// 0x0020
struct FBlockAttackInfoData
{
	TArray<struct FBendPairedAnimData>                 BlockAttackFromRightAnimations;                           // 0x0000(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FBendPairedAnimData>                 BlockAttackFromLeftAnimations;                            // 0x0010(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
};

// ScriptStruct BendGame.DamageBlendSpaceAngles
// 0x0010
struct FDamageBlendSpaceAngles
{
	float                                              FrontAngle;                                               // 0x0000(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FrontSideAngle;                                           // 0x0004(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SideAngle;                                                // 0x0008(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              BackSideAngle;                                            // 0x000C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
};

// ScriptStruct BendGame.FactionAndInt
// 0x0018
struct FFactionAndInt
{
	TArray<TEnumAsByte<EAIFactionType>>                Factions;                                                 // 0x0000(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	int                                                Int;                                                      // 0x0010(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0014(0x0004) MISSED OFFSET
};

// ScriptStruct BendGame.MeleeRingData
// 0x0058
struct FMeleeRingData
{
	TArray<TEnumAsByte<EAIFactionType>>                ValidNPCs;                                                // 0x0000(0x0010) (ZeroConstructor, Deprecated)
	float                                              RingRadius;                                               // 0x0010(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	TEnumAsByte<EMeleeRingType>                        Type;                                                     // 0x0014(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0015(0x0003) MISSED OFFSET
	int                                                RingSlots;                                                // 0x0018(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x001C(0x0004) MISSED OFFSET
	TArray<struct FFactionAndInt>                      OverrideRingSlotsByFaction;                               // 0x0020(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData02[0x28];                                      // 0x0030(0x0028) MISSED OFFSET
};

// ScriptStruct BendGame.GrappleExitPairAnimData
// 0x0018
struct FGrappleExitPairAnimData
{
	TArray<struct FGrapplePairAnimData>                Anims;                                                    // 0x0000(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FVector2D                                   CompletionRangeForExit;                                   // 0x0010(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
};

// ScriptStruct BendGame.GrappleAnimationData
// 0x0038
struct FGrappleAnimationData
{
	TArray<struct FGrapplePairAnimData>                EnterAnims;                                               // 0x0000(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FGrapplePairAnimData>                LoopAnims;                                                // 0x0010(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FGrappleExitPairAnimData>            ExitAnims;                                                // 0x0020(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	bool                                               SkipButtonEvent;                                          // 0x0030(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0031(0x0007) MISSED OFFSET
};

// ScriptStruct BendGame.TieredGrappleData
// 0x0040
struct FTieredGrappleData
{
	int                                                NumGrapplersRequired;                                     // 0x0000(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               SimultaneousStart;                                        // 0x0004(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0005(0x0003) MISSED OFFSET
	struct FVector2D                                   TargetHealthRange;                                        // 0x0008(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       GrappleName;                                              // 0x0010(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<struct FGrappleAnimationData>               GrappleTiers;                                             // 0x0018(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData01[0x18];                                      // 0x0028(0x0018) MISSED OFFSET
};

// ScriptStruct BendGame.GrappleAttackerTypeData
// 0x0030
struct FGrappleAttackerTypeData
{
	TEnumAsByte<EAIFactionType>                        AttackerType;                                             // 0x0000(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0001(0x0007) MISSED OFFSET
	TArray<TEnumAsByte<EAIFactionType>>                AttackerTypeArray;                                        // 0x0008(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	float                                              Priority;                                                 // 0x0018(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x001C(0x0004) MISSED OFFSET
	TArray<struct FTieredGrappleData>                  TieredGrappleAnims;                                       // 0x0020(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
};

// ScriptStruct BendGame.GrappleLocationData
// 0x0040
struct FGrappleLocationData
{
	struct FName                                       GrappleSocketName;                                        // 0x0000(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FValidAttackAngleData                       ValidAttackAngle;                                         // 0x0008(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0014(0x0004) MISSED OFFSET
	TArray<struct FGrappleAttackerTypeData>            AttackerTypeData;                                         // 0x0018(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData01[0x18];                                      // 0x0028(0x0018) MISSED OFFSET
};

// ScriptStruct BendGame.GrappleOverrideTypeData
// 0x0028
struct FGrappleOverrideTypeData
{
	TEnumAsByte<EAIFactionType>                        TargetType;                                               // 0x0000(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0001(0x0007) MISSED OFFSET
	TArray<TEnumAsByte<EAIFactionType>>                TargetTypeArray;                                          // 0x0008(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FTieredGrappleData>                  TieredGrappleAnims;                                       // 0x0018(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
};

// ScriptStruct BendGame.GrappleOverrideData
// 0x0018
struct FGrappleOverrideData
{
	struct FName                                       GrappleSocketName;                                        // 0x0000(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<struct FGrappleOverrideTypeData>            TargetTypeData;                                           // 0x0008(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
};

// ScriptStruct BendGame.FreeDodgeData
// 0x0010
struct FFreeDodgeData
{
	class UBlendSpace*                                 BlendSpace;                                               // 0x0000(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              angle;                                                    // 0x0008(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              Strength;                                                 // 0x000C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.BendGenericAnimData
// 0x0018
struct FBendGenericAnimData
{
	class UAnimationAsset*                             AnimAsset;                                                // 0x0000(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              BlendInTime;                                              // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BlendOutTime;                                             // 0x000C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PlayRate;                                                 // 0x0010(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0014(0x0004) MISSED OFFSET
};

// ScriptStruct BendGame.PairedAnimationData
// 0x0028
struct FPairedAnimationData
{
	bool                                               UseAnimTime;                                              // 0x0000(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	float                                              CurrentAnimTime;                                          // 0x0004(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0008(0x0008) MISSED OFFSET
	struct FBendGenericAnimData                        Animation;                                                // 0x0010(0x0018) (Edit, BlueprintVisible)
};

// ScriptStruct BendGame.MeleeAttackData
// 0x00C0
struct FMeleeAttackData
{
	unsigned char                                      UnknownData00[0x19];                                      // 0x0000(0x0019) MISSED OFFSET
	bool                                               bUpdateMeleeAnchor;                                       // 0x0019(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bCanAnchorToTargetAtStartOfAttack;                        // 0x001A(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bCanAnchorToTarget;                                       // 0x001B(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bCanPlayPairedAnim;                                       // 0x001C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bAttackFromRightSide;                                     // 0x001D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x001E(0x0002) MISSED OFFSET
	int                                                iAnimRefOffset;                                           // 0x0020(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              fAnimPlayRate;                                            // 0x0024(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              fMeleeAttackDist;                                         // 0x0028(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              fRunningExtendTravelDistanceBreakAnchor;                  // 0x002C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EMeleeAttackType>                      eAttackType;                                              // 0x0030(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EMeleeAttackBaseType>                  eAttackBaseType;                                          // 0x0031(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x6];                                       // 0x0032(0x0006) MISSED OFFSET
	class UAnimSequenceBase*                           pAttackerAnim;                                            // 0x0038(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FPairedAnimationData                        AttackerAnim;                                             // 0x0040(0x0028) (Edit, BlueprintVisible)
	class UAnimSequenceBase*                           pVictimsAnim;                                             // 0x0068(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FPairedAnimationData                        VictimsAnim;                                              // 0x0070(0x0028) (Edit, BlueprintVisible)
	class UAnimSequenceBase*                           pBrokenWpnReactionAnim;                                   // 0x0098(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       nPlayRateCurveName;                                       // 0x00A0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x18];                                      // 0x00A8(0x0018) MISSED OFFSET
};

// ScriptStruct BendGame.AvoidanceModifiers
// 0x0018
struct FAvoidanceModifiers
{
	float                                              HeavyHitModifier;                                         // 0x0000(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              StealthModifier;                                          // 0x0004(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FreeDodgeModifier;                                        // 0x0008(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CrouchedModifier;                                         // 0x000C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CoverModifier;                                            // 0x0010(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              InMeleeModifier;                                          // 0x0014(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
};

// ScriptStruct BendGame.BendRVOAvoidanceGroups
// 0x0030
struct FBendRVOAvoidanceGroups
{
	TArray<TEnumAsByte<EBendRVOGroups>>                Group;                                                    // 0x0000(0x0010) (Edit, ZeroConstructor)
	TArray<TEnumAsByte<EBendRVOGroups>>                GroupsToAvoid;                                            // 0x0010(0x0010) (Edit, ZeroConstructor)
	TArray<TEnumAsByte<EBendRVOGroups>>                GroupsToIgnore;                                           // 0x0020(0x0010) (Edit, ZeroConstructor)
};

// ScriptStruct BendGame.FoliageMovementData
// 0x0020
struct FFoliageMovementData
{
	TEnumAsByte<EFoliageType>                          Type;                                                     // 0x0000(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0001(0x0007) MISSED OFFSET
	class USoundCue*                                   MovementSound;                                            // 0x0008(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0010(0x0010) MISSED OFFSET
};

// ScriptStruct BendGame.DamageAnimInfo
// 0x0090
struct FDamageAnimInfo
{
	unsigned char                                      UnknownData00[0x14];                                      // 0x0000(0x0014) MISSED OFFSET
	float                                              DamageAngle;                                              // 0x0014(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              DamagePercentage;                                         // 0x0018(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EAnimForceRotation>                    ApplyRotation;                                            // 0x001C(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               HasBlendSpaceDamageAnim;                                  // 0x001D(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x001E(0x0002) MISSED OFFSET
	class UBlendSpace*                                 BlendSpace;                                               // 0x0020(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EAnimationSlot>                        BlendSpaceSlot;                                           // 0x0028(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               HasSequenceDamageAnim;                                    // 0x0029(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x6];                                       // 0x002A(0x0006) MISSED OFFSET
	class UAnimSequenceBase*                           AnimSequence;                                             // 0x0030(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EAnimationSlot>                        AnimSequenceSlot;                                         // 0x0038(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               HasRecoveryAnim;                                          // 0x0039(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x6];                                       // 0x003A(0x0006) MISSED OFFSET
	class UAnimSequenceBase*                           RecoveryAnimSequence;                                     // 0x0040(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EAnimationSlot>                        RecoveryAnimSlot;                                         // 0x0048(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x7];                                       // 0x0049(0x0007) MISSED OFFSET
	struct FTransform                                  AnchorTransform;                                          // 0x0050(0x0030) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	bool                                               ForceExitVehicle;                                         // 0x0080(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               ExitFromFalling;                                          // 0x0081(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               ForceReaction;                                            // 0x0082(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0xD];                                       // 0x0083(0x000D) MISSED OFFSET
};

// ScriptStruct BendGame.DyingAnimInfo
// 0x0070
struct FDyingAnimInfo
{
	unsigned char                                      UnknownData00[0xC];                                       // 0x0000(0x000C) MISSED OFFSET
	float                                              DamageAngle;                                              // 0x000C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              DamagePercentage;                                         // 0x0010(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              Distance;                                                 // 0x0014(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EAnimForceRotation>                    ApplyRotation;                                            // 0x0018(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0019(0x0003) MISSED OFFSET
	float                                              OffsetRotation;                                           // 0x001C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FTransform                                  RotationTransform;                                        // 0x0020(0x0030) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	bool                                               CanPlayFromFullBody;                                      // 0x0050(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               HasBlendSpaceDyingAnim;                                   // 0x0051(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x6];                                       // 0x0052(0x0006) MISSED OFFSET
	class UBlendSpace*                                 BlendSpace;                                               // 0x0058(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           AttackerPairedAnim;                                       // 0x0060(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           VictimPairedAnim;                                         // 0x0068(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.FlinchAnimInfo
// 0x0020
struct FFlinchAnimInfo
{
	unsigned char                                      UnknownData00[0x8];                                       // 0x0000(0x0008) MISSED OFFSET
	float                                              angle;                                                    // 0x0008(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               HasBlendSpaceFlinchAnim;                                  // 0x000C(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x000D(0x0003) MISSED OFFSET
	class UAnimSequenceBase*                           AnimSequence;                                             // 0x0010(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UBlendSpace1D*                               BlendSpace;                                               // 0x0018(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.LimbTrackingInfo
// 0x0038
struct FLimbTrackingInfo
{
	struct FName                                       LimbSocketName;                                           // 0x0000(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x30];                                      // 0x0008(0x0030) MISSED OFFSET
};

// ScriptStruct BendGame.TakeHitInfo
// 0x0140
struct FTakeHitInfo
{
	float                                              ActualDamage;                                             // 0x0000(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0004(0x0004) MISSED OFFSET
	class UClass*                                      DamageTypeClass;                                          // 0x0008(0x0008) (ZeroConstructor, IsPlainOldData)
	class ABendPawn*                                   PawnInstigator;                                           // 0x0010(0x0008) (ZeroConstructor, IsPlainOldData)
	class AActor*                                      DamageCauser;                                             // 0x0018(0x0008) (ZeroConstructor, IsPlainOldData)
	bool                                               bKilled;                                                  // 0x0020(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0021(0x0003) MISSED OFFSET
	int                                                DamageEventClassID;                                       // 0x0024(0x0004) (ZeroConstructor, IsPlainOldData)
	struct FDamageEvent                                GeneralDamageEvent;                                       // 0x0028(0x0018)
	struct FPointDamageEvent                           PointDamageEvent;                                         // 0x0040(0x00B0)
	struct FRadialDamageEvent                          RadialDamageEvent;                                        // 0x00F0(0x0048)
	unsigned char                                      EnsureReplicationByte;                                    // 0x0138(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0139(0x0007) MISSED OFFSET
};

// ScriptStruct BendGame.DamageTypeModifier
// 0x0008
struct FDamageTypeModifier
{
	TEnumAsByte<EStatusEffects>                        StatusEffectCondition;                                    // 0x0000(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ETypeOfBaseDamage>                     BaseDamageType;                                           // 0x0001(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ETypeOfDamage>                         SubDamageType;                                            // 0x0002(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0003(0x0001) MISSED OFFSET
	float                                              DamageMultiplier;                                         // 0x0004(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.StatusEffectResponseData
// 0x000C
struct FStatusEffectResponseData
{
	bool                                               ValidStatusEffect;                                        // 0x0000(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	float                                              DurationScalar;                                           // 0x0004(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               Stackable;                                                // 0x0008(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0009(0x0003) MISSED OFFSET
};

// ScriptStruct BendGame.BendReconcilerToken
// 0x0008
struct FBendReconcilerToken
{
	unsigned char                                      UnknownData00[0x8];                                       // 0x0000(0x0008) MISSED OFFSET
};

// ScriptStruct BendGame.BendAnimSequenceData
// 0x0018
struct FBendAnimSequenceData
{
	class UAnimSequenceBase*                           AnimSequence;                                             // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BlendInTime;                                              // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BlendOutTime;                                             // 0x000C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BlendOutTriggerTime;                                      // 0x0010(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PlayRate;                                                 // 0x0014(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.DetectedPawn
// 0x0080
struct FDetectedPawn
{
	unsigned char                                      UnknownData00[0x8];                                       // 0x0000(0x0008) MISSED OFFSET
	TWeakObjectPtr<class AActor>                       m_pDetector;                                              // 0x0008(0x0008) (ZeroConstructor, IsPlainOldData)
	float                                              m_fAwarenessLevel;                                        // 0x0010(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector                                     m_LastKnownLocation;                                      // 0x0014(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              m_fDistance;                                              // 0x0020(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              m_fTimeWhenSeen;                                          // 0x0024(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              m_fTimeWhenHeard;                                         // 0x0028(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              m_fTimeWhenHeardLastRock;                                 // 0x002C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              m_fTimeWhenAttacked;                                      // 0x0030(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              m_fFaction;                                               // 0x0034(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_fLastHeardVolume;                                       // 0x0038(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              m_fMaxAwareness;                                          // 0x003C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              m_fCosFromCenter;                                         // 0x0040(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              m_fAngleToClosestFriend;                                  // 0x0044(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              m_fDamageReceived;                                        // 0x0048(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EBendSoundEventType>                   m_soundEvent;                                             // 0x004C(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x004D(0x0003) MISSED OFFSET
	int                                                m_iNumTimesAttackedMe;                                    // 0x0050(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                m_iHeardTooManyRocks;                                     // 0x0054(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      m_bSoundWasRemote : 1;                                    // 0x0058(0x0001) (BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      m_bPreviouslyAware : 1;                                   // 0x0058(0x0001) (BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      m_bAttackedMe : 1;                                        // 0x0058(0x0001) (BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      m_bHaveLOS : 1;                                           // 0x0058(0x0001) (BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      m_bEverHadLOS : 1;                                        // 0x0058(0x0001) (BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      m_bPawnDetectedPlayerHandled : 1;                         // 0x0058(0x0001) (BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      m_bHidden : 1;                                            // 0x0058(0x0001) (BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      m_bSawHide : 1;                                           // 0x0058(0x0001) (BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      m_bSawBody : 1;                                           // 0x0059(0x0001) (BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      m_bSawVehicle : 1;                                        // 0x0059(0x0001) (BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      m_bLastAttackWasMelee : 1;                                // 0x0059(0x0001) (BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      m_bHasFirstHandAwareness : 1;                             // 0x0059(0x0001) (BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData02[0x26];                                      // 0x005A(0x0026) MISSED OFFSET
};

// ScriptStruct BendGame.DetectedBody
// 0x0038
struct FDetectedBody
{
	unsigned char                                      UnknownData00[0x24];                                      // 0x0000(0x0024) MISSED OFFSET
	float                                              m_fTimeSinceFirstSeen;                                    // 0x0024(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              m_fFaction;                                               // 0x0028(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_fDistance;                                              // 0x002C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      m_bHaveLOS : 1;                                           // 0x0030(0x0001) (BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      m_bInvestigated : 1;                                      // 0x0030(0x0001) (BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0031(0x0007) MISSED OFFSET
};

// ScriptStruct BendGame.BendCrowdMemberHandle
// 0x0002
struct FBendCrowdMemberHandle
{
	unsigned char                                      UnknownData00[0x2];                                       // 0x0000(0x0002) MISSED OFFSET
};

// ScriptStruct BendGame.DetectedHorde
// 0x0028
struct FDetectedHorde
{
	struct FBendCrowdMemberHandle                      m_HordeMemberHandle;                                      // 0x0000(0x0002)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0002(0x0002) MISSED OFFSET
	struct FVector                                     m_Location;                                               // 0x0004(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              m_fDistance;                                              // 0x0010(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                m_NumNearbyHorde;                                         // 0x0014(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      m_bHaveLOS : 1;                                           // 0x0018(0x0001) (BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      m_bFrenzied : 1;                                          // 0x0018(0x0001) (BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      m_bIsEnemy : 1;                                           // 0x0018(0x0001) (BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData01[0xF];                                       // 0x0019(0x000F) MISSED OFFSET
};

// ScriptStruct BendGame.BendSensingData
// 0x00F4
struct FBendSensingData
{
	float                                              SightRadiusFar;                                           // 0x0000(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SightRadiusMid;                                           // 0x0004(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SightRadiusNear;                                          // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SightRadiusESP;                                           // 0x000C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SightRadiusVehicle;                                       // 0x0010(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SightRadiusBodies;                                        // 0x0014(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SightRadiusHorde;                                         // 0x0018(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SightAngleFar;                                            // 0x001C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SightAngleMid;                                            // 0x0020(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SightAngleNear;                                           // 0x0024(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SightAngleESP;                                            // 0x0028(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SightAngleVehicle;                                        // 0x002C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SightAngleBodies;                                         // 0x0030(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SightAngleHorde;                                          // 0x0034(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SightRainMult;                                            // 0x0038(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SightHeavyRainMult;                                       // 0x003C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SightFogMult;                                             // 0x0040(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SightCloudyMult;                                          // 0x0044(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SightSnowMult;                                            // 0x0048(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SightHeavySnowMult;                                       // 0x004C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SightFlashlightMult;                                      // 0x0050(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SightCrouchMult;                                          // 0x0054(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SightRidingMult;                                          // 0x0058(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SightHiddenMult;                                          // 0x005C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SightSawHideMult;                                         // 0x0060(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SightMovingMult;                                          // 0x0064(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SightInsideMult;                                          // 0x0068(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TimeToAwareFar;                                           // 0x006C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TimeToAwareMid;                                           // 0x0070(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TimeToAwareNear;                                          // 0x0074(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TimeToAwareESP;                                           // 0x0078(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TimeToAwareCrouchMult;                                    // 0x007C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TimeToAwarePlayerSkillMult;                               // 0x0080(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TimeToCoolDown;                                           // 0x0084(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TimeToUnaware;                                            // 0x0088(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CoolDownMoveDist;                                         // 0x008C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CoolDownMoveMult;                                         // 0x0090(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SmallCoverMaximumWidth;                                   // 0x0094(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SmallCoverMinimumWidth;                                   // 0x0098(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SmallCoverMaxTimeAwarenessMultiplier;                     // 0x009C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxAwarenessFar;                                          // 0x00A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxAwarenessESP;                                          // 0x00A4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              HearingThreshold;                                         // 0x00A8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              HearingThresholdHorde;                                    // 0x00AC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              HearingFrenziedMult;                                      // 0x00B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              HearingRainMult;                                          // 0x00B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              HearingHeavyRainMult;                                     // 0x00B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              HearingFogMult;                                           // 0x00BC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              HearingSnowMult;                                          // 0x00C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              HearingHeavySnowMult;                                     // 0x00C4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              HearingWindMult;                                          // 0x00C8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SensingIntervalFar;                                       // 0x00CC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SensingIntervalMid;                                       // 0x00D0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SensingIntervalNear;                                      // 0x00D4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1C];                                      // 0x00D8(0x001C) MISSED OFFSET
};

// ScriptStruct BendGame.BendCoverSequence
// 0x0010
struct FBendCoverSequence
{
	class UAnimSequenceBase*                           EnterSequence;                                            // 0x0000(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              EnterDistance;                                            // 0x0008(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x000C(0x0004) MISSED OFFSET
};

// ScriptStruct BendGame.BendCoverBlendSpace
// 0x0018
struct FBendCoverBlendSpace
{
	class UBlendSpaceBase*                             EnterBlendspace;                                          // 0x0000(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAnimSequenceBase*                           ForwardEnter;                                             // 0x0008(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              EnterDistance;                                            // 0x0010(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              EntrySpeed;                                               // 0x0014(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
};

// ScriptStruct BendGame.BendCoverAnimParameters
// 0x0048
struct FBendCoverAnimParameters
{
	TEnumAsByte<ECoverLeanDirection>                   LeanDirection;                                            // 0x0000(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0001(0x0007) MISSED OFFSET
	TArray<TEnumAsByte<EAimedAnimMoveStyle>>           WeaponTypes;                                              // 0x0008(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	float                                              MinApproachAngle;                                         // 0x0018(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxApproachAngle;                                         // 0x001C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SmallestDistance;                                         // 0x0020(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              MaxDistance;                                              // 0x0024(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	TArray<struct FBendCoverSequence>                  ValidSequences;                                           // 0x0028(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FBendCoverBlendSpace>                BlendSpaces;                                              // 0x0038(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
};

// ScriptStruct BendGame.BendCoverTypeAnimGroup
// 0x0018
struct FBendCoverTypeAnimGroup
{
	TEnumAsByte<ECoverTypeAnimGroup>                   CoverAnimGroupType;                                       // 0x0000(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0001(0x0007) MISSED OFFSET
	TArray<struct FBendCoverAnimParameters>            Animations;                                               // 0x0008(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
};

// ScriptStruct BendGame.BendCoverDirectionGroupType
// 0x0030
struct FBendCoverDirectionGroupType
{
	TEnumAsByte<ECoverAnimDirection>                   DirectionGroupType;                                       // 0x0000(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0001(0x0007) MISSED OFFSET
	TArray<class UAnimSequenceBase*>                   AnimSequences;                                            // 0x0008(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	bool                                               bAllowBlendSpaces;                                        // 0x0018(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0019(0x0007) MISSED OFFSET
	TArray<class UBlendSpaceBase*>                     BlendSpaces;                                              // 0x0020(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
};

// ScriptStruct BendGame.BendCoverWeaponGroupType
// 0x0020
struct FBendCoverWeaponGroupType
{
	TArray<TEnumAsByte<EUnaimedAnimMoveStyle>>         WeaponGroupTypes;                                         // 0x0000(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FBendCoverDirectionGroupType>        CoverDirectionTypes;                                      // 0x0010(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
};

// ScriptStruct BendGame.BendCoverGroupType
// 0x0018
struct FBendCoverGroupType
{
	TEnumAsByte<ECoverTypeAnimGroup>                   CoverGroupType;                                           // 0x0000(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0001(0x0007) MISSED OFFSET
	TArray<struct FBendCoverWeaponGroupType>           WeaponTypes;                                              // 0x0008(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
};

// ScriptStruct BendGame.BendCoverAnimGroup
// 0x0018
struct FBendCoverAnimGroup
{
	TEnumAsByte<ECoverAnimGroup>                       CoverAnimGroup;                                           // 0x0000(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0001(0x0007) MISSED OFFSET
	TArray<struct FBendCoverGroupType>                 CoverTypes;                                               // 0x0008(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
};

// ScriptStruct BendGame.BendCoverAimSweepGroup
// 0x0028
struct FBendCoverAimSweepGroup
{
	TArray<TEnumAsByte<EAimedAnimMoveStyle>>           WeaponGroupTypes;                                         // 0x0000(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	bool                                               IsCrouched;                                               // 0x0010(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<ECoverLeanDirection>                   CoverSide;                                                // 0x0011(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x0012(0x0006) MISSED OFFSET
	TArray<class UAimOffsetBlendSpace*>                AimOffsets;                                               // 0x0018(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
};

// ScriptStruct BendGame.BendNavRotationParams
// 0x0018
struct FBendNavRotationParams
{
	struct FRotator                                    DesiredRotation;                                          // 0x0000(0x000C) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	float                                              RotationRadius;                                           // 0x000C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	float                                              AcceptableAngle;                                          // 0x0010(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	bool                                               AllowStrafe;                                              // 0x0014(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0015(0x0003) MISSED OFFSET
};

// ScriptStruct BendGame.MeleeLocationData
// 0x0050
struct FMeleeLocationData
{
	float                                              OffsetDistance;                                           // 0x0000(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              RotationAngle;                                            // 0x0004(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ZoneRadius;                                               // 0x0008(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x000C(0x0004) MISSED OFFSET
	TArray<TEnumAsByte<EAIFactionType>>                ValidNPCs;                                                // 0x0010(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData01[0xC];                                       // 0x0020(0x000C) MISSED OFFSET
	struct FVector                                     SlotNavPos;                                               // 0x002C(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0xC];                                       // 0x0038(0x000C) MISSED OFFSET
	TWeakObjectPtr<class ABendPawn>                    pOwner;                                                   // 0x0044(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x004C(0x0004) MISSED OFFSET
};

// ScriptStruct BendGame.DisplayMetricsInfo
// 0x0020
struct FDisplayMetricsInfo
{
	struct FIntPoint                                   Resolution;                                               // 0x0000(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	struct FIntPoint                                   RectMin;                                                  // 0x0008(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	struct FIntPoint                                   RectMax;                                                  // 0x0010(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	int                                                DeviceIndex;                                              // 0x0018(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               SupportsHDR;                                              // 0x001C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x001D(0x0003) MISSED OFFSET
};

// ScriptStruct BendGame.DisplayMetricsRefreshRate
// 0x0008
struct FDisplayMetricsRefreshRate
{
	int                                                Fraction1;                                                // 0x0000(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	int                                                Fraction2;                                                // 0x0004(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
};

// ScriptStruct BendGame.DisplayMetricsResolution
// 0x0018
struct FDisplayMetricsResolution
{
	struct FIntPoint                                   Resolution;                                               // 0x0000(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	TArray<struct FDisplayMetricsRefreshRate>          RefreshRates;                                             // 0x0008(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst)
};

// ScriptStruct BendGame.DisplayMetricsCapabilility
// 0x0020
struct FDisplayMetricsCapabilility
{
	TArray<struct FDisplayMetricsResolution>           Resolutions;                                              // 0x0000(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst)
	struct FDisplayMetricsRefreshRate                  WindowModeRefreshRate;                                    // 0x0010(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               WindowModeRefreshRateIsApproximate;                       // 0x0018(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0019(0x0007) MISSED OFFSET
};

// ScriptStruct BendGame.UserInputAction
// 0x0010
struct FUserInputAction
{
	TEnumAsByte<EUserInputActionType>                  ActionType;                                               // 0x0000(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData)
	bool                                               bConsumeInput;                                            // 0x0001(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x0002(0x0006) MISSED OFFSET
	struct FName                                       ActionName;                                               // 0x0008(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.HudMissionTimerDetails
// 0x0018
struct FHudMissionTimerDetails
{
	class UTexture2D*                                  Icon;                                                     // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              Time;                                                     // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EProgressBarFillType>                  BarFillType;                                              // 0x000C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x000D(0x0003) MISSED OFFSET
	unsigned char                                      bInvertFillPercent : 1;                                   // 0x0010(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0011(0x0007) MISSED OFFSET
};

// ScriptStruct BendGame.HudMiniMapStyle
// 0x0030
struct FHudMiniMapStyle
{
	struct FVector2D                                   MinimapIconSize;                                          // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UWidget*                                     MinimapWidget;                                            // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UWidget*                                     MinimapCompass;                                           // 0x0010(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UTextureRenderTarget2D*                      MinimapRenderTarget2D;                                    // 0x0018(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UTextureRenderTarget2D*                      MinimapIconsRenderTarget2D;                               // 0x0020(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UTextureRenderTarget2D*                      MinimapRegionsRenderTarget2D;                             // 0x0028(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.HudWeaponState
// 0x0002
struct FHudWeaponState
{
	TEnumAsByte<EEquippableSlot>                       SlotType;                                                 // 0x0000(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EHudWeaponEquipState>                  EquipState;                                               // 0x0001(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
};

// ScriptStruct BendGame.HudWidgetPlayerState
// 0x0038
struct FHudWidgetPlayerState
{
	int                                                AmmoCountClip;                                            // 0x0000(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	int                                                AmmoCountSpare;                                           // 0x0004(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	unsigned char                                      IsAiming : 1;                                             // 0x0008(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst)
	unsigned char                                      IsScoping : 1;                                            // 0x0008(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst)
	unsigned char                                      IsStealth : 1;                                            // 0x0008(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst)
	unsigned char                                      IsNewStealth : 1;                                         // 0x0008(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0009(0x0003) MISSED OFFSET
	float                                              PlayerVisibility;                                         // 0x000C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	float                                              PlayerAudibility;                                         // 0x0010(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	float                                              ExperiencePercent;                                        // 0x0014(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	int                                                ExperienceLevel;                                          // 0x0018(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x001C(0x0004) MISSED OFFSET
	class ABendWeapon*                                 EquippedWeapon;                                           // 0x0020(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	TArray<struct FHudWeaponState>                     WeaponStates;                                             // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
};

// ScriptStruct BendGame.HudWidgetBikeState
// 0x001C
struct FHudWidgetBikeState
{
	float                                              FuelPercent;                                              // 0x0000(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              BoostPercent;                                             // 0x0004(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              SkillPercent;                                             // 0x0008(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              DamagePercent;                                            // 0x000C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	int                                                SkillLevel;                                               // 0x0010(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              Debug_FuelPercent;                                        // 0x0014(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      Visible : 1;                                              // 0x0018(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)
	unsigned char                                      InteractVisible : 1;                                      // 0x0018(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)
	unsigned char                                      OnBike : 1;                                               // 0x0018(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)
	unsigned char                                      HighBeamsOn : 1;                                          // 0x0018(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)
	unsigned char                                      FuelLowSFXPlayed : 1;                                     // 0x0018(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)
	unsigned char                                      FuelZeroSFXPlayed : 1;                                    // 0x0018(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)
	unsigned char                                      FuelLightOn : 1;                                          // 0x0018(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0019(0x0003) MISSED OFFSET
};

// ScriptStruct BendGame.NotificationDetails
// 0x0060
struct FNotificationDetails
{
	TEnumAsByte<ENotification>                         Type;                                                     // 0x0000(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0001(0x0007) MISSED OFFSET
	struct FString                                     Title;                                                    // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FString                                     Body;                                                     // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FString                                     Body2;                                                    // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FString                                     Body3;                                                    // 0x0038(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	class UTexture2D*                                  Texture;                                                  // 0x0048(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                Level;                                                    // 0x0050(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DisplayTime;                                              // 0x0054(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bPauseGame : 1;                                           // 0x0058(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bCanBeInterrupted : 1;                                    // 0x0058(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bMarkCompleted : 1;                                       // 0x0058(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0059(0x0007) MISSED OFFSET
};

// ScriptStruct BendGame.WorldMapSector
// 0x0058
struct FWorldMapSector
{
	struct FIntPoint                                   Index;                                                    // 0x0000(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FBox                                        Bounds;                                                   // 0x0008(0x001C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     BoundsSize;                                               // 0x0024(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	TAssetPtr<class UTexture2D>                        TextureAsset;                                             // 0x0030(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	class UTexture2D*                                  Texture;                                                  // 0x0050(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
};

// ScriptStruct BendGame.WorldMapSectorTextureSetManager
// 0x0001
struct FWorldMapSectorTextureSetManager
{
	unsigned char                                      UnknownData00[0x1];                                       // 0x0000(0x0001) MISSED OFFSET
};

// ScriptStruct BendGame.ActorInteractDetails
// 0x0070
struct FActorInteractDetails
{
	TEnumAsByte<EInteractButton>                       ButtonType;                                               // 0x0000(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0001(0x0007) MISSED OFFSET
	struct FString                                     PreButtonText;                                            // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FString                                     Text;                                                     // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	float                                              HoldTime;                                                 // 0x0028(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bSinglePressInput : 1;                                    // 0x002C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bResetProgressOnAbort : 1;                                // 0x002C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bRequiresInputKeyReleased : 1;                            // 0x002C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData01[0x3];                                       // 0x002D(0x0003) MISSED OFFSET
	struct FTransform                                  TransformToFollow;                                        // 0x0030(0x0030) (Edit, BlueprintVisible, IsPlainOldData)
	class ABendInventoryPickup*                        InventoryPickup;                                          // 0x0060(0x0008) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	TEnumAsByte<EIconTypes>                            AdvertiseIconType;                                        // 0x0068(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0069(0x0007) MISSED OFFSET
};

// ScriptStruct BendGame.BendRegionType
// 0x0428
struct FBendRegionType
{
	struct FBendAmbientSpawnType                       SpawnType;                                                // 0x0000(0x0418) (Edit)
	TArray<class UBendSkeletalMeshArrayData*>          VariationLists;                                           // 0x0418(0x0010) (Edit, ZeroConstructor)
};

// ScriptStruct BendGame.AttributeUseEffect
// 0x0018
struct FAttributeUseEffect
{
	TEnumAsByte<EAttributeUseEffect>                   Type;                                                     // 0x0000(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0001(0x0007) MISSED OFFSET
	class UClass*                                      EffectClass;                                              // 0x0008(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FGameplayTag                                EffectTag;                                                // 0x0010(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
};

// ScriptStruct BendGame.BendPlayerAttribute
// 0x0078
struct FBendPlayerAttribute
{
	struct FName                                       Name;                                                     // 0x0000(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FText                                       DisplayName;                                              // 0x0008(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	bool                                               CanActivateWhileInRecover;                                // 0x0020(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0021(0x0007) MISSED OFFSET
	struct FGameplayAttribute                          Attribute;                                                // 0x0028(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FGameplayAttribute                          AttributeMax;                                             // 0x0030(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	TArray<struct FAttributeUseEffect>                 UseEffects;                                               // 0x0038(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditFixedSize, ZeroConstructor, DisableEditOnInstance)
	TArray<float>                                      UseEffectLevels;                                          // 0x0048(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditFixedSize, ZeroConstructor, DisableEditOnInstance, SaveGame)
	struct FGameplayTagContainer                       ActivateRechargeOnTagRemoved;                             // 0x0058(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
};

// ScriptStruct BendGame.BendTrackingDataClue
// 0x0048
struct FBendTrackingDataClue
{
	class AActor*                                      ClueItem;                                                 // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<class AActor*>                              ClueActors;                                               // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FName                                       OverrideVO;                                               // 0x0018(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class USoundClass*                                 VOSoundClass;                                             // 0x0020(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ETrackingAnimationType>                AnimationType;                                            // 0x0028(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0029(0x0007) MISSED OFFSET
	class UAnimSequenceBase*                           AnimToPlay;                                               // 0x0030(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           OverrideAnimation;                                        // 0x0038(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IsCorrectItem;                                            // 0x0040(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0041(0x0003) MISSED OFFSET
	int                                                StoredIndex;                                              // 0x0044(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.BendAfterImageTrackingData
// 0x0010
struct FBendAfterImageTrackingData
{
	class ASkeletalMeshActor*                          SkeletalMeshRef;                                          // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           AnimationToPlay;                                          // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.BendTrackingDataInfo
// 0x0080
struct FBendTrackingDataInfo
{
	struct FName                                       SectionID;                                                // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<struct FBendTrackingDataClue>               ClueItems;                                                // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<class AActor*>                              PathUnlockedWhenCorrectlyExamined;                        // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FBendAfterImageTrackingData>         AfterImagesWhenCorrectlyExamined;                         // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	bool                                               DoLookAtWhenSectionComplete;                              // 0x0038(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0039(0x0007) MISSED OFFSET
	struct FBendLocationReference                      OverrideLookAt_LocationProxy;                             // 0x0040(0x0010) (Edit, BlueprintVisible)
	TArray<struct FVector>                             GeneratedLocations;                                       // 0x0050(0x0010) (BlueprintVisible, ZeroConstructor)
	class AActor*                                      ControllingVolume;                                        // 0x0060(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class AActor*                                      TrackingLocation;                                         // 0x0068(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TrackingRegionRadius;                                     // 0x0070(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0074(0x0004) MISSED OFFSET
	struct FName                                       NextSectionID;                                            // 0x0078(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.AudioStateGlobalRegisterChange
// 0x0008
struct FAudioStateGlobalRegisterChange
{
	int                                                RegisterIndex;                                            // 0x0000(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      RegisterValue;                                            // 0x0004(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0005(0x0003) MISSED OFFSET
};

// ScriptStruct BendGame.AudioStateNameData
// 0x0030
struct FAudioStateNameData
{
	struct FName                                       AudioName;                                                // 0x0000(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<TEnumAsByte<EAudioStateCondition>>          Conditions;                                               // 0x0008(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	float                                              SoundPriority;                                            // 0x0018(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x001C(0x0004) MISSED OFFSET
	TArray<struct FAudioStateGlobalRegisterChange>     GlobalRegisterChanges;                                    // 0x0020(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
};

// ScriptStruct BendGame.TransitionalAudioStateNameData
// 0x0010 (0x0040 - 0x0030)
struct FTransitionalAudioStateNameData : public FAudioStateNameData
{
	bool                                               bCanReplayTransition;                                     // 0x0030(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0031(0x0003) MISSED OFFSET
	float                                              TransitionReplayMinDelay;                                 // 0x0034(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TransitionReplayMaxDelay;                                 // 0x0038(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x003C(0x0004) MISSED OFFSET
};

// ScriptStruct BendGame.AudioStateData
// 0x0030
struct FAudioStateData
{
	TEnumAsByte<EAudioStateType>                       AudioStateType;                                           // 0x0000(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	int                                                StatePriority;                                            // 0x0004(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bSkipPlayingAudioInThisState;                             // 0x0008(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0009(0x0007) MISSED OFFSET
	TArray<struct FAudioStateNameData>                 StateNames;                                               // 0x0010(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FTransitionalAudioStateNameData>     TransitionStateNames;                                     // 0x0020(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
};

// ScriptStruct BendGame.BendClimbContext
// 0x0078
struct FBendClimbContext
{
	bool                                               IsSequence;                                               // 0x0000(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               Vaulting;                                                 // 0x0001(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IsComingFromAir;                                          // 0x0002(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0003(0x0001) MISSED OFFSET
	float                                              HorizontalDistanceToEdge;                                 // 0x0004(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              OtherSideHorizontalDistance;                              // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AngleToEdge;                                              // 0x000C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              OtherSideOffsetStartTime;                                 // 0x0010(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     OriginalEdgeNormal;                                       // 0x0014(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     EdgeNormal;                                               // 0x0020(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x002C(0x0004) MISSED OFFSET
	struct FBendGenericAnimData                        AnimData;                                                 // 0x0030(0x0018) (Edit, BlueprintVisible)
	struct FBendGenericAnimData                        OtherSideAnimData;                                        // 0x0048(0x0018) (Edit, BlueprintVisible)
	struct FBendGenericAnimData                        ExitAnimData;                                             // 0x0060(0x0018) (Edit, BlueprintVisible)
};

// ScriptStruct BendGame.ThreateningPawnData
// 0x000C
struct FThreateningPawnData
{
	TWeakObjectPtr<class ABendPawn>                    Pawn;                                                     // 0x0000(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              Duration;                                                 // 0x0008(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.BendCharacterLookAngleLimits
// 0x0014
struct FBendCharacterLookAngleLimits
{
	TEnumAsByte<EBendCharacterLookPartialSet>          PartialSet;                                               // 0x0000(0x0001) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	struct FRotator                                    Limits;                                                   // 0x0004(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              YawSwitchSidesThresholdAngle;                             // 0x0010(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.BendCharacterLookRequestId
// 0x0004
struct FBendCharacterLookRequestId
{
	unsigned char                                      UnknownData00[0x4];                                       // 0x0000(0x0004) MISSED OFFSET
};

// ScriptStruct BendGame.WeaponAnim
// 0x0030
struct FWeaponAnim
{
	class UAnimMontage*                                Pawn;                                                     // 0x0000(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAnimMontage*                                PawnMirrored;                                             // 0x0008(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBlendSpaceBase*                             PawnBlendspace;                                           // 0x0010(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAnimMontage*                                Weapon;                                                   // 0x0018(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAnimMontage*                                WeaponMirrored;                                           // 0x0020(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AdditiveBlendWeight;                                      // 0x0028(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x002C(0x0004) MISSED OFFSET
};

// ScriptStruct BendGame.WeaponAnimPlaybackData
// 0x0010
struct FWeaponAnimPlaybackData
{
	class UBlendSpaceBase*                             WeaponBlendspace;                                         // 0x0000(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              AdditiveBlendWeight;                                      // 0x0008(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bPlayWeaponBlendspace : 1;                                // 0x000C(0x0001) (BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bIsWeaponBlendspaceAdditive : 1;                          // 0x000C(0x0001) (BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x3];                                       // 0x000D(0x0003) MISSED OFFSET
};

// ScriptStruct BendGame.WeaponCoreData
// 0x0180
struct FWeaponCoreData
{
	int                                                WeaponLevel;                                              // 0x0000(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<EWeaponFireMode>                       FireMode;                                                 // 0x0004(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EWeaponScariness>                      WeaponScariness;                                          // 0x0005(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EWeaponRarity>                         WeaponRarity;                                             // 0x0006(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0007(0x0001) MISSED OFFSET
	int                                                MinHitDamage;                                             // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                MaxHitDamage;                                             // 0x000C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               UseStealthBonusDamage;                                    // 0x0010(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0011(0x0003) MISSED OFFSET
	int                                                StealthBonusDamage;                                       // 0x0014(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                NPCMinHitDamage;                                          // 0x0018(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                NPCMaxHitDamage;                                          // 0x001C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                EnemiesToTakeFullDamage;                                  // 0x0020(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                ReducedDamageOverflow;                                    // 0x0024(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                NPCReducedDamageOverflow;                                 // 0x0028(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               UseWeaponRangeToCalcStoppingPower;                        // 0x002C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x002D(0x0003) MISSED OFFSET
	float                                              MinStoppingPower;                                         // 0x0030(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxStoppingPower;                                         // 0x0034(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinStoppingPowerBase;                                     // 0x0038(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxStoppingPowerBase;                                     // 0x003C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxAccumulatedStoppingPower;                              // 0x0040(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NPCMinStoppingPower;                                      // 0x0044(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NPCMaxStoppingPower;                                      // 0x0048(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NPCMinStoppingPowerBase;                                  // 0x004C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NPCMaxStoppingPowerBase;                                  // 0x0050(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NPCMaxAccumulatedStoppingPower;                           // 0x0054(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                BarrelCount;                                              // 0x0058(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TimeBetweenBarrelShots;                                   // 0x005C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0060(0x0004) MISSED OFFSET
	float                                              TimeBetweenShots;                                         // 0x0064(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              VehicleTimeBetweenShots;                                  // 0x0068(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FocusModeTimeBetweenShots;                                // 0x006C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              VehicleFocusModeTimeBetweenShots;                         // 0x0070(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FocusModeAnimScalar;                                      // 0x0074(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NPCTimeBetweenShotsMin;                                   // 0x0078(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NPCTimeBetweenShotsMax;                                   // 0x007C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                NPCBurstRangeMin;                                         // 0x0080(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                NPCBurstRangeMax;                                         // 0x0084(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                NumProjectilesToCreate;                                   // 0x0088(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUseAnimCallbackToFire;                                   // 0x008C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x3];                                       // 0x008D(0x0003) MISSED OFFSET
	float                                              fReloadTime;                                              // 0x0090(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              fWeaponSway;                                              // 0x0094(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              fSwayCycleTime;                                           // 0x0098(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              fSwayPitchMagMult;                                        // 0x009C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              fWeaponSwayCrouching;                                     // 0x00A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              fSwayCycleTimeCrouching;                                  // 0x00A4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              fSwayPitchMagMultCrouching;                               // 0x00A8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              fBowDrawTime;                                             // 0x00AC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              fBowOverdrawTime;                                         // 0x00B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              fMaxWeaponDurability;                                     // 0x00B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              fDurabilityLossPerShot;                                   // 0x00B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData05[0x4];                                       // 0x00BC(0x0004) MISSED OFFSET
	float                                              MaxHeat;                                                  // 0x00C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HeatIncreasePerShot;                                      // 0x00C4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HeatDecreaseRate;                                         // 0x00C8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HeatDecreaseCooldown;                                     // 0x00CC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData06[0x4];                                       // 0x00D0(0x0004) MISSED OFFSET
	float                                              OverheatedCooldown;                                       // 0x00D4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData07[0x4];                                       // 0x00D8(0x0004) MISSED OFFSET
	unsigned char                                      IsRocket : 1;                                             // 0x00DC(0x0001) (Edit, BlueprintVisible, DisableEditOnInstance)
	unsigned char                                      UnknownData08[0xB];                                       // 0x00DD(0x000B) MISSED OFFSET
	struct FRuntimeFloatCurve                          DurabilityvsDamageCurve;                                  // 0x00E8(0x0080) (Edit, BlueprintVisible, DisableEditOnInstance)
	unsigned char                                      UnknownData09[0x4];                                       // 0x0168(0x0004) MISSED OFFSET
	float                                              SpinUpTime;                                               // 0x016C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SpinDownTime;                                             // 0x0170(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData10[0x4];                                       // 0x0174(0x0004) MISSED OFFSET
	struct FName                                       BraggingVO;                                               // 0x0178(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
};

// ScriptStruct BendGame.WeaponAmmoData
// 0x0030
struct FWeaponAmmoData
{
	bool                                               bInfiniteAmmo;                                            // 0x0000(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bInfiniteClip;                                            // 0x0001(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUsesShells;                                              // 0x0002(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0003(0x0001) MISSED OFFSET
	int                                                MaxSpareAmmo;                                             // 0x0004(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                AmmoPerClip;                                              // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                InitialClips;                                             // 0x000C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CheckOutOfAmmoTimer;                                      // 0x0010(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   NPCAmmoDropRange;                                         // 0x0014(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x001C(0x0004) MISSED OFFSET
	TArray<class UStaticMesh*>                         ClipMeshes;                                               // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
};

// ScriptStruct BendGame.WeaponAccuracyData
// 0x0240
struct FWeaponAccuracyData
{
	float                                              MinAccuracyRadius;                                        // 0x0000(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxAccuracyRadius;                                        // 0x0004(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NumDegreesIncRadiusPerShot;                               // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NumSecReturnMinAccuracy;                                  // 0x000C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NumSecReturnMinAccuracyAfterMoving;                       // 0x0010(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NumSecReturnMinAccuracyAfterRotating;                     // 0x0014(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NumSecReturnMinAccuracyAfterAiming;                       // 0x0018(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NumSecWaitAfterLastShot;                                  // 0x001C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NumSecWaitAfterMoving;                                    // 0x0020(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinReticleSize;                                           // 0x0024(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxReticleSize;                                           // 0x0028(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AimAssistAngleWeight;                                     // 0x002C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AimAssistDistanceWeight;                                  // 0x0030(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AimAssistNearDistance;                                    // 0x0034(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AimAssistFarDistance;                                     // 0x0038(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MagnetismStrength;                                        // 0x003C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FRuntimeFloatCurve                          DurabilityvsAccuracyCurve;                                // 0x0040(0x0080) (Edit, BlueprintVisible, DisableEditOnInstance)
	struct FRuntimeFloatCurve                          TurnSpeedvsAccuracyCurve;                                 // 0x00C0(0x0080) (Edit, BlueprintVisible, DisableEditOnInstance)
	struct FRuntimeFloatCurve                          VelocityvsAccuracyCurve;                                  // 0x0140(0x0080) (Edit, BlueprintVisible, DisableEditOnInstance)
	struct FRuntimeFloatCurve                          DiffAmountvsIncreaseAmount;                               // 0x01C0(0x0080) (Edit, BlueprintVisible, DisableEditOnInstance)
};

// ScriptStruct BendGame.WeaponBlindfireAccuracyData
// 0x0188
struct FWeaponBlindfireAccuracyData
{
	struct FRuntimeFloatCurve                          AccuracyVsDistance;                                       // 0x0000(0x0080) (Edit, BlueprintVisible, DisableEditOnInstance)
	struct FRuntimeFloatCurve                          AccuracyMaxVsDistance;                                    // 0x0080(0x0080) (Edit, BlueprintVisible, DisableEditOnInstance)
	struct FRuntimeFloatCurve                          PercentagePerSecondVsDistance;                            // 0x0100(0x0080) (Edit, BlueprintVisible, DisableEditOnInstance)
	float                                              AccuracyLostPerShot;                                      // 0x0180(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              BoostAccuracyModifier;                                    // 0x0184(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
};

// ScriptStruct BendGame.WeaponRecoilData
// 0x000C
struct FWeaponRecoilData
{
	int                                                NumShotsRecoilAngleLocked;                                // 0x0000(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                NumShotsApplyRecoilMultiplier;                            // 0x0004(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PerShotRecoilMultiplier;                                  // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
};

// ScriptStruct BendGame.WeaponRecoilMovementData
// 0x0010
struct FWeaponRecoilMovementData
{
	float                                              MinRecoilAngle;                                           // 0x0000(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxRecoilAngle;                                           // 0x0004(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NumSecRecoil;                                             // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NumSecReturnFromRecoil;                                   // 0x000C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
};

// ScriptStruct BendGame.WeaponRecoilShakeData
// 0x0010
struct FWeaponRecoilShakeData
{
	float                                              CameraShakeRightLeftAngle;                                // 0x0000(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CameraShakeUpDownAngle;                                   // 0x0004(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                NumTimesCameraShake;                                      // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NumSecCameraShakeTakes;                                   // 0x000C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
};

// ScriptStruct BendGame.MeleeTierValues
// 0x000C
struct FMeleeTierValues
{
	int                                                MeleeDamageByTier;                                        // 0x0000(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MeleeDamageModifierPerExtraEnemyHit;                      // 0x0004(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               UseHitReactionMeleeTier;                                  // 0x0008(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0009(0x0003) MISSED OFFSET
};

// ScriptStruct BendGame.MeleeTierDamageData
// 0x0020
struct FMeleeTierDamageData
{
	TArray<struct FMeleeTierValues>                    MeleeTiers;                                               // 0x0000(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	bool                                               UseMeleeDamageTierPercentIncrease;                        // 0x0010(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0011(0x0003) MISSED OFFSET
	float                                              MeleeDamageTierPercentIncreaseT1;                         // 0x0014(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MeleeDamageTierPercentIncreaseT2;                         // 0x0018(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x001C(0x0004) MISSED OFFSET
};

// ScriptStruct BendGame.MeleeDamageModifierData
// 0x0008
struct FMeleeDamageModifierData
{
	float                                              WeaponHealthPercentage;                                   // 0x0000(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DamagePercentModifier;                                    // 0x0004(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
};

// ScriptStruct BendGame.BendMeshHitBloodData
// 0x0014
struct FBendMeshHitBloodData
{
	float                                              MeshHitBloodRadiusInitial;                                // 0x0000(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MeshHitBloodRadiusFinal;                                  // 0x0004(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MeshHitBloodRadiusTransitionTime;                         // 0x0008(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MeshHitBloodIntensity;                                    // 0x000C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MeshHitBloodRandomizationLevel;                           // 0x0010(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
};

// ScriptStruct BendGame.WeaponMeleeData
// 0x0148
struct FWeaponMeleeData
{
	bool                                               CanMeleeComboWithoutSkill;                                // 0x0000(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               IsCraftedMeleeWeapon;                                     // 0x0001(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               UseLargeMeleeWpnCapsules;                                 // 0x0002(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               UsePlayRateCurve;                                         // 0x0003(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               OnlyDamageMeleeTarget;                                    // 0x0004(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               CanDamageMultiWithSkill;                                  // 0x0005(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0006(0x0002) MISSED OFFSET
	int                                                AmtOfHealthToTakeOffOfWpnPerHit;                          // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                AmtOfHealthToTakeOffOfWpnPerHit_Skill;                    // 0x000C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                AmtOfHealthToTakeOffOfWpnPerHit_SkillTwo;                 // 0x0010(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                MeleeHitDamage;                                           // 0x0014(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                MeleeHitDamageMax;                                        // 0x0018(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x001C(0x0004) MISSED OFFSET
	struct FMeleeTierDamageData                        MeleeTierDamageData;                                      // 0x0020(0x0020) (Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTag                                DamageUpgradeSkill;                                       // 0x0040(0x0008) (Edit, BlueprintVisible, DisableEditOnInstance)
	int                                                SkilledMeleeHitDamage;                                    // 0x0048(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                SkilledMeleeHitDamageMax;                                 // 0x004C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CriticalHitChance;                                        // 0x0050(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                NPCMeleeHitDamage;                                        // 0x0054(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                NPCMeleeHitDamageMax;                                     // 0x0058(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                MeleeHeavyHitDamage;                                      // 0x005C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                NPCMeleeHeavyHitDamage;                                   // 0x0060(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MeleeVeryLowStaminaValue;                                 // 0x0064(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MeleeLowStaminaValue;                                     // 0x0068(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                LowStaminaMeleeHitDamage;                                 // 0x006C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                MaxHealth;                                                // 0x0070(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0074(0x0004) MISSED OFFSET
	TArray<struct FMeleeDamageModifierData>            MeleeDamageModifiers;                                     // 0x0078(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	float                                              MeleeBrokenDamageModifier;                                // 0x0088(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x008C(0x0004) MISSED OFFSET
	struct FName                                       BloodParticleSocketName;                                  // 0x0090(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UParticleSystem*                             BloodWeaponParticleFX;                                    // 0x0098(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UParticleSystem*                             BrokenWeaponParticleFX;                                   // 0x00A0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<class UParticleSystem*>                     BrokenWeaponParticleFXList;                               // 0x00A8(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	class UClass*                                      MeleeImpactTemplate;                                      // 0x00B8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      MeleeDamageType;                                          // 0x00C0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      OnBikeMeleeDamageType;                                    // 0x00C8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              VelocityNeededToUseOnBikeWeapon;                          // 0x00D0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0xC];                                       // 0x00D4(0x000C) MISSED OFFSET
	struct FBendMeshHitBloodData                       MeshHitBloodData;                                         // 0x00E0(0x0014) (Edit, BlueprintVisible, DisableEditOnInstance)
	float                                              MeleeStaminaCostPerHit;                                   // 0x00F4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MeleeStaminaCostPerHeavySwing;                            // 0x00F8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData05[0x4];                                       // 0x00FC(0x0004) MISSED OFFSET
	class UAnimSequenceBase*                           MeleeChargingAnimation;                                   // 0x0100(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAnimSequenceBase*                           MeleeArmAndReadyAnimOnBike;                               // 0x0108(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinNumSecToLeaveVictimInStunState;                        // 0x0110(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxNumSecToLeaveVictimInStunState;                        // 0x0114(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TimeDilationValueForCriticalHit;                          // 0x0118(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TimeDilationValueForHitOnBike;                            // 0x011C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinVelocityHitTimeDilationOnBike;                         // 0x0120(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AmountToIncAdrenalineMeterPerHit;                         // 0x0124(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AutoTargetMaxAngle;                                       // 0x0128(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AutoTargetMaxSecondaryAngle;                              // 0x012C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AutoTargetJoystickInputMaxAngle;                          // 0x0130(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AutoTargetJoystickInputMaxSecondaryAngle;                 // 0x0134(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AutoTargetMaxDistance;                                    // 0x0138(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FindTargetMaxDistance;                                    // 0x013C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TargetMaxDistBlockMissSwing;                              // 0x0140(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x4];                                       // 0x0144(0x0004) MISSED OFFSET
};

// ScriptStruct BendGame.WeaponSoundsData
// 0x0058
struct FWeaponSoundsData
{
	class USoundCue*                                   FireSound;                                                // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class USoundCue*                                   DeadEyeFireSound;                                         // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class USoundCue*                                   NPCFireSound;                                             // 0x0010(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class USoundCue*                                   OutOfAmmoSound;                                           // 0x0018(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class USoundCue*                                   ReloadSound;                                              // 0x0020(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class USoundCue*                                   BreakSound;                                               // 0x0028(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class USoundCue*                                   MeleeDeathBlowSound;                                      // 0x0030(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FireSoundAIVolume;                                        // 0x0038(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x003C(0x0004) MISSED OFFSET
	class USoundCue*                                   EquippedFoleySound;                                       // 0x0040(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class USoundCue*                                   HolsteredFoleySound;                                      // 0x0048(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                WeaponSoundsGlobalRegister;                               // 0x0050(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                WeaponSoundsID;                                           // 0x0054(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
};

// ScriptStruct BendGame.WeaponMuzzleFlashData
// 0x0018
struct FWeaponMuzzleFlashData
{
	struct FName                                       MuzzleAttachPoint;                                        // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UParticleSystem*                             MuzzleFX;                                                 // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UParticleSystem*                             NPCMuzzleFX;                                              // 0x0010(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
};

// ScriptStruct BendGame.ProjectileShellCasingData
// 0x0018
struct FProjectileShellCasingData
{
	struct FName                                       ShellCasingEjectSocket;                                   // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UParticleSystem*                             ShellCasingFX;                                            // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UParticleSystem*                             NPCShellCasingFX;                                         // 0x0010(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
};

// ScriptStruct BendGame.WeaponEquippedFXData
// 0x0038
struct FWeaponEquippedFXData
{
	struct FName                                       WeaponFXAttachPoint;                                      // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UParticleSystem*                             WeaponFX;                                                 // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class USoundCue*                                   WeaponAudioFX;                                            // 0x0010(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               OverrideShellCasingFX;                                    // 0x0018(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0019(0x0007) MISSED OFFSET
	struct FProjectileShellCasingData                  ShellCasingFXOverride;                                    // 0x0020(0x0018) (Edit, BlueprintVisible, DisableEditOnInstance)
};

// ScriptStruct BendGame.WeaponScopeZoomData
// 0x0038
struct FWeaponScopeZoomData
{
	float                                              MinZoomPower;                                             // 0x0000(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxZoomPower;                                             // 0x0004(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SmoothZoomTime;                                           // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x000C(0x0004) MISSED OFFSET
	class USoundCue*                                   SmoothZoomLoopingSound;                                   // 0x0010(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                NumberOfSteps;                                            // 0x0018(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               LoopBackToMinZoomPower;                                   // 0x001C(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               LoopBackToMaxZoomPower;                                   // 0x001D(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x001E(0x0002) MISSED OFFSET
	class USoundCue*                                   StepZoomSound;                                            // 0x0020(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CameraSpeedAtMinZoom;                                     // 0x0028(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CameraSpeedAtMaxZoom;                                     // 0x002C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0030(0x0008) MISSED OFFSET
};

// ScriptStruct BendGame.WeaponBonusData
// 0x009C
struct FWeaponBonusData
{
	TEnumAsByte<EWeaponBonusTypes>                     BonusType;                                                // 0x0000(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	float                                              MinAccuracyRadius;                                        // 0x0004(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0008(0x0004) MISSED OFFSET
	float                                              MaxAccuracyRadius;                                        // 0x000C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0010(0x0004) MISSED OFFSET
	float                                              NumDegreesIncRadiusPerShot;                               // 0x0014(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NumSecReturnMinAccuracy;                                  // 0x0018(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MovingAccuracyPenaltyReductionPercent;                    // 0x001C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinRecoilUpAngle;                                         // 0x0020(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxRecoilUpAngle;                                         // 0x0024(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NumSecReturnFromUpRecoil;                                 // 0x0028(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinRecoilRightAngle;                                      // 0x002C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxRecoilRightAngle;                                      // 0x0030(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NumSecReturnFromRightRecoil;                              // 0x0034(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NoiseReductionAmt;                                        // 0x0038(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x003C(0x0004) MISSED OFFSET
	float                                              AmmoPerClipIncAmt;                                        // 0x0040(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                AmmoPerClip;                                              // 0x0044(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinHitDamagePer;                                          // 0x0048(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x004C(0x0004) MISSED OFFSET
	float                                              MaxHitDamagePer;                                          // 0x0050(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData05[0x4];                                       // 0x0054(0x0004) MISSED OFFSET
	float                                              NPCMinHitDamagePer;                                       // 0x0058(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData06[0x4];                                       // 0x005C(0x0004) MISSED OFFSET
	float                                              NPCMaxHitDamagePer;                                       // 0x0060(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData07[0x4];                                       // 0x0064(0x0004) MISSED OFFSET
	float                                              TimeBetweenShotsPer;                                      // 0x0068(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData08[0x4];                                       // 0x006C(0x0004) MISSED OFFSET
	float                                              NPCTimeBetweenShotsMinPer;                                // 0x0070(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData09[0x4];                                       // 0x0074(0x0004) MISSED OFFSET
	float                                              NPCTimeBetweenShotsMaxPer;                                // 0x0078(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData10[0x4];                                       // 0x007C(0x0004) MISSED OFFSET
	float                                              fReloadTime;                                              // 0x0080(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              StoppingPowerIncrease;                                    // 0x0084(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData11[0x8];                                       // 0x0088(0x0008) MISSED OFFSET
	int                                                ProjectilePenetrationIncrease;                            // 0x0090(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData12[0x8];                                       // 0x0094(0x0008) MISSED OFFSET
};

// ScriptStruct BendGame.WeaponDataOverride
// 0x08E0
struct FWeaponDataOverride
{
	bool                                               OverrideCoreWeaponData;                                   // 0x0000(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0001(0x0007) MISSED OFFSET
	struct FWeaponCoreData                             CoreData;                                                 // 0x0008(0x0180) (Edit, DisableEditOnInstance)
	bool                                               OverrideAmmoWeaponData;                                   // 0x0188(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0189(0x0007) MISSED OFFSET
	struct FWeaponAmmoData                             AmmoData;                                                 // 0x0190(0x0030) (Edit, DisableEditOnInstance)
	bool                                               OverrideAimedAccuracyWeaponData;                          // 0x01C0(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x01C1(0x0007) MISSED OFFSET
	struct FWeaponAccuracyData                         AimedAccuracy;                                            // 0x01C8(0x0240) (Edit, DisableEditOnInstance)
	bool                                               OverrideBlindFireAccuracyWeaponData;                      // 0x0408(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x7];                                       // 0x0409(0x0007) MISSED OFFSET
	struct FWeaponBlindfireAccuracyData                BlindFireAccuracy;                                        // 0x0410(0x0188) (Edit, DisableEditOnInstance)
	bool                                               OverrideRecoilWeaponData;                                 // 0x0598(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x3];                                       // 0x0599(0x0003) MISSED OFFSET
	struct FWeaponRecoilData                           RecoilData;                                               // 0x059C(0x000C) (Edit, DisableEditOnInstance)
	bool                                               OverrideUpRecoilWeaponData;                               // 0x05A8(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData05[0x3];                                       // 0x05A9(0x0003) MISSED OFFSET
	struct FWeaponRecoilMovementData                   RecoilUpData;                                             // 0x05AC(0x0010) (Edit, DisableEditOnInstance)
	bool                                               OverrideRightRecoilWeaponData;                            // 0x05BC(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData06[0x3];                                       // 0x05BD(0x0003) MISSED OFFSET
	struct FWeaponRecoilMovementData                   RecoilRightData;                                          // 0x05C0(0x0010) (Edit, DisableEditOnInstance)
	bool                                               OverrideRecoilShakeWeaponData;                            // 0x05D0(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData07[0x3];                                       // 0x05D1(0x0003) MISSED OFFSET
	struct FWeaponRecoilShakeData                      RecoilShakeData;                                          // 0x05D4(0x0010) (Edit, DisableEditOnInstance)
	bool                                               OverrideMeleeWeaponData;                                  // 0x05E4(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData08[0x3];                                       // 0x05E5(0x0003) MISSED OFFSET
	struct FWeaponMeleeData                            MeleeData;                                                // 0x05E8(0x0148) (Edit, DisableEditOnInstance)
	bool                                               OverrideSoundWeaponData;                                  // 0x0730(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData09[0x7];                                       // 0x0731(0x0007) MISSED OFFSET
	struct FWeaponSoundsData                           SoundData;                                                // 0x0738(0x0058) (Edit, DisableEditOnInstance)
	bool                                               OverrideMuzzleFlashWeaponData;                            // 0x0790(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData10[0x7];                                       // 0x0791(0x0007) MISSED OFFSET
	struct FWeaponMuzzleFlashData                      MuzzleFlashData;                                          // 0x0798(0x0018) (Edit, DisableEditOnInstance)
	bool                                               OverrideEquippedFXWeaponData;                             // 0x07B0(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData11[0x7];                                       // 0x07B1(0x0007) MISSED OFFSET
	struct FWeaponEquippedFXData                       EquippedFXData;                                           // 0x07B8(0x0038) (Edit, DisableEditOnInstance)
	bool                                               OverrideScopeZoomWeaponData;                              // 0x07F0(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData12[0x7];                                       // 0x07F1(0x0007) MISSED OFFSET
	struct FWeaponScopeZoomData                        ScopeZoomData;                                            // 0x07F8(0x0038) (Edit, DisableEditOnInstance)
	struct FWeaponBonusData                            GlobalBonusData;                                          // 0x0830(0x009C) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData13[0x4];                                       // 0x08CC(0x0004) MISSED OFFSET
	TArray<struct FWeaponBonusData>                    StateBonusData;                                           // 0x08D0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
};

// ScriptStruct BendGame.sCamTransitionData
// 0x000C
struct FsCamTransitionData
{
	float                                              m_fTime;                                                  // 0x0000(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_fTimeOut;                                               // 0x0004(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EeTransType>                           m_eType;                                                  // 0x0008(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_bCollision;                                             // 0x0009(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_bSetupNewCamWithOldCamView;                             // 0x000A(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_bSetupNewCamWithOldCamPitch;                            // 0x000B(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.BendSkillTierData
// 0x0014
struct FBendSkillTierData
{
	TEnumAsByte<ESkillClass>                           SkillClass;                                               // 0x0000(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	int                                                SpentPointsToUnlockSecondTier;                            // 0x0004(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                SpentPointsToUnlockThirdTier;                             // 0x0008(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                SpentPointsToUnlockFourthTier;                            // 0x000C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                SpentPointsToUnlockFifthTier;                             // 0x0010(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
};

// ScriptStruct BendGame.BendSkill
// 0x0010
struct FBendSkill
{
	TEnumAsByte<ESkillStatus>                          Status;                                                   // 0x0000(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bUnlockedSkillBadgeDisplayed;                             // 0x0001(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x0002(0x0006) MISSED OFFSET
	class UInventoryItemSkill*                         SkillItem;                                                // 0x0008(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
};

// ScriptStruct BendGame.BendInputFilter
// 0x000C
struct FBendInputFilter
{
	float                                              PowerExponent;                                            // 0x0000(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CurveDeadZone;                                            // 0x0004(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CurveMaxZone;                                             // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.BendCrumbPathData
// 0x0018
struct FBendCrumbPathData
{
	struct FVector                                     Location;                                                 // 0x0000(0x000C) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	struct FRotator                                    Rotation;                                                 // 0x000C(0x000C) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
};

// ScriptStruct BendGame.BendCharacterBreathingSoundHandler
// 0x0058
struct FBendCharacterBreathingSoundHandler
{
	TArray<class UAudioComponent*>                     AudioComponents;                                          // 0x0000(0x0010) (ExportObject, ZeroConstructor, Transient)
	class USoundBase*                                  StealthBreathingSound;                                    // 0x0010(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class USoundBase*                                  RunBreathingSound;                                        // 0x0018(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class USoundBase*                                  CombatBreathingSound;                                     // 0x0020(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class USoundBase*                                  SprintBreathingSound;                                     // 0x0028(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class USoundBase*                                  SprintRecoveryBreathingSound;                             // 0x0030(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class USoundBase*                                  HeartbeatSound;                                           // 0x0038(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TimeInSprintRequiringRecoveryWhenStill;                   // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TimeInSprintRequiringRecoveryWhenMoving;                  // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              EnemyNearDistForHeartbeat;                                // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              EnemyFarDistForHeartbeat;                                 // 0x004C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0050(0x0008) MISSED OFFSET
};

// ScriptStruct BendGame.BendPlayerLook
// 0x0028
struct FBendPlayerLook
{
	class UBendMissionData*                            Mission;                                                  // 0x0000(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	TAssetPtr<class UBendSkeletalMeshLook>             Look;                                                     // 0x0008(0x0020) (Edit)
};

// ScriptStruct BendGame.BoneOverlapData
// 0x0018
struct FBoneOverlapData
{
	struct FName                                       BoneName;                                                 // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              Radius;                                                   // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xC];                                       // 0x000C(0x000C) MISSED OFFSET
};

// ScriptStruct BendGame.CamInstanceEntry
// 0x0010
struct FCamInstanceEntry
{
	class UClass*                                      CameraClass;                                              // 0x0000(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	class UBendCamBase*                                Camera;                                                   // 0x0008(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
};

// ScriptStruct BendGame.QueuedDeactivate
// 0x0018
struct FQueuedDeactivate
{
	class UBendCamBase*                                m_pCam;                                                   // 0x0000(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0008(0x0010) MISSED OFFSET
};

// ScriptStruct BendGame.InputCurveData
// 0x02D0
struct FInputCurveData
{
	unsigned char                                      UnknownData00[0x18];                                      // 0x0000(0x0018) MISSED OFFSET
	bool                                               bUseCurve;                                                // 0x0018(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0019(0x0007) MISSED OFFSET
	struct FRuntimeFloatCurve                          InputMappingCurve;                                        // 0x0020(0x0080) (Edit, DisableEditOnInstance)
	struct FRuntimeFloatCurve                          InputMappingCurveLessDZ;                                  // 0x00A0(0x0080) (Edit, DisableEditOnInstance)
	struct FRuntimeFloatCurve                          InputMappingCurveMedDZ;                                   // 0x0120(0x0080) (Edit, DisableEditOnInstance)
	struct FRuntimeFloatCurve                          InputMappingCurveMoreDZ;                                  // 0x01A0(0x0080) (Edit, DisableEditOnInstance)
	struct FRuntimeFloatCurve                          InputMappingCurveLinear;                                  // 0x0220(0x0080) (Edit, DisableEditOnInstance)
	TEnumAsByte<EeInputCurveSetting>                   InputMappingCurveIndex;                                   // 0x02A0(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x02A1(0x0003) MISSED OFFSET
	float                                              PowerExponent;                                            // 0x02A4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CurveDeadZone;                                            // 0x02A8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CurveMaxZone;                                             // 0x02AC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              Acceleration;                                             // 0x02B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              InitialVelPct;                                            // 0x02B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              maxVelocity;                                              // 0x02B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              YawDeadZone;                                              // 0x02BC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              YawScale;                                                 // 0x02C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PitchDeadZone;                                            // 0x02C4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PitchScale;                                               // 0x02C8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x02CC(0x0004) MISSED OFFSET
};

// ScriptStruct BendGame.PlayerAINavRequestInfo
// 0x0090
struct FPlayerAINavRequestInfo
{
	TEnumAsByte<ENavTargetEnum>                        TargetType;                                               // 0x0000(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	struct FVector                                     TargetLocation;                                           // 0x0004(0x000C) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	struct FRotator                                    TargetRotation;                                           // 0x0010(0x000C) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x001C(0x0004) MISSED OFFSET
	class AActor*                                      TargetActor;                                              // 0x0020(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	float                                              AcceptanceRadius;                                         // 0x0028(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	float                                              AcceptanceAngle;                                          // 0x002C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	float                                              StrafeRadius;                                             // 0x0030(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	float                                              SlowWalkRadius;                                           // 0x0034(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	float                                              FastWalkRadius;                                           // 0x0038(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	float                                              RadiusAtWhichWeStartRotatingTowardTargetRotation;         // 0x003C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	TEnumAsByte<ENavInterruptEnum>                     AllowInterrupt;                                           // 0x0040(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	TEnumAsByte<EStrafeTypeEnum>                       StrafingType;                                             // 0x0041(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	bool                                               bUseNewNavToPoint;                                        // 0x0042(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	unsigned char                                      UnknownData02[0xD];                                       // 0x0043(0x000D) MISSED OFFSET
	struct FTransform                                  UpdateNavPoint;                                           // 0x0050(0x0030) (Edit, BlueprintVisible, DisableEditOnTemplate, IsPlainOldData)
	bool                                               bStopOnOverlap;                                           // 0x0080(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	bool                                               bUsePathfinding;                                          // 0x0081(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	bool                                               bAllowPartialPath;                                        // 0x0082(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	bool                                               bSuspendCrowdSteering;                                    // 0x0083(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	bool                                               WasNavSuccessful;                                         // 0x0084(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData03[0xB];                                       // 0x0085(0x000B) MISSED OFFSET
};

// ScriptStruct BendGame.InventoryStorageConsumableItemDetails
// 0x0010
struct FInventoryStorageConsumableItemDetails
{
	class UInventoryItemConsumable*                    Consumable;                                               // 0x0000(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              Duration;                                                 // 0x0008(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                Count;                                                    // 0x000C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.WeaponAimBlockedCheckData
// 0x002C
struct FWeaponAimBlockedCheckData
{
	struct FVector                                     TraceLocationOffset;                                      // 0x0000(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector                                     TraceLocationOffset_Mirrored;                             // 0x000C(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TraceOuterDist;                                           // 0x0018(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TraceInnerDist;                                           // 0x001C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TraceOuterRadius;                                         // 0x0020(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TraceInnerRadius;                                         // 0x0024(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               WeaponDataSet;                                            // 0x0028(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0029(0x0003) MISSED OFFSET
};

// ScriptStruct BendGame.BendWeaponAimBlockedCheck
// 0x0490
struct FBendWeaponAimBlockedCheck
{
	unsigned char                                      UnknownData00[0x3E0];                                     // 0x0000(0x03E0) MISSED OFFSET
	float                                              TempPistolTraceDistAdjustment;                            // 0x03E0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x03E4(0x0004) MISSED OFFSET
	struct FName                                       AimFromBoneName;                                          // 0x03E8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FName                                       AimFromBoneName_Mirrored;                                 // 0x03F0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FRotator                                    TraceRotationOffset;                                      // 0x03F8(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x2C];                                      // 0x0404(0x002C) MISSED OFFSET
	struct FWeaponAimBlockedCheckData                  WeaponAimBlockedDefaultData;                              // 0x0430(0x002C) (Edit)
	unsigned char                                      UnknownData03[0x34];                                      // 0x045C(0x0034) MISSED OFFSET
};

// ScriptStruct BendGame.MeleeStatusEffectChanceModifier
// 0x0010
struct FMeleeStatusEffectChanceModifier
{
	struct FGameplayTag                                SkillTag;                                                 // 0x0000(0x0008) (Edit, BlueprintVisible)
	float                                              Modifier;                                                 // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x000C(0x0004) MISSED OFFSET
};

// ScriptStruct BendGame.MeleeStatusEffectApplication
// 0x0028
struct FMeleeStatusEffectApplication
{
	float                                              ChanceToApply;                                            // 0x0000(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0004(0x0004) MISSED OFFSET
	TArray<struct FMeleeStatusEffectChanceModifier>    ChanceModifiers;                                          // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	bool                                               OnlyApplyToPlayer;                                        // 0x0018(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0019(0x0007) MISSED OFFSET
	class UClass*                                      StatusEffect;                                             // 0x0020(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.WeaponThrowingData
// 0x0020
struct FWeaponThrowingData
{
	float                                              MinThrowingAngle;                                         // 0x0000(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxThrowingAngle;                                         // 0x0004(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              InitialVelocityPlayer;                                    // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxDistancePlayer;                                        // 0x000C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              InitialVelocityNPC;                                       // 0x0010(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AngleScalingValue;                                        // 0x0014(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              InitialOffsetValue;                                       // 0x0018(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      bLieFlatOnGround : 1;                                     // 0x001C(0x0001) (Edit, BlueprintVisible, DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x3];                                       // 0x001D(0x0003) MISSED OFFSET
};

// ScriptStruct BendGame.WeaponNPCAccuracyData
// 0x0188
struct FWeaponNPCAccuracyData
{
	struct FRuntimeFloatCurve                          HitChanceByDistanceCurve;                                 // 0x0000(0x0080) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x88];                                      // 0x0080(0x0088) MISSED OFFSET
	struct FRuntimeFloatCurve                          VelocityDeltaVsAccuracyModifierCurve;                     // 0x0108(0x0080) (Edit, DisableEditOnInstance)
};

// ScriptStruct BendGame.WeaponProjectileData
// 0x001C
struct FWeaponProjectileData
{
	int                                                MaxPenetrationAmount;                                     // 0x0000(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PenetrationDamageDecrement;                               // 0x0004(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxDamageDecrement;                                       // 0x0008(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               UseVelocityAndRangeOverride;                              // 0x000C(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x000D(0x0003) MISSED OFFSET
	float                                              InitialVelocity;                                          // 0x0010(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinWeaponRange;                                           // 0x0014(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxWeaponRange;                                           // 0x0018(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
};

// ScriptStruct BendGame.WeaponNPCTierData
// 0x0040
struct FWeaponNPCTierData
{
	TArray<int>                                        NPCMinHitDamage;                                          // 0x0000(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<int>                                        NPCMaxHitDamage;                                          // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FRuntimeFloatCurve>                  HitChanceByDistanceCurve;                                 // 0x0020(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FRuntimeFloatCurve>                  VelocityDeltaVsAccuracyModifierCurve;                     // 0x0030(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
};

// ScriptStruct BendGame.WeaponUnlockableData
// 0x000C
struct FWeaponUnlockableData
{
	float                                              MeleeDamageIncrease;                                      // 0x0000(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MeleeHealthIncrease;                                      // 0x0004(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0008(0x0004) MISSED OFFSET
};

// ScriptStruct BendGame.WeaponMiscData
// 0x0010
struct FWeaponMiscData
{
	int                                                RepairCost;                                               // 0x0000(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                DestructionHitsModifier;                                  // 0x0004(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ChainReactionDamageModifierPer;                           // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               CanBuyAmmoFromMerchants;                                  // 0x000C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x000D(0x0003) MISSED OFFSET
};

// ScriptStruct BendGame.WeaponData
// 0x0EB8
struct FWeaponData
{
	bool                                               bDebugOn;                                                 // 0x0000(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bAllowUseOnBike;                                          // 0x0001(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bReEquipOnThrow;                                          // 0x0002(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x5];                                       // 0x0003(0x0005) MISSED OFFSET
	struct FName                                       HolsterAttachPoint;                                       // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       EquippedAttachPoint;                                      // 0x0010(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bCanBeStoredInInventory;                                  // 0x0018(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bCanPlayerHolster;                                        // 0x0019(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bCanNPCHolster;                                           // 0x001A(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUseOverheatSystem;                                       // 0x001B(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x001C(0x0004) MISSED OFFSET
	class UBlueprint*                                  pPickupBlueprint;                                         // 0x0020(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UMaterialInstance*                           BeatupMaterial;                                           // 0x0028(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UMaterialInstance*                           OwnedMaterial;                                            // 0x0030(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                MaterialIndexLimit;                                       // 0x0038(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x003C(0x0004) MISSED OFFSET
	struct FWeaponCoreData                             CoreData;                                                 // 0x0040(0x0180) (Edit, BlueprintVisible, DisableEditOnInstance)
	struct FWeaponAmmoData                             AmmoData;                                                 // 0x01C0(0x0030) (Edit, BlueprintVisible, DisableEditOnInstance)
	struct FWeaponAccuracyData                         AimedAccuracy;                                            // 0x01F0(0x0240) (Edit, BlueprintVisible, DisableEditOnInstance)
	struct FWeaponAccuracyData                         VehicleAimedAccuracy;                                     // 0x0430(0x0240) (Edit, BlueprintVisible, DisableEditOnInstance)
	struct FWeaponThrowingData                         ThrowingData;                                             // 0x0670(0x0020) (Edit, BlueprintVisible, DisableEditOnInstance)
	struct FWeaponBlindfireAccuracyData                BlindfireAccuracySettings;                                // 0x0690(0x0188) (Edit, BlueprintVisible, DisableEditOnInstance)
	struct FWeaponNPCAccuracyData                      NPCAccuracyData;                                          // 0x0818(0x0188) (Edit, BlueprintVisible, DisableEditOnInstance)
	struct FWeaponNPCAccuracyData                      NPCAccuracyData_Bike;                                     // 0x09A0(0x0188) (Edit, BlueprintVisible, DisableEditOnInstance)
	struct FWeaponRecoilData                           RecoilData;                                               // 0x0B28(0x000C) (Edit, BlueprintVisible, DisableEditOnInstance)
	struct FWeaponRecoilMovementData                   RecoilUpData;                                             // 0x0B34(0x0010) (Edit, BlueprintVisible, DisableEditOnInstance)
	struct FWeaponRecoilMovementData                   RecoilRightData;                                          // 0x0B44(0x0010) (Edit, BlueprintVisible, DisableEditOnInstance)
	struct FWeaponRecoilShakeData                      RecoilShakeData;                                          // 0x0B54(0x0010) (Edit, BlueprintVisible, DisableEditOnInstance)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0B64(0x0004) MISSED OFFSET
	struct FWeaponMeleeData                            MeleeData;                                                // 0x0B68(0x0148) (Edit, BlueprintVisible, DisableEditOnInstance)
	struct FWeaponSoundsData                           SoundData;                                                // 0x0CB0(0x0058) (Edit, BlueprintVisible, DisableEditOnInstance)
	struct FWeaponProjectileData                       ProjectileData;                                           // 0x0D08(0x001C) (Edit, BlueprintVisible, DisableEditOnInstance)
	unsigned char                                      UnknownData04[0x4];                                       // 0x0D24(0x0004) MISSED OFFSET
	struct FWeaponMuzzleFlashData                      MuzzleFlashData;                                          // 0x0D28(0x0018) (Edit, BlueprintVisible, DisableEditOnInstance)
	struct FWeaponEquippedFXData                       EquippedFXData;                                           // 0x0D40(0x0038) (Edit, BlueprintVisible, DisableEditOnInstance)
	struct FWeaponScopeZoomData                        ScopeZoomData;                                            // 0x0D78(0x0038) (Edit, BlueprintVisible, DisableEditOnInstance)
	struct FWeaponNPCTierData                          WeaponNPCTierData;                                        // 0x0DB0(0x0040) (Edit, BlueprintVisible, DisableEditOnInstance)
	struct FWeaponUnlockableData                       UnlockableData;                                           // 0x0DF0(0x000C) (Edit, BlueprintVisible, DisableEditOnInstance)
	struct FWeaponMiscData                             MiscData;                                                 // 0x0DFC(0x0010) (Edit, BlueprintVisible, DisableEditOnInstance)
	unsigned char                                      UnknownData05[0x9C];                                      // 0x0E0C(0x009C) MISSED OFFSET
	TArray<struct FWeaponBonusData>                    StateBonusData;                                           // 0x0EA8(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
};

// ScriptStruct BendGame.HolsterLocationFlag
// 0x0001
struct FHolsterLocationFlag
{
	bool                                               bCanHolsterInLocation;                                    // 0x0000(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
};

// ScriptStruct BendGame.BendFiringPatternData
// 0x0018
struct FBendFiringPatternData
{
	int                                                MinShotsPerBurst;                                         // 0x0000(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                MaxShotsPerBurst;                                         // 0x0004(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MinTimeBetweenShots;                                      // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxTimeBetweenShots;                                      // 0x000C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MinTimeBetweenBursts;                                     // 0x0010(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxTimeBetweenBursts;                                     // 0x0014(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.BendHumanMeleeSettings
// 0x001C
struct FBendHumanMeleeSettings
{
	float                                              RangeToEngageInMelee;                                     // 0x0000(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CoverSearchRadius;                                        // 0x0004(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CoverSearchHalfHeight;                                    // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EAIMoveSpeed>                          MeleeCoverMoveSpeed;                                      // 0x000C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EAIMoveSpeed>                          MeleeRushMoveSpeed;                                       // 0x000D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               ShouldAdvanceInMelee;                                     // 0x000E(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1];                                       // 0x000F(0x0001) MISSED OFFSET
	float                                              MinTimeInCover;                                           // 0x0010(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxTimeInCover;                                           // 0x0014(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MinAdvanceDistance;                                       // 0x0018(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.ArchetypeFiringModifierSettings
// 0x0010
struct FArchetypeFiringModifierSettings
{
	float                                              LastKnownLocationTimer;                                   // 0x0000(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CloseCombatModifer;                                       // 0x0004(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CloseCombatDistance;                                      // 0x0008(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              BerzerkModifier;                                          // 0x000C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
};

// ScriptStruct BendGame.ArchetypeFiringOverrides
// 0x0038
struct FArchetypeFiringOverrides
{
	class UBendFiringPattern*                          GroundFiringSettings;                                     // 0x0000(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBendFiringPattern*                          LastKnownPositionFiringSettings;                          // 0x0008(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBendFiringPattern*                          ChargedFiringSettings;                                    // 0x0010(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBendFiringPattern*                          BikeFiringSettings;                                       // 0x0018(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBendHumanOpenCombatSettings*                OpenCombatSettings;                                       // 0x0020(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FArchetypeFiringModifierSettings            FiringModifiers;                                          // 0x0028(0x0010) (Edit, DisableEditOnInstance)
};

// ScriptStruct BendGame.ArchetypeAimingOverrides
// 0x0088
struct FArchetypeAimingOverrides
{
	struct FRuntimeFloatCurve                          HitChanceByLosTime;                                       // 0x0000(0x0080) (Edit, DisableEditOnInstance)
	float                                              HitChanceCooldownTime;                                    // 0x0080(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HitChanceLossTime;                                        // 0x0084(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
};

// ScriptStruct BendGame.BendAnimSequenceDistanceEntry
// 0x0018
struct FBendAnimSequenceDistanceEntry
{
	struct FBendAnimSequenceEntry                      Entry;                                                    // 0x0000(0x0010) (Edit, DisableEditOnInstance)
	float                                              Distance;                                                 // 0x0010(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0014(0x0004) MISSED OFFSET
};

// ScriptStruct BendGame.BendAnimSequenceDistanceGroup
// 0x0018
struct FBendAnimSequenceDistanceGroup
{
	struct FName                                       AnimSequenceGroupName;                                    // 0x0000(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<struct FBendAnimSequenceDistanceEntry>      DistanceEntries;                                          // 0x0008(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
};

// ScriptStruct BendGame.BendSemiAwareTuningValues
// 0x001C
struct FBendSemiAwareTuningValues
{
	float                                              SearchRadius;                                             // 0x0000(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SearchMoveSpeed;                                          // 0x0004(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SearchMinTime;                                            // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SearchMaxTime;                                            // 0x000C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SearchNearDist;                                           // 0x0010(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SearchFarDist;                                            // 0x0014(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EAIMoveSpeed>                          SearchNearSpeed;                                          // 0x0018(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EAIMoveSpeed>                          SearchMidSpeed;                                           // 0x0019(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EAIMoveSpeed>                          SearchFarSpeed;                                           // 0x001A(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1];                                       // 0x001B(0x0001) MISSED OFFSET
};

// ScriptStruct BendGame.RubberbandParams
// 0x0008
struct FRubberbandParams
{
	float                                              DistanceThreshold;                                        // 0x0000(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SpeedMultiplier;                                          // 0x0004(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.PaceParams
// 0x0020
struct FPaceParams
{
	struct FVector2D                                   paceTargetOffset;                                         // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              paceDistanceInner;                                        // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              minAllowedSpeed;                                          // 0x000C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              maxAllowedSpeed;                                          // 0x0010(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              paceStrengthTweak;                                        // 0x0014(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SecondaryPaceDistance;                                    // 0x0018(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SecondaryMinAllowedSpeed;                                 // 0x001C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.MotoCombatInfo
// 0x0040
struct FMotoCombatInfo
{
	float                                              AttackRadiusInner;                                        // 0x0000(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AttackRadiusOuter;                                        // 0x0004(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MinAimTime;                                               // 0x0008(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxAimTime;                                               // 0x000C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AimTimeLockout;                                           // 0x0010(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MinShootTimer;                                            // 0x0014(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxShootTimer;                                            // 0x0018(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x24];                                      // 0x001C(0x0024) MISSED OFFSET
};

// ScriptStruct BendGame.MotoCombatVOEvent
// 0x0010
struct FMotoCombatVOEvent
{
	TEnumAsByte<EMotoCombatVOEvent>                    eventType;                                                // 0x0000(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0001(0x0007) MISSED OFFSET
	struct FName                                       EventName;                                                // 0x0008(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
};

// ScriptStruct BendGame.MotoCombatVOInfo
// 0x0018
struct FMotoCombatVOInfo
{
	TArray<struct FMotoCombatVOEvent>                  MotoCombatVOEventNames;                                   // 0x0000(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0010(0x0008) MISSED OFFSET
};

// ScriptStruct BendGame.BendVehicleMovementComponentSkillInfo
// 0x0010
struct FBendVehicleMovementComponentSkillInfo
{
	TEnumAsByte<EBendVehicleRoadSurfaceType>           RoadSurfaceType;                                          // 0x0000(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0001(0x0007) MISSED OFFSET
	class UBendVehicleSkillInfo*                       SkillInfo;                                                // 0x0008(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.VehicleRamInfo
// 0x0024
struct FVehicleRamInfo
{
	float                                              TimeToApplyRamModifications;                              // 0x0000(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TimeToApplyRamAutoBalanceMods;                            // 0x0004(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TimeToApplySteeringJuke;                                  // 0x0008(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AuotoBalanceLowModifier;                                  // 0x000C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AutoBalanceHighModifier;                                  // 0x0010(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MinSteeringJukeValue;                                     // 0x0014(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxSteeringJukeValue;                                     // 0x0018(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MinHitVelocityAtLocationThreshold;                        // 0x001C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxHitVelocityAtLocationThreshold;                        // 0x0020(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.BendReplicatedVehicleState
// 0x0002
struct FBendReplicatedVehicleState
{
	bool                                               bIsTryingToSlipRearWheels;                                // 0x0000(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bIsBoostEngaged;                                          // 0x0001(0x0001) (ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.BendVehicleSoundRpmEvaluator_Modulation
// 0x000C
struct FBendVehicleSoundRpmEvaluator_Modulation
{
	float                                              PeakToPeakAmplitude0To1;                                  // 0x0000(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Frequency;                                                // 0x0004(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TimeOffset;                                               // 0x0008(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.FloatPair
// 0x0008
struct FFloatPair
{
	float                                              InVal;                                                    // 0x0000(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              OutVal;                                                   // 0x0004(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.BendFloatCurve
// 0x0088
struct FBendFloatCurve
{
	TArray<struct FFloatPair>                          CurvePoints;                                              // 0x0000(0x0010) (Edit, ZeroConstructor)
	struct FRichCurve                                  Curve;                                                    // 0x0010(0x0078)
};

// ScriptStruct BendGame.BendVehicleSoundRpmEvaluator_RevLimiter
// 0x0034
struct FBendVehicleSoundRpmEvaluator_RevLimiter
{
	struct FVector2D                                   Ceiling0To1;                                              // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector2D                                   Floor0To1;                                                // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector2D                                   FallRate;                                                 // 0x0010(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector2D                                   RiseRate;                                                 // 0x0018(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CeilingLingerTime;                                        // 0x0020(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FloorLingerTime;                                          // 0x0024(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xC];                                       // 0x0028(0x000C) MISSED OFFSET
};

// ScriptStruct BendGame.BendVehicleSoundRpmEvaluator
// 0x02D8
struct FBendVehicleSoundRpmEvaluator
{
	float                                              SlopeAngleInfluenceScale;                                 // 0x0000(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SlopeAngleInfluenceCurvePower;                            // 0x0004(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TireLoadInfluenceScale;                                   // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TireLoadInfluenceCurvePower;                              // 0x000C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TireSlipInfluenceScale;                                   // 0x0010(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TireSlipInfluenceCurvePower;                              // 0x0014(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TireSlipNormalizingScale;                                 // 0x0018(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BoostInfluenceScale;                                      // 0x001C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MinimumRpmWhenThrottling;                                 // 0x0020(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              InterpRateWheelSlip;                                      // 0x0024(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              InterpRateInAir;                                          // 0x0028(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              MaxPossibleRpms;                                          // 0x002C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MinDecelRpm0To1;                                          // 0x0030(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              MaxDecelRpm0To1;                                          // 0x0034(0x0004) (ZeroConstructor, IsPlainOldData)
	TArray<struct FBendVehicleSoundRpmEvaluator_Modulation> Modulations;                                              // 0x0038(0x0010) (ZeroConstructor)
	TArray<struct FFloatPair>                          MinAccelRpm0To1PerTargetSpeed;                            // 0x0048(0x0010) (ZeroConstructor)
	TArray<struct FFloatPair>                          MaxAccelRpm0To1PerTargetSpeed;                            // 0x0058(0x0010) (ZeroConstructor)
	struct FBendFloatCurve                             ThrottleCurveLowEnd;                                      // 0x0068(0x0088)
	struct FBendFloatCurve                             ThrottleCurveHighEnd;                                     // 0x00F0(0x0088)
	struct FBendFloatCurve                             NoThrottleCurveLowEnd;                                    // 0x0178(0x0088)
	struct FBendFloatCurve                             NoThrottleCurveHighEnd;                                   // 0x0200(0x0088)
	struct FBendVehicleSoundRpmEvaluator_RevLimiter    RevLimiter;                                               // 0x0288(0x0034) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x14];                                      // 0x02BC(0x0014) MISSED OFFSET
	unsigned char                                      UnknownData01 : 2;                                        // 0x02D0(0x0001)
	unsigned char                                      bConvertedToNewCurveVersion : 1;                          // 0x02D0(0x0001)
	unsigned char                                      UnknownData02[0x7];                                       // 0x02D1(0x0007) MISSED OFFSET
};

// ScriptStruct BendGame.BendVehicleDriftOversteerControlCurve
// 0x0008
struct FBendVehicleDriftOversteerControlCurve
{
	float                                              Start;                                                    // 0x0000(0x0004) (Edit, EditFixedSize, ZeroConstructor, IsPlainOldData)
	float                                              End;                                                      // 0x0004(0x0004) (Edit, EditFixedSize, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.BendVehicleDriftInfo
// 0x00C0
struct FBendVehicleDriftInfo
{
	struct FBendVehicleDriftOversteerControlCurve      DriftOversteerControlCurve;                               // 0x0000(0x0008)
	float                                              DriftBrakeTimeOutTime;                                    // 0x0008(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DriftBrakeCoolDownTime;                                   // 0x000C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ManualDriftThrottleEffectFadeInTime;                      // 0x0010(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ManaulDriftThrottleEffectFadeOutTime;                     // 0x0014(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ReferenceDriftFrictionScale;                              // 0x0018(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DriftApproxAngularDrag_AtReferenceDriftFrictionScale;     // 0x001C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DriftSteerApproxInducedAngularAccel_AtFullSteering_AtReferenceDriftFrictionScale;// 0x0020(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DriftSteerDeltaAngularVelocityInterpTime;                 // 0x0024(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ManualDriftYawVelocityLimitDrag;                          // 0x0028(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ManualDriftRearWheelLongitudinalGripAlpha0To1;            // 0x002C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DonutSpeedEnterThreshold;                                 // 0x0030(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DonutSpeedExitThreshold;                                  // 0x0034(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DonutFrictionScale;                                       // 0x0038(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      bSwitchingSidesCancelsDrift : 1;                          // 0x003C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	unsigned char                                      bBackwardVelocityCancelsDrift : 1;                        // 0x003C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	unsigned char                                      bBackwardVelocityRegainsGrip : 1;                         // 0x003C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	unsigned char                                      bManualDriftLosesGripOnlyOnRearWheel : 1;                 // 0x003C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	unsigned char                                      bManualDriftLosesGripOnlyOnRearWheelInLateralDirection : 1;// 0x003C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	unsigned char                                      bApplyAngVelLimiterTorque_DuringRegularDriving : 1;       // 0x003C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x83];                                      // 0x003D(0x0083) MISSED OFFSET
};

// ScriptStruct BendGame.BendVehicleWheelIndex
// 0x0004
struct FBendVehicleWheelIndex
{
	unsigned char                                      UnknownData00[0x4];                                       // 0x0000(0x0004) MISSED OFFSET
};

// ScriptStruct BendGame.GearSetup
// 0x0048
struct FGearSetup
{
	int                                                Gear;                                                     // 0x0000(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              UpShiftRpm;                                               // 0x0004(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              DownShiftRpm;                                             // 0x0008(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              UpShiftRpmBoosted;                                        // 0x000C(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              DownShiftRpmBoosted;                                      // 0x0010(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              MinAbsSpeed;                                              // 0x0014(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              MaxAbsSpeed;                                              // 0x0018(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              MinAbsSpeed0To1;                                          // 0x001C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxAbsSpeed0To1;                                          // 0x0020(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TimeBeforeUpShift;                                        // 0x0024(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SoundRpmLowEnd0to1;                                       // 0x0028(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SoundRpmHighEnd0to1;                                      // 0x002C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CurvePower;                                               // 0x0030(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TimeBeforeDownShift;                                      // 0x0034(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SoundRpmLowEnd0to1_NoThrottle;                            // 0x0038(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SoundRpmHighEnd0to1_NoThrottle;                           // 0x003C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CurvePower_NoThrottle;                                    // 0x0040(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bConvertedToVersion2 : 1;                                 // 0x0044(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0045(0x0003) MISSED OFFSET
};

// ScriptStruct BendGame.ThrottleCurvePairs
// 0x0018
struct FThrottleCurvePairs
{
	int                                                Gear;                                                     // 0x0000(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0004(0x0004) MISSED OFFSET
	TArray<struct FFloatPair>                          CurvePairs;                                               // 0x0008(0x0010) (Edit, ZeroConstructor)
};

// ScriptStruct BendGame.ThrottleCurve
// 0x0080
struct FThrottleCurve
{
	int                                                Gear;                                                     // 0x0000(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0004(0x0004) MISSED OFFSET
	struct FRichCurve                                  Curve;                                                    // 0x0008(0x0078)
};

// ScriptStruct BendGame.BendVehicleAutoShifter
// 0x0010
struct FBendVehicleAutoShifter
{
	unsigned char                                      bEnabled : 1;                                             // 0x0000(0x0001) (Edit)
	unsigned char                                      UnknownData00[0xF];                                       // 0x0001(0x000F) MISSED OFFSET
};

// ScriptStruct BendGame.AIPhysicsTest
// 0x000C
struct FAIPhysicsTest
{
	float                                              InitialSpeed;                                             // 0x0000(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              desiredSpeed;                                             // 0x0004(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              brakeAmount;                                              // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.BendAITargetEvaluatorDefaultWeights
// 0x005C
struct FBendAITargetEvaluatorDefaultWeights
{
	float                                              IsCurrentTarget;                                          // 0x0000(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HasLOS;                                                   // 0x0004(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HasEverHadLOS;                                            // 0x0008(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AttackedBy;                                               // 0x000C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TargetedBy;                                               // 0x0010(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              LastDamager;                                              // 0x0014(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              BeingAttacked;                                            // 0x0018(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              Proximity;                                                // 0x001C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ImmediateProximity;                                       // 0x0020(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ProximityToBuddy;                                         // 0x0024(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              WasPreviouslyAware;                                       // 0x0028(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AwarenessLevel;                                           // 0x002C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              IsPlayer;                                                 // 0x0030(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PreferPlayer;                                             // 0x0034(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PreferBuddy;                                              // 0x0038(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              Dogpile;                                                  // 0x003C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxDogpile;                                               // 0x0040(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NotEngaged;                                               // 0x0044(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FactionValue;                                             // 0x0048(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MissingHealth;                                            // 0x004C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FriendlyFireMultiplier;                                   // 0x0050(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SumOfAllWeights;                                          // 0x0054(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               HeedFriendlyFire;                                         // 0x0058(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0059(0x0003) MISSED OFFSET
};

// ScriptStruct BendGame.AimLockSettings
// 0x0100
struct FAimLockSettings
{
	struct FRuntimeFloatCurve                          m_AimLockYawCurve;                                        // 0x0000(0x0080) (Edit, BlueprintVisible)
	struct FRuntimeFloatCurve                          m_AimLockPitchCurve;                                      // 0x0080(0x0080) (Edit, BlueprintVisible)
};

// ScriptStruct BendGame.AimFrictionSettings
// 0x0010
struct FAimFrictionSettings
{
	float                                              m_SlowYawInputSpeed;                                      // 0x0000(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_FastYawInputSpeed;                                      // 0x0004(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_SlowPitchInputSpeed;                                    // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_FastPitchInputSpeed;                                    // 0x000C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.AimAssistManualAimSettings
// 0x0150
struct FAimAssistManualAimSettings
{
	unsigned char                                      m_bAimAssist : 1;                                         // 0x0000(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      m_bAimSnapTo : 1;                                         // 0x0000(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      m_bAimLockOn : 1;                                         // 0x0000(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      m_bAimFrictionOn : 1;                                     // 0x0000(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	float                                              m_fAimSnapDurationScalar;                                 // 0x0004(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_fSlowYawLerp;                                           // 0x0008(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              m_fFastYawLerp;                                           // 0x000C(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              m_fSlowYawInputSpeed;                                     // 0x0010(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              m_fFastYawInputSpeed;                                     // 0x0014(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              m_fSlowPitchLerp;                                         // 0x0018(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              m_fFastPitchLerp;                                         // 0x001C(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              m_fSlowPitchInputSpeed;                                   // 0x0020(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              m_fFastPitchInputSpeed;                                   // 0x0024(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              m_fClosestDistForSlowInput;                               // 0x0028(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x002C(0x0004) MISSED OFFSET
	struct FRuntimeFloatCurve                          m_AimLockYawCurve;                                        // 0x0030(0x0080)
	struct FRuntimeFloatCurve                          m_AimLockPitchCurve;                                      // 0x00B0(0x0080)
	TArray<struct FAimLockSettings>                    m_AimLockCurves;                                          // 0x0130(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FAimFrictionSettings>                m_AimFrictionSettings;                                    // 0x0140(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
};

// ScriptStruct BendGame.BendAITeamPawnMovementObserverSettings
// 0x0010
struct FBendAITeamPawnMovementObserverSettings
{
	float                                              MinSamplePeriod;                                          // 0x0000(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxSamplePeriod;                                          // 0x0004(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SampleFrequency;                                          // 0x0008(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinDeltaDistance;                                         // 0x000C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
};

// ScriptStruct BendGame.BendAITeamPawnObserver
// 0x0090
struct FBendAITeamPawnObserver
{
	struct FBendAITeamPawnMovementObserverSettings     MovementSettings;                                         // 0x0000(0x0010) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x80];                                      // 0x0010(0x0080) MISSED OFFSET
};

// ScriptStruct BendGame.BendAITeamRole
// 0x0038
struct FBendAITeamRole
{
	unsigned char                                      UnknownData00[0x8];                                       // 0x0000(0x0008) MISSED OFFSET
	struct FName                                       Role;                                                     // 0x0008(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TAssetPtr<class UBehaviorTree>                     BehaviorTreeAsset;                                        // 0x0010(0x0020) (Edit, DisableEditOnInstance)
	class UBehaviorTree*                               BehaviorTree;                                             // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.BendAITeamNewtDistractionSettings
// 0x0040
struct FBendAITeamNewtDistractionSettings
{
	struct FBendAITeamRole                             DistractRole;                                             // 0x0000(0x0038) (Edit, DisableEditOnInstance)
	float                                              DistractionTimeOutTime;                                   // 0x0038(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x003C(0x0004) MISSED OFFSET
};

// ScriptStruct BendGame.BendAITeamHumanAdvanceSettings
// 0x0040
struct FBendAITeamHumanAdvanceSettings
{
	TAssetPtr<class UBehaviorTree>                     AdvanceBehaviorTreeAsset;                                 // 0x0000(0x0020) (Edit, DisableEditOnInstance)
	float                                              InnerAdvanceRange;                                        // 0x0020(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              OuterAdvanceRange;                                        // 0x0024(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinAdvanceDistance;                                       // 0x0028(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinTimeInCoverToAdvance;                                  // 0x002C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CoverSearchRadius;                                        // 0x0030(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CoverSearchHalfHeight;                                    // 0x0034(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBehaviorTree*                               AdvanceBehaviorTree;                                      // 0x0038(0x0008) (ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.BendAITeamHumanRole
// 0x0000 (0x0038 - 0x0038)
struct FBendAITeamHumanRole : public FBendAITeamRole
{

};

// ScriptStruct BendGame.BendAITeamHumanCombatSettings
// 0x0128
struct FBendAITeamHumanCombatSettings
{
	unsigned char                                      UseTeamCombat : 1;                                        // 0x0000(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0001(0x0007) MISSED OFFSET
	struct FBendAITeamHumanRole                        CombatRole;                                               // 0x0008(0x0038) (Edit, DisableEditOnInstance)
	struct FBendAITeamHumanRole                        InHomeEntityCombatRole;                                   // 0x0040(0x0038) (Edit, DisableEditOnInstance)
	struct FBendAITeamHumanRole                        CoveringRole;                                             // 0x0078(0x0038) (Edit, DisableEditOnInstance)
	struct FBendAITeamHumanRole                        MoveToLaneRole;                                           // 0x00B0(0x0038) (Edit, DisableEditOnInstance)
	struct FBendAITeamHumanRole                        HoldingRole;                                              // 0x00E8(0x0038) (Edit, DisableEditOnInstance)
	float                                              MinLaneDepth;                                             // 0x0120(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0124(0x0004) MISSED OFFSET
};

// ScriptStruct BendGame.BendAITeamHumanCombatHuntSettings
// 0x0150
struct FBendAITeamHumanCombatHuntSettings
{
	unsigned char                                      bCanCombatHunt : 1;                                       // 0x0000(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0001(0x0007) MISSED OFFSET
	struct FBendAITeamHumanRole                        ClosestCoverRole;                                         // 0x0008(0x0038) (Edit, DisableEditOnInstance)
	struct FBendAITeamHumanRole                        AdvanceRole;                                              // 0x0040(0x0038) (Edit, DisableEditOnInstance)
	struct FBendAITeamHumanRole                        WaitRole;                                                 // 0x0078(0x0038) (Edit, DisableEditOnInstance)
	struct FBendAITeamHumanRole                        RushRole;                                                 // 0x00B0(0x0038) (Edit, DisableEditOnInstance)
	struct FBendAITeamHumanRole                        FlankRole;                                                // 0x00E8(0x0038) (Edit, DisableEditOnInstance)
	float                                              InnerCombatHuntRange;                                     // 0x0120(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              OuterCombatHuntRange;                                     // 0x0124(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxTimeAllWaiting;                                        // 0x0128(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FlankingMinDistanceToTarget;                              // 0x012C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FlankingRadius;                                           // 0x0130(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxTimeBeforeAcknowledgeHunterKilled;                     // 0x0134(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinTimeBeforeAcknowledgeHunterKilled;                     // 0x0138(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinSperationDistanceBetweenHunts;                         // 0x013C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                MinHunters;                                               // 0x0140(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                MaxHunters;                                               // 0x0144(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PercentHunters;                                           // 0x0148(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TimeUntilFortificationZoneAIsAreRecruited;                // 0x014C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
};

// ScriptStruct BendGame.BendAITeamHumanHideFromSniperSettings
// 0x0058
struct FBendAITeamHumanHideFromSniperSettings
{
	struct FBendAITeamHumanRole                        HidingRole;                                               // 0x0000(0x0038) (Edit, DisableEditOnInstance)
	float                                              MinHidingTime;                                            // 0x0038(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxHidingTime;                                            // 0x003C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinStartPeekOutTime;                                      // 0x0040(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxStartPeekOutTime;                                      // 0x0044(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinPeekOutInterval;                                       // 0x0048(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxPeekOutInterval;                                       // 0x004C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PeekOutIntervalReductionFactor;                           // 0x0050(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0054(0x0004) MISSED OFFSET
};

// ScriptStruct BendGame.BendAITeamHumanShootFromCoverSettings
// 0x000C
struct FBendAITeamHumanShootFromCoverSettings
{
	int                                                MaxSimultaneous;                                          // 0x0000(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinLockoutTime;                                           // 0x0004(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxLockoutTime;                                           // 0x0008(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
};

// ScriptStruct BendGame.BendAITeamHumanSearchSettings
// 0x0008
struct FBendAITeamHumanSearchSettings
{
	float                                              AlreadyBeingSearchedRadius;                               // 0x0000(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AlreadyBeingSearchedHalfHeight;                           // 0x0004(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
};

// ScriptStruct BendGame.BendAITeamHumanGrenadeSettings
// 0x0048
struct FBendAITeamHumanGrenadeSettings
{
	float                                              MinTimeBetweenGrenadesSquad;                              // 0x0000(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinTimeBetweenGrenadesTeam;                               // 0x0004(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinRange;                                                 // 0x0008(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinRangeThroughPortal;                                    // 0x000C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxRange;                                                 // 0x0010(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinRangeRetreat;                                          // 0x0014(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinRangeRetreatThroughPortal;                             // 0x0018(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxRangeRetreat;                                          // 0x001C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TAssetPtr<class UBehaviorTree>                     GrenadeBehaviorTreeAsset;                                 // 0x0020(0x0020) (Edit, DisableEditOnInstance)
	class UBehaviorTree*                               GrenadeBehaviorTree;                                      // 0x0040(0x0008) (ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.BendAITeamHumanRetreatSettings
// 0x0188
struct FBendAITeamHumanRetreatSettings
{
	unsigned char                                      IsAllowedToRetreat : 1;                                   // 0x0000(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	float                                              GrenadeProbability;                                       // 0x0004(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinRetreatDistance;                                       // 0x0008(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxRetreatDistance;                                       // 0x000C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxTimeAsPendingWhenMoving;                               // 0x0010(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxEnemyDistance;                                         // 0x0014(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinEnemyDistanceToStopRetreating;                         // 0x0018(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinDistanceToDZEdgeForOpenPosition;                       // 0x001C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinHoldingInOpenTime;                                     // 0x0020(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxHoldingInOpenTime;                                     // 0x0024(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinTimeToWaitAfterFailedRetreat;                          // 0x0028(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinDistanceToHomePoint;                                   // 0x002C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              IdealGrenadeDistance;                                     // 0x0030(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0034(0x0004) MISSED OFFSET
	struct FBendAITeamHumanRole                        RetreatCoverRole;                                         // 0x0038(0x0038) (Edit, DisableEditOnInstance)
	struct FBendAITeamHumanRole                        RetreatOpenPositionRole;                                  // 0x0070(0x0038) (Edit, DisableEditOnInstance)
	struct FBendAITeamHumanRole                        CoveringRole;                                             // 0x00A8(0x0038) (Edit, DisableEditOnInstance)
	struct FBendAITeamHumanRole                        HoldCoverPositionRole;                                    // 0x00E0(0x0038) (Edit, DisableEditOnInstance)
	struct FBendAITeamHumanRole                        HoldOpenPositionRole;                                     // 0x0118(0x0038) (Edit, DisableEditOnInstance)
	struct FBendAITeamHumanRole                        RepositionRole;                                           // 0x0150(0x0038) (Edit, DisableEditOnInstance)
};

// ScriptStruct BendGame.BendAITeamHumanMoveToDZSettings
// 0x00B8
struct FBendAITeamHumanMoveToDZSettings
{
	float                                              MinMoveDistance;                                          // 0x0000(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxMoveDistance;                                          // 0x0004(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxTimeAsPendingWhenMoving;                               // 0x0008(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxTimeAsMoving;                                          // 0x000C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FBendAITeamHumanRole                        MoveCoverRole;                                            // 0x0010(0x0038) (Edit, DisableEditOnInstance)
	struct FBendAITeamHumanRole                        MoveOpenPositionRole;                                     // 0x0048(0x0038) (Edit, DisableEditOnInstance)
	struct FBendAITeamHumanRole                        CoveringRole;                                             // 0x0080(0x0038) (Edit, DisableEditOnInstance)
};

// ScriptStruct BendGame.BendAITeamHumanGetBackToFrontLineSettings
// 0x00B8
struct FBendAITeamHumanGetBackToFrontLineSettings
{
	float                                              MinMoveDistance;                                          // 0x0000(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxMoveDistance;                                          // 0x0004(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxTimeAsPendingWhenMoving;                               // 0x0008(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxTimeAsMoving;                                          // 0x000C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FBendAITeamHumanRole                        MoveCoverRole;                                            // 0x0010(0x0038) (Edit, DisableEditOnInstance)
	struct FBendAITeamHumanRole                        MoveOpenPositionRole;                                     // 0x0048(0x0038) (Edit, DisableEditOnInstance)
	struct FBendAITeamHumanRole                        CoveringRole;                                             // 0x0080(0x0038) (Edit, DisableEditOnInstance)
};

// ScriptStruct BendGame.BendAITeamHumanPressAttackSettings
// 0x0268
struct FBendAITeamHumanPressAttackSettings
{
	unsigned char                                      IsAllowedToPressAttack : 1;                               // 0x0000(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      IsAllowedToUseGrenades : 1;                               // 0x0000(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      IsAllowedToFlank : 1;                                     // 0x0000(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	float                                              MinAdvanceDistance;                                       // 0x0004(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxAdvanceDistance;                                       // 0x0008(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinAdvanceDistanceHardDZ;                                 // 0x000C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinDistanceToAdvance;                                     // 0x0010(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinDistanceToAdvanceOpen;                                 // 0x0014(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxCoveringTime;                                          // 0x0018(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxFlankingTime;                                          // 0x001C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinHoldingTime;                                           // 0x0020(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxHoldingTime;                                           // 0x0024(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxHoldingOpenPositionTime;                               // 0x0028(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxFlankDistance;                                         // 0x002C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinTimeAfterFlankUntilAbort;                              // 0x0030(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0034(0x0004) MISSED OFFSET
	struct FBendAITeamHumanRole                        AdvanceCoverRole;                                         // 0x0038(0x0038) (Edit, DisableEditOnInstance)
	struct FBendAITeamHumanRole                        AdvanceOpenPositionRole;                                  // 0x0070(0x0038) (Edit, DisableEditOnInstance)
	struct FBendAITeamHumanRole                        CoveringRole;                                             // 0x00A8(0x0038) (Edit, DisableEditOnInstance)
	struct FBendAITeamHumanRole                        SeekCoverForCoveringRole;                                 // 0x00E0(0x0038) (Edit, DisableEditOnInstance)
	struct FBendAITeamHumanRole                        HoldCoverPositionRole;                                    // 0x0118(0x0038) (Edit, DisableEditOnInstance)
	struct FBendAITeamHumanRole                        HoldOpenPositionRole;                                     // 0x0150(0x0038) (Edit, DisableEditOnInstance)
	struct FBendAITeamHumanRole                        RepositionRole;                                           // 0x0188(0x0038) (Edit, DisableEditOnInstance)
	struct FBendAITeamHumanRole                        FlankingCoverRole;                                        // 0x01C0(0x0038) (Edit, DisableEditOnInstance)
	struct FBendAITeamHumanRole                        FlankingOpenPositionRole;                                 // 0x01F8(0x0038) (Edit, DisableEditOnInstance)
	struct FBendAITeamHumanRole                        GrenadierRole;                                            // 0x0230(0x0038) (Edit, DisableEditOnInstance)
};

// ScriptStruct BendGame.BendAITeamHumanGrenadeAttackSettings
// 0x00B0
struct FBendAITeamHumanGrenadeAttackSettings
{
	unsigned char                                      IsAllowedToGrenadeAttack : 1;                             // 0x0000(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0001(0x0007) MISSED OFFSET
	struct FBendAITeamHumanRole                        HoldCoverPositionRole;                                    // 0x0008(0x0038) (Edit, DisableEditOnInstance)
	struct FBendAITeamHumanRole                        HoldOpenPositionRole;                                     // 0x0040(0x0038) (Edit, DisableEditOnInstance)
	struct FBendAITeamHumanRole                        GrenadierRole;                                            // 0x0078(0x0038) (Edit, DisableEditOnInstance)
};

// ScriptStruct BendGame.BendAITeamHumanCoveringSettings
// 0x000C
struct FBendAITeamHumanCoveringSettings
{
	unsigned char                                      IsAllowedToTakeCoverWhileCovering : 1;                    // 0x0000(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	float                                              CoverRadius;                                              // 0x0004(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CoverForCoveringRadius;                                   // 0x0008(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
};

// ScriptStruct BendGame.BendAITeamHumanHoldSettings
// 0x0014
struct FBendAITeamHumanHoldSettings
{
	float                                              MinHoldingTime;                                           // 0x0000(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxHoldingTime;                                           // 0x0004(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxHoldingOpenPositionTime;                               // 0x0008(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              RepositioningRadius;                                      // 0x000C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              RepositioningEmergencyRadius;                             // 0x0010(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
};

// ScriptStruct BendGame.BendAITeamHumanAreaSearchSettings
// 0x0298
struct FBendAITeamHumanAreaSearchSettings
{
	bool                                               IsAllowedToSearch;                                        // 0x0000(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0001(0x0007) MISSED OFFSET
	struct FBendAITeamHumanRole                        PrepareSearchRole;                                        // 0x0008(0x0038) (Edit, DisableEditOnInstance)
	struct FBendAITeamHumanRole                        SearchCoverRole;                                          // 0x0040(0x0038) (Edit, DisableEditOnInstance)
	struct FBendAITeamHumanRole                        SearchTreeRole;                                           // 0x0078(0x0038) (Edit, DisableEditOnInstance)
	struct FBendAITeamHumanRole                        SearchPortalCoverInsideOutRole;                           // 0x00B0(0x0038) (Edit, DisableEditOnInstance)
	struct FBendAITeamHumanRole                        SearchPortalCoverOutsideInRole;                           // 0x00E8(0x0038) (Edit, DisableEditOnInstance)
	struct FBendAITeamHumanRole                        SearchPortalCoverRoomToRoomRole;                          // 0x0120(0x0038) (Edit, DisableEditOnInstance)
	struct FBendAITeamHumanRole                        SearchVegitationRole;                                     // 0x0158(0x0038) (Edit, DisableEditOnInstance)
	struct FBendAITeamHumanRole                        SearchPOIRole;                                            // 0x0190(0x0038) (Edit, DisableEditOnInstance)
	struct FBendAITeamHumanRole                        SearchPerimeterPointRole;                                 // 0x01C8(0x0038) (Edit, DisableEditOnInstance)
	struct FBendAITeamHumanRole                        WaitingRole;                                              // 0x0200(0x0038) (Edit, DisableEditOnInstance)
	struct FBendAITeamHumanRole                        SearchWrappUpRole;                                        // 0x0238(0x0038) (Edit, DisableEditOnInstance)
	float                                              MinSearchRangeRadius;                                     // 0x0270(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxSearchRangeRadius;                                     // 0x0274(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SearchRangeHalfHeight;                                    // 0x0278(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinDistanceBetweenSearchPoints;                           // 0x027C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                MinimumSearchPoints;                                      // 0x0280(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                MaximumSearchPoints;                                      // 0x0284(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SearchTime;                                               // 0x0288(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ExtendedSearchTime;                                       // 0x028C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxFinishDistance;                                        // 0x0290(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0294(0x0004) MISSED OFFSET
};

// ScriptStruct BendGame.BendAITeamHumanDisentangleFrontLineSettings
// 0x00E8
struct FBendAITeamHumanDisentangleFrontLineSettings
{
	struct FBendAITeamHumanRole                        ExtractToCoverRole;                                       // 0x0000(0x0038) (Edit, DisableEditOnInstance)
	struct FBendAITeamHumanRole                        ExtractToOpenRole;                                        // 0x0038(0x0038) (Edit, DisableEditOnInstance)
	struct FBendAITeamHumanRole                        HoldCoverPositionRole;                                    // 0x0070(0x0038) (Edit, DisableEditOnInstance)
	struct FBendAITeamHumanRole                        HoldOpenPositionRole;                                     // 0x00A8(0x0038) (Edit, DisableEditOnInstance)
	float                                              DisentanglePointSearchRadius;                             // 0x00E0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00E4(0x0004) MISSED OFFSET
};

// ScriptStruct BendGame.BendAITeamHumanNoMansLandSettings
// 0x0064
struct FBendAITeamHumanNoMansLandSettings
{
	float                                              Depth;                                                    // 0x0000(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DepthDeadZone;                                            // 0x0004(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              WidthDeadZone;                                            // 0x0008(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinEnemyTeamDepth;                                        // 0x000C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              EnemyPositionFullRelevanceTime;                           // 0x0010(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              EnemyPositionRelevanceExpirationTime;                     // 0x0014(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinUnitSeparationDistance;                                // 0x0018(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TimeUntilRespondToFlanker;                                // 0x001C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NoFlankingTime;                                           // 0x0020(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinFlankingMoveDistance;                                  // 0x0024(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinGroupSeparationDistance;                               // 0x0028(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              BaseMergeTime;                                            // 0x002C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinMergeTime;                                             // 0x0030(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MergeDistanceMin;                                         // 0x0034(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MergeDistanceLarge;                                       // 0x0038(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MergeDistanceLargeMax;                                    // 0x003C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MergeCosAngleMin;                                         // 0x0040(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MergeCosAngleLarge;                                       // 0x0044(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MergeCosAngleLargeMax;                                    // 0x0048(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HomePointFullMergeDistance;                               // 0x004C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HomePointMinimumMergeDistance;                            // 0x0050(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HomePointMinimumMergeFactor;                              // 0x0054(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HomePointDZFullMergeDistance;                             // 0x0058(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HomePointDZMinimumMergeDistance;                          // 0x005C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HomePointDZMinimumMergeFactor;                            // 0x0060(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
};

// ScriptStruct BendGame.BendAITeamHumanSquadSettings
// 0x0014
struct FBendAITeamHumanSquadSettings
{
	float                                              MaxAttachHorizontalDistance;                              // 0x0000(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxAttachVerticalDistance;                                // 0x0004(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinSepparationRange;                                      // 0x0008(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PlayerIncreasingMovementSlidingWindowSize;                // 0x000C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PlayerDecreasingMovementSlidingWindowSize;                // 0x0010(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
};

// ScriptStruct BendGame.BendAIThreatEvaluatorDefaultWeights
// 0x0014
struct FBendAIThreatEvaluatorDefaultWeights
{
	float                                              HasLOS;                                                   // 0x0000(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              Proximity;                                                // 0x0004(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TargetedBy;                                               // 0x0008(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AttackedBy;                                               // 0x000C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0010(0x0004) MISSED OFFSET
};

// ScriptStruct BendGame.BendRuntimeFloatCurve
// 0x0008 (0x0088 - 0x0080)
struct FBendRuntimeFloatCurve : public FRuntimeFloatCurve
{
	unsigned char                                      UnknownData00[0x8];                                       // 0x0080(0x0008) MISSED OFFSET
};

// ScriptStruct BendGame.BendRuntimeColorCurve
// 0x0018 (0x0200 - 0x01E8)
struct FBendRuntimeColorCurve : public FRuntimeCurveLinearColor
{
	unsigned char                                      UnknownData00[0x18];                                      // 0x01E8(0x0018) MISSED OFFSET
};

// ScriptStruct BendGame.BendWindParameters
// 0x0014
struct FBendWindParameters
{
	float                                              StrengthToIntensityScale;                                 // 0x0000(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              StrengthToIntensityOffset;                                // 0x0004(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                SizeXLog2;                                                // 0x0008(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                SizeYLog2;                                                // 0x000C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                SizeZLog2;                                                // 0x0010(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.WorldWeatherTransition
// 0x0010
struct FWorldWeatherTransition
{
	TEnumAsByte<EWeatherType>                          WeatherNext;                                              // 0x0000(0x0001) (ZeroConstructor, SaveGame, IsPlainOldData)
	TEnumAsByte<EWeatherTransitionRateType>            TransitionRate;                                           // 0x0001(0x0001) (ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0002(0x0002) MISSED OFFSET
	float                                              TransitionTime;                                           // 0x0004(0x0004) (ZeroConstructor, SaveGame, IsPlainOldData)
	float                                              RelativeTime;                                             // 0x0008(0x0004) (ZeroConstructor, SaveGame, IsPlainOldData)
	bool                                               Pending;                                                  // 0x000C(0x0001) (ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x000D(0x0003) MISSED OFFSET
};

// ScriptStruct BendGame.BendInfluenceCondition
// 0x0028
struct FBendInfluenceCondition
{
	TAssetPtr<class UClass>                            Condition;                                                // 0x0000(0x0020) (Edit)
	int                                                Weight;                                                   // 0x0020(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0024(0x0004) MISSED OFFSET
};

// ScriptStruct BendGame.AmbientEventCategoryTimings
// 0x0010
struct FAmbientEventCategoryTimings
{
	TEnumAsByte<EAmbientEventClass>                    AmbientEventClass;                                        // 0x0000(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0001(0x0007) MISSED OFFSET
	struct FTimespan                                   TimeBetweenEvents;                                        // 0x0008(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
};

// ScriptStruct BendGame.DebugInfoPointToEvent
// 0x001C
struct FDebugInfoPointToEvent
{
	TWeakObjectPtr<class ABendAmbientEventMarker>      AmbientEventMarker;                                       // 0x0000(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FVector                                     AmbientEventLocation;                                     // 0x0008(0x000C) (ZeroConstructor, IsPlainOldData)
	struct FColor                                      LineColor;                                                // 0x0014(0x0004) (ZeroConstructor, IsPlainOldData)
	bool                                               ReadyToRemove;                                            // 0x0018(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0019(0x0003) MISSED OFFSET
};

// ScriptStruct BendGame.SpawnLocationData
// 0x00B0
struct FSpawnLocationData
{
	struct FTransform                                  Transform;                                                // 0x0000(0x0030) (IsPlainOldData)
	struct FVector                                     BoxExtent;                                                // 0x0030(0x000C) (ZeroConstructor, IsPlainOldData)
	TWeakObjectPtr<class ABendSpawnLocationBase>       SpawnBox;                                                 // 0x003C(0x0008) (ZeroConstructor, IsPlainOldData)
	TWeakObjectPtr<class ABendAmbientSpawnArea>        SpawnArea;                                                // 0x0044(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FDefendZoneInfo                             m_defendZoneInfo;                                         // 0x004C(0x0030)
	unsigned char                                      MaxSpawns;                                                // 0x007C(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      SpawnedCount;                                             // 0x007D(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      KilledCount;                                              // 0x007E(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      ActiveCount;                                              // 0x007F(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               IsInBuilding;                                             // 0x0080(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      FailedLoSChecks;                                          // 0x0081(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x0082(0x0006) MISSED OFFSET
	TArray<TEnumAsByte<EAIFactionType>>                InvalidTypes;                                             // 0x0088(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData01[0x18];                                      // 0x0098(0x0018) MISSED OFFSET
};

// ScriptStruct BendGame.SpecificWaveLocations
// 0x0018
struct FSpecificWaveLocations
{
	class UWaveSpawnerData*                            WaveToUse;                                                // 0x0000(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TArray<class ABendAmbientSpawnBox*>                SpawnLocationsToUse;                                      // 0x0008(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
};

// ScriptStruct BendGame.BendAnimalPreyPreference
// 0x0028
struct FBendAnimalPreyPreference
{
	TAssetPtr<class UClass>                            Prey;                                                     // 0x0000(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	float                                              Interest;                                                 // 0x0020(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0024(0x0004) MISSED OFFSET
};

// ScriptStruct BendGame.BendAnimHelperRigOperationBaseData
// 0x0010
struct FBendAnimHelperRigOperationBaseData
{
	struct FName                                       AffectedBone;                                             // 0x0000(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bDrawDebug : 1;                                           // 0x0008(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0009(0x0007) MISSED OFFSET
};

// ScriptStruct BendGame.BendAnimHelperRigAimConstraintData
// 0x0020 (0x0030 - 0x0010)
struct FBendAnimHelperRigAimConstraintData : public FBendAnimHelperRigOperationBaseData
{
	struct FName                                       TargetBone;                                               // 0x0010(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FName                                       UpPointParentBoneOverride;                                // 0x0018(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector                                     UpPointInAffectedBoneSpaceInRefPose;                      // 0x0020(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EBendAnimHelperRigAimAxes>             Axes;                                                     // 0x002C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x002D(0x0003) MISSED OFFSET
};

// ScriptStruct BendGame.BendAnimHelperRigMultiplyDivideData
// 0x0018 (0x0028 - 0x0010)
struct FBendAnimHelperRigMultiplyDivideData : public FBendAnimHelperRigOperationBaseData
{
	struct FName                                       LeaderBone;                                               // 0x0010(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EBendAnimHelperRigMultiplyDivide>      Operation;                                                // 0x0018(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0019(0x0003) MISSED OFFSET
	struct FVector                                     ModifierValues;                                           // 0x001C(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.BendAnimIKSettings
// 0x0001
struct FBendAnimIKSettings
{
	unsigned char                                      IKPriority;                                               // 0x0000(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.BendVehiclePairedAnimData
// 0x0070
struct FBendVehiclePairedAnimData
{
	class UAnimSequenceBase*                           Anim_Driver;                                              // 0x0000(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	class UAnimSequenceBase*                           Anim_Vehicle;                                             // 0x0008(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	TEnumAsByte<EeVehicleSideType>                     WhichSide;                                                // 0x0010(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	TEnumAsByte<EeVehicleSideLayingType>               SideVehicleLayingOn;                                      // 0x0011(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0012(0x0002) MISSED OFFSET
	float                                              StartTime;                                                // 0x0014(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              BlendInTime_Driver;                                       // 0x0018(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              BlendInTime_Vehicle;                                      // 0x001C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      bFastVersion : 1;                                         // 0x0020(0x0001) (BlueprintVisible, BlueprintReadOnly, Transient)
	unsigned char                                      bVehicleHasFallenOver : 1;                                // 0x0020(0x0001) (BlueprintVisible, BlueprintReadOnly, Transient)
	unsigned char                                      UnknownData01[0xF];                                       // 0x0021(0x000F) MISSED OFFSET
	struct FTransform                                  VehicleAnchorTransform;                                   // 0x0030(0x0030) (BlueprintVisible, BlueprintReadOnly, Transient, IsPlainOldData)
	unsigned char                                      bUseFallingAnimation : 1;                                 // 0x0060(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUseForcedOnBikeAnimation : 1;                            // 0x0060(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bEarlyExitPickupAnim : 1;                                 // 0x0060(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData02[0xF];                                       // 0x0061(0x000F) MISSED OFFSET
};

// ScriptStruct BendGame.BendPlayerAnimCoverSearch
// 0x00C8
struct FBendPlayerAnimCoverSearch
{
	float                                              MinCoverSearchDistance;                                   // 0x0000(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxCoverSearchDistance;                                   // 0x0004(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              LowCoverSearchHeight;                                     // 0x0008(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HighCoverSearchHeight;                                    // 0x000C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              BlindFireCoverSearchHeight;                               // 0x0010(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxCoverSearchHeight;                                     // 0x0014(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CoverSearchRadius;                                        // 0x0018(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CoverSearchOffset;                                        // 0x001C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              OptimalWeaponBlockImmunity;                               // 0x0020(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              WeaponBlockImmunityDeadzone;                              // 0x0024(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0xA0];                                      // 0x0028(0x00A0) MISSED OFFSET
};

// ScriptStruct BendGame.BendAnimMotionMatching_BoneState_ErrorWeights
// 0x000C
struct FBendAnimMotionMatching_BoneState_ErrorWeights
{
	float                                              Translation;                                              // 0x0000(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Velocity;                                                 // 0x0004(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Rotation;                                                 // 0x0008(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.BendAnimMotionMatching_BoneParams
// 0x0028
struct FBendAnimMotionMatching_BoneParams
{
	unsigned char                                      UnknownData00[0x10];                                      // 0x0000(0x0010) MISSED OFFSET
	struct FName                                       BoneName;                                                 // 0x0010(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bMatchVelocity : 1;                                       // 0x0018(0x0001) (Edit)
	unsigned char                                      bMatchRotation : 1;                                       // 0x0018(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0019(0x0003) MISSED OFFSET
	struct FBendAnimMotionMatching_BoneState_ErrorWeights ErrorWeights;                                             // 0x001C(0x000C) (Edit)
};

// ScriptStruct BendGame.BendAnimMotionMatching_RootVelocity_ErrorWeights
// 0x0008
struct FBendAnimMotionMatching_RootVelocity_ErrorWeights
{
	float                                              LinearVelocity;                                           // 0x0000(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AngularVelocity;                                          // 0x0004(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.BendAnimMotionMatching_FutureTimeParams
// 0x0008
struct FBendAnimMotionMatching_FutureTimeParams
{
	float                                              Time;                                                     // 0x0000(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ErrorWeight;                                              // 0x0004(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.BendAnimMotionMatching_ExtractionParams
// 0x0250
struct FBendAnimMotionMatching_ExtractionParams
{
	class USkeletalMesh*                               SkeletalMesh;                                             // 0x0000(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UClass*                                      PrototypicalCharacter_ForComponentToActorRelationship;    // 0x0008(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                SkeletalMeshLodForExtraction;                             // 0x0010(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xC];                                       // 0x0014(0x000C) MISSED OFFSET
	struct FTransform                                  ComponentSpaceToActorSpaceTransform;                      // 0x0020(0x0030) (Edit, IsPlainOldData)
	TArray<struct FString>                             AnimationAssetDirectories;                                // 0x0050(0x0010) (Edit, ZeroConstructor)
	TArray<struct FBendAnimMotionMatching_BoneParams>  BoneParamsList;                                           // 0x0060(0x0010) (Edit, ZeroConstructor)
	TArray<struct FBendAnimMotionMatching_BoneParams>  BoneFutureParamsList;                                     // 0x0070(0x0010) (Edit, ZeroConstructor)
	struct FBendAnimMotionMatching_RootVelocity_ErrorWeights RootVelocity_ErrorWeights;                                // 0x0080(0x0008) (Edit)
	struct FBendAnimMotionMatching_BoneState_ErrorWeights RootFutureParams_ErrorWeights;                            // 0x0088(0x000C) (Edit)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0094(0x0004) MISSED OFFSET
	TArray<struct FBendAnimMotionMatching_FutureTimeParams> FutureTimes;                                              // 0x0098(0x0010) (Edit, ZeroConstructor)
	TArray<struct FBendAnimMotionMatching_BoneParams>  LoopDetectionBoneMatchList;                               // 0x00A8(0x0010) (Edit, ZeroConstructor)
	float                                              ExtractionInterval;                                       // 0x00B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PoseToPoseBlendTime;                                      // 0x00BC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x190];                                     // 0x00C0(0x0190) MISSED OFFSET
};

// ScriptStruct BendGame.BendAnimMotionMatching_ErrorWeights
// 0x0048
struct FBendAnimMotionMatching_ErrorWeights
{
	TArray<struct FBendAnimMotionMatching_BoneState_ErrorWeights> BoneStates;                                               // 0x0000(0x0010) (Edit, ZeroConstructor, EditConst)
	TArray<struct FBendAnimMotionMatching_BoneState_ErrorWeights> BoneFutureStates;                                         // 0x0010(0x0010) (Edit, ZeroConstructor, EditConst)
	struct FBendAnimMotionMatching_RootVelocity_ErrorWeights RootVelocity;                                             // 0x0020(0x0008) (Edit, EditConst)
	struct FBendAnimMotionMatching_BoneState_ErrorWeights RootFutureState;                                          // 0x0028(0x000C) (Edit, EditConst)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0034(0x0004) MISSED OFFSET
	TArray<float>                                      FutureTimes;                                              // 0x0038(0x0010) (Edit, ZeroConstructor, EditConst)
};

// ScriptStruct BendGame.BendAnimMotionMatching_BoneState
// 0x0040
struct FBendAnimMotionMatching_BoneState
{
	struct FVector                                     Translation;                                              // 0x0000(0x000C) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	struct FVector                                     Velocity;                                                 // 0x000C(0x000C) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0018(0x0008) MISSED OFFSET
	struct FQuat                                       Rotation;                                                 // 0x0020(0x0010) (Edit, EditConst, IsPlainOldData)
	unsigned char                                      bMatchVelocity : 1;                                       // 0x0030(0x0001) (Edit, EditConst)
	unsigned char                                      bMatchRotation : 1;                                       // 0x0030(0x0001) (Edit, EditConst)
	unsigned char                                      UnknownData01[0xF];                                       // 0x0031(0x000F) MISSED OFFSET
};

// ScriptStruct BendGame.BendAnimMotionMatching_BoneState_List
// 0x0010
struct FBendAnimMotionMatching_BoneState_List
{
	TArray<struct FBendAnimMotionMatching_BoneState>   List;                                                     // 0x0000(0x0010) (Edit, ZeroConstructor, EditConst)
};

// ScriptStruct BendGame.BendAnimMotionMatching_RootBoneState
// 0x0000 (0x0040 - 0x0040)
struct FBendAnimMotionMatching_RootBoneState : public FBendAnimMotionMatching_BoneState
{

};

// ScriptStruct BendGame.BendAnimMotionMatching_Pose
// 0x0058
struct FBendAnimMotionMatching_Pose
{
	TArray<struct FBendAnimMotionMatching_BoneState>   BoneStates;                                               // 0x0000(0x0010) (Edit, ZeroConstructor, EditConst)
	TArray<struct FBendAnimMotionMatching_BoneState_List> BoneFutureStates;                                         // 0x0010(0x0010) (Edit, ZeroConstructor, EditConst)
	TArray<struct FBendAnimMotionMatching_RootBoneState> RootFutureStates;                                         // 0x0020(0x0010) (Edit, ZeroConstructor, EditConst)
	struct FVector                                     RootVelocity;                                             // 0x0030(0x000C) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x003C(0x0004) MISSED OFFSET
	class UAnimSequence*                               Animation;                                                // 0x0040(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              RootAngularVelocityYaw;                                   // 0x0048(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              ExtractionTime;                                           // 0x004C(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	int                                                NextContiguousPoseIndex;                                  // 0x0050(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      bCanLoop : 1;                                             // 0x0054(0x0001) (Edit, EditConst)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0055(0x0003) MISSED OFFSET
};

// ScriptStruct BendGame.BendEventVOData
// 0x0010
struct FBendEventVOData
{
	struct FName                                       EventName;                                                // 0x0000(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              WaitTime;                                                 // 0x0008(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x000C(0x0004) MISSED OFFSET
};

// ScriptStruct BendGame.BendSndConvolverParams
// 0x0038
struct FBendSndConvolverParams
{
	struct FString                                     IR_Name;                                                  // 0x0000(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	uint32_t                                           Direction;                                                // 0x0010(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              StartOffset;                                              // 0x0014(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              StopOffset;                                               // 0x0018(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              Gain;                                                     // 0x001C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AttackTime;                                               // 0x0020(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AttackAlpha;                                              // 0x0024(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SustainTime;                                              // 0x0028(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ReleaseTime;                                              // 0x002C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ReleaseAlpha;                                             // 0x0030(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0034(0x0004) MISSED OFFSET
};

// ScriptStruct BendGame.BendSndDistortionParams
// 0x0010
struct FBendSndDistortionParams
{
	float                                              Drive;                                                    // 0x0000(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              OutputGain;                                               // 0x0004(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PassThruGain;                                             // 0x0008(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	uint32_t                                           Flags;                                                    // 0x000C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
};

// ScriptStruct BendGame.BendSndIIRFilterParams
// 0x0018
struct FBendSndIIRFilterParams
{
	TEnumAsByte<EPreSendFilterType>                    FilterType;                                               // 0x0000(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	float                                              Gain;                                                     // 0x0004(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              LRRatio;                                                  // 0x0008(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              Cutoff;                                                   // 0x000C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HFRatio;                                                  // 0x0010(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              Resonance;                                                // 0x0014(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
};

// ScriptStruct BendGame.BendSndModalFilterParams
// 0x0008
struct FBendSndModalFilterParams
{
	uint32_t                                           Mode;                                                     // 0x0000(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              intensity;                                                // 0x0004(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
};

// ScriptStruct BendGame.BendSndSphericalPanParams
// 0x0010
struct FBendSndSphericalPanParams
{
	uint32_t                                           Azimuth;                                                  // 0x0000(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	uint32_t                                           Focus;                                                    // 0x0004(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                Elevation;                                                // 0x0008(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              Distance;                                                 // 0x000C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
};

// ScriptStruct BendGame.BendRenderingSubmixData
// 0x0150
struct FBendRenderingSubmixData
{
	struct FBendSndConvolverParams                     ConvolverParams;                                          // 0x0000(0x0038) (Edit, DisableEditOnInstance)
	struct FBendSndDistortionParams                    DistortionParams;                                         // 0x0038(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FBendSndIIRFilterParams                     PreRenderFilter0;                                         // 0x0048(0x0018) (Edit, DisableEditOnInstance)
	struct FBendSndIIRFilterParams                     PreRenderFilter1;                                         // 0x0060(0x0018) (Edit, DisableEditOnInstance)
	struct FBendSndConvolverParams                     ReflectionsConvolverParams;                               // 0x0078(0x0038) (Edit, DisableEditOnInstance)
	TArray<float>                                      AuxSendGain;                                              // 0x00B0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<int>                                        AuxSendDests;                                             // 0x00C0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FBendSndModalFilterParams                   DirectPathFilter0;                                        // 0x00D0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FBendSndModalFilterParams                   DirectPathFilter1;                                        // 0x00D8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              Reflection0DelayTime;                                     // 0x00E0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              Reflection1DelayTime;                                     // 0x00E4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FBendSndModalFilterParams                   Reflection0Filter0;                                       // 0x00E8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FBendSndModalFilterParams                   Reflection0Filter1;                                       // 0x00F0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FBendSndModalFilterParams                   Reflection1Filter0;                                       // 0x00F8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FBendSndModalFilterParams                   Reflection1Filter1;                                       // 0x0100(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FBendSndSphericalPanParams                  DirectPathPan;                                            // 0x0108(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DirectPathGain;                                           // 0x0118(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DirectPathLfeGain;                                        // 0x011C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FBendSndSphericalPanParams                  Reflection0Pan;                                           // 0x0120(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              Reflection0Gain;                                          // 0x0130(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              Reflection0LfeGain;                                       // 0x0134(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FBendSndSphericalPanParams                  Reflection1Pan;                                           // 0x0138(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              Reflection1Gain;                                          // 0x0148(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              Reflection1LfeGain;                                       // 0x014C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
};

// ScriptStruct BendGame.BendCommunicationParameters
// 0x001C
struct FBendCommunicationParameters
{
	TWeakObjectPtr<class ABendPawn>                    DetectedPawn;                                             // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     LastKnownPosition;                                        // 0x0008(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AwarenessLevel;                                           // 0x0014(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EAIAwareState>                         AwareState;                                               // 0x0018(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ESemiAwareState>                       SemiAwareState;                                           // 0x0019(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ESemiAwareActionType>                  SemiAwareActionType;                                      // 0x001A(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1];                                       // 0x001B(0x0001) MISSED OFFSET
};

// ScriptStruct BendGame.BendBikeRepairInteractDetails
// 0x0018
struct FBendBikeRepairInteractDetails
{
	float                                              RepairTime;                                               // 0x0000(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	float                                              CurrentRepairTime;                                        // 0x0004(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	float                                              TimeCountToNextRepair;                                    // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	float                                              RepairRatePerScrap;                                       // 0x000C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	float                                              HealthRepairedPerScrap;                                   // 0x0010(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	int                                                RepairScrapCount;                                         // 0x0014(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
};

// ScriptStruct BendGame.BlendableBase
// 0x0008
struct FBlendableBase
{
	struct FName                                       Key;                                                      // 0x0000(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.BlendableScalar
// 0x0008 (0x0010 - 0x0008)
struct FBlendableScalar : public FBlendableBase
{
	float                                              Value;                                                    // 0x0008(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x000C(0x0004) MISSED OFFSET
};

// ScriptStruct BendGame.BlendableVector
// 0x0018 (0x0020 - 0x0008)
struct FBlendableVector : public FBlendableBase
{
	unsigned char                                      UnknownData00[0x8];                                       // 0x0008(0x0008) MISSED OFFSET
	struct FVector4                                    Value;                                                    // 0x0010(0x0010) (Edit, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.BuddyVOEvent
// 0x0010
struct FBuddyVOEvent
{
	TEnumAsByte<EBuddyVOEvent>                         eventType;                                                // 0x0000(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0001(0x0007) MISSED OFFSET
	struct FName                                       EventName;                                                // 0x0008(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
};

// ScriptStruct BendGame.BTWeightedMoveSpeedType
// 0x000C
struct FBTWeightedMoveSpeedType
{
	TEnumAsByte<EAIMoveSpeed>                          MoveSpeedType;                                            // 0x0000(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	int                                                Weight;                                                   // 0x0004(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               ZeroWeightWhenInjured;                                    // 0x0008(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0009(0x0003) MISSED OFFSET
};

// ScriptStruct BendGame.AimAssistDifficultySettings
// 0x0018
struct FAimAssistDifficultySettings
{
	class UBendAimAssistData*                          AimAssistData_Easy;                                       // 0x0000(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBendAimAssistData*                          AimAssistData_Normal;                                     // 0x0008(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBendAimAssistData*                          AimAssistData_Hard;                                       // 0x0010(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
};

// ScriptStruct BendGame.ZoomCamData
// 0x0024
struct FZoomCamData
{
	float                                              MinZoomPower;                                             // 0x0000(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxZoomPower;                                             // 0x0004(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SmoothZoomTime;                                           // 0x0008(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                NumberOfSteps;                                            // 0x000C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               LoopBackToMinZoomPower;                                   // 0x0010(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               LoopBackToMaxZoomPower;                                   // 0x0011(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0012(0x0002) MISSED OFFSET
	float                                              CameraSpeedAtMinZoom;                                     // 0x0014(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CameraSpeedAtMaxZoom;                                     // 0x0018(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x001C(0x0008) MISSED OFFSET
};

// ScriptStruct BendGame.BendPhotoModePostPreset
// 0x01B0
struct FBendPhotoModePostPreset
{
	bool                                               bOverride_DepthOfFieldFstop;                              // 0x0000(0x0001) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	float                                              DepthOfFieldFstop;                                        // 0x0004(0x0004) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	bool                                               bOverride_DepthOfFieldMethod;                             // 0x0008(0x0001) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	TEnumAsByte<EDepthOfFieldMethod>                   DepthOfFieldMethod;                                       // 0x0009(0x0001) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	bool                                               bOverride_CCBrightness;                                   // 0x000A(0x0001) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x000B(0x0001) MISSED OFFSET
	float                                              CCBrightness;                                             // 0x000C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	bool                                               bOverride_WhiteTemp;                                      // 0x0010(0x0001) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0011(0x0003) MISSED OFFSET
	float                                              WhiteTemp;                                                // 0x0014(0x0004) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	bool                                               bOverride_GrainIntensity;                                 // 0x0018(0x0001) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0019(0x0003) MISSED OFFSET
	float                                              GrainIntensity;                                           // 0x001C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	bool                                               bOverride_BendDepthGrade_NearTint;                        // 0x0020(0x0001) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData04[0x3];                                       // 0x0021(0x0003) MISSED OFFSET
	struct FLinearColor                                BendDepthGrade_NearTint;                                  // 0x0024(0x0010) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	bool                                               bOverride_BendDepthGrade_NearSaturation;                  // 0x0034(0x0001) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData05[0x3];                                       // 0x0035(0x0003) MISSED OFFSET
	struct FLinearColor                                BendDepthGrade_NearSaturation;                            // 0x0038(0x0010) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	bool                                               bOverride_BendDepthGrade_NearGamma;                       // 0x0048(0x0001) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData06[0x3];                                       // 0x0049(0x0003) MISSED OFFSET
	struct FLinearColor                                BendDepthGrade_NearGamma;                                 // 0x004C(0x0010) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	bool                                               bOverride_BendDepthGrade_FarTint;                         // 0x005C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData07[0x3];                                       // 0x005D(0x0003) MISSED OFFSET
	struct FLinearColor                                BendDepthGrade_FarTint;                                   // 0x0060(0x0010) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	bool                                               bOverride_BendDepthGrade_FarSaturation;                   // 0x0070(0x0001) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData08[0x3];                                       // 0x0071(0x0003) MISSED OFFSET
	struct FLinearColor                                BendDepthGrade_FarSaturation;                             // 0x0074(0x0010) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	bool                                               bOverride_BendDepthGrade_FarGamma;                        // 0x0084(0x0001) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData09[0x3];                                       // 0x0085(0x0003) MISSED OFFSET
	struct FLinearColor                                BendDepthGrade_FarGamma;                                  // 0x0088(0x0010) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	bool                                               bOverride_BendDepthGrade_TransitionPoint;                 // 0x0098(0x0001) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData10[0x3];                                       // 0x0099(0x0003) MISSED OFFSET
	float                                              BendDepthGrade_TransitionPoint;                           // 0x009C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	bool                                               bOverride_BendDepthGrade_TransitionSpread;                // 0x00A0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData11[0x3];                                       // 0x00A1(0x0003) MISSED OFFSET
	float                                              BendDepthGrade_TransitionSpread;                          // 0x00A4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	bool                                               bOverride_WhiteTint;                                      // 0x00A8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData12[0x3];                                       // 0x00A9(0x0003) MISSED OFFSET
	float                                              WhiteTint;                                                // 0x00AC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	bool                                               bOverride_CCSaturation;                                   // 0x00B0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData13[0x3];                                       // 0x00B1(0x0003) MISSED OFFSET
	float                                              CCSaturation;                                             // 0x00B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	bool                                               bOverride_CCContrast;                                     // 0x00B8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData14[0x3];                                       // 0x00B9(0x0003) MISSED OFFSET
	float                                              CCContrast;                                               // 0x00BC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	bool                                               bOverride_ColorContrast;                                  // 0x00C0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData15[0x3];                                       // 0x00C1(0x0003) MISSED OFFSET
	struct FVector                                     ColorContrast;                                            // 0x00C4(0x000C) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	bool                                               bOverride_CVibrance;                                      // 0x00D0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData16[0x3];                                       // 0x00D1(0x0003) MISSED OFFSET
	float                                              CVibrance;                                                // 0x00D4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	bool                                               bOverride_ColorGain;                                      // 0x00D8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData17[0x3];                                       // 0x00D9(0x0003) MISSED OFFSET
	struct FVector                                     ColorGain;                                                // 0x00DC(0x000C) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	bool                                               bOverride_ColorOffset;                                    // 0x00E8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData18[0x3];                                       // 0x00E9(0x0003) MISSED OFFSET
	struct FVector                                     ColorOffset;                                              // 0x00EC(0x000C) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	bool                                               bOverride_ColorGamma;                                     // 0x00F8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData19[0x3];                                       // 0x00F9(0x0003) MISSED OFFSET
	struct FVector                                     ColorGamma;                                               // 0x00FC(0x000C) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	bool                                               bOverride_ScreenOverlay_VignetteStrength;                 // 0x0108(0x0001) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData20[0x3];                                       // 0x0109(0x0003) MISSED OFFSET
	float                                              ScreenOverlay_VignetteStrength;                           // 0x010C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	bool                                               bOverride_ScreenOverlay_VignetteFalloff;                  // 0x0110(0x0001) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData21[0x3];                                       // 0x0111(0x0003) MISSED OFFSET
	float                                              ScreenOverlay_VignetteFalloff;                            // 0x0114(0x0004) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	bool                                               bOverride_BendBloomScale;                                 // 0x0118(0x0001) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData22[0x3];                                       // 0x0119(0x0003) MISSED OFFSET
	float                                              BendBloomScale;                                           // 0x011C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	bool                                               bOverride_BendBloomScale2;                                // 0x0120(0x0001) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData23[0x3];                                       // 0x0121(0x0003) MISSED OFFSET
	float                                              BendBloomScale2;                                          // 0x0124(0x0004) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	bool                                               bOverride_BendBloomInputMinimum;                          // 0x0128(0x0001) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData24[0x3];                                       // 0x0129(0x0003) MISSED OFFSET
	float                                              BendBloomInputMinimum;                                    // 0x012C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	bool                                               bOverride_BendBloomInputMaximum;                          // 0x0130(0x0001) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData25[0x3];                                       // 0x0131(0x0003) MISSED OFFSET
	float                                              BendBloomInputMaximum;                                    // 0x0134(0x0004) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	bool                                               bOverride_BendBloomInput2Minimum;                         // 0x0138(0x0001) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData26[0x3];                                       // 0x0139(0x0003) MISSED OFFSET
	float                                              BendBloomInput2Minimum;                                   // 0x013C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	bool                                               bOverride_BendBloomInput2Maximum;                         // 0x0140(0x0001) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData27[0x3];                                       // 0x0141(0x0003) MISSED OFFSET
	float                                              BendBloomInput2Maximum;                                   // 0x0144(0x0004) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	bool                                               bOverride_BendBloom1Size;                                 // 0x0148(0x0001) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData28[0x3];                                       // 0x0149(0x0003) MISSED OFFSET
	struct FVector2D                                   BendBloom1Size;                                           // 0x014C(0x0008) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	bool                                               bOverride_BendBloom2Size;                                 // 0x0154(0x0001) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData29[0x3];                                       // 0x0155(0x0003) MISSED OFFSET
	struct FVector2D                                   BendBloom2Size;                                           // 0x0158(0x0008) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	bool                                               bOverride_BendBloomTonemapMaximum;                        // 0x0160(0x0001) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData30[0x3];                                       // 0x0161(0x0003) MISSED OFFSET
	float                                              BendBloomTonemapMaximum;                                  // 0x0164(0x0004) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	bool                                               bOverride_BendBloomTonemap2Maximum;                       // 0x0168(0x0001) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData31[0x3];                                       // 0x0169(0x0003) MISSED OFFSET
	float                                              BendBloomTonemap2Maximum;                                 // 0x016C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	bool                                               bOverride_BendBloom1Color;                                // 0x0170(0x0001) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData32[0x3];                                       // 0x0171(0x0003) MISSED OFFSET
	struct FLinearColor                                BendBloom1Color;                                          // 0x0174(0x0010) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	bool                                               bOverride_BendBloom2Color;                                // 0x0184(0x0001) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData33[0x3];                                       // 0x0185(0x0003) MISSED OFFSET
	struct FLinearColor                                BendBloom2Color;                                          // 0x0188(0x0010) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	struct FName                                       PresetName;                                               // 0x0198(0x0008) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	float                                              FocalDist;                                                // 0x01A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	float                                              Contrast;                                                 // 0x01A4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	float                                              Brightness;                                               // 0x01A8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	bool                                               IsUserCreated;                                            // 0x01AC(0x0001) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData34[0x3];                                       // 0x01AD(0x0003) MISSED OFFSET
};

// ScriptStruct BendGame.BendCharacterLocomotionParams
// 0x0018
struct FBendCharacterLocomotionParams
{
	float                                              SmallTurnAngle;                                           // 0x0000(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              LargeTurnAngle;                                           // 0x0004(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              SpeedForLargeTurnAngle;                                   // 0x0008(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              TurnAngleForForceStop;                                    // 0x000C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              TurnAngleForForceStopMinusBuffer;                         // 0x0010(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bSlowDownForLargeTurns : 1;                               // 0x0014(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0015(0x0003) MISSED OFFSET
};

// ScriptStruct BendGame.BendCharacterCollisionShapeData
// 0x0010
struct FBendCharacterCollisionShapeData
{
	TEnumAsByte<EBendCharacterCollisionShapeId>        Id;                                                       // 0x0000(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	float                                              CapsuleRadius;                                            // 0x0004(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              CapsuleHalfHeight;                                        // 0x0008(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              SkeletalMeshComponentOffsetHeight;                        // 0x000C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.BendCharacterMovementTurnRateScaleVsStrafeAngleCurve
// 0x0088
struct FBendCharacterMovementTurnRateScaleVsStrafeAngleCurve
{
	float                                              TopSpeed;                                                 // 0x0000(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0004(0x0004) MISSED OFFSET
	struct FRuntimeFloatCurve                          Curve;                                                    // 0x0008(0x0080) (Edit)
};

// ScriptStruct BendGame.BendCharacterMovementTurnRateScaleVsStrafeAngleCurveList
// 0x0030
struct FBendCharacterMovementTurnRateScaleVsStrafeAngleCurveList
{
	TArray<struct FBendCharacterMovementTurnRateScaleVsStrafeAngleCurve> Upright;                                                  // 0x0000(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FBendCharacterMovementTurnRateScaleVsStrafeAngleCurve> Crouching;                                                // 0x0010(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FBendCharacterMovementTurnRateScaleVsStrafeAngleCurve> Aiming;                                                   // 0x0020(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
};

// ScriptStruct BendGame.BendCharacterTurnAnimParams
// 0x0030
struct FBendCharacterTurnAnimParams
{
	TEnumAsByte<EBendCharacterTurnType>                TurnType;                                                 // 0x0000(0x0001) (Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0001(0x0007) MISSED OFFSET
	struct FName                                       TurnAnchor1;                                              // 0x0008(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FName                                       TurnAnchor2;                                              // 0x0010(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FName                                       TurnAnimationCurveName;                                   // 0x0018(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FName                                       TurnEarlyOutAnimationCurveName;                           // 0x0020(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EBendCharacterTurnAngleSnapType>       TurnAngleSnapType;                                        // 0x0028(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0029(0x0007) MISSED OFFSET
};

// ScriptStruct BendGame.BendTapRequestDetector
// 0x0010
struct FBendTapRequestDetector
{
	unsigned char                                      UnknownData00[0x4];                                       // 0x0000(0x0004) MISSED OFFSET
	float                                              MaxHoldTimeForTap;                                        // 0x0004(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxLingerTimeForDetectedTapSinceRequestFirstDetected;     // 0x0008(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x000C(0x0004) MISSED OFFSET
};

// ScriptStruct BendGame.FindClimbingSurfaceResult
// 0x0098
struct FFindClimbingSurfaceResult
{
	unsigned char                                      bBlockingHit : 1;                                         // 0x0000(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst)
	unsigned char                                      bLineTrace : 1;                                           // 0x0000(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	float                                              ClimbingSurfaceDist;                                      // 0x0004(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	float                                              LineDist;                                                 // 0x0008(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x000C(0x0004) MISSED OFFSET
	struct FHitResult                                  HitResult;                                                // 0x0010(0x0088) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst)
};

// ScriptStruct BendGame.BikeSpotSettings
// 0x0018
struct FBikeSpotSettings
{
	TArray<class ACameraActor*>                        LinkedCameras;                                            // 0x0000(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	float                                              intensity;                                                // 0x0010(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              attenuation;                                              // 0x0014(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.BikeEmissiveSettings
// 0x0018
struct FBikeEmissiveSettings
{
	TArray<class ACameraActor*>                        LinkedCameras;                                            // 0x0000(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	float                                              EmissiveIntensity;                                        // 0x0010(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0014(0x0004) MISSED OFFSET
};

// ScriptStruct BendGame.BikeTaillightEmissiveSettings
// 0x0020
struct FBikeTaillightEmissiveSettings
{
	TArray<class ACameraActor*>                        LinkedCameras;                                            // 0x0000(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FLinearColor                                EmissiveColor;                                            // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.BikeVolumetricSettings
// 0x0038
struct FBikeVolumetricSettings
{
	TArray<class ACameraActor*>                        LinkedCameras;                                            // 0x0000(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FLinearColor                                VolumeColor;                                              // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              VolumeIntensity;                                          // 0x0020(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                CenterVolumeColor;                                        // 0x0024(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CenterVolumeIntensity;                                    // 0x0034(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.BikeHeadlightOffset
// 0x00C0
struct FBikeHeadlightOffset
{
	TArray<class UObject*>                             MeshRefs;                                                 // 0x0000(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FTransform                                  HeadlightOffset;                                          // 0x0010(0x0030) (Edit, BlueprintVisible, IsPlainOldData)
	struct FTransform                                  VolumeOffset;                                             // 0x0040(0x0030) (Edit, BlueprintVisible, IsPlainOldData)
	float                                              VolumeNearStart;                                          // 0x0070(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xC];                                       // 0x0074(0x000C) MISSED OFFSET
	struct FTransform                                  CenterVolumeOffset;                                       // 0x0080(0x0030) (Edit, BlueprintVisible, IsPlainOldData)
	float                                              CenterVolumeNearStart;                                    // 0x00B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ConeAngle;                                                // 0x00B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                MaterialID;                                               // 0x00B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00BC(0x0004) MISSED OFFSET
};

// ScriptStruct BendGame.BikeTaillightOffset
// 0x0018
struct FBikeTaillightOffset
{
	TArray<class USkeletalMesh*>                       MeshRefs;                                                 // 0x0000(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	int                                                MaterialID;                                               // 0x0010(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0014(0x0004) MISSED OFFSET
};

// ScriptStruct BendGame.EmergencyLightSettings
// 0x0048
struct FEmergencyLightSettings
{
	TEnumAsByte<EEmergencyLightPresets>                FlickerPreset;                                            // 0x0000(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0001(0x0007) MISSED OFFSET
	class UCurveFloat*                                 FlickerCurve;                                             // 0x0008(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                LightColor1;                                              // 0x0010(0x0010) (Edit, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                LightColor2;                                              // 0x0020(0x0010) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              BaseIntensity;                                            // 0x0030(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              FlickerIntensity;                                         // 0x0034(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              RotationRate;                                             // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector                                     RotationAxis;                                             // 0x003C(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.CinFlickeringLightSettings
// 0x0068
struct FCinFlickeringLightSettings
{
	TEnumAsByte<ECinFlickeringLightPresets>            FlickerPreset;                                            // 0x0000(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0001(0x0007) MISSED OFFSET
	class UCurveFloat*                                 FlickerCurve;                                             // 0x0008(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                LightColor1;                                              // 0x0010(0x0010) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              LightTemperature1;                                        // 0x0020(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                LightColor2;                                              // 0x0024(0x0010) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              LightTemperature2;                                        // 0x0034(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                LightColor3;                                              // 0x0038(0x0010) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              LightTemperature3;                                        // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              BaseIntensity;                                            // 0x004C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              FlickerIntensity;                                         // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              RotationRate;                                             // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector                                     RotationAxis;                                             // 0x0058(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0064(0x0004) MISSED OFFSET
};

// ScriptStruct BendGame.DumpTruckSettings
// 0x0130
struct FDumpTruckSettings
{
	TArray<class UObject*>                             MeshRefs;                                                 // 0x0000(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FTransform                                  HeadlightLeftOffset;                                      // 0x0010(0x0030) (Edit, BlueprintVisible, IsPlainOldData)
	struct FTransform                                  HeadlightRightOffset;                                     // 0x0040(0x0030) (Edit, BlueprintVisible, IsPlainOldData)
	struct FTransform                                  HeadlightLeftVolOffset;                                   // 0x0070(0x0030) (Edit, BlueprintVisible, IsPlainOldData)
	struct FTransform                                  HeadlightRightVolOffset;                                  // 0x00A0(0x0030) (Edit, BlueprintVisible, IsPlainOldData)
	struct FVector                                     HeadlightLeftPointOffset;                                 // 0x00D0(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     HeadlightRightPointOffset;                                // 0x00DC(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     TailLightLeftOuter;                                       // 0x00E8(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     TailLightLeftInner;                                       // 0x00F4(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     TailLightRightOuter;                                      // 0x0100(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     TailLightRightInner;                                      // 0x010C(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              HeadLightConeAngle;                                       // 0x0118(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                HeadLightMaterialID;                                      // 0x011C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                TailLightMaterialID;                                      // 0x0120(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                OverheadLightMaterialID;                                  // 0x0124(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                DashboardMaterialID;                                      // 0x0128(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x012C(0x0004) MISSED OFFSET
};

// ScriptStruct BendGame.DumpTruckSpotSettings
// 0x0018
struct FDumpTruckSpotSettings
{
	TArray<class ACameraActor*>                        LinkedCameras;                                            // 0x0000(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	float                                              intensity;                                                // 0x0010(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              attenuation;                                              // 0x0014(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.DumpTruckEmissiveSettings
// 0x0020
struct FDumpTruckEmissiveSettings
{
	TArray<class ACameraActor*>                        LinkedCameras;                                            // 0x0000(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FLinearColor                                EmissiveColor;                                            // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.DumpTruckVolSettings
// 0x0028
struct FDumpTruckVolSettings
{
	TArray<class ACameraActor*>                        LinkedCameras;                                            // 0x0000(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	float                                              intensity;                                                // 0x0010(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                Color;                                                    // 0x0014(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0024(0x0004) MISSED OFFSET
};

// ScriptStruct BendGame.HelicopterSettings
// 0x01E0
struct FHelicopterSettings
{
	TArray<class UObject*>                             MeshRefs;                                                 // 0x0000(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FTransform                                  HeadlightOffset;                                          // 0x0010(0x0030) (Edit, BlueprintVisible, IsPlainOldData)
	struct FVector                                     HeadlightPointOffset;                                     // 0x0040(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x004C(0x0004) MISSED OFFSET
	struct FTransform                                  VolumeOffset;                                             // 0x0050(0x0030) (Edit, BlueprintVisible, IsPlainOldData)
	float                                              VolumeNearStart;                                          // 0x0080(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0xC];                                       // 0x0084(0x000C) MISSED OFFSET
	struct FTransform                                  CenterVolumeOffset;                                       // 0x0090(0x0030) (Edit, BlueprintVisible, IsPlainOldData)
	float                                              CenterVolumeNearStart;                                    // 0x00C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ConeAngle;                                                // 0x00C4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x00C8(0x0008) MISSED OFFSET
	struct FTransform                                  SideLightGeoOffsetLeft;                                   // 0x00D0(0x0030) (Edit, BlueprintVisible, IsPlainOldData)
	struct FTransform                                  SideLightGeoOffsetRight;                                  // 0x0100(0x0030) (Edit, BlueprintVisible, IsPlainOldData)
	struct FVector                                     SideLightOffset;                                          // 0x0130(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x013C(0x0004) MISSED OFFSET
	struct FTransform                                  TailLightGeoOffsetLeft;                                   // 0x0140(0x0030) (Edit, BlueprintVisible, IsPlainOldData)
	struct FTransform                                  TailLightGeoOffsetRight;                                  // 0x0170(0x0030) (Edit, BlueprintVisible, IsPlainOldData)
	struct FVector                                     TailLightOffset;                                          // 0x01A0(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x01AC(0x0004) MISSED OFFSET
	struct FTransform                                  OverheadLightOffset;                                      // 0x01B0(0x0030) (Edit, BlueprintVisible, IsPlainOldData)
};

// ScriptStruct BendGame.HelicopterSpotSettings
// 0x0020
struct FHelicopterSpotSettings
{
	TArray<class ACameraActor*>                        LinkedCameras;                                            // 0x0000(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	float                                              SpotIntensity;                                            // 0x0010(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SpotAttenuation;                                          // 0x0014(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PointIntensity;                                           // 0x0018(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PointAttenuation;                                         // 0x001C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.HelicopterVolumetricSettings
// 0x0040
struct FHelicopterVolumetricSettings
{
	TArray<class ACameraActor*>                        LinkedCameras;                                            // 0x0000(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FLinearColor                                VolumeColor;                                              // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              VolumeIntensity;                                          // 0x0020(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              VolumeDensity;                                            // 0x0024(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                CenterVolumeColor;                                        // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CenterVolumeIntensity;                                    // 0x0038(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CenterVolumeDensity;                                      // 0x003C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.HelicopterPointEmissiveSettings
// 0x0058
struct FHelicopterPointEmissiveSettings
{
	TArray<class ACameraActor*>                        LinkedCameras;                                            // 0x0000(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FLinearColor                                PointLeftColor;                                           // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                PointRightColor;                                          // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PointIntensity;                                           // 0x0030(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PointAttenuation;                                         // 0x0034(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                EmissiveLeftColor;                                        // 0x0038(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                EmissiveRightColor;                                       // 0x0048(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.HelicopterOverheadSpotSettings
// 0x0018
struct FHelicopterOverheadSpotSettings
{
	TArray<class ACameraActor*>                        LinkedCameras;                                            // 0x0000(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	float                                              SpotIntensity;                                            // 0x0010(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SpotAttenuation;                                          // 0x0014(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.ClothFXTypeData
// 0x0040
struct FClothFXTypeData
{
	struct FName                                       BlueprintFXName;                                          // 0x0000(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class USoundCue*                                   SoundFX;                                                  // 0x0008(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UParticleSystem*                             ParticleFX;                                               // 0x0010(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FDecalData                                  DecalFX;                                                  // 0x0018(0x0028) (Edit, DisableEditOnInstance)
};

// ScriptStruct BendGame.ConversationLineDetails
// 0x0018
struct FConversationLineDetails
{
	struct FName                                       VOlineString;                                             // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               ManuallySpecifySpeakingPosition;                          // 0x0008(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0009(0x0003) MISSED OFFSET
	int                                                SpeakingPosition;                                         // 0x000C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               UseRadioFutz;                                             // 0x0010(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ERadioType>                            RadioType;                                                // 0x0011(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x6];                                       // 0x0012(0x0006) MISSED OFFSET
};

// ScriptStruct BendGame.ConversationLineArray
// 0x0010
struct FConversationLineArray
{
	TArray<struct FConversationLineDetails>            Conversations;                                            // 0x0000(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
};

// ScriptStruct BendGame.ConversationLineIDAndIndex
// 0x0018
struct FConversationLineIDAndIndex
{
	int                                                Id;                                                       // 0x0000(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                Index;                                                    // 0x0004(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FConversationLineArray                      Conversation;                                             // 0x0008(0x0010) (Edit, BlueprintVisible)
};

// ScriptStruct BendGame.VocalConversationData
// 0x0050
struct FVocalConversationData
{
	class ABendPawn*                                   WhoIsSpeaking;                                            // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       SoundFXName;                                              // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class USoundClass*                                 SoundClass;                                               // 0x0010(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class AActor*                                      ObjectSpeaking;                                           // 0x0018(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               AutoSetObjectSpeaking;                                    // 0x0020(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               PlayThroughSpeakerController;                             // 0x0021(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               PlayOverRadio;                                            // 0x0022(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<ERadioType>                            RadioType;                                                // 0x0023(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               DisableLipSync;                                           // 0x0024(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               PlayWhenDead;                                             // 0x0025(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0026(0x0002) MISSED OFFSET
	float                                              MinConPauseBetweenLines;                                  // 0x0028(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxConPauseBetweenLines;                                  // 0x002C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x20];                                      // 0x0030(0x0020) MISSED OFFSET
};

// ScriptStruct BendGame.BendDynamicConversationDialog
// 0x0018
struct FBendDynamicConversationDialog
{
	class UBendDynamicConversationCharacter*           Character;                                                // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       SoundFXName;                                              // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class USoundClass*                                 SoundClass;                                               // 0x0010(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.BendDynamicConversationParameters
// 0x0018
struct FBendDynamicConversationParameters
{
	TArray<struct FBendDynamicConversationDialog>      Dialogs;                                                  // 0x0000(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	float                                              MaxPauseBetweenLines;                                     // 0x0010(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MinPauseBetweenLines;                                     // 0x0014(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.BendCrowdAnimTransitionSetup
// 0x0018
struct FBendCrowdAnimTransitionSetup
{
	TEnumAsByte<EBendCrowdControllerState>             ControllerStateId;                                        // 0x0000(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<EBendCrowdAnimState>                   TargetAnimStateId;                                        // 0x0001(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0002(0x0002) MISSED OFFSET
	float                                              TransitionTriggerTime;                                    // 0x0004(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TransitionTriggerTimeMaxRandomOffset;                     // 0x0008(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<EBendCrowdAnimTimeType>                TransitionTriggerTimeType;                                // 0x000C(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x000D(0x0003) MISSED OFFSET
	float                                              BlendTime;                                                // 0x0010(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      bIsAutoTransition : 1;                                    // 0x0014(0x0001) (Edit, Transient, EditConst)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0015(0x0003) MISSED OFFSET
};

// ScriptStruct BendGame.BendCrowdAnimDisabledTransitionSetup
// 0x0001
struct FBendCrowdAnimDisabledTransitionSetup
{
	TEnumAsByte<EBendCrowdControllerState>             ControllerStateId;                                        // 0x0000(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
};

// ScriptStruct BendGame.BendCrowdAnimStateSetup_AnimAssetEntry
// 0x0010
struct FBendCrowdAnimStateSetup_AnimAssetEntry
{
	class UAnimationAsset*                             AnimAsset;                                                // 0x0000(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                Weight;                                                   // 0x0008(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x000C(0x0004) MISSED OFFSET
};

// ScriptStruct BendGame.BendCrowdAnimStateSetup
// 0x0060
struct FBendCrowdAnimStateSetup
{
	TEnumAsByte<EBendCrowdAnimState>                   AnimStateId;                                              // 0x0000(0x0001) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0001(0x0007) MISSED OFFSET
	TArray<class UAnimationAsset*>                     AnimAssetList;                                            // 0x0008(0x0010) (ZeroConstructor)
	TArray<struct FBendCrowdAnimStateSetup_AnimAssetEntry> AnimAssetList_NEW;                                        // 0x0018(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      bIsLooping : 1;                                           // 0x0028(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      bIsSingleFrame : 1;                                       // 0x0028(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      bIsAnchored : 1;                                          // 0x0028(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      bCanTurn : 1;                                             // 0x0028(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0029(0x0003) MISSED OFFSET
	float                                              PlayRate;                                                 // 0x002C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PlayRateRandomVariationMin;                               // 0x0030(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PlayRateRandomVariationMax;                               // 0x0034(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PlayRateRandomVariationCurveBroadness;                    // 0x0038(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x003C(0x0004) MISSED OFFSET
	TArray<float>                                      PhaseOffsetList;                                          // 0x0040(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	class UBendCrowdAnimTransitionGroupSetup*          TransitionGroupSetup;                                     // 0x0050(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      CollisionShapeType;                                       // 0x0058(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
};

// ScriptStruct BendGame.AudioActorComponentCache
// 0x0018
struct FAudioActorComponentCache
{
	unsigned char                                      UnknownData00[0x8];                                       // 0x0000(0x0008) MISSED OFFSET
	TArray<class UActorComponent*>                     FreeList;                                                 // 0x0008(0x0010) (ExportObject, ZeroConstructor, Transient)
};

// ScriptStruct BendGame.MiniMapLocationComponentCache
// 0x0000 (0x0018 - 0x0018)
struct FMiniMapLocationComponentCache : public FAudioActorComponentCache
{

};

// ScriptStruct BendGame.BendCrowdBehaviorProperties
// 0x0010
struct FBendCrowdBehaviorProperties
{
	float                                              StartHibernateTimeOfDay;                                  // 0x0000(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              StopHibernateTimeOfDay;                                   // 0x0004(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TimeBetweenShiftPositionAtPOIForSingleGroupMember;        // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bIgnoreNavMesh : 1;                                       // 0x000C(0x0001) (Edit)
	unsigned char                                      bEnableClimbing_Assisted : 1;                             // 0x000C(0x0001) (Edit)
	unsigned char                                      bEnableClimbing_Unassisted : 1;                           // 0x000C(0x0001) (Edit)
	unsigned char                                      bCanClimbOnlyAcrossNavLinks : 1;                          // 0x000C(0x0001) (Edit)
	unsigned char                                      bCanClimbWhenPursuingTargetWithoutPath_IfNotOtherwise : 1;// 0x000C(0x0001) (Edit)
	unsigned char                                      bCanClimbDynamicObjects_IfNotOtherwise : 1;               // 0x000C(0x0001) (Edit)
	unsigned char                                      bCanVisualAwarenessPropagate : 1;                         // 0x000C(0x0001) (Edit)
	unsigned char                                      bForceAwareAndFrenzied : 1;                               // 0x000C(0x0001) (Edit)
	unsigned char                                      bDisableAmbientWanderBehavior : 1;                        // 0x000D(0x0001) (Edit)
	unsigned char                                      bDisableSpreadingOutWhenPursuingPrey : 1;                 // 0x000D(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x000E(0x0002) MISSED OFFSET
};

// ScriptStruct BendGame.BendCrowdOccupiableAreaMap_Coord
// 0x0004
struct FBendCrowdOccupiableAreaMap_Coord
{
	uint16_t                                           X;                                                        // 0x0000(0x0002) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	uint16_t                                           Y;                                                        // 0x0002(0x0002) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
};

// ScriptStruct BendGame.BendCrowdOccupiableAreaMap_CompressedRotationDegrees
// 0x0001
struct FBendCrowdOccupiableAreaMap_CompressedRotationDegrees
{
	unsigned char                                      Val;                                                      // 0x0000(0x0001) (ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.BendCrowdOccupiableAreaMap
// 0x0080
struct FBendCrowdOccupiableAreaMap
{
	struct FTransform                                  OwnerTransform_DuringGeneration;                          // 0x0000(0x0030) (IsPlainOldData)
	struct FBox                                        Bounds;                                                   // 0x0030(0x001C) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x004C(0x0004) MISSED OFFSET
	TArray<struct FBendCrowdOccupiableAreaMap_Coord>   OccupiableCells;                                          // 0x0050(0x0010) (Edit, ZeroConstructor, EditConst)
	TArray<struct FBendCrowdOccupiableAreaMap_CompressedRotationDegrees> YawList;                                                  // 0x0060(0x0010) (ZeroConstructor)
	float                                              GridCellWidth;                                            // 0x0070(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                NumLocationsPerDimensionPerCell;                          // 0x0074(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bIsValid : 1;                                             // 0x0078(0x0001)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0079(0x0007) MISSED OFFSET
};

// ScriptStruct BendGame.BendCrowdLocationDistribution
// 0x00B0
struct FBendCrowdLocationDistribution
{
	struct FBendCrowdOccupiableAreaMap                 OccupiableAreaMap;                                        // 0x0000(0x0080) (Edit, EditConst)
	unsigned char                                      UnknownData00[0x20];                                      // 0x0080(0x0020) MISSED OFFSET
	unsigned char                                      Version;                                                  // 0x00A0(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0xF];                                       // 0x00A1(0x000F) MISSED OFFSET
};

// ScriptStruct BendGame.BendCrowdDistribution
// 0x0100
struct FBendCrowdDistribution
{
	struct FBendCrowdLocationDistribution              Locations;                                                // 0x0000(0x00B0) (Edit, EditConst)
	unsigned char                                      UnknownData00[0x50];                                      // 0x00B0(0x0050) MISSED OFFSET
};

// ScriptStruct BendGame.BendNeedsData
// 0x000C
struct FBendNeedsData
{
	unsigned char                                      UnknownData00[0xC];                                       // 0x0000(0x000C) MISSED OFFSET
};

// ScriptStruct BendGame.BendCrowdAwarenessZoneInstance
// 0x0090
struct FBendCrowdAwarenessZoneInstance
{
	class UClass*                                      AwarenessZoneData;                                        // 0x0000(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x88];                                      // 0x0008(0x0088) MISSED OFFSET
};

// ScriptStruct BendGame.BendCrowdBehaviorEntry
// 0x0008
struct FBendCrowdBehaviorEntry
{
	TEnumAsByte<EBendCrowdBehavior>                    behavior;                                                 // 0x0000(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	float                                              Chance;                                                   // 0x0004(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.CrowdLodSetup
// 0x0028
struct FCrowdLodSetup
{
	int                                                MaxCanAllocate;                                           // 0x0000(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                MinMustAllocate;                                          // 0x0004(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              GpuFrameTimeForDropAllocations_RangeStart;                // 0x0008(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              GpuFrameTimeForDropAllocations_RangeEnd;                  // 0x000C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      bCastShadow : 1;                                          // 0x0010(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      bPerBoneMotionBlur : 1;                                   // 0x0010(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x17];                                      // 0x0011(0x0017) MISSED OFFSET
};

// ScriptStruct BendGame.CrowdSharedParticle
// 0x0010
struct FCrowdSharedParticle
{
	class UParticleSystem*                             Particle;                                                 // 0x0000(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<ECrowdSharedEffectTrigger>             Trigger;                                                  // 0x0008(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0009(0x0007) MISSED OFFSET
};

// ScriptStruct BendGame.DifficultyFloatMultiplier
// 0x0018
struct FDifficultyFloatMultiplier
{
	float                                              Easy;                                                     // 0x0000(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              Normal;                                                   // 0x0004(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              Hard;                                                     // 0x0008(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              Survival;                                                 // 0x000C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              Hard2;                                                    // 0x0010(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              Survival2;                                                // 0x0014(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.PlayerDamageDealtMultiplier
// 0x0018
struct FPlayerDamageDealtMultiplier
{
	struct FDifficultyFloatMultiplier                  Damage;                                                   // 0x0000(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
};

// ScriptStruct BendGame.PlayerDamageRecievedMultiplier
// 0x0048
struct FPlayerDamageRecievedMultiplier
{
	struct FDifficultyFloatMultiplier                  MeleeWeaponDamage;                                        // 0x0000(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FDifficultyFloatMultiplier                  AnimalDamage;                                             // 0x0018(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FDifficultyFloatMultiplier                  RangedWeaponDamage;                                       // 0x0030(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly)
};

// ScriptStruct BendGame.PlayerAmmoPickupMultiplier
// 0x0018
struct FPlayerAmmoPickupMultiplier
{
	struct FDifficultyFloatMultiplier                  AmmoPickup;                                               // 0x0000(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
};

// ScriptStruct BendGame.AimAssistSettings
// 0x0018
struct FAimAssistSettings
{
	bool                                               AimSnap;                                                  // 0x0000(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               AimSnapProfileChangeAllowed;                              // 0x0001(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               AimLock;                                                  // 0x0002(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               AimLockProfileChangeAllowed;                              // 0x0003(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               AimFriction;                                              // 0x0004(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               AimFrictionProfileChangeAllowed;                          // 0x0005(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0006(0x0002) MISSED OFFSET
	float                                              AimAssistMaxAngle;                                        // 0x0008(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AimAssistMaxRange;                                        // 0x000C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              BulletMagnetismPullDist;                                  // 0x0010(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              BulletMagnetismDistLimit;                                 // 0x0014(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
};

// ScriptStruct BendGame.AimAssistGlobalSettings
// 0x0060
struct FAimAssistGlobalSettings
{
	struct FAimAssistSettings                          Easy;                                                     // 0x0000(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FAimAssistSettings                          Normal;                                                   // 0x0018(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FAimAssistSettings                          Hard;                                                     // 0x0030(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FAimAssistSettings                          Survival;                                                 // 0x0048(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
};

// ScriptStruct BendGame.FuelConsumptionMultiplier
// 0x0018
struct FFuelConsumptionMultiplier
{
	struct FDifficultyFloatMultiplier                  FuelConsumption;                                          // 0x0000(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
};

// ScriptStruct BendGame.NeroInjectorMultiplier
// 0x0048
struct FNeroInjectorMultiplier
{
	struct FDifficultyFloatMultiplier                  Stamina;                                                  // 0x0000(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FDifficultyFloatMultiplier                  Health;                                                   // 0x0018(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FDifficultyFloatMultiplier                  Focus;                                                    // 0x0030(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
};

// ScriptStruct BendGame.ExperienceMultiplier
// 0x0018
struct FExperienceMultiplier
{
	struct FDifficultyFloatMultiplier                  Experience;                                               // 0x0000(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
};

// ScriptStruct BendGame.ClimbAnimData
// 0x0110
struct FClimbAnimData
{
	bool                                               UseDefaultClimbAnim;                                      // 0x0000(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0001(0x0007) MISSED OFFSET
	struct FBendAnimSequenceData                       DefaultAnimSequence;                                      // 0x0008(0x0018) (Deprecated)
	struct FBendAnimSequenceData                       IdleAnimSequence;                                         // 0x0020(0x0018) (Deprecated)
	struct FBendAnimSequenceData                       RunAnimSequence;                                          // 0x0038(0x0018) (Deprecated)
	struct FBendAnimSequenceData                       SprintAnimSequence;                                       // 0x0050(0x0018) (Deprecated)
	struct FBendAnimSequenceData                       CrouchAnimSequence;                                       // 0x0068(0x0018) (Deprecated)
	struct FBendGenericAnimData                        DefaultAnimData;                                          // 0x0080(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FBendGenericAnimData                        IdleAnimData;                                             // 0x0098(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FBendGenericAnimData                        RunAnimData;                                              // 0x00B0(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FBendGenericAnimData                        SprintAnimData;                                           // 0x00C8(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FBendGenericAnimData                        CrouchAnimData;                                           // 0x00E0(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FBendGenericAnimData                        ExitAnimData;                                             // 0x00F8(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
};

// ScriptStruct BendGame.ClimbAnimSeparator
// 0x0220
struct FClimbAnimSeparator
{
	struct FClimbAnimData                              Climb;                                                    // 0x0000(0x0110) (Edit, BlueprintVisible)
	struct FClimbAnimData                              Vault;                                                    // 0x0110(0x0110) (Edit, BlueprintVisible)
};

// ScriptStruct BendGame.InAirClimbAnimData
// 0x0030
struct FInAirClimbAnimData
{
	struct FBendGenericAnimData                        AnimData;                                                 // 0x0000(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FBendGenericAnimData                        ExitAnimData;                                             // 0x0018(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
};

// ScriptStruct BendGame.InAirClimbAnimSeparator
// 0x0060
struct FInAirClimbAnimSeparator
{
	struct FInAirClimbAnimData                         Climb;                                                    // 0x0000(0x0030) (Edit, BlueprintVisible)
	struct FInAirClimbAnimData                         Vault;                                                    // 0x0030(0x0030) (Edit, BlueprintVisible)
};

// ScriptStruct BendGame.ClimbAnimSelectionData
// 0x000C
struct FClimbAnimSelectionData
{
	unsigned char                                      UnknownData00[0xC];                                       // 0x0000(0x000C) MISSED OFFSET
};

// ScriptStruct BendGame.JobMapDetails
// 0x0020
struct FJobMapDetails
{
	struct FName                                       MapName;                                                  // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     MapLocation;                                              // 0x0008(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DistanceToLoad;                                           // 0x0014(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EJobLevelLoadRequestType>              LoadRequest;                                              // 0x0018(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IsLoaded;                                                 // 0x0019(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               ShouldStayLoadedUntilLeftArea;                            // 0x001A(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x5];                                       // 0x001B(0x0005) MISSED OFFSET
};

// ScriptStruct BendGame.BendJobData
// 0x0157 (0x0158 - 0x0001)
struct FBendJobData : public FTableRowBase
{
	TEnumAsByte<EMissionCategories>                    JobsAct;                                                  // 0x0000(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EStoryLines>                           PrimaryStoryLine;                                         // 0x0001(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x0002(0x0006) MISSED OFFSET
	TArray<TEnumAsByte<EStoryLines>>                   StoryLines;                                               // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TEnumAsByte<EJobTypes>                             JobsType;                                                 // 0x0018(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EObjectiveCategories>                  JobCategory;                                              // 0x0019(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x6];                                       // 0x001A(0x0006) MISSED OFFSET
	TArray<TEnumAsByte<EMissionIDs>>                   PreRequisiteMissions;                                     // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<class UJobClassInfo*>                       PreRequisiteJobs;                                         // 0x0030(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	float                                              TimeToWaitBeforeUnlocking;                                // 0x0040(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                HourToUnlockJob;                                          // 0x0044(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EMissionIDs>                           AutoFailIfMissionComplete;                                // 0x0048(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0049(0x0007) MISSED OFFSET
	class UJobClassInfo*                               AutoFailIfJobComplete;                                    // 0x0050(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UBendMissionData*                            ReLockIfCompleted_Mission;                                // 0x0058(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UJobClassInfo*                               ReLockIfCompleted_Job;                                    // 0x0060(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UBendMissionData*                            ReUnlockIfCompleted_Mission;                              // 0x0068(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UJobClassInfo*                               ReUnlockIfCompleted_Job;                                  // 0x0070(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EMissionIDs>                           MissionToChainTo;                                         // 0x0078(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x7];                                       // 0x0079(0x0007) MISSED OFFSET
	TArray<TAssetPtr<class UClass>>                    Conditions;                                               // 0x0080(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	bool                                               AutoActivateWhenPreReqsMet;                               // 0x0090(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EMissionCategories>                    NextEpisodeUnlocked;                                      // 0x0091(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x6];                                       // 0x0092(0x0006) MISSED OFFSET
	class UJobClassInfo*                               JobDataAssetRef;                                          // 0x0098(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FText                                       JobNameText;                                              // 0x00A0(0x0018) (Edit, BlueprintVisible)
	struct FText                                       JobDescriptionText;                                       // 0x00B8(0x0018) (Edit, BlueprintVisible)
	struct FText                                       JobDescriptionPostText;                                   // 0x00D0(0x0018) (Edit, BlueprintVisible)
	bool                                               Repeatable;                                               // 0x00E8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               CanRestartAfterFailed;                                    // 0x00E9(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               CanBeActiveDuringMissions;                                // 0x00EA(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x5];                                       // 0x00EB(0x0005) MISSED OFFSET
	TArray<struct FBendRewardData>                     FactionRewards;                                           // 0x00F0(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FBendBoozerRewardData>               BoozerRewards;                                            // 0x0100(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	int                                                XPReward;                                                 // 0x0110(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               UseDistanceLimit;                                         // 0x0114(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x3];                                       // 0x0115(0x0003) MISSED OFFSET
	float                                              MinDistanceLimit;                                         // 0x0118(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               SelectionScreenAtEnd;                                     // 0x011C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0x3];                                       // 0x011D(0x0003) MISSED OFFSET
	TArray<struct FGameDatabaseSaveRecord>             Debug_DatabaseVariablesSetInMission;                      // 0x0120(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FGameplayTag>                        DebugRecipeAcquiredInMission;                             // 0x0130(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FString                                     DeveloperComments;                                        // 0x0140(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	bool                                               Deprecated;                                               // 0x0150(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData08[0x7];                                       // 0x0151(0x0007) MISSED OFFSET
};

// ScriptStruct BendGame.BendJobLevelRequest
// 0x0010
struct FBendJobLevelRequest
{
	struct FName                                       MapName;                                                  // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EJobLevelLoadRequestType>              RequestType;                                              // 0x0008(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0009(0x0007) MISSED OFFSET
};

// ScriptStruct BendGame.BendJobObjectiveMarkers
// 0x0038
struct FBendJobObjectiveMarkers
{
	struct FVector                                     MiniMapLocation;                                          // 0x0000(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               VisibleOnMiniMap;                                         // 0x000C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               VisibleOnMap;                                             // 0x000D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IsObjectiveRegion;                                        // 0x000E(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1];                                       // 0x000F(0x0001) MISSED OFFSET
	float                                              ObjectionRegionSize;                                      // 0x0010(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               HasInWorldSpaceMarker;                                    // 0x0014(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0015(0x0003) MISSED OFFSET
	float                                              MaxDistanceAwayToShowWorldMarker;                         // 0x0018(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MinDistanceAwayToShowWorldMarker;                         // 0x001C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EObjectiveAttachTypes>                 ObjectiveMarkerDistanceType;                              // 0x0020(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0021(0x0007) MISSED OFFSET
	class UChildActorComponent*                        StoredMapChildComponent;                                  // 0x0028(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UMiniMapLocationComponent*                   StoredMiniMapComponent;                                   // 0x0030(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
};

// ScriptStruct BendGame.BendJobObjectives
// 0x0060
struct FBendJobObjectives
{
	struct FName                                       ObjectiveIdentifier;                                      // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FText                                       JobObjectiveText;                                         // 0x0008(0x0018) (Edit, BlueprintVisible)
	TEnumAsByte<EObjectiveVisualType>                  ObjectiveVisualType;                                      // 0x0020(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EObjectiveStates>                      ObjectiveState;                                           // 0x0021(0x0001) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	TEnumAsByte<EObjectiveType>                        ObjectiveType;                                            // 0x0022(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               AutoActivateObjective;                                    // 0x0023(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               AutoSaveWhenObjectiveUnlocks;                             // 0x0024(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               HideFromJournalWhenCompleted;                             // 0x0025(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0026(0x0002) MISSED OFFSET
	struct FVector2D                                   ObjectiveStageRange;                                      // 0x0028(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<struct FBendJobObjectiveMarkers>            MapMarkersControl;                                        // 0x0030(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FBendMissionStartConditions>         ConditionsForSpecialObjective;                            // 0x0040(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	bool                                               IsObjectiveCounter;                                       // 0x0050(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0051(0x0003) MISSED OFFSET
	int                                                ObjectiveCounterMaxCount;                                 // 0x0054(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                CurrentCounterCount;                                      // 0x0058(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               AutoCompleteObjOnCounterMax;                              // 0x005C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x005D(0x0003) MISSED OFFSET
};

// ScriptStruct BendGame.SimpleJobGiverVO
// 0x0010
struct FSimpleJobGiverVO
{
	struct FName                                       SoundFXID;                                                // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IsPlayer;                                                 // 0x0008(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0009(0x0007) MISSED OFFSET
};

// ScriptStruct BendGame.JobGiverVOContainers
// 0x0020
struct FJobGiverVOContainers
{
	TArray<struct FSimpleJobGiverVO>                   ReceiveVO;                                                // 0x0000(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FSimpleJobGiverVO>                   ReturnVO;                                                 // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
};

// ScriptStruct BendGame.SurvivorStoriesCharacters
// 0x00D0
struct FSurvivorStoriesCharacters
{
	TAssetPtr<class UBendSkeletalMeshLook>             CharacterLook;                                            // 0x0000(0x0020) (Edit, BlueprintVisible)
	TAssetPtr<class UAnimSequenceBase>                 LoopAnimWhenRecievingJobs;                                // 0x0020(0x0020) (Edit, BlueprintVisible)
	TAssetPtr<class UAnimSequenceBase>                 LoopAnimWhenReturning;                                    // 0x0040(0x0020) (Edit, BlueprintVisible)
	TAssetPtr<class UAnimSequenceBase>                 AnimWhenTurnedIn;                                         // 0x0060(0x0020) (Edit, BlueprintVisible)
	TAssetPtr<class UAnimSequenceBase>                 LoopAnimAfterTurnedIn;                                    // 0x0080(0x0020) (Edit, BlueprintVisible)
	struct FTransform                                  AnchorAnim;                                               // 0x00A0(0x0030) (Edit, BlueprintVisible, IsPlainOldData)
};

// ScriptStruct BendGame.SurvivorStoriesDetails
// 0x00E0
struct FSurvivorStoriesDetails
{
	TArray<struct FSurvivorStoriesCharacters>          CharacterData;                                            // 0x0000(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FName>                               VOForReceiving;                                           // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FName>                               VOForReturn;                                              // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TAssetPtr<class USoundClass>                       VOSoundClass;                                             // 0x0030(0x0020) (Edit, BlueprintVisible)
	struct FTransform                                  DeaconAnchorForGettingJob;                                // 0x0050(0x0030) (Edit, BlueprintVisible, IsPlainOldData)
	TAssetPtr<class UAnimSequenceBase>                 DeaconEnterAnim;                                          // 0x0080(0x0020) (Edit, BlueprintVisible)
	TAssetPtr<class UAnimSequenceBase>                 DeaconLoopAnim;                                           // 0x00A0(0x0020) (Edit, BlueprintVisible)
	TAssetPtr<class UAnimSequenceBase>                 DeaconExitAnim;                                           // 0x00C0(0x0020) (Edit, BlueprintVisible)
};

// ScriptStruct BendGame.JobGiverDetails
// 0x0088
struct FJobGiverDetails
{
	struct FText                                       CharacterNameText;                                        // 0x0000(0x0018) (Edit, BlueprintVisible)
	struct FText                                       LocationDescriptionText;                                  // 0x0018(0x0018) (Edit, BlueprintVisible)
	struct FVector                                     GiverLocation;                                            // 0x0030(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x003C(0x0004) MISSED OFFSET
	class UJobClassInfo*                               CurrentActiveJob;                                         // 0x0040(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<class UJobClassInfo*>                       JobList;                                                  // 0x0048(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FJobGiverVOContainers>               JobGiverVOContainer;                                      // 0x0058(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FSurvivorStoriesDetails>             SurvivorStoriesInfo;                                      // 0x0068(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FString                                     CharacterName;                                            // 0x0078(0x0010) (Edit, ZeroConstructor)
};

// ScriptStruct BendGame.EncampmentGateState
// 0x0004
struct FEncampmentGateState
{
	bool                                               CurrentlyLocked;                                          // 0x0000(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               LockToOpenState;                                          // 0x0001(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               PlayTheAnimation;                                         // 0x0002(0x0001) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               DefaultStateIsOpen;                                       // 0x0003(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.TrustData
// 0x0010
struct FTrustData
{
	TEnumAsByte<ETrustTier>                            Tier;                                                     // 0x0000(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	int                                                Trust;                                                    // 0x0004(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                TrustMaxForTier;                                          // 0x0008(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                TotalTrust;                                               // 0x000C(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.InstantWeaponData
// 0x0030
struct FInstantWeaponData
{
	class UClass*                                      ImpactTemplate;                                           // 0x0000(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              WeaponSpread;                                             // 0x0008(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TargetingSpreadMod;                                       // 0x000C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FiringSpreadIncrement;                                    // 0x0010(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FiringSpreadMax;                                          // 0x0014(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              WeaponRange;                                              // 0x0018(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                HitDamage;                                                // 0x001C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      DamageType;                                               // 0x0020(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ClientSideHitLeeway;                                      // 0x0028(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AllowedViewDotHitDir;                                     // 0x002C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
};

// ScriptStruct BendGame.InstantHitInfo
// 0x0014
struct FInstantHitInfo
{
	struct FVector                                     Origin;                                                   // 0x0000(0x000C) (ZeroConstructor, IsPlainOldData)
	float                                              ReticleSpread;                                            // 0x000C(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                RandomSeed;                                               // 0x0010(0x0004) (ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.PairedTrapAnimData
// 0x0010
struct FPairedTrapAnimData
{
	class UAnimSequenceBase*                           CharacterAnimation;                                       // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           TrapAnimation;                                            // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.BendEquippableItemUserAnimBlendProfile
// 0x0010
struct FBendEquippableItemUserAnimBlendProfile
{
	float                                              LeftArmWeight_Local;                                      // 0x0000(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              RightArmWeight_Local;                                     // 0x0004(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              LeftArmWeight_Mesh;                                       // 0x0008(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              RightArmWeight_Mesh;                                      // 0x000C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.BendEquippableItemUserAnimBlendProfile_WithForcedLocalSpaceVersion
// 0x0020
struct FBendEquippableItemUserAnimBlendProfile_WithForcedLocalSpaceVersion
{
	struct FBendEquippableItemUserAnimBlendProfile     Normal;                                                   // 0x0000(0x0010) (Edit)
	struct FBendEquippableItemUserAnimBlendProfile     ForcedLocalSpace;                                         // 0x0010(0x0010) (Edit)
};

// ScriptStruct BendGame.FactionConversationLineStruct
// 0x0010
struct FFactionConversationLineStruct
{
	TArray<struct FName>                               VOStrings;                                                // 0x0000(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
};

// ScriptStruct BendGame.FactionConversationStruct
// 0x0010
struct FFactionConversationStruct
{
	TArray<struct FFactionConversationLineStruct>      ConversationLines;                                        // 0x0000(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
};

// ScriptStruct BendGame.BendGameEventBase
// 0x0030
struct FBendGameEventBase
{
	TEnumAsByte<EBendGameEvent>                        Type;                                                     // 0x0000(0x0001) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	TEnumAsByte<EBendGameEventAction>                  Action;                                                   // 0x0001(0x0001) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x0002(0x0006) MISSED OFFSET
	class UInventoryItem*                              Item;                                                     // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	class UInventoryWeaponItem*                        Weapon;                                                   // 0x0010(0x0008) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	class UInventoryItem*                              Part;                                                     // 0x0018(0x0008) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	int                                                Cost;                                                     // 0x0020(0x0004) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              ActionValue;                                              // 0x0024(0x0004) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	TEnumAsByte<ETrustTier>                            TrustRequired;                                            // 0x0028(0x0001) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0029(0x0007) MISSED OFFSET
};

// ScriptStruct BendGame.RespawnPoint
// 0x0048
struct FRespawnPoint
{
	struct FVector                                     RespawnLocation;                                          // 0x0000(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FRotator                                    RespawnRotation;                                          // 0x000C(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector                                     VehicleRespawnLocation;                                   // 0x0018(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FRotator                                    VehicleRespawnRotation;                                   // 0x0024(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              RespawnTriggerRadius;                                     // 0x0030(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              RespawnSafetyRadius;                                      // 0x0034(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                RespawnID;                                                // 0x0038(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               RespawnOnBike;                                            // 0x003C(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xB];                                       // 0x003D(0x000B) MISSED OFFSET
};

// ScriptStruct BendGame.RegionData
// 0x00D8
struct FRegionData
{
	struct FText                                       RegionNameText;                                           // 0x0000(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly)
	TArray<class UBendEncampmentData*>                 Encampments;                                              // 0x0018(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<class UBendNestingZone*>                    Nests;                                                    // 0x0028(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<class UBendBunkerData*>                     Bunkers;                                                  // 0x0038(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<class UBendNeroCheckpointData*>             NeroCheckpoints;                                          // 0x0048(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<class UBendNeroCheckpointData*>             NeroSites;                                                // 0x0058(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<class UJobClassInfo*>                       HordeJobs;                                                // 0x0068(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<struct FGameplayTag>                        NeroRecorderCollectibles;                                 // 0x0078(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<struct FGameplayTag>                        HistoricalMarkerCollectibles;                             // 0x0088(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<struct FGameplayTag>                        CharacterCollectibles;                                    // 0x0098(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<struct FGameplayTag>                        TourismCollectibles;                                      // 0x00A8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<struct FGameplayTag>                        RIPSermonCollectibles;                                    // 0x00B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<struct FGameplayTag>                        HerbologyCollectibles;                                    // 0x00C8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
};

// ScriptStruct BendGame.SlatePopupDetails
// 0x0040
struct FSlatePopupDetails
{
	TEnumAsByte<ESlatePopupStyle>                      PopupStyle;                                               // 0x0000(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0001(0x0007) MISSED OFFSET
	struct FText                                       TitleText;                                                // 0x0008(0x0018) (Edit, BlueprintVisible)
	struct FText                                       BodyText;                                                 // 0x0020(0x0018) (Edit, BlueprintVisible)
	unsigned char                                      bPauseGame : 1;                                           // 0x0038(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0039(0x0003) MISSED OFFSET
	int                                                PopupUserData;                                            // 0x003C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.BendDefaultClimbDataEntry
// 0x0028
struct FBendDefaultClimbDataEntry
{
	TEnumAsByte<EBendDefaultClimbDataType>             Type;                                                     // 0x0000(0x0001) (Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0001(0x0007) MISSED OFFSET
	TAssetPtr<class UBendClimbStateDataBase>           Data;                                                     // 0x0008(0x0020) (Edit, DisableEditOnInstance)
};

// ScriptStruct BendGame.BendDefaultClimbDataLookup
// 0x0020
struct FBendDefaultClimbDataLookup
{
	TArray<struct FBendDefaultClimbDataEntry>          LookUp;                                                   // 0x0000(0x0010) (Edit, EditFixedSize, ZeroConstructor, DisableEditOnInstance)
	TArray<class UBendClimbStateDataBase*>             Data_StrongReferences;                                    // 0x0010(0x0010) (ZeroConstructor, Transient)
};

// ScriptStruct BendGame.VehicleAttachedPart
// 0x0018
struct FVehicleAttachedPart
{
	class UBendVehicleMeshAttachmentSpecs*             Specs;                                                    // 0x0000(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UMeshComponent*                              Mesh;                                                     // 0x0008(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0010(0x0008) MISSED OFFSET
};

// ScriptStruct BendGame.BendVehicleImpactSoundInfo
// 0x0098
struct FBendVehicleImpactSoundInfo
{
	class USoundCue*                                   Sound;                                                    // 0x0000(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MinSpeed;                                                 // 0x0008(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x000C(0x0004) MISSED OFFSET
	struct FRuntimeFloatCurve                          ForceToVolumeCurve;                                       // 0x0010(0x0080) (Edit)
	float                                              VolumeMax;                                                // 0x0090(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0094(0x0004) MISSED OFFSET
};

// ScriptStruct BendGame.RandomParts
// 0x0010
struct FRandomParts
{
	TArray<int>                                        RandomPartsList;                                          // 0x0000(0x0010) (ZeroConstructor)
};

// ScriptStruct BendGame.BendExplosionParams
// 0x00B8
struct FBendExplosionParams
{
	class UClass*                                      DamageType;                                               // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UClass*                                      InitialStatusEffect;                                      // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              Force;                                                    // 0x0010(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MinRadius;                                                // 0x0014(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxRadius;                                                // 0x0018(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MinDamage;                                                // 0x001C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxDamage;                                                // 0x0020(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FalloffRate;                                              // 0x0024(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                MaxPawnsAffected;                                         // 0x0028(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8C];                                      // 0x002C(0x008C) MISSED OFFSET
};

// ScriptStruct BendGame.CoverQuerySettingsValue
// 0x0008
struct FCoverQuerySettingsValue
{
	TEnumAsByte<EBendCoverTestParameters>              Parameter;                                                // 0x0000(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	float                                              Value;                                                    // 0x0004(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
};

// ScriptStruct BendGame.BaseCoverSettingsData
// 0x0030
struct FBaseCoverSettingsData
{
	TArray<TEnumAsByte<EBendCoverTestParameters>>      Tests;                                                    // 0x0000(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FCoverQuerySettingsValue>            MinRanges;                                                // 0x0010(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FCoverQuerySettingsValue>            MaxRanges;                                                // 0x0020(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
};

// ScriptStruct BendGame.CoverQuerySettingsData
// 0x0028 (0x0058 - 0x0030)
struct FCoverQuerySettingsData : public FBaseCoverSettingsData
{
	TEnumAsByte<EBendCoverTestPackages>                Type;                                                     // 0x0030(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0031(0x0007) MISSED OFFSET
	TArray<TEnumAsByte<EBendCoverTestParameters>>      Scores;                                                   // 0x0038(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FCoverQuerySettingsValue>            Weights;                                                  // 0x0048(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
};

// ScriptStruct BendGame.CoverVerificationSettingsData
// 0x0008 (0x0038 - 0x0030)
struct FCoverVerificationSettingsData : public FBaseCoverSettingsData
{
	TEnumAsByte<EBendCoverVerificationPackages>        Type;                                                     // 0x0030(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0031(0x0007) MISSED OFFSET
};

// ScriptStruct BendGame.CoverMoveVerificationSettingsData
// 0x0008 (0x0038 - 0x0030)
struct FCoverMoveVerificationSettingsData : public FBaseCoverSettingsData
{
	TEnumAsByte<EBendCoverMoveVerificationPackages>    Type;                                                     // 0x0030(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0031(0x0007) MISSED OFFSET
};

// ScriptStruct BendGame.BendInputMappingEntry
// 0x0018
struct FBendInputMappingEntry
{
	struct FName                                       ActionName;                                               // 0x0000(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UBendInputMapping*                           PrimaryMapping;                                           // 0x0008(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UBendInputMapping*                           AlternateMapping;                                         // 0x0010(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.BendInputMappingGroup
// 0x0028
struct FBendInputMappingGroup
{
	struct FText                                       GroupName;                                                // 0x0000(0x0018) (BlueprintVisible, BlueprintReadOnly)
	TArray<struct FBendInputMappingEntry>              InputMappings;                                            // 0x0018(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
};

// ScriptStruct BendGame.BendJobAttachecdMiniMapData
// 0x0020
struct FBendJobAttachecdMiniMapData
{
	struct FName                                       ObjIdentifier;                                            // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                MapIconIndex;                                             // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x000C(0x0004) MISSED OFFSET
	class ABendPawn*                                   PawnRef;                                                  // 0x0010(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               DetachOnDeath;                                            // 0x0018(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               HidOnDeathOrRespawn;                                      // 0x0019(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x6];                                       // 0x001A(0x0006) MISSED OFFSET
};

// ScriptStruct BendGame.JobGlobalObject
// 0x0050
struct FJobGlobalObject
{
	class AActor*                                      CurrentObject;                                            // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0008(0x0008) MISSED OFFSET
	struct FTransform                                  OriginalTransform;                                        // 0x0010(0x0030) (Edit, BlueprintVisible, IsPlainOldData)
	bool                                               CurrentlyActive;                                          // 0x0040(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0xF];                                       // 0x0041(0x000F) MISSED OFFSET
};

// ScriptStruct BendGame.BendLightFlicker
// 0x0028
struct FBendLightFlicker
{
	bool                                               LightFlicker;                                             // 0x0000(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               CopyFlicker;                                              // 0x0001(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0002(0x0002) MISSED OFFSET
	float                                              TimeSinceLastFlicker;                                     // 0x0004(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FlickerIntMinPercent;                                     // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FlickerIntMaxPercent;                                     // 0x000C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FlickerFrequency;                                         // 0x0010(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              GoalFlickerIntensity;                                     // 0x0014(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              IntensityDeltaPerTick;                                    // 0x0018(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x001C(0x0004) MISSED OFFSET
	class AActor*                                      FlickerLightRef;                                          // 0x0020(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.MovementFXTypeData
// 0x0040
struct FMovementFXTypeData
{
	struct FName                                       BlueprintFXName;                                          // 0x0000(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class USoundCue*                                   SoundFX;                                                  // 0x0008(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UParticleSystem*                             ParticleFX;                                               // 0x0010(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FDecalData                                  DecalFX;                                                  // 0x0018(0x0028) (Edit, DisableEditOnInstance)
};

// ScriptStruct BendGame.BendPathAvoidanceAreaDescriptor
// 0x0008
struct FBendPathAvoidanceAreaDescriptor
{
	float                                              CostMultiplier;                                           // 0x0000(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              Radius;                                                   // 0x0004(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
};

// ScriptStruct BendGame.BendNavLinkCollectionEntry
// 0x0088 (0x00B8 - 0x0030)
struct FBendNavLinkCollectionEntry : public FNavLinkCollectionEntry
{
	bool                                               ForEdgeTraversal;                                         // 0x0030(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0031(0x0007) MISSED OFFSET
	TAssetPtr<class UBendClimbStateDataBase>           m_InverseClimbStateData;                                  // 0x0038(0x0020)
	TAssetPtr<class UBendClimbStateDataBase>           m_ClimbStateData;                                         // 0x0058(0x0020)
	TArray<struct FBendTraversalSettings>              TraversalSettings;                                        // 0x0078(0x0010) (ZeroConstructor)
	bool                                               OnlyUseWhenFrustrated;                                    // 0x0088(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               CanUseWhenAware;                                          // 0x0089(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               CanUseWhenSemiaware;                                      // 0x008A(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               CanUseWhenUnaware;                                        // 0x008B(0x0001) (ZeroConstructor, IsPlainOldData)
	struct FVector                                     Start;                                                    // 0x008C(0x000C) (ZeroConstructor, IsPlainOldData)
	struct FVector                                     End;                                                      // 0x0098(0x000C) (ZeroConstructor, IsPlainOldData)
	bool                                               AdjustPointsToGeometry;                                   // 0x00A4(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x00A5(0x0003) MISSED OFFSET
	class UBendClimbStateDataBase*                     LoadedInverseClimbStateData;                              // 0x00A8(0x0008) (ZeroConstructor, IsPlainOldData)
	class UBendClimbStateDataBase*                     LoadedClimbStateData;                                     // 0x00B0(0x0008) (ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.NestData
// 0x0070
struct FNestData
{
	TWeakObjectPtr<class ABendNestSpawnLocation>       Location;                                                 // 0x0000(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	TWeakObjectPtr<class ABendNest>                    Nest;                                                     // 0x0008(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	struct FString                                     Id;                                                       // 0x0010(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst)
	bool                                               Destroyed;                                                // 0x0020(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4F];                                      // 0x0021(0x004F) MISSED OFFSET
};

// ScriptStruct BendGame.MapLocationFastTravel
// 0x0070
struct FMapLocationFastTravel
{
	unsigned char                                      bFastTravelAvailable : 1;                                 // 0x0000(0x0001) (Edit, BlueprintVisible, SaveGame)
	unsigned char                                      UnknownData00[0xF];                                       // 0x0001(0x000F) MISSED OFFSET
	struct FTransform                                  PlayerFastTravelTransform;                                // 0x0010(0x0030) (Edit, BlueprintVisible, IsPlainOldData)
	struct FTransform                                  BikeFastTravelTransform;                                  // 0x0040(0x0030) (Edit, BlueprintVisible, IsPlainOldData)
};

// ScriptStruct BendGame.BendObjectiveBreadcrumbsData
// 0x0018
struct FBendObjectiveBreadcrumbsData
{
	class ABendTriggerBox*                             BendTriggerBoxObject;                                     // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FBendLocationReference                      LocationProxyForWidget;                                   // 0x0008(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly)
};

// ScriptStruct BendGame.BendObjectiveAttachData
// 0x0010
struct FBendObjectiveAttachData
{
	TEnumAsByte<EObjectiveAttachTypes>                 AttachType;                                               // 0x0000(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	struct FVector                                     AttachOffset;                                             // 0x0004(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.BendConversationSettings
// 0x001C
struct FBendConversationSettings
{
	float                                              MaxPauseBetweenLines;                                     // 0x0000(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              MinPauseBetweenLines;                                     // 0x0004(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              MaxWaitTimeInQueue;                                       // 0x0008(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                NumSecondsAllowRepeat;                                    // 0x000C(0x0004) (ZeroConstructor, IsPlainOldData)
	bool                                               LoopConversation;                                         // 0x0010(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               ShouldDuckSounds;                                         // 0x0011(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               ShouldUnduckSounds;                                       // 0x0012(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               UseInterruptSystem;                                       // 0x0013(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               CheckThreatsBeforePlaying;                                // 0x0014(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               CheckThreatsBeforeResuming;                               // 0x0015(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               InterruptWhenShooting;                                    // 0x0016(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               InterruptWhenMeleeing;                                    // 0x0017(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               PlayResumeVO;                                             // 0x0018(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               StopIfInterrupted;                                        // 0x0019(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x001A(0x0002) MISSED OFFSET
};

// ScriptStruct BendGame.VocalConversationDataArray
// 0x0010
struct FVocalConversationDataArray
{
	TArray<struct FVocalConversationData>              ConversationData;                                         // 0x0000(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
};

// ScriptStruct BendGame.BendOpenWorldVOData
// 0x0117 (0x0118 - 0x0001)
struct FBendOpenWorldVOData : public FTableRowBase
{
	struct FName                                       RowNameIGNOREME;                                          // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EMissionCategories>                    DemoFailEpisode;                                          // 0x0008(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               ManuallyCalled;                                           // 0x0009(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EMissionIDs>                           PlayOnMissionUnlock;                                      // 0x000A(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x5];                                       // 0x000B(0x0005) MISSED OFFSET
	TArray<TEnumAsByte<EMissionIDs>>                   PreRequisiteMissions;                                     // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<class UJobClassInfo*>                       PreRequisiteJobs;                                         // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	bool                                               UseJobPreReqs;                                            // 0x0030(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0031(0x0003) MISSED OFFSET
	float                                              TimeToWaitBeforeCalling;                                  // 0x0034(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                HourToCallVO;                                             // 0x0038(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TimeAllowedInQueue;                                       // 0x003C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                NumTriesAllowed;                                          // 0x0040(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0044(0x0004) MISSED OFFSET
	TEnumAsByte<EMissionIDs>                           AutoFailIfMissionComplete;                                // 0x0048(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x7];                                       // 0x0049(0x0007) MISSED OFFSET
	class UJobClassInfo*                               AutoFailIfJobUnlocked;                                    // 0x0050(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UJobClassInfo*                               AutoFailIfJobComplete;                                    // 0x0058(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       AutoFailIfVOPlayed;                                       // 0x0060(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<TAssetPtr<class UClass>>                    Conditions;                                               // 0x0068(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	bool                                               CanPlayInEncampments;                                     // 0x0078(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               Optional;                                                 // 0x0079(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EInventoryCollectibleID>               Collectible;                                              // 0x007A(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x5];                                       // 0x007B(0x0005) MISSED OFFSET
	class UJobClassInfo*                               JobToUnlockAtEnd;                                         // 0x0080(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UBendMissionData*                            MissionToUnlockAtEnd;                                     // 0x0088(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               ActivateInsteadOfUnlock;                                  // 0x0090(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EeOWVOManager>                         WhoIsDeaconTalkingTo;                                     // 0x0091(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x6];                                       // 0x0092(0x0006) MISSED OFFSET
	class USoundClass*                                 ConversationSoundClass;                                   // 0x0098(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ConversationPriority;                                     // 0x00A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FBendConversationSettings                   ConversationSettings;                                     // 0x00A4(0x001C) (Edit, BlueprintVisible)
	TEnumAsByte<EAIFactionType>                        ConversationFaction;                                      // 0x00C0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x7];                                       // 0x00C1(0x0007) MISSED OFFSET
	TArray<struct FVocalConversationData>              Conversation;                                             // 0x00C8(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FVocalConversationDataArray>         ConversationLow;                                          // 0x00D8(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FVocalConversationDataArray>         ConversationMid;                                          // 0x00E8(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FVocalConversationDataArray>         ConversationHigh;                                         // 0x00F8(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	unsigned char                                      UnknownData07[0x10];                                      // 0x0108(0x0010) MISSED OFFSET
};

// ScriptStruct BendGame.BendOpenWorldVOSpeakerDelay
// 0x0018
struct FBendOpenWorldVOSpeakerDelay
{
	TEnumAsByte<EeOWVOManager>                         PersonToTalkTo;                                           // 0x0000(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	float                                              MinimumTimeBetweenConvos;                                 // 0x0004(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FTimespan                                   LastTimeSpokenTo;                                         // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0010(0x0008) MISSED OFFSET
};

// ScriptStruct BendGame.BendPairedAttackData
// 0x0030
struct FBendPairedAttackData
{
	struct FBendPairedAnimData                         AttackAnims;                                              // 0x0000(0x0018) (Edit, BlueprintVisible)
	TArray<struct FBendCounterAnimData>                VictimsCounterAnimData;                                   // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	bool                                               Anchor;                                                   // 0x0028(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0029(0x0007) MISSED OFFSET
};

// ScriptStruct BendGame.BendCounterAttackData
// 0x0028
struct FBendCounterAttackData
{
	TEnumAsByte<EAIFactionType>                        Faction;                                                  // 0x0000(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0001(0x0007) MISSED OFFSET
	TArray<struct FBendPairedAnimData>                 PairedKills;                                              // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FBendPairedAttackData>               PairedAttacks;                                            // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
};

// ScriptStruct BendGame.BendSkeletalMeshVariationExtraData
// 0x0018
struct FBendSkeletalMeshVariationExtraData
{
	float                                              ProbabilityWeight;                                        // 0x0000(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ProbabilityRangeEnd0To1;                                  // 0x0004(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              ProbabilityRangeRandomEnd0To1;                            // 0x0008(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              MaleProbabilityRangeRandomEnd0To1;                        // 0x000C(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              NonmaleProbabilityRangeRandomEnd0To1;                     // 0x0010(0x0004) (ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EePawnGender>                          Gender;                                                   // 0x0014(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0015(0x0003) MISSED OFFSET
};

// ScriptStruct BendGame.BendSkeletalMeshLookEntry
// 0x0038
struct FBendSkeletalMeshLookEntry
{
	unsigned char                                      UnknownData00[0x10];                                      // 0x0000(0x0010) MISSED OFFSET
	TAssetPtr<class UBendSkeletalMeshLook>             LookAsset;                                                // 0x0010(0x0020)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0030(0x0008) MISSED OFFSET
};

// ScriptStruct BendGame.BendConditionalSkeletalMeshLook
// 0x0030
struct FBendConditionalSkeletalMeshLook
{
	TAssetPtr<class UBendSkeletalMeshLook>             Look;                                                     // 0x0000(0x0020) (Edit, DisableEditOnInstance)
	TArray<TAssetPtr<class UClass>>                    Conditions;                                               // 0x0020(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
};

// ScriptStruct BendGame.BendActionSequence
// 0x01E0
struct FBendActionSequence
{
	struct FBendActionData                             EnterAction;                                              // 0x0000(0x00A0) (Edit, BlueprintVisible)
	struct FBendActionData                             MainAction;                                               // 0x00A0(0x00A0) (Edit, BlueprintVisible)
	struct FBendActionData                             ExitAction;                                               // 0x0140(0x00A0) (Edit, BlueprintVisible)
};

// ScriptStruct BendGame.PhotoModeLogoOffset
// 0x0020
struct FPhotoModeLogoOffset
{
	struct FAnchors                                    Achors;                                                   // 0x0000(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FVector2D                                   Position;                                                 // 0x0010(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   Alignment;                                                // 0x0018(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
};

// ScriptStruct BendGame.PhotoModeLogoPositions
// 0x0100
struct FPhotoModeLogoPositions
{
	struct FPhotoModeLogoOffset                        UpperLeft;                                                // 0x0000(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FPhotoModeLogoOffset                        UpperCenter;                                              // 0x0020(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FPhotoModeLogoOffset                        UpperRight;                                               // 0x0040(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FPhotoModeLogoOffset                        Right;                                                    // 0x0060(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FPhotoModeLogoOffset                        BottomRight;                                              // 0x0080(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FPhotoModeLogoOffset                        BottomCenter;                                             // 0x00A0(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FPhotoModeLogoOffset                        BottomLeft;                                               // 0x00C0(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FPhotoModeLogoOffset                        Left;                                                     // 0x00E0(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
};

// ScriptStruct BendGame.XpecTrustVO
// 0x0018
struct FXpecTrustVO
{
	TEnumAsByte<ETrustTier>                            TrustTier;                                                // 0x0000(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0001(0x0007) MISSED OFFSET
	TArray<struct FName>                               VOList;                                                   // 0x0008(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
};

// ScriptStruct BendGame.XpecAnimationData
// 0x0010
struct FXpecAnimationData
{
	struct FName                                       m_groupName;                                              // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           m_pSequence;                                              // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.XpecDLink
// 0x0018
struct FXpecDLink
{
	unsigned char                                      UnknownData00[0x18];                                      // 0x0000(0x0018) MISSED OFFSET
};

// ScriptStruct BendGame.XpecPawnInfo
// 0x004F (0x0050 - 0x0001)
struct FXpecPawnInfo : public FTableRowBase
{
	struct FName                                       m_name;                                                   // 0x0000(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TAssetPtr<class UClass>                            m_PawnClass;                                              // 0x0008(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly)
	class UBendSkeletalMeshLook*                       m_pLook;                                                  // 0x0028(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class USkeletalMesh*                               m_pPropsMesh;                                             // 0x0030(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EXpecPOIUserType>                      m_ePawnType;                                              // 0x0038(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EAIFactionType>                        m_eFactionType;                                           // 0x0039(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EXpecPOIUserGender>                    m_ePawnGender;                                            // 0x003A(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EXpecVOClass>                          m_eVOClass;                                               // 0x003B(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EInventoryWeaponID>                    m_eWeaponId;                                              // 0x003C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EInventoryWeaponID>                    m_eThrowableId;                                           // 0x003D(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EInventoryWeaponID>                    m_eMeleeId;                                               // 0x003E(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1];                                       // 0x003F(0x0001) MISSED OFFSET
	float                                              m_fSppedMultiply;                                         // 0x0040(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0044(0x0004) MISSED OFFSET
	struct FName                                       m_loadoutName;                                            // 0x0048(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.XpecScenarioSave
// 0x0090
struct FXpecScenarioSave
{
	class ABendPOI*                                    m_pPOI;                                                   // 0x0000(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class ABendPOI*                                    m_pPreviousPOI;                                           // 0x0008(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       m_ScenarioName;                                           // 0x0010(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                m_iCommandIndex;                                          // 0x0018(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x001C(0x0004) MISSED OFFSET
	struct FName                                       m_idleGroup;                                              // 0x0020(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               m_bRandomInGroup;                                         // 0x0028(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0029(0x0007) MISSED OFFSET
	struct FTransform                                  m_loopTransform;                                          // 0x0030(0x0030) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	float                                              m_fTransitionTime;                                        // 0x0060(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EUnaimedAnimMoveStyle>                 m_eWeaponType;                                            // 0x0064(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0065(0x0003) MISSED OFFSET
	TArray<struct FName>                               m_events;                                                 // 0x0068(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TEnumAsByte<EWeatherType>                          m_previousWeather;                                        // 0x0078(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0079(0x0003) MISSED OFFSET
	struct FVector                                     m_DummySwitchOffset;                                      // 0x007C(0x000C) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x8];                                       // 0x0088(0x0008) MISSED OFFSET
};

// ScriptStruct BendGame.XpecLODPawn
// 0x0158 (0x0170 - 0x0018)
struct FXpecLODPawn : public FXpecDLink
{
	struct FXpecPawnInfo                               m_Info;                                                   // 0x0018(0x0050) (BlueprintVisible, BlueprintReadOnly)
	class UBendHumanArchetypeData*                     m_pArchetypeData;                                         // 0x0068(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class ABendPawn*                                   m_pPawn;                                                  // 0x0070(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class ASkeletalMeshActor*                          m_pDummy;                                                 // 0x0078(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class ABendPawn*                                   m_EventPawn;                                              // 0x0080(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class ASkeletalMeshActor*                          m_pProps;                                                 // 0x0088(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class ABendPawnSpawnLocation*                      m_pSpawner;                                               // 0x0090(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class AXpecZoneManager*                            m_pZoneManager;                                           // 0x0098(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              m_fDistance;                                              // 0x00A0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xC];                                       // 0x00A4(0x000C) MISSED OFFSET
	struct FXpecScenarioSave                           m_save;                                                   // 0x00B0(0x0090) (BlueprintVisible, BlueprintReadOnly)
	float                                              m_fCooldown;                                              // 0x0140(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              m_fDespawnTimer;                                          // 0x0144(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              m_fInterruptionTimer;                                     // 0x0148(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EXpecPawnLODLevel>                     m_eLODLevel;                                              // 0x014C(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EXpecPawnLODLevel>                     m_eNextLODLevel;                                          // 0x014D(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               m_bGroundChecked;                                         // 0x014E(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x014F(0x0001) MISSED OFFSET
	class ABendPOI*                                    m_pPreDummyToPawnPOI;                                     // 0x0150(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FBendMeshMaterialParamsSnapshot             m_MeshMaterialParamsSnapshot;                             // 0x0158(0x0010)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0168(0x0008) MISSED OFFSET
};

// ScriptStruct BendGame.XpecVOData
// 0x0047 (0x0048 - 0x0001)
struct FXpecVOData : public FTableRowBase
{
	struct FName                                       m_BehaviorTag;                                            // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       m_POIName;                                                // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       m_ZoneID;                                                 // 0x0010(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EXpecPOIUserType>                      m_ePawnType;                                              // 0x0018(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0019(0x0007) MISSED OFFSET
	struct FName                                       m_Actor0SndClass;                                         // 0x0020(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       m_Actor1SndClass;                                         // 0x0028(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                m_iNumVOName;                                             // 0x0030(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0034(0x0004) MISSED OFFSET
	struct FName                                       m_VOName0;                                                // 0x0038(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       m_VOName1;                                                // 0x0040(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.XpecTransitionInfo
// 0x0098
struct FXpecTransitionInfo
{
	int                                                m_iSN;                                                    // 0x0000(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                m_iIndex;                                                 // 0x0004(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_bIsReachGoal;                                           // 0x0008(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_bShouldReFindEntry;                                     // 0x0009(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x000A(0x0006) MISSED OFFSET
	struct FName                                       m_ScenarioName;                                           // 0x0010(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FXpecVOData                                 m_VOData;                                                 // 0x0018(0x0048) (BlueprintVisible)
	int                                                m_AnchorIndex;                                            // 0x0060(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0064(0x0004) MISSED OFFSET
	struct FName                                       m_PawnName;                                               // 0x0068(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EXpecMigrationAction>                  m_eMigrationAction;                                       // 0x0070(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_bIsOrphan;                                              // 0x0071(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_bEnableVOWhenTransition;                                // 0x0072(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_bUseStaticRoute;                                        // 0x0073(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0074(0x0004) MISSED OFFSET
	struct FBendLocationReference                      m_SitLocationRef;                                         // 0x0078(0x0010) (Edit, BlueprintVisible)
	bool                                               m_bFrontPath;                                             // 0x0088(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_bLeftPath;                                              // 0x0089(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_bRightPath;                                             // 0x008A(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_bHideChairMesh;                                         // 0x008B(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x008C(0x0004) MISSED OFFSET
	class UStaticMesh*                                 m_ChairMesh;                                              // 0x0090(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.XpecScenarioData
// 0x0028
struct FXpecScenarioData
{
	unsigned char                                      UnknownData00[0x8];                                       // 0x0000(0x0008) MISSED OFFSET
	class AXpecScenarioInstance*                       m_pScenario;                                              // 0x0008(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       m_name;                                                   // 0x0010(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EXpecPOISlotActionState>               m_eState;                                                 // 0x0018(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0019(0x0003) MISSED OFFSET
	int                                                m_iActorIndex;                                            // 0x001C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                m_iCommandIndex;                                          // 0x0020(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              m_fTime;                                                  // 0x0024(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.XpecRotateToActorData
// 0x0028 (0x0050 - 0x0028)
struct FXpecRotateToActorData : public FXpecScenarioData
{
	class AActor*                                      m_pTarget;                                                // 0x0028(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector                                     m_vTargetVector;                                          // 0x0030(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              m_fTolerableAngle;                                        // 0x003C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              m_fMaxAngleToRotateHead;                                  // 0x0040(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              m_fAngle;                                                 // 0x0044(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               m_bAlignWith;                                             // 0x0048(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0049(0x0007) MISSED OFFSET
};

// ScriptStruct BendGame.XpecPlayVOData
// 0x0010 (0x0038 - 0x0028)
struct FXpecPlayVOData : public FXpecScenarioData
{
	struct FName                                       m_VOName;                                                 // 0x0028(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               m_bResponse;                                              // 0x0030(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0031(0x0007) MISSED OFFSET
};

// ScriptStruct BendGame.XpecPlayConversationData
// 0x0018 (0x0040 - 0x0028)
struct FXpecPlayConversationData : public FXpecScenarioData
{
	class USoundClass*                                 m_SoundClass;                                             // 0x0028(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TArray<struct FVocalConversationData>              m_ConversationData;                                       // 0x0030(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
};

// ScriptStruct BendGame.XpecPerformActionData
// 0x00F8 (0x0120 - 0x0028)
struct FXpecPerformActionData : public FXpecScenarioData
{
	TEnumAsByte<EXpecActionType>                       m_eType;                                                  // 0x0028(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EUnaimedAnimMoveStyle>                 m_eWeaponType;                                            // 0x0029(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x002A(0x0006) MISSED OFFSET
	struct FBendActionData                             m_action;                                                 // 0x0030(0x00A0) (BlueprintVisible, BlueprintReadOnly)
	struct FTransform                                  m_anchorTransform;                                        // 0x00D0(0x0030) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	bool                                               m_bEnableFootLocking;                                     // 0x0100(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0101(0x0007) MISSED OFFSET
	struct FName                                       m_groupName;                                              // 0x0108(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              m_animCancelTime;                                         // 0x0110(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0xC];                                       // 0x0114(0x000C) MISSED OFFSET
};

// ScriptStruct BendGame.XpecMoveToActorData
// 0x0078 (0x00A0 - 0x0028)
struct FXpecMoveToActorData : public FXpecScenarioData
{
	int                                                m_iRetry;                                                 // 0x0028(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               m_bDelayed;                                               // 0x002C(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x002D(0x0003) MISSED OFFSET
	class AActor*                                      m_pTarget;                                                // 0x0030(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0038(0x0008) MISSED OFFSET
	struct FTransform                                  m_TargetTransform;                                        // 0x0040(0x0030) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	float                                              m_fSpeed;                                                 // 0x0070(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               m_bApplySpeedMultiply;                                    // 0x0074(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0075(0x0003) MISSED OFFSET
	float                                              m_fRadius;                                                // 0x0078(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              m_fApproachOuterRadius;                                   // 0x007C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               m_bSlowApproach;                                          // 0x0080(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               m_bSkipDefendZoneCheck;                                   // 0x0081(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               m_bEnableTurnToIdleInMovement;                            // 0x0082(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               m_bEnableMoveToIdleAnchor;                                // 0x0083(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              m_fAvoidanceMaxWaitTime;                                  // 0x0084(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              m_fChangeWeaponDistance;                                  // 0x0088(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              m_fChangeWeaponPlayRate;                                  // 0x008C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EUnaimedAnimMoveStyle>                 m_eWeaponType;                                            // 0x0090(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0xF];                                       // 0x0091(0x000F) MISSED OFFSET
};

// ScriptStruct BendGame.XpecLookAtData
// 0x0028 (0x0050 - 0x0028)
struct FXpecLookAtData : public FXpecScenarioData
{
	class AActor*                                      m_pTarget;                                                // 0x0028(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               m_bOverrideAngleLimits;                                   // 0x0030(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0031(0x0003) MISSED OFFSET
	struct FRotator                                    m_rAngleLimitOverride;                                    // 0x0034(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EBendCharacterLookPartialSet>          m_eParitialSet;                                           // 0x0040(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0041(0x0003) MISSED OFFSET
	float                                              m_fInterpolationRate;                                     // 0x0044(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              m_fDuration;                                              // 0x0048(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x004C(0x0004) MISSED OFFSET
};

// ScriptStruct BendGame.XpecFinishActionData
// 0x0018 (0x0040 - 0x0028)
struct FXpecFinishActionData : public FXpecScenarioData
{
	class ABendPOI*                                    m_pNextPOI;                                               // 0x0028(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EXpecScenarioExecuteResult>            m_eResult;                                                // 0x0030(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EUnaimedAnimMoveStyle>                 m_eWeaponType;                                            // 0x0031(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0032(0x0002) MISSED OFFSET
	float                                              m_fChangeWeaponPlayRate;                                  // 0x0034(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               m_bChangeWeaponWhenFinish;                                // 0x0038(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0039(0x0007) MISSED OFFSET
};

// ScriptStruct BendGame.XpecScenarioActorInfo
// 0x0048
struct FXpecScenarioActorInfo
{
	class ABendPawn*                                   m_pPawn;                                                  // 0x0000(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class ABendPOISlot*                                m_pSlot;                                                  // 0x0008(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                m_iFirstCommandIndex;                                     // 0x0010(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                m_iCurrentCommandIndex;                                   // 0x0014(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                m_iGotoCommandIndex;                                      // 0x0018(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              m_fCurrentCommandTime;                                    // 0x001C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                m_iActorIndex;                                            // 0x0020(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                m_iHP;                                                    // 0x0024(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EXpecScenarioState>                    m_eState;                                                 // 0x0028(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EXpecScenarioExecuteResult>            m_eResult;                                                // 0x0029(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EXpecScenarioFinishLevel>              m_eInterruptLevel;                                        // 0x002A(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1];                                       // 0x002B(0x0001) MISSED OFFSET
	int                                                m_iLock;                                                  // 0x002C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                m_iCheckpoint;                                            // 0x0030(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               m_bReleased;                                              // 0x0034(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               m_bEnableLowLOD;                                          // 0x0035(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               m_bEventScenarioFailed;                                   // 0x0036(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               m_bIdle;                                                  // 0x0037(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TArray<int>                                        m_commandIndexStack;                                      // 0x0038(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
};

// ScriptStruct BendGame.BendPOIAnimSet
// 0x0048
struct FBendPOIAnimSet
{
	bool                                               bUsePreferredFactions;                                    // 0x0000(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bUseWeapons;                                              // 0x0001(0x0001) (ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EePOITenseType>                        CanUseIfTense;                                            // 0x0002(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x5];                                       // 0x0003(0x0005) MISSED OFFSET
	TArray<TEnumAsByte<EAIFactionType>>                PreferredFactions;                                        // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	bool                                               CheckSkeleton;                                            // 0x0018(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0019(0x0007) MISSED OFFSET
	TArray<TEnumAsByte<EAimedAnimMoveStyle>>           PreferredAimedWeapons;                                    // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<TEnumAsByte<EUnaimedAnimMoveStyle>>         PreferredUnaimedWeapons;                                  // 0x0030(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	class UBendAnimVariationData*                      AnimVariations;                                           // 0x0040(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.BendPOIAnimSetTuning
// 0x0024
struct FBendPOIAnimSetTuning
{
	float                                              WeaponTestSuccess;                                        // 0x0000(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              WeaponTestFailed;                                         // 0x0004(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              WeaponTestIgnored;                                        // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SkeletonTestSuccess;                                      // 0x000C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SkeletonTestFailed;                                       // 0x0010(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SkeletonTestIgnored;                                      // 0x0014(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FactionTestSuccess;                                       // 0x0018(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FactionTestFailed;                                        // 0x001C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FactionTestIgnored;                                       // 0x0020(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.BendOpenWorldCloudTypeState
// 0x0060
struct FBendOpenWorldCloudTypeState
{
	float                                              TickAccumulator;                                          // 0x0000(0x0004) (ZeroConstructor, SaveGame, IsPlainOldData)
	float                                              SpawnTimer;                                               // 0x0004(0x0004) (ZeroConstructor, SaveGame, IsPlainOldData)
	int                                                CooldownCounter;                                          // 0x0008(0x0004) (ZeroConstructor, SaveGame, IsPlainOldData)
	float                                              Cooldown;                                                 // 0x000C(0x0004) (ZeroConstructor, SaveGame, IsPlainOldData)
	int                                                DistributionCounter;                                      // 0x0010(0x0004) (ZeroConstructor, SaveGame, IsPlainOldData)
	float                                              DistributionBase;                                         // 0x0014(0x0004) (ZeroConstructor, SaveGame, IsPlainOldData)
	int                                                Seed;                                                     // 0x0018(0x0004) (ZeroConstructor, SaveGame, IsPlainOldData)
	float                                              CachedSpawnDistance;                                      // 0x001C(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	class UTexture2D*                                  CachedDensityTexture;                                     // 0x0020(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UMaterialInstance*                           CachedDensityMaterial;                                    // 0x0028(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      CachedTextureTilesX;                                      // 0x0030(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      CachedTextureTilesY;                                      // 0x0031(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x0032(0x0006) MISSED OFFSET
	class UTexture2D*                                  CachedRegionTexture;                                      // 0x0038(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FVector4                                    CachedRegion;                                             // 0x0040(0x0010) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               CachedUseSubtractiveBlend;                                // 0x0050(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               CachedRegionTextureGreenChannelIsPrecipitationMask;       // 0x0051(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               CachedRegionTextureBlueChannelIsPrecipitationToSnowBlendMask;// 0x0052(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               CachedRegionTextureSampledAtCameraPosition;               // 0x0053(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               CachedScaleColumnFogToPercipitation;                      // 0x0054(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0055(0x0003) MISSED OFFSET
	float                                              CachedMinDensityForWeather;                               // 0x0058(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x005C(0x0004) MISSED OFFSET
};

// ScriptStruct BendGame.ProjectileData
// 0x0270
struct FProjectileData
{
	class UClass*                                      ImpactTemplate;                                           // 0x0000(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      ExplosionImpactTemplate;                                  // 0x0008(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      InitialExplosionStatusEffect;                             // 0x0010(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              InitialVelocity;                                          // 0x0018(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x001C(0x0004) MISSED OFFSET
	struct FRuntimeFloatCurve                          BowVelocityCurve;                                         // 0x0020(0x0080) (Edit, DisableEditOnInstance)
	struct FRuntimeFloatCurve                          BowVelocityDamageModifier;                                // 0x00A0(0x0080) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData01[0xC];                                       // 0x0120(0x000C) MISSED OFFSET
	float                                              BloodOnWallMaxDistance;                                   // 0x012C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinDamageAnimBlendSpacePercentage;                        // 0x0130(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxDamageAnimBlendSpacePercentage;                        // 0x0134(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinImpactForce;                                           // 0x0138(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxImpactForce;                                           // 0x013C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinPawnImpactForce;                                       // 0x0140(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxPawnImpactForce;                                       // 0x0144(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinDeadPawnImpactForce;                                   // 0x0148(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxDeadPawnImpactForce;                                   // 0x014C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               UseMinWeaponRange;                                        // 0x0150(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0151(0x0003) MISSED OFFSET
	float                                              MinWeaponRange;                                           // 0x0154(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxWeaponRange;                                           // 0x0158(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxDamageFalloffRange;                                    // 0x015C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxWeaponBlindfireRange;                                  // 0x0160(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              IdealWeaponBlindfireRange;                                // 0x0164(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               OverrideWeaponsDamage;                                    // 0x0168(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0169(0x0003) MISSED OFFSET
	int                                                MinHitDamage;                                             // 0x016C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                MaxHitDamage;                                             // 0x0170(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x8];                                       // 0x0174(0x0008) MISSED OFFSET
	float                                              MaxWeaponCritRange;                                       // 0x017C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData05[0x4];                                       // 0x0180(0x0004) MISSED OFFSET
	int                                                HitReactionsHardMaxDist;                                  // 0x0184(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                HitReactionsMediumMaxDist;                                // 0x0188(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               NPCUseMinWeaponRange;                                     // 0x018C(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData06[0x3];                                       // 0x018D(0x0003) MISSED OFFSET
	float                                              NPCMinWeaponRange;                                        // 0x0190(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NPCMaxWeaponRange;                                        // 0x0194(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                NPCMinHitDamage;                                          // 0x0198(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                NPCMaxHitDamage;                                          // 0x019C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NPCChanceOfHit;                                           // 0x01A0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               ShouldExplodeOnImpact;                                    // 0x01A4(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               ShouldExplodeAtRest;                                      // 0x01A5(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               CanExplodeExplosives;                                     // 0x01A6(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               ShouldNPCsIgnore;                                         // 0x01A7(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               CanIgniteNests;                                           // 0x01A8(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               CanTriggerBearTraps;                                      // 0x01A9(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               IsTrackedForTrophies;                                     // 0x01AA(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<ETrophyKillType>                       TrophyKillType;                                           // 0x01AB(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<EBND150TrophyKillType>                 BND150TrophyKillType;                                     // 0x01AC(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData07[0x3];                                       // 0x01AD(0x0003) MISSED OFFSET
	float                                              ExplodeAfterImpactTimer;                                  // 0x01B0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ExplodeAfterReleasedTimer;                                // 0x01B4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                MinExplosionDamage;                                       // 0x01B8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                MaxExplosionDamage;                                       // 0x01BC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinExplosionRadius;                                       // 0x01C0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxExplosionRadius;                                       // 0x01C4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                MaxPawnsAffectedByExplosion;                              // 0x01C8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ExplosionForce;                                           // 0x01CC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ExplosionOffsetFromNormal;                                // 0x01D0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData08[0x4];                                       // 0x01D4(0x0004) MISSED OFFSET
	class UClass*                                      DamageType;                                               // 0x01D8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      ExplosionDamageType;                                      // 0x01E0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<EExplosiveType>                        ExplosiveType;                                            // 0x01E8(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData09[0x7];                                       // 0x01E9(0x0007) MISSED OFFSET
	struct FName                                       ProjectileFXAttachPoint;                                  // 0x01F0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UParticleSystem*                             ProjectileFX;                                             // 0x01F8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UParticleSystem*                             ProjectileSmokeFX;                                        // 0x0200(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UParticleSystem*                             BoltEquipFX;                                              // 0x0208(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UParticleSystem*                             NPCProjectileFX;                                          // 0x0210(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UParticleSystem*                             NPCProjectileSmokeFX;                                     // 0x0218(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FProjectileShellCasingData                  ShellCasingFX;                                            // 0x0220(0x0018) (Edit, DisableEditOnInstance)
	float                                              MeshHitBloodRadiusInitial;                                // 0x0238(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MeshHitBloodRadiusFinal;                                  // 0x023C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MeshHitBloodRadiusTransitionTime;                         // 0x0240(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               OverrideWeaponsBloodIntensity;                            // 0x0244(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData10[0x3];                                       // 0x0245(0x0003) MISSED OFFSET
	float                                              MeshHitBloodIntensity;                                    // 0x0248(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MeshHitBloodRandomizationLevel;                           // 0x024C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData11[0x20];                                      // 0x0250(0x0020) MISSED OFFSET
};

// ScriptStruct BendGame.CinCinematicPropOverride
// 0x0008 (0x0010 - 0x0008)
struct FCinCinematicPropOverride : public FCinCinematicOverride
{
	bool                                               TurnOffLights;                                            // 0x0008(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               TurnOffEmissive;                                          // 0x0009(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               TurnOffLightCards;                                        // 0x000A(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               TurnOffVolumeCones;                                       // 0x000B(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x000C(0x0004) MISSED OFFSET
};

// ScriptStruct BendGame.MotoRamFalloffInfo
// 0x0010
struct FMotoRamFalloffInfo
{
	bool                                               bCanBeRammed;                                             // 0x0000(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bCanFallFromBike;                                         // 0x0001(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bCanFallFromBikeAsPassenger;                              // 0x0002(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0003(0x0001) MISSED OFFSET
	float                                              FallOffImpulseThreshold;                                  // 0x0004(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              FallOffAngleThreshold;                                    // 0x0008(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bKillRiderAtZeroVehicleHealth;                            // 0x000C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bFallOffAtZeroVehicleHealth;                              // 0x000D(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bFallOffAtZeroVehicleHealthDontGetUp;                     // 0x000E(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bAutoKillWhenFallsOff;                                    // 0x000F(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.PlayerSaveProfileEntry
// 0x0050
struct FPlayerSaveProfileEntry
{
	unsigned char                                      UnknownData00[0x8];                                       // 0x0000(0x0008) MISSED OFFSET
	TEnumAsByte<EPlayerSaveProfileType>                Type;                                                     // 0x0008(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0009(0x0007) MISSED OFFSET
	struct FText                                       Name;                                                     // 0x0010(0x0018) (Edit, BlueprintVisible)
	float                                              MinValue;                                                 // 0x0028(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MaxValue;                                                 // 0x002C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              StepSize;                                                 // 0x0030(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0034(0x0004) MISSED OFFSET
	TArray<struct FText>                               TextFields;                                               // 0x0038(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	float                                              DefaultValue;                                             // 0x0048(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              Value;                                                    // 0x004C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
};

// ScriptStruct BendGame.PlayerSaveProfileCategory
// 0x0010
struct FPlayerSaveProfileCategory
{
	TArray<struct FPlayerSaveProfileEntry>             Entries;                                                  // 0x0000(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
};

// ScriptStruct BendGame.AudioDynamicRangeDef
// 0x0030
struct FAudioDynamicRangeDef
{
	TEnumAsByte<EAudioProfileDynamicRange>             Range;                                                    // 0x0000(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0001(0x0007) MISSED OFFSET
	struct FText                                       Text;                                                     // 0x0008(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FString                                     SubMixName;                                               // 0x0020(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
};

// ScriptStruct BendGame.AudioFormatDynamicRangeDef
// 0x0018
struct FAudioFormatDynamicRangeDef
{
	TEnumAsByte<EAudioProfileFormat>                   Format;                                                   // 0x0000(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0001(0x0007) MISSED OFFSET
	TArray<struct FAudioDynamicRangeDef>               DynamicRanges;                                            // 0x0008(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
};

// ScriptStruct BendGame.SavePlayerProfileVehicleDetails
// 0x0020
struct FSavePlayerProfileVehicleDetails
{
	TArray<int>                                        BikePartVersion;                                          // 0x0000(0x0010) (ZeroConstructor, SaveGame)
	TArray<struct FName>                               BikeSkins;                                                // 0x0010(0x0010) (ZeroConstructor, SaveGame)
};

// ScriptStruct BendGame.SavePlayerProfileLastBikeLoadout
// 0x0050
struct FSavePlayerProfileLastBikeLoadout
{
	unsigned char                                      UnknownData00[0x28];                                      // 0x0000(0x0028) MISSED OFFSET
	TArray<struct FName>                               _bp;                                                      // 0x0028(0x0010) (ZeroConstructor, SaveGame)
	struct FName                                       _pt;                                                      // 0x0038(0x0008) (ZeroConstructor, SaveGame, IsPlainOldData)
	struct FName                                       _bt;                                                      // 0x0040(0x0008) (ZeroConstructor, SaveGame, IsPlainOldData)
	struct FName                                       _tt;                                                      // 0x0048(0x0008) (ZeroConstructor, SaveGame, IsPlainOldData)
};

// ScriptStruct BendGame.DLCSaveData
// 0x00D0
struct FDLCSaveData
{
	struct FName                                       EquippedCharacter;                                        // 0x0000(0x0008) (ZeroConstructor, SaveGame, IsPlainOldData)
	struct FName                                       EquippedBikeSkin;                                         // 0x0008(0x0008) (ZeroConstructor, SaveGame, IsPlainOldData)
	struct FName                                       EquippedRingA;                                            // 0x0010(0x0008) (ZeroConstructor, SaveGame, IsPlainOldData)
	struct FName                                       EquippedRingB;                                            // 0x0018(0x0008) (ZeroConstructor, SaveGame, IsPlainOldData)
	TMap<struct FName, int>                            Scores;                                                   // 0x0020(0x0050) (ZeroConstructor, SaveGame)
	TMap<struct FName, int>                            OwnedItems;                                               // 0x0070(0x0050) (ZeroConstructor, SaveGame)
	TArray<struct FName>                               UnlockedChallenges;                                       // 0x00C0(0x0010) (ZeroConstructor, SaveGame)
};

// ScriptStruct BendGame.PlayerSerializeProfileEntry
// 0x0008
struct FPlayerSerializeProfileEntry
{
	TEnumAsByte<EPlayerSaveProfileType>                Type;                                                     // 0x0000(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	float                                              Value;                                                    // 0x0004(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData)
};

// ScriptStruct BendGame.PlayerSaveProfileMenuEntry
// 0x0008 (0x0058 - 0x0050)
struct FPlayerSaveProfileMenuEntry : public FPlayerSaveProfileEntry
{
	float                                              OriginalValue;                                            // 0x0050(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      bIsMenuOnlyOption : 1;                                    // 0x0054(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUseProgressBar : 1;                                      // 0x0054(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0055(0x0003) MISSED OFFSET
};

// ScriptStruct BendGame.CorpseDecayStageData
// 0x0018
struct FCorpseDecayStageData
{
	struct FTimespan                                   StageTriggerTime;                                         // 0x0000(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<TAssetPtr<class UBendSkeletalMeshLookBase>> StageLooks;                                               // 0x0008(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
};

// ScriptStruct BendGame.CorpseTypeData
// 0x0028
struct FCorpseTypeData
{
	TEnumAsByte<EBendPawnBodyType>                     CorpseType;                                               // 0x0000(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0001(0x0007) MISSED OFFSET
	TArray<struct FCorpseDecayStageData>               CorpseStates;                                             // 0x0008(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	bool                                               bOverrideLifespan;                                        // 0x0018(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0019(0x0007) MISSED OFFSET
	struct FTimespan                                   CorpseLifespan;                                           // 0x0020(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
};

// ScriptStruct BendGame.BendWaterEffect
// 0x0028
struct FBendWaterEffect
{
	float                                              IntensityThreshold;                                       // 0x0000(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FFloatInterval                              WaterDepthInputRange;                                     // 0x0004(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FFloatInterval                              WaterDepthIntensityMultiplier;                            // 0x000C(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              WaterDepthMax;                                            // 0x0014(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              WaterDepthAdjustedDistanceMax;                            // 0x0018(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     Offset;                                                   // 0x001C(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.BendIKEffectCue
// 0x0048
struct FBendIKEffectCue
{
	struct FName                                       FXName;                                                   // 0x0000(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FFloatInterval                              SpeedToIntensity;                                         // 0x0008(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FFloatInterval                              IntensityRange;                                           // 0x0010(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FBendWaterEffect                            WaterEffect;                                              // 0x0018(0x0028) (Edit)
	unsigned char                                      bAttach : 1;                                              // 0x0040(0x0001) (Edit)
	unsigned char                                      bFilterAnimNotify : 1;                                    // 0x0040(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0041(0x0003) MISSED OFFSET
	TEnumAsByte<EBendEffectRotationSpace>              RotationSpace;                                            // 0x0044(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0045(0x0003) MISSED OFFSET
};

// ScriptStruct BendGame.BendSplashEffect
// 0x0014 (0x003C - 0x0028)
struct FBendSplashEffect : public FBendWaterEffect
{
	float                                              SpeedNormalizer;                                          // 0x0028(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SpeedThreshold0To1;                                       // 0x002C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FRotator                                    LocalRotation;                                            // 0x0030(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.BendIKEffectSettings
// 0x01A0
struct FBendIKEffectSettings
{
	bool                                               bActive;                                                  // 0x0000(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	float                                              TouchThresholdSlow;                                       // 0x0004(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TouchThresholdFast;                                       // 0x0008(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              SpeedThreshold;                                           // 0x000C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bCueAsPlayer;                                             // 0x0010(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0011(0x0007) MISSED OFFSET
	struct FBendIKEffectCue                            TouchCue;                                                 // 0x0018(0x0048) (Edit)
	struct FBendIKEffectCue                            DragCue;                                                  // 0x0060(0x0048) (Edit)
	struct FBendIKEffectCue                            LiftCue;                                                  // 0x00A8(0x0048) (Edit)
	float                                              CoolDownDuration;                                         // 0x00F0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DragCoolDownDuration;                                     // 0x00F4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EBendEffectRotationSpace>              RotationSpaceAnimNotify;                                  // 0x00F8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bDropAnimNotify;                                          // 0x00F9(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x2];                                       // 0x00FA(0x0002) MISSED OFFSET
	struct FBendWaterEffect                            AnimNotifyWaterEffect;                                    // 0x00FC(0x0028) (Edit)
	struct FBendSplashEffect                           BodySplashEffect;                                         // 0x0124(0x003C) (Edit)
	struct FBendSplashEffect                           FootSplashEffect;                                         // 0x0160(0x003C) (Edit)
	unsigned char                                      UnknownData03[0x4];                                       // 0x019C(0x0004) MISSED OFFSET
};

// ScriptStruct BendGame.BendNestSpawnType
// 0x0428
struct FBendNestSpawnType
{
	struct FBendAmbientSpawnType                       SpawnType;                                                // 0x0000(0x0418) (Edit)
	struct FVector2D                                   SpawnCountRange;                                          // 0x0418(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector2D                                   SwarmerCountRange;                                        // 0x0420(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.XpecAnimSequenceData
// 0x0017 (0x0018 - 0x0001)
struct FXpecAnimSequenceData : public FTableRowBase
{
	struct FName                                       m_groupName;                                              // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EXpecPOIUserType>                      m_eActorType;                                             // 0x0008(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EXpecPOIUserGender>                    m_eActorGender;                                           // 0x0009(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EUnaimedAnimMoveStyle>                 m_eWeaponType;                                            // 0x000A(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x5];                                       // 0x000B(0x0005) MISSED OFFSET
	class UAnimSequenceBase*                           m_pSequence;                                              // 0x0010(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.ContentionGroupInfo
// 0x0028
struct FContentionGroupInfo
{
	struct FName                                       m_groupName;                                              // 0x0000(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TArray<class ABendPOI*>                            m_GroupedPOIs;                                            // 0x0008(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	bool                                               m_bIsUsing;                                               // 0x0018(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               m_bIsInCoolDown;                                          // 0x0019(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x001A(0x0002) MISSED OFFSET
	float                                              m_fGroupCoolDownTime;                                     // 0x001C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0020(0x0008) MISSED OFFSET
};

// ScriptStruct BendGame.XpecFavoredPOIForPawn
// 0x001F (0x0020 - 0x0001)
struct FXpecFavoredPOIForPawn : public FTableRowBase
{
	struct FName                                       m_PawnName;                                               // 0x0000(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       m_ZoneID;                                                 // 0x0008(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       m_POIName;                                                // 0x0010(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               m_bExcludeOthers;                                         // 0x0018(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0019(0x0007) MISSED OFFSET
};

// ScriptStruct BendGame.XpecScenarioActorFilter
// 0x0010
struct FXpecScenarioActorFilter
{
	TArray<struct FName>                               m_candidates;                                             // 0x0000(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
};

// ScriptStruct BendGame.XpecEventDesc
// 0x0040 (0x0058 - 0x0018)
struct FXpecEventDesc : public FXpecDLink
{
	struct FName                                       m_eventName;                                              // 0x0018(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       m_ScenarioName;                                           // 0x0020(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              m_fDistance;                                              // 0x0028(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              m_fGroupCooldown;                                         // 0x002C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TArray<struct FXpecScenarioActorFilter>            m_actors;                                                 // 0x0030(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	bool                                               m_bDoRandomWaitTime;                                      // 0x0040(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0041(0x0003) MISSED OFFSET
	float                                              m_fRandomWaitTimeMax;                                     // 0x0044(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              m_fRandomWaitTimeMin;                                     // 0x0048(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0xC];                                       // 0x004C(0x000C) MISSED OFFSET
};

// ScriptStruct BendGame.XpecSpawnerInfo
// 0x000F (0x0010 - 0x0001)
struct FXpecSpawnerInfo : public FTableRowBase
{
	struct FName                                       pawnName;                                                 // 0x0000(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               enableMorning;                                            // 0x0008(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               enableAfternoon;                                          // 0x0009(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               enableEvening;                                            // 0x000A(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               enableNight;                                              // 0x000B(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x000C(0x0004) MISSED OFFSET
};

// ScriptStruct BendGame.SplineBlockerSegmentInfo
// 0x0010
struct FSplineBlockerSegmentInfo
{
	struct FName                                       mLevelOutermostName;                                      // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                mBendSegmentID;                                           // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x000C(0x0004) MISSED OFFSET
};

// ScriptStruct BendGame.MeleeMove
// 0x0030
struct FMeleeMove
{
	struct FName                                       MoveName;                                                 // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UAnimSequence*                               AttackAnimation;                                          // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              QuickReleaseTime;                                         // 0x0010(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0014(0x0004) MISSED OFFSET
	struct FName                                       QuickReleaseMove;                                         // 0x0018(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       NextMoveName;                                             // 0x0020(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              NextMoveBufferTime;                                       // 0x0028(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              NextMoveWindowTime;                                       // 0x002C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.BendMeleeAttackGroup
// 0x0030
struct FBendMeleeAttackGroup
{
	TArray<class UAnimSequenceBase*>                   Right;                                                    // 0x0000(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class UAnimSequenceBase*>                   Left;                                                     // 0x0010(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class UAnimSequenceBase*>                   CrossOver;                                                // 0x0020(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
};

// ScriptStruct BendGame.MeleePairedAnimSeqs
// 0x0010
struct FMeleePairedAnimSeqs
{
	class UAnimSequenceBase*                           AttackerAnimation;                                        // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           AttackedAnimation;                                        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.MeleeBrokenWeaponPairedAnimSeqs
// 0x0018
struct FMeleeBrokenWeaponPairedAnimSeqs
{
	struct FName                                       LeaveWeaponSocket;                                        // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FMeleePairedAnimSeqs                        PairedAnimSeq;                                            // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.MeleePairedAnimBasedOnFactionType
// 0x0050
struct FMeleePairedAnimBasedOnFactionType
{
	TArray<TEnumAsByte<EAIFactionType>>                FactionType;                                              // 0x0000(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FMeleePairedAnimSeqs>                RightKill;                                                // 0x0010(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FMeleePairedAnimSeqs>                LeftKill;                                                 // 0x0020(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FMeleePairedAnimSeqs>                OverheadKill;                                             // 0x0030(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FMeleeBrokenWeaponPairedAnimSeqs>    MeleeKillWithBrokenWeapon;                                // 0x0040(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
};

// ScriptStruct BendGame.BendMeleeAttacks
// 0x0120
struct FBendMeleeAttacks
{
	unsigned char                                      UnknownData00[0x4];                                       // 0x0000(0x0004) MISSED OFFSET
	TEnumAsByte<EInventoryWeaponID>                    WeaponType;                                               // 0x0004(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0005(0x0003) MISSED OFFSET
	struct FBendMeleeAttackGroup                       HighAttack;                                               // 0x0008(0x0030) (Edit, DisableEditOnInstance)
	struct FBendMeleeAttackGroup                       MiddleAttack;                                             // 0x0038(0x0030) (Edit, DisableEditOnInstance)
	struct FBendMeleeAttackGroup                       LowAttack;                                                // 0x0068(0x0030) (Edit, DisableEditOnInstance)
	struct FBendMeleeAttackGroup                       GroundAttack;                                             // 0x0098(0x0030) (Edit, DisableEditOnInstance)
	struct FBendMeleeAttackGroup                       OverheadAttack;                                           // 0x00C8(0x0030) (Edit, DisableEditOnInstance)
	TArray<struct FMeleePairedAnimBasedOnFactionType>  MeleePairedAnimations;                                    // 0x00F8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	class UAnimSequenceBase*                           MissSwingRight;                                           // 0x0108(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAnimSequenceBase*                           MissSwingLeft;                                            // 0x0110(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAnimSequenceBase*                           MissSwingOverhead;                                        // 0x0118(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
};

// ScriptStruct BendGame.BendStoryLineDynamicDescriptions
// 0x0028
struct FBendStoryLineDynamicDescriptions
{
	struct FText                                       StoryLineText;                                            // 0x0000(0x0018) (Edit, BlueprintVisible)
	TArray<TAssetPtr<class UClass>>                    ConditionForUnlocking;                                    // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
};

// ScriptStruct BendGame.BendStoryLineAssets
// 0x0038
struct FBendStoryLineAssets
{
	class UBendMissionData*                            MissionData;                                              // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UJobClassInfo*                               JobData;                                                  // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FText                                       PostCompleteDescription;                                  // 0x0010(0x0018) (Edit, BlueprintVisible)
	struct FGameplayTag                                AssociatedCollectible;                                    // 0x0028(0x0008) (Edit, BlueprintVisible)
	int                                                ForceToIndexInArray;                                      // 0x0030(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0034(0x0004) MISSED OFFSET
};

// ScriptStruct BendGame.BendStoryLinesData
// 0x00D0
struct FBendStoryLinesData
{
	struct FText                                       StoryLineTitle;                                           // 0x0000(0x0018) (Edit, BlueprintVisible)
	TArray<struct FBendStoryLineDynamicDescriptions>   StoryLineDynamicDescriptions;                             // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FBendStoryLineAssets>                StoryLineAssets;                                          // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FBendStoryLineRewards>               StoryLineRewards;                                         // 0x0038(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	class UTexture2D*                                  StoryLineIcon;                                            // 0x0048(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FText                                       StoryLineIconGlyph;                                       // 0x0050(0x0018) (Edit, BlueprintVisible)
	TAssetPtr<class UTexture2D>                        StoryLineCoverImage;                                      // 0x0068(0x0020) (Edit, BlueprintVisible)
	TAssetPtr<class UTexture2D>                        StoryLineBackgroundImage;                                 // 0x0088(0x0020) (Edit, BlueprintVisible)
	struct FLinearColor                                StoryLineColor;                                           // 0x00A8(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FGameplayTag                                StoryLineCollectible;                                     // 0x00B8(0x0008) (Edit, BlueprintVisible)
	struct FString                                     LocalizationStorylineIdentifier;                          // 0x00C0(0x0010) (Edit, ZeroConstructor, EditConst)
};

// ScriptStruct BendGame.BendStoryLineAssetsForScripting
// 0x0038
struct FBendStoryLineAssetsForScripting
{
	class UBendMissionData*                            MissionData;                                              // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UJobClassInfo*                               JobData;                                                  // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EStoryLineState>                       StateOfAsset;                                             // 0x0010(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0011(0x0007) MISSED OFFSET
	struct FText                                       CurrentDescription;                                       // 0x0018(0x0018) (Edit, BlueprintVisible)
	struct FGameplayTag                                AssociatedCollectible;                                    // 0x0030(0x0008) (Edit, BlueprintVisible)
};

// ScriptStruct BendGame.BendStoryLinesForScripting
// 0x0150
struct FBendStoryLinesForScripting
{
	TEnumAsByte<EStoryLines>                           StoryLineID;                                              // 0x0000(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EStoryLineState>                       StateOfStoryLine;                                         // 0x0001(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0002(0x0002) MISSED OFFSET
	int                                                CompletedCount;                                           // 0x0004(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                TotalCount;                                               // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CompletionPercentage;                                     // 0x000C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FText                                       StoryLineTitle;                                           // 0x0010(0x0018) (Edit, BlueprintVisible)
	struct FText                                       CurrentDescription;                                       // 0x0028(0x0018) (Edit, BlueprintVisible)
	TArray<struct FBendStoryLineAssetsForScripting>    StoryLineAssets;                                          // 0x0040(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FBendStoryLineRewards>               StoryLineRewards;                                         // 0x0050(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FBendStoryLineRewards                       NextRewardThatUnlocks;                                    // 0x0060(0x0078) (Edit, BlueprintVisible)
	class UTexture2D*                                  StoryLineIcon;                                            // 0x00D8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FText                                       StoryLineIconGlyph;                                       // 0x00E0(0x0018) (Edit, BlueprintVisible)
	TAssetPtr<class UTexture2D>                        StoryLineCoverImage;                                      // 0x00F8(0x0020) (Edit, BlueprintVisible)
	TAssetPtr<class UTexture2D>                        StoryLineBackgroundImage;                                 // 0x0118(0x0020) (Edit, BlueprintVisible)
	struct FGameplayTag                                StoryLineCollectible;                                     // 0x0138(0x0008) (Edit, BlueprintVisible)
	struct FLinearColor                                StoryLineColor;                                           // 0x0140(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.BendAsyncObjectLoadList
// 0x0010
struct FBendAsyncObjectLoadList
{
	TArray<TAssetPtr<class UObject>>                   ObjectsToLoad;                                            // 0x0000(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
};

// ScriptStruct BendGame.StreamingOverrideCommand
// 0x000C
struct FStreamingOverrideCommand
{
	TEnumAsByte<EBendLevelStreamingGroup>              StreamingGroupID;                                         // 0x0000(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	int                                                LOD;                                                      // 0x0004(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              LOD_Distance;                                             // 0x0008(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.StreamingLevelsAction
// 0x0018
struct FStreamingLevelsAction
{
	TArray<struct FName>                               LevelNames;                                               // 0x0000(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	bool                                               LoadAndSetInvisible;                                      // 0x0010(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               BlockFromLoading;                                         // 0x0011(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x0012(0x0006) MISSED OFFSET
};

// ScriptStruct BendGame.StreamingOverrideSettings
// 0x0040
struct FStreamingOverrideSettings
{
	TEnumAsByte<EStreamingOverrideType>                OverrideType;                                             // 0x0000(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	TWeakObjectPtr<class ABendTriggerVolume>           TriggerVolume;                                            // 0x0004(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x000C(0x0004) MISSED OFFSET
	TArray<struct FStreamingOverrideCommand>           StreamingOverrideCommands;                                // 0x0010(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	struct FStreamingLevelsAction                      StreamingLevelActions;                                    // 0x0020(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly)
	bool                                               bUsingOverrideVolume;                                     // 0x0038(0x0001) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0039(0x0007) MISSED OFFSET
};

// ScriptStruct BendGame.StreamingOverrideAction
// 0x0048
struct FStreamingOverrideAction
{
	TWeakObjectPtr<class ABendStreamingOverrideActor>  StreamOverrideOwner;                                      // 0x0000(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FStreamingOverrideSettings                  StreamOverrideSettings;                                   // 0x0008(0x0040)
};

// ScriptStruct BendGame.SurfaceTypeFxData_Simple
// 0x0008
struct FSurfaceTypeFxData_Simple
{
	class UParticleSystem*                             ParticleFX;                                               // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
};

// ScriptStruct BendGame.SurfaceTypeTireMarkData
// 0x0010
struct FSurfaceTypeTireMarkData
{
	class UMaterialInstance*                           DecalMaterial;                                            // 0x0000(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               PlaceOnlyWhenSkidding;                                    // 0x0008(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0009(0x0007) MISSED OFFSET
};

// ScriptStruct BendGame.SurfaceTypeDecal
// 0x0028 (0x0050 - 0x0028)
struct FSurfaceTypeDecal : public FDecalData
{
	float                                              DecalAspect;                                              // 0x0028(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DecalMinAspect;                                           // 0x002C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FRotator                                    DecalRotation;                                            // 0x0030(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     DecalOffset;                                              // 0x003C(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       DecalKey;                                                 // 0x0048(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.SurfaceTypeFxData
// 0x0078
struct FSurfaceTypeFxData
{
	struct FName                                       BlueprintFXName;                                          // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class USoundCue*                                   PlayerSoundFX;                                            // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class USoundCue*                                   FriendSoundFX;                                            // 0x0010(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class USoundCue*                                   SoundFX;                                                  // 0x0018(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UParticleSystem*                             ParticleFX;                                               // 0x0020(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FDecalData                                  DecalFX;                                                  // 0x0028(0x0028) (Deprecated)
	TArray<struct FSurfaceTypeDecal>                   Decals;                                                   // 0x0050(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	struct FLinearColor                                DebugColor;                                               // 0x0060(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      DoValidate : 1;                                           // 0x0070(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      IsValid : 1;                                              // 0x0070(0x0001) (Edit, EditConst)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0071(0x0007) MISSED OFFSET
};

// ScriptStruct BendGame.BendTutorialSimple
// 0x0038
struct FBendTutorialSimple
{
	struct FName                                       TutorialName;                                             // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FText                                       Title;                                                    // 0x0008(0x0018) (Edit, BlueprintVisible)
	struct FText                                       Description;                                              // 0x0020(0x0018) (Edit, BlueprintVisible)
};

// ScriptStruct BendGame.BendTutorialMultiLine
// 0x0060
struct FBendTutorialMultiLine
{
	struct FName                                       TutorialName;                                             // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FText                                       Title;                                                    // 0x0008(0x0018) (Edit, BlueprintVisible)
	struct FText                                       Description;                                              // 0x0020(0x0018) (Edit, BlueprintVisible)
	TAssetPtr<class UTexture2D>                        ImageAsset;                                               // 0x0038(0x0020) (Edit, BlueprintVisible)
	class UTexture2D*                                  Image;                                                    // 0x0058(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.InventoryMaterialParam
// 0x0010
struct FInventoryMaterialParam
{
	struct FName                                       Param;                                                    // 0x0000(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              Value;                                                    // 0x0008(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x000C(0x0004) MISSED OFFSET
};

// ScriptStruct BendGame.InventoryBikePartGroup
// 0x0038
struct FInventoryBikePartGroup
{
	struct FName                                       MaterialGroup;                                            // 0x0000(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FGameplayTagContainer                       Tags;                                                     // 0x0008(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly)
	TArray<struct FInventoryMaterialParam>             Params;                                                   // 0x0028(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
};

// ScriptStruct BendGame.InventoryBikeSkinDef
// 0x0018
struct FInventoryBikeSkinDef
{
	struct FGameplayTag                                ThemeTag;                                                 // 0x0000(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly)
	TArray<struct FInventoryBikePartGroup>             PartGroups;                                               // 0x0008(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
};

// ScriptStruct BendGame.InventoryBikePartMaterial
// 0x0030
struct FInventoryBikePartMaterial
{
	struct FGameplayTag                                PartTag;                                                  // 0x0000(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly)
	int                                                MaterialIndex;                                            // 0x0008(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x000C(0x0004) MISSED OFFSET
	TAssetPtr<class UMaterialInstance>                 Material;                                                 // 0x0010(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly)
};

// ScriptStruct BendGame.InventoryMaterialGroup
// 0x0018
struct FInventoryMaterialGroup
{
	struct FName                                       Name;                                                     // 0x0000(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TArray<struct FInventoryBikePartMaterial>          Materials;                                                // 0x0008(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
};

// ScriptStruct BendGame.InventoryBikePartDecal
// 0x0038
struct FInventoryBikePartDecal
{
	struct FGameplayTag                                DecalTag;                                                 // 0x0000(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly)
	TAssetPtr<class UTexture2D>                        Decal;                                                    // 0x0008(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly)
	TArray<struct FInventoryMaterialParam>             DecalParams;                                              // 0x0028(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
};

// ScriptStruct BendGame.InventoryBikeSkin
// 0x0018
struct FInventoryBikeSkin
{
	struct FGameplayTag                                SkinTag;                                                  // 0x0000(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly)
	TArray<struct FInventoryBikePartMaterial>          Parts;                                                    // 0x0008(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
};

// ScriptStruct BendGame.InventoryBikePartCustomDecal
// 0x0018
struct FInventoryBikePartCustomDecal
{
	struct FGameplayTag                                DecalTag;                                                 // 0x0000(0x0008) (Edit, BlueprintVisible)
	struct FLinearColor                                DecalTint;                                                // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.InventoryBikePartStorageEquipSlot
// 0x0050
struct FInventoryBikePartStorageEquipSlot
{
	TEnumAsByte<EMotorcyclePartType>                   PartType;                                                 // 0x0000(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0001(0x0007) MISSED OFFSET
	class UBendVehicleMeshAttachmentSpecs*             AttachmentSpecs;                                          // 0x0008(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FInventoryPart                              Part;                                                     // 0x0010(0x0040) (BlueprintVisible, BlueprintReadOnly)
};

// ScriptStruct BendGame.InventoryGuidSlot
// 0x0010 (0x0020 - 0x0010)
struct FInventoryGuidSlot : public FInventoryStorageItemBase
{
	struct FInventoryGuid                              Guid;                                                     // 0x0010(0x0010) (BlueprintVisible, BlueprintReadOnly, Transient)
};

// ScriptStruct BendGame.UnlockableSkill
// 0x0010
struct FUnlockableSkill
{
	TEnumAsByte<EEarlyUnlockVersion>                   UnlockedFrom;                                             // 0x0000(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<EInventorySkillID>                     SkillID;                                                  // 0x0001(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x0002(0x0006) MISSED OFFSET
	struct FName                                       SkillName;                                                // 0x0008(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
};

// ScriptStruct BendGame.UnlockableWeapon
// 0x0010
struct FUnlockableWeapon
{
	TEnumAsByte<EEarlyUnlockVersion>                   UnlockedFrom;                                             // 0x0000(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0001(0x0007) MISSED OFFSET
	struct FGameplayTag                                Tag;                                                      // 0x0008(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
};

// ScriptStruct BendGame.UnlockableBikePart
// 0x0018
struct FUnlockableBikePart
{
	TEnumAsByte<EEarlyUnlockVersion>                   UnlockedFrom;                                             // 0x0000(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0001(0x0007) MISSED OFFSET
	struct FGameplayTag                                Tag;                                                      // 0x0008(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FGameplayTag                                FallbackBikePartTag;                                      // 0x0010(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
};

// ScriptStruct BendGame.UnlockableBikeSkin
// 0x0020
struct FUnlockableBikeSkin
{
	TEnumAsByte<EEarlyUnlockVersion>                   UnlockedFrom;                                             // 0x0000(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0001(0x0007) MISSED OFFSET
	struct FGameplayTag                                Tag;                                                      // 0x0008(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	TArray<struct FGameplayTag>                        FallbackSkinTags;                                         // 0x0010(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
};

// ScriptStruct BendGame.MapMarkerWidgetDetails
// 0x00D0
struct FMapMarkerWidgetDetails
{
	class UMapLocation*                                MapLocation;                                              // 0x0000(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	class AActor*                                      MapLocationOwner;                                         // 0x0008(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	struct FString                                     NestingZoneStatus;                                        // 0x0010(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst)
	int                                                NestingZoneStatusCurrent;                                 // 0x0020(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	int                                                NestingZoneStatusTotal;                                   // 0x0024(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	TAssetPtr<class UTexture2D>                        LocationImageAssetPtr;                                    // 0x0028(0x0020) (Edit, BlueprintVisible, EditConst)
	unsigned char                                      bFastTravelBlocked : 1;                                   // 0x0048(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)
	unsigned char                                      bHasLocationImage : 1;                                    // 0x0048(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0049(0x0007) MISSED OFFSET
	struct FMapLocationFastTravel                      FastTravelLocation;                                       // 0x0050(0x0070) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)
	TEnumAsByte<EMapRolloverType>                      MapRolloverType;                                          // 0x00C0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EObjectiveVisualType>                  ObjectiveVisualType;                                      // 0x00C1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EObjectiveCategories>                  ObjectiveCategories;                                      // 0x00C2(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x00C3(0x0001) MISSED OFFSET
	float                                              PathDistance;                                             // 0x00C4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x00C8(0x0008) MISSED OFFSET
};

// ScriptStruct BendGame.SaveGameMenuItemData
// 0x0080
struct FSaveGameMenuItemData
{
	class UTexture2D*                                  Thumbnail;                                                // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FText                                       SaveName;                                                 // 0x0008(0x0018) (Edit, BlueprintVisible)
	struct FText                                       SaveDate;                                                 // 0x0020(0x0018) (Edit, BlueprintVisible)
	struct FText                                       SaveTime;                                                 // 0x0038(0x0018) (Edit, BlueprintVisible)
	struct FText                                       SaveMission;                                              // 0x0050(0x0018) (Edit, BlueprintVisible)
	struct FString                                     SaveSlot;                                                 // 0x0068(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0078(0x0008) MISSED OFFSET
};

// ScriptStruct BendGame.PerfTest
// 0x0020
struct FPerfTest
{
	float                                              Scale;                                                    // 0x0000(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                Quality;                                                  // 0x0004(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xC];                                       // 0x0008(0x000C) MISSED OFFSET
	float                                              FPS;                                                      // 0x0014(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0018(0x0008) MISSED OFFSET
};

// ScriptStruct BendGame.BendVehicleGroundSufaceBumpinessLayer
// 0x0008
struct FBendVehicleGroundSufaceBumpinessLayer
{
	float                                              BumpHeight;                                               // 0x0000(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              BumpSpacing;                                              // 0x0004(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
};

// ScriptStruct BendGame.BendVehiclePartLoadout_Range
// 0x0008
struct FBendVehiclePartLoadout_Range
{
	float                                              Min;                                                      // 0x0000(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Max;                                                      // 0x0004(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.BendVehiclePartLoadout_PartType
// 0x0018
struct FBendVehiclePartLoadout_PartType
{
	TEnumAsByte<EMotorcyclePartType>                   PartType;                                                 // 0x0000(0x0001) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0001(0x0007) MISSED OFFSET
	TArray<TAssetPtr<class UClass>>                    PartVariations;                                           // 0x0008(0x0010) (Edit, ZeroConstructor, EditConst)
};

// ScriptStruct BendGame.BendVehiclePartLoadout_Faction
// 0x0018
struct FBendVehiclePartLoadout_Faction
{
	TEnumAsByte<EAIFactionType>                        Faction;                                                  // 0x0000(0x0001) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0001(0x0007) MISSED OFFSET
	TArray<struct FBendVehiclePartLoadout_PartType>    PartTypes;                                                // 0x0008(0x0010) (Edit, ZeroConstructor, EditConst)
};

// ScriptStruct BendGame.BendVehiclePartLoadout_Tier
// 0x0018
struct FBendVehiclePartLoadout_Tier
{
	TEnumAsByte<EBendWorldTier>                        Tier;                                                     // 0x0000(0x0001) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0001(0x0007) MISSED OFFSET
	TArray<struct FBendVehiclePartLoadout_Faction>     Factions;                                                 // 0x0008(0x0010) (Edit, ZeroConstructor, EditConst)
};

// ScriptStruct BendGame.BendVehiclePartUpgradeVersions
// 0x0018
struct FBendVehiclePartUpgradeVersions
{
	TEnumAsByte<EMotorcyclePartType>                   PartType;                                                 // 0x0000(0x0001) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0001(0x0007) MISSED OFFSET
	TArray<TAssetPtr<class UClass>>                    Versions_NEW;                                             // 0x0008(0x0010) (Edit, ZeroConstructor)
};

// ScriptStruct BendGame.BendSeatSetup
// 0x0020
struct FBendSeatSetup
{
	struct FName                                       SeatName;                                                 // 0x0000(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FName                                       SeatSocketName;                                           // 0x0008(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UBendAnimVariationData*                      AnimationSet;                                             // 0x0010(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bIsDriverSeat : 1;                                        // 0x0018(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0019(0x0007) MISSED OFFSET
};

// ScriptStruct BendGame.BendVehicleSkillInfoForSkillLevel
// 0x001C
struct FBendVehicleSkillInfoForSkillLevel
{
	float                                              MaxSpeedScale;                                            // 0x0000(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              FrontTireFrictionScale;                                   // 0x0004(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              RearTireFrictionScale;                                    // 0x0008(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              FrontTireDragScale;                                       // 0x000C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              RearTireDragScale;                                        // 0x0010(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ThrottleScale_MiniDrift;                                  // 0x0014(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EBendVehicleSpeedLimiterMethod>        SpeedLimiterMethod_MiniDrift;                             // 0x0018(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0019(0x0003) MISSED OFFSET
};

// ScriptStruct BendGame.BendTireEffect
// 0x0000 (0x003C - 0x003C)
struct FBendTireEffect : public FBendSplashEffect
{

};

// ScriptStruct BendGame.VocalFXTypeData
// 0x0020
struct FVocalFXTypeData
{
	struct FName                                       BlueprintFXName;                                          // 0x0000(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       SoundFXName;                                              // 0x0008(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UParticleSystem*                             ParticleFX;                                               // 0x0010(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              Priority;                                                 // 0x0018(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               PlayWhenDead;                                             // 0x001C(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x001D(0x0003) MISSED OFFSET
};

// ScriptStruct BendGame.BendWarningMemberInfo
// 0x000C
struct FBendWarningMemberInfo
{
	TWeakObjectPtr<class UBendWarningGroupComponent>   Component;                                                // 0x0000(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	float                                              DistanceToTarget;                                         // 0x0008(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.WGParticleFxData
// 0x0010
struct FWGParticleFxData
{
	TEnumAsByte<EPhysicalSurface>                      TypeOfSurface;                                            // 0x0000(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0001(0x0007) MISSED OFFSET
	class UParticleSystem*                             ParticleFX;                                               // 0x0008(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
};

// ScriptStruct BendGame.BendCrowdFullFledgedPawn_StrongReferences
// 0x0010
struct FBendCrowdFullFledgedPawn_StrongReferences
{
	class APawn*                                       Pawn;                                                     // 0x0000(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class AController*                                 Controller;                                               // 0x0008(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
};

// ScriptStruct BendGame.BendCrowdFullFledgedPawnManager
// 0x0180
struct FBendCrowdFullFledgedPawnManager
{
	unsigned char                                      UnknownData00[0x10];                                      // 0x0000(0x0010) MISSED OFFSET
	TArray<struct FBendCrowdFullFledgedPawn_StrongReferences> FullFledgedPawns_StrongReferences;                        // 0x0010(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData01[0xA0];                                      // 0x0020(0x00A0) MISSED OFFSET
	class UClass*                                      Class;                                                    // 0x00C0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UClass*                                      ControllerClass;                                          // 0x00C8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0xB0];                                      // 0x00D0(0x00B0) MISSED OFFSET
};

// ScriptStruct BendGame.BendCrowdAwarenessZoneId
// 0x0008
struct FBendCrowdAwarenessZoneId
{
	unsigned char                                      UnknownData00[0x8];                                       // 0x0000(0x0008) MISSED OFFSET
};

// ScriptStruct BendGame.DLCCompleteChallengeData
// 0x0078
struct FDLCCompleteChallengeData
{
	struct FText                                       ChallengeName;                                            // 0x0000(0x0018) (Edit, BlueprintVisible)
	float                                              GlobalRepAwarded;                                         // 0x0018(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              GlobalRepCurrent;                                         // 0x001C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              GlobalRepMax;                                             // 0x0020(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              RepAwarded;                                               // 0x0024(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              RepCurrent;                                               // 0x0028(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              RepMax;                                                   // 0x002C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CreditsAwarded;                                           // 0x0030(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CreditsCurrent;                                           // 0x0034(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CreditsMax;                                               // 0x0038(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                TotalScore;                                               // 0x003C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<struct FText>                               SubobjectiveTitles;                                       // 0x0040(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<int>                                        SubobjectiveScores;                                       // 0x0050(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<TEnumAsByte<EDLCChallengeRank>>             SubobjectiveAwards;                                       // 0x0060(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FTimespan                                   TotalTime;                                                // 0x0070(0x0008) (Edit, BlueprintVisible, ZeroConstructor)
};

// ScriptStruct BendGame.SubChallengeData
// 0x0067 (0x0068 - 0x0001)
struct FSubChallengeData : public FTableRowBase
{
	struct FText                                       Title;                                                    // 0x0000(0x0018) (Edit, BlueprintVisible)
	TArray<struct FText>                               Description;                                              // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FText                                       Goal;                                                     // 0x0028(0x0018) (Edit, BlueprintVisible)
	TArray<int>                                        TargetScore;                                              // 0x0040(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<int>                                        PointBonus;                                               // 0x0050(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TEnumAsByte<EDLCValueDisplayType>                  ValueType;                                                // 0x0060(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0061(0x0007) MISSED OFFSET
};

// ScriptStruct BendGame.ScoreModifierData
// 0x002F (0x0030 - 0x0001)
struct FScoreModifierData : public FTableRowBase
{
	struct FText                                       Title;                                                    // 0x0000(0x0018) (Edit, BlueprintVisible)
	struct FLinearColor                                Color;                                                    // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ScoreMultiplier;                                          // 0x0028(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ComboLifespanMultiplier;                                  // 0x002C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.ScoreEventData
// 0x001F (0x0020 - 0x0001)
struct FScoreEventData : public FTableRowBase
{
	struct FText                                       Title;                                                    // 0x0000(0x0018) (Edit, BlueprintVisible)
	int                                                Value;                                                    // 0x0018(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ComboLifespan;                                            // 0x001C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.RingData
// 0x0087 (0x0088 - 0x0001)
struct FRingData : public FTableRowBase
{
	struct FText                                       Title;                                                    // 0x0000(0x0018) (Edit, BlueprintVisible)
	struct FText                                       Overview;                                                 // 0x0018(0x0018) (Edit, BlueprintVisible)
	TArray<struct FText>                               Description;                                              // 0x0030(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TEnumAsByte<EDLCValueDisplayType>                  ValueType;                                                // 0x0040(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0041(0x0007) MISSED OFFSET
	TArray<TAssetPtr<class UStaticMesh>>               Mesh;                                                     // 0x0048(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<float>                                      Value;                                                    // 0x0058(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	float                                              DefaultValue;                                             // 0x0068(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x006C(0x0004) MISSED OFFSET
	TArray<float>                                      SecondaryValue;                                           // 0x0070(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	float                                              SecondaryDefaultValue;                                    // 0x0080(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0084(0x0004) MISSED OFFSET
};

// ScriptStruct BendGame.DLCUnlock
// 0x0010
struct FDLCUnlock
{
	struct FGameplayTag                                Key;                                                      // 0x0000(0x0008) (Edit, BlueprintVisible, SaveGame)
	int                                                Level;                                                    // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x000C(0x0004) MISSED OFFSET
};

// ScriptStruct BendGame.RankData
// 0x002F (0x0030 - 0x0001)
struct FRankData : public FTableRowBase
{
	int                                                ReputationMinimum;                                        // 0x0000(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                ReputationMaximum;                                        // 0x0004(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FText                                       Title;                                                    // 0x0008(0x0018) (Edit, BlueprintVisible)
	TArray<struct FDLCUnlock>                          AvailableItems;                                           // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
};

// ScriptStruct BendGame.PatchData
// 0x0087 (0x0088 - 0x0001)
struct FPatchData : public FTableRowBase
{
	struct FText                                       Title;                                                    // 0x0000(0x0018) (Edit, BlueprintVisible)
	struct FText                                       Overview;                                                 // 0x0018(0x0018) (Edit, BlueprintVisible)
	TArray<struct FText>                               Description;                                              // 0x0030(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TEnumAsByte<EDLCValueDisplayType>                  ValueType;                                                // 0x0040(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0041(0x0007) MISSED OFFSET
	TArray<float>                                      Value;                                                    // 0x0048(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	float                                              DefaultValue;                                             // 0x0058(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x005C(0x0004) MISSED OFFSET
	TArray<float>                                      SecondaryValue;                                           // 0x0060(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	float                                              SecondaryDefaultValue;                                    // 0x0070(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0074(0x0004) MISSED OFFSET
	struct FGameplayTag                                AssociatedChallenge;                                      // 0x0078(0x0008) (Edit, BlueprintVisible)
	int                                                PatchAtlasID;                                             // 0x0080(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0084(0x0004) MISSED OFFSET
};

// ScriptStruct BendGame.DisplayData
// 0x001F (0x0020 - 0x0001)
struct FDisplayData : public FTableRowBase
{
	TArray<TAssetPtr<class UTexture2D>>                Icon;                                                     // 0x0000(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<TAssetPtr<class UTexture2D>>                Image;                                                    // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
};

// ScriptStruct BendGame.CharacterData
// 0x008F (0x0090 - 0x0001)
struct FCharacterData : public FTableRowBase
{
	struct FText                                       Title;                                                    // 0x0000(0x0018) (Edit, BlueprintVisible)
	struct FText                                       Description;                                              // 0x0018(0x0018) (Edit, BlueprintVisible)
	TEnumAsByte<EDLCValueDisplayType>                  ValueType;                                                // 0x0030(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0031(0x0007) MISSED OFFSET
	TAssetPtr<class UBendSkeletalMeshLook>             Look;                                                     // 0x0038(0x0020) (Edit, BlueprintVisible)
	TAssetPtr<class UBendSkeletalMeshLook>             LowChanceLook;                                            // 0x0058(0x0020) (Edit, BlueprintVisible)
	float                                              PercentChanceForLowChanceLook;                            // 0x0078(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              LookScale;                                                // 0x007C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class USoundClass*                                 CharSoundClass;                                           // 0x0080(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              Value;                                                    // 0x0088(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DefaultValue;                                             // 0x008C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.ChallengeData
// 0x00EF (0x00F0 - 0x0001)
struct FChallengeData : public FTableRowBase
{
	struct FText                                       Title;                                                    // 0x0000(0x0018) (Edit, BlueprintVisible)
	struct FText                                       Description;                                              // 0x0018(0x0018) (Edit, BlueprintVisible)
	struct FText                                       DescriptionShort;                                         // 0x0030(0x0018) (Edit, BlueprintVisible)
	struct FText                                       Objective;                                                // 0x0048(0x0018) (Edit, BlueprintVisible)
	struct FText                                       ChallengeWeek;                                            // 0x0060(0x0018) (Edit, BlueprintVisible)
	struct FText                                       LockedTitle;                                              // 0x0078(0x0018) (Edit, BlueprintVisible)
	struct FText                                       LockedDescription;                                        // 0x0090(0x0018) (Edit, BlueprintVisible)
	TEnumAsByte<EDLCChallengeType>                     Type;                                                     // 0x00A8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00A9(0x0007) MISSED OFFSET
	TArray<int>                                        TargetScore;                                              // 0x00B0(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	class UCurveFloat*                                 ComboMultiplierCurve;                                     // 0x00C0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UCurveFloat*                                 ComboDecayCurve;                                          // 0x00C8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EMissionIDs>                           MissionID;                                                // 0x00D0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x00D1(0x0007) MISSED OFFSET
	TArray<struct FName>                               SubChallengeKeys;                                         // 0x00D8(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TEnumAsByte<EBendLeaderboardID>                    LeaderboardId;                                            // 0x00E8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x00E9(0x0007) MISSED OFFSET
};

// ScriptStruct BendGame.BikeSkinData
// 0x0057 (0x0058 - 0x0001)
struct FBikeSkinData : public FTableRowBase
{
	struct FText                                       Title;                                                    // 0x0000(0x0018) (Edit, BlueprintVisible)
	struct FText                                       Description;                                              // 0x0018(0x0018) (Edit, BlueprintVisible)
	TEnumAsByte<EDLCValueDisplayType>                  ValueType;                                                // 0x0030(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0031(0x0007) MISSED OFFSET
	struct FGameplayTag                                PaintTag;                                                 // 0x0038(0x0008) (Edit, BlueprintVisible)
	struct FGameplayTag                                BodyTag;                                                  // 0x0040(0x0008) (Edit, BlueprintVisible)
	struct FGameplayTag                                TankTag;                                                  // 0x0048(0x0008) (Edit, BlueprintVisible)
	float                                              Value;                                                    // 0x0050(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DefaultValue;                                             // 0x0054(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.DLCGridWidgetData
// 0x0010
struct FDLCGridWidgetData
{
	struct FGameplayTag                                Tag;                                                      // 0x0000(0x0008) (Edit, BlueprintVisible)
	class UClass*                                      ItemWidgetClass;                                          // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.HungActorData
// 0x0028
struct FHungActorData
{
	int                                                RotationSeed;                                             // 0x0000(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                SocketAlongCable;                                         // 0x0004(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class AActor*                                      HungActor;                                                // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                HungActorStaticMeshComponentIndex;                        // 0x0010(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                HungActorStaticMeshComponentSocket;                       // 0x0014(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FRotator                                    HungActorRotationOffset;                                  // 0x0018(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0024(0x0004) MISSED OFFSET
};

// ScriptStruct BendGame.GameDebugMenuEntry
// 0x0040
struct FGameDebugMenuEntry
{
	struct FString                                     DebugMenuName;                                            // 0x0000(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TAssetPtr<class UClass>                            DebugMenuClass;                                           // 0x0010(0x0020) (Edit, DisableEditOnInstance)
	class AGameDebugMenu*                              GameDebugMenu;                                            // 0x0030(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0038(0x0008) MISSED OFFSET
};

// ScriptStruct BendGame.DebugOptionDetails
// 0x0038
struct FDebugOptionDetails
{
	struct FString                                     Name;                                                     // 0x0000(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FString                                     EnumName;                                                 // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	float                                              InitialValue;                                             // 0x0020(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MinValue;                                                 // 0x0024(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxValue;                                                 // 0x0028(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              StepValue;                                                // 0x002C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0030(0x0008) MISSED OFFSET
};

// ScriptStruct BendGame.InventoryBaseTypeData
// 0x0018
struct FInventoryBaseTypeData
{
	TEnumAsByte<EInventoryBaseType>                    Type;                                                     // 0x0000(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0001(0x0007) MISSED OFFSET
	TArray<class UDataTable*>                          DataTables;                                               // 0x0008(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
};

// ScriptStruct BendGame.InventoryItemArray
// 0x0010
struct FInventoryItemArray
{
	TArray<class UInventoryItem*>                      Items;                                                    // 0x0000(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst)
};

// ScriptStruct BendGame.InventoryManagerItems
// 0x0278
struct FInventoryManagerItems
{
	TArray<struct FInventoryItemArray>                 ItemArray;                                                // 0x0000(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst)
	TMap<uint32_t, class UInventoryItem*>              ItemMap;                                                  // 0x0010(0x0050) (Edit, ZeroConstructor, EditConst)
	unsigned char                                      UnknownData00[0x218];                                     // 0x0060(0x0218) MISSED OFFSET
};

// ScriptStruct BendGame.InventoryTagContainer
// 0x0028
struct FInventoryTagContainer
{
	struct FGameplayTagContainer                       TagContainer;                                             // 0x0000(0x0020) (Edit, BlueprintVisible)
	TEnumAsByte<EGameplayTagMatchType>                 MatchType;                                                // 0x0020(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EGameplayTagMatchType>                 TagToCheckMatchType;                                      // 0x0021(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x0022(0x0006) MISSED OFFSET
};

// ScriptStruct BendGame.InventoryItemTagSet
// 0x0030
struct FInventoryItemTagSet
{
	struct FName                                       Name;                                                     // 0x0000(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FInventoryTagContainer                      ItemTags;                                                 // 0x0008(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
};

// ScriptStruct BendGame.RecipeMenuComponent
// 0x0008 (0x0030 - 0x0028)
struct FRecipeMenuComponent : public FRecipeComponent
{
	class UInventoryItem*                              ComponentItem;                                            // 0x0028(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
};

// ScriptStruct BendGame.RecipeMenuComponentCount
// 0x0008 (0x0038 - 0x0030)
struct FRecipeMenuComponentCount : public FRecipeMenuComponent
{
	int                                                CurrentCount;                                             // 0x0030(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0034(0x0004) MISSED OFFSET
};

// ScriptStruct BendGame.InventoryMenuCraftRecipe
// 0x0020
struct FInventoryMenuCraftRecipe
{
	class UInventoryItemRecipe*                        ItemRecipe;                                               // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	TEnumAsByte<ERecipeCraftState>                     CraftState;                                               // 0x0008(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	TEnumAsByte<EInventoryBaseType>                    CraftItemType;                                            // 0x0009(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x000A(0x0006) MISSED OFFSET
	TArray<struct FRecipeMenuComponentCount>           RecipeComponents;                                         // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, Transient)
};

// ScriptStruct BendGame.InventoryMenuSlotBase
// 0x00C0
struct FInventoryMenuSlotBase
{
	class UInventoryItemWidget*                        Widget;                                                   // 0x0000(0x0008) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	struct FInventoryStorageGuidItem                   MenuItem;                                                 // 0x0008(0x0040) (BlueprintVisible, BlueprintReadOnly, Transient)
	struct FInventoryMenuCraftRecipe                   CraftRecipe;                                              // 0x0048(0x0020) (BlueprintVisible, BlueprintReadOnly, Transient)
	struct FText                                       ItemName;                                                 // 0x0068(0x0018) (BlueprintVisible, Transient)
	struct FText                                       ItemDescription;                                          // 0x0080(0x0018) (BlueprintVisible, Transient)
	int                                                ItemCount;                                                // 0x0098(0x0004) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	int                                                ItemValue;                                                // 0x009C(0x0004) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      bIsFactionLocked : 1;                                     // 0x00A0(0x0001) (BlueprintVisible, Transient)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00A1(0x0007) MISSED OFFSET
	TArray<TEnumAsByte<EInventoryItemAction>>          MenuActions;                                              // 0x00A8(0x0010) (BlueprintVisible, ZeroConstructor, Transient)
	unsigned char                                      UnknownData01[0x8];                                       // 0x00B8(0x0008) MISSED OFFSET
};

// ScriptStruct BendGame.InventoryItemTagCount
// 0x0008 (0x0018 - 0x0010)
struct FInventoryItemTagCount : public FInventoryItemTag
{
	int                                                Count;                                                    // 0x0010(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0014(0x0004) MISSED OFFSET
};

// ScriptStruct BendGame.InventoryEquipmentAmmoSlotEntry
// 0x0020
struct FInventoryEquipmentAmmoSlotEntry
{
	TEnumAsByte<EInventoryAmmoID>                      AmmoID;                                                   // 0x0000(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	int                                                MaxCount;                                                 // 0x0004(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FText                                       SlotName;                                                 // 0x0008(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
};

// ScriptStruct BendGame.InventoryItemTagSlot
// 0x0008 (0x0020 - 0x0018)
struct FInventoryItemTagSlot : public FInventoryItemTagCount
{
	int                                                MaxCount;                                                 // 0x0018(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x001C(0x0004) MISSED OFFSET
};

// ScriptStruct BendGame.InventoryBikeStorageAmmo
// 0x0010
struct FInventoryBikeStorageAmmo
{
	TArray<struct FInventoryItemTagSlot>               AmmoSlots;                                                // 0x0000(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
};

// ScriptStruct BendGame.AmmoTagToAmmoID
// 0x0018
struct FAmmoTagToAmmoID
{
	struct FGameplayTag                                OwningAmmoTag;                                            // 0x0000(0x0008) (Edit, BlueprintVisible)
	TArray<TEnumAsByte<EInventoryAmmoID>>              MatchingAmmoIDs;                                          // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
};

// ScriptStruct BendGame.InventoryEquipmentLocker
// 0x0020
struct FInventoryEquipmentLocker
{
	TArray<struct FInventoryStorageWeapon>             Weapons;                                                  // 0x0000(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<int>                                        AmmoLockerCount;                                          // 0x0010(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
};

// ScriptStruct BendGame.InventoryStorageRecipeItem
// 0x0010 (0x0050 - 0x0040)
struct FInventoryStorageRecipeItem : public FInventoryStorageGuidItem
{
	bool                                               bDiscovered;                                              // 0x0040(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0041(0x0003) MISSED OFFSET
	float                                              LastBroadcastTime;                                        // 0x0044(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                NumCrafted;                                               // 0x0048(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x004C(0x0004) MISSED OFFSET
};

// ScriptStruct BendGame.InventoryTextureTagPair
// 0x0028
struct FInventoryTextureTagPair
{
	struct FGameplayTag                                Tag;                                                      // 0x0000(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly)
	TAssetPtr<class UTexture2D>                        Texture;                                                  // 0x0008(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly)
};

// ScriptStruct BendGame.InventoryTextureTagLibrarySet
// 0x0018
struct FInventoryTextureTagLibrarySet
{
	TEnumAsByte<EInventoryItemTextureTag>              Type;                                                     // 0x0000(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0001(0x0007) MISSED OFFSET
	TArray<class UInventoryTextureTagLibrary*>         Textures;                                                 // 0x0008(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
};

// ScriptStruct BendGame.JournalEntryData
// 0x0070
struct FJournalEntryData
{
	struct FText                                       Title;                                                    // 0x0000(0x0018) (Edit, BlueprintVisible)
	struct FText                                       Description;                                              // 0x0018(0x0018) (Edit, BlueprintVisible)
	struct FText                                       Category;                                                 // 0x0030(0x0018) (Edit, BlueprintVisible)
	TAssetPtr<class UTexture2D>                        Image;                                                    // 0x0048(0x0020) (Edit, BlueprintVisible)
	bool                                               bIsHeader;                                                // 0x0068(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bIsComplete;                                              // 0x0069(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      MissionState;                                             // 0x006A(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x5];                                       // 0x006B(0x0005) MISSED OFFSET
};

// ScriptStruct BendGame.MapTile3D
// 0x0048
struct FMapTile3D
{
	int                                                DepthIndex;                                               // 0x0000(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0004(0x0004) MISSED OFFSET
	TAssetPtr<class UTexture2D>                        TextureAsset;                                             // 0x0008(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	TArray<TAssetPtr<class UTexture2D>>                AltTextureAssets;                                         // 0x0028(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	class UTexture2D*                                  Texture;                                                  // 0x0038(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bUseBlank;                                                // 0x0040(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0041(0x0007) MISSED OFFSET
};

// ScriptStruct BendGame.PathPoint
// 0x0010
struct FPathPoint
{
	struct FVector                                     Location;                                                 // 0x0000(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bBlocked : 1;                                             // 0x000C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bVisible : 1;                                             // 0x000C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x3];                                       // 0x000D(0x0003) MISSED OFFSET
};

// ScriptStruct BendGame.MapWaypointMarkerMgr
// 0x0018
struct FMapWaypointMarkerMgr
{
	class AMapWaypointMarker*                          MissionWaypointMarker;                                    // 0x0000(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class AMapWaypointMarker*                          UserWaypointMarker;                                       // 0x0008(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UClass*                                      MapWaypointMarkerClass;                                   // 0x0010(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.MapLocationList
// 0x0010
struct FMapLocationList
{
	TArray<class UMapLocation*>                        Locations;                                                // 0x0000(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst)
};

// ScriptStruct BendGame.MerchantItemDetails
// 0x0038
struct FMerchantItemDetails
{
	TEnumAsByte<ETrustTier>                            TrustTier;                                                // 0x0000(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	unsigned char                                      bIsBikeAmmo : 1;                                          // 0x0004(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0005(0x0003) MISSED OFFSET
	struct FText                                       NameOverride;                                             // 0x0008(0x0018) (Edit, BlueprintVisible)
	struct FText                                       DescriptionOverride;                                      // 0x0020(0x0018) (Edit, BlueprintVisible)
};

// ScriptStruct BendGame.MerchantStockItem
// 0x0050
struct FMerchantStockItem
{
	struct FGameplayTag                                Tag;                                                      // 0x0000(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly)
	int                                                Count;                                                    // 0x0008(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               CanBeRestocked;                                           // 0x000C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x000D(0x0003) MISSED OFFSET
	int                                                ActiveCount;                                              // 0x0010(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               HasSetCountOnce;                                          // 0x0014(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0015(0x0003) MISSED OFFSET
	struct FMerchantItemDetails                        Details;                                                  // 0x0018(0x0038) (Edit, BlueprintVisible, BlueprintReadOnly)
};

// ScriptStruct BendGame.MerchantStockWeapon
// 0x0060
struct FMerchantStockWeapon
{
	struct FGameplayTag                                Tag;                                                      // 0x0000(0x0008) (Edit, BlueprintVisible)
	TArray<struct FGameplayTag>                        Parts;                                                    // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FInventoryItemStats                         WeaponStats;                                              // 0x0018(0x0010) (Edit, BlueprintVisible)
	struct FMerchantItemDetails                        Details;                                                  // 0x0028(0x0038) (Edit, BlueprintVisible, BlueprintReadOnly)
};

// ScriptStruct BendGame.MerchantStockAmmo
// 0x0048
struct FMerchantStockAmmo
{
	struct FGameplayTag                                Tag;                                                      // 0x0000(0x0008) (Edit, BlueprintVisible)
	int                                                Count;                                                    // 0x0008(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x000C(0x0004) MISSED OFFSET
	struct FMerchantItemDetails                        Details;                                                  // 0x0010(0x0038) (Edit, BlueprintVisible, BlueprintReadOnly)
};

// ScriptStruct BendGame.MechanicMerchantParts
// 0x0230
struct FMechanicMerchantParts
{
	TArray<struct FMerchantStockItem>                  Engine;                                                   // 0x0000(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FMerchantStockItem>                  Frame;                                                    // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FMerchantStockItem>                  Tank;                                                     // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FMerchantStockItem>                  FrontForks;                                               // 0x0030(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FMerchantStockItem>                  Suspension;                                               // 0x0040(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FMerchantStockItem>                  Storage;                                                  // 0x0050(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FMerchantStockItem>                  Nitrous;                                                  // 0x0060(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FMerchantStockItem>                  AirIntake;                                                // 0x0070(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FMerchantStockItem>                  Exhaust;                                                  // 0x0080(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FMerchantStockItem>                  ExhaustBaffle;                                            // 0x0090(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FMerchantStockItem>                  ExhaustTip;                                               // 0x00A0(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FMerchantStockItem>                  Faceguard;                                                // 0x00B0(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FMerchantStockItem>                  FrontBrakes;                                              // 0x00C0(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FMerchantStockItem>                  FrontBrakesCaliper;                                       // 0x00D0(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FMerchantStockItem>                  FrontFender;                                              // 0x00E0(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FMerchantStockItem>                  FrontTire;                                                // 0x00F0(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FMerchantStockItem>                  Handguard;                                                // 0x0100(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FMerchantStockItem>                  Handlebars;                                               // 0x0110(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FMerchantStockItem>                  Headlight;                                                // 0x0120(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FMerchantStockItem>                  Mirrors;                                                  // 0x0130(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FMerchantStockItem>                  Radiator;                                                 // 0x0140(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FMerchantStockItem>                  RearBrakes;                                               // 0x0150(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FMerchantStockItem>                  RearBrakesCaliper;                                        // 0x0160(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FMerchantStockItem>                  RearTire;                                                 // 0x0170(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FMerchantStockItem>                  SeatFront;                                                // 0x0180(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FMerchantStockItem>                  SeatRear;                                                 // 0x0190(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FMerchantStockItem>                  Shroud;                                                   // 0x01A0(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FMerchantStockItem>                  Sidelight;                                                // 0x01B0(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FMerchantStockItem>                  SideLights;                                               // 0x01C0(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FMerchantStockItem>                  TailBag;                                                  // 0x01D0(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FMerchantStockItem>                  TailLights;                                               // 0x01E0(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FMerchantStockItem>                  Theme;                                                    // 0x01F0(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FMerchantStockItem>                  WheelFront;                                               // 0x0200(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FMerchantStockItem>                  WheelRear;                                                // 0x0210(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FMerchantStockItem>                  Wheels;                                                   // 0x0220(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
};

// ScriptStruct BendGame.MerchantItemBase
// 0x0040
struct FMerchantItemBase
{
	unsigned char                                      UnknownData00[0x8];                                       // 0x0000(0x0008) MISSED OFFSET
	struct FMerchantItemDetails                        Details;                                                  // 0x0008(0x0038) (BlueprintVisible, BlueprintReadOnly)
};

// ScriptStruct BendGame.MerchantBasicItem
// 0x0040 (0x0080 - 0x0040)
struct FMerchantBasicItem : public FMerchantItemBase
{
	struct FInventoryStorageGuidItem                   Item;                                                     // 0x0040(0x0040) (BlueprintVisible)
};

// ScriptStruct BendGame.MerchantWeapon
// 0x0050 (0x0090 - 0x0040)
struct FMerchantWeapon : public FMerchantItemBase
{
	struct FInventoryStorageWeapon                     Item;                                                     // 0x0040(0x0050) (BlueprintVisible)
};

// ScriptStruct BendGame.MerchantPart
// 0x0040 (0x0080 - 0x0040)
struct FMerchantPart : public FMerchantItemBase
{
	struct FInventoryPart                              Item;                                                     // 0x0040(0x0040) (BlueprintVisible, BlueprintReadOnly)
};

// ScriptStruct BendGame.MerchantItems
// 0x0048
struct FMerchantItems
{
	struct FName                                       MerchantName;                                             // 0x0000(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TArray<struct FMerchantBasicItem>                  Items;                                                    // 0x0008(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<struct FMerchantWeapon>                     Weapons;                                                  // 0x0018(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<struct FMerchantBasicItem>                  Ammo;                                                     // 0x0028(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<struct FMerchantPart>                       Parts;                                                    // 0x0038(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
};

// ScriptStruct BendGame.MudParameters
// 0x0014
struct FMudParameters
{
	float                                              Threshold;                                                // 0x0000(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Flow;                                                     // 0x0004(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Fill;                                                     // 0x0008(0x0004) (Edit, ZeroConstructor, Transient, IsPlainOldData)
	float                                              FillFlow;                                                 // 0x000C(0x0004) (Edit, ZeroConstructor, Transient, IsPlainOldData)
	uint32_t                                           RingWidth;                                                // 0x0010(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.CarverParameters
// 0x000C
struct FCarverParameters
{
	float                                              LocalCarverExpand;                                        // 0x0000(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DecalExpand;                                              // 0x0004(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ContactExpand;                                            // 0x0008(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.WaterParameters
// 0x0010
struct FWaterParameters
{
	float                                              WaterRiseRate;                                            // 0x0000(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              WaterMin;                                                 // 0x0004(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              WaterMax;                                                 // 0x0008(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              WaterRange;                                               // 0x000C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.InventoryTagStoragePair
// 0x0010
struct FInventoryTagStoragePair
{
	struct FGameplayTag                                Tag;                                                      // 0x0000(0x0008) (Edit, BlueprintVisible)
	TEnumAsByte<EInventoryItemStorage>                 StorageType;                                              // 0x0008(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0009(0x0007) MISSED OFFSET
};

// ScriptStruct BendGame.InventoryItemCache
// 0x0028
struct FInventoryItemCache
{
	TArray<struct FInventoryStorageItem>               Items;                                                    // 0x0000(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FInventoryStorageWeapon>             Weapons;                                                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	unsigned char                                      bItemsCached : 1;                                         // 0x0020(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)
	unsigned char                                      bRockRemoved : 1;                                         // 0x0020(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bKnifeRemoved : 1;                                        // 0x0020(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bTaserRemoved : 1;                                        // 0x0020(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0021(0x0007) MISSED OFFSET
};

// ScriptStruct BendGame.TelemetryEventTypedAttr
// 0x00A0
struct FTelemetryEventTypedAttr
{
	struct FString                                     Name;                                                     // 0x0000(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TEnumAsByte<EAttrDataType>                         Type;                                                     // 0x0010(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0011(0x0003) MISSED OFFSET
	int                                                IntValue;                                                 // 0x0014(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FloatValue;                                               // 0x0018(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x001C(0x0004) MISSED OFFSET
	struct FString                                     StringValue;                                              // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FText                                       TextValue;                                                // 0x0030(0x0018) (Edit, BlueprintVisible)
	bool                                               BoolValue;                                                // 0x0048(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0049(0x0007) MISSED OFFSET
	TArray<int>                                        IntValueArray;                                            // 0x0050(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<float>                                      FloatValueArray;                                          // 0x0060(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FString>                             StringValueArray;                                         // 0x0070(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FText>                               TextValueArray;                                           // 0x0080(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<bool>                                       BoolValueArray;                                           // 0x0090(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
};

// ScriptStruct BendGame.TelemetryEventAttr
// 0x0020
struct FTelemetryEventAttr
{
	struct FString                                     Name;                                                     // 0x0000(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FString                                     Value;                                                    // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
};

// ScriptStruct BendGame.UIAssetCacheEntry
// 0x0010
struct FUIAssetCacheEntry
{
	unsigned char                                      UnknownData00[0x8];                                       // 0x0000(0x0008) MISSED OFFSET
	class UObject*                                     Asset;                                                    // 0x0008(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
};

// ScriptStruct BendGame.MiniMapVariableDetails
// 0x0018
struct FMiniMapVariableDetails
{
	TArray<TEnumAsByte<EMiniMapLocation>>              DrawOrder;                                                // 0x0000(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	class UMaterialInterface*                          ObjectiveRegionMaterial;                                  // 0x0010(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.MapMenuVariableDetails
// 0x0030
struct FMapMenuVariableDetails
{
	float                                              MinZoom;                                                  // 0x0000(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MaxZoom;                                                  // 0x0004(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                PreviewModeZoomLevel;                                     // 0x0008(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              PanSpeed;                                                 // 0x000C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ZoomSpeed;                                                // 0x0010(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0014(0x0004) MISSED OFFSET
	TArray<class UTexture2D*>                          LocationIcons;                                            // 0x0018(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	class UClass*                                      MapWaypointMarkerClass;                                   // 0x0028(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.MapIconStateInfo
// 0x0030
struct FMapIconStateInfo
{
	class UTexture2D*                                  Source;                                                   // 0x0000(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  MiniMap;                                                  // 0x0008(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  Main;                                                     // 0x0010(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  Focused;                                                  // 0x0018(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  Notify;                                                   // 0x0020(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  GoldenPath;                                               // 0x0028(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.MapIconStateDetails
// 0x0060
struct FMapIconStateDetails
{
	TArray<struct FMapIconStateInfo>                   LocationIcons;                                            // 0x0000(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	unsigned char                                      UnknownData00[0x50];                                      // 0x0010(0x0050) MISSED OFFSET
};

// ScriptStruct BendGame.LanguageDetails
// 0x0030
struct FLanguageDetails
{
	struct FName                                       Name;                                                     // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FText                                       DisplayName;                                              // 0x0008(0x0018) (Edit, BlueprintVisible)
	struct FString                                     ISOCode;                                                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
};

// ScriptStruct BendGame.RegionLanguages
// 0x0030
struct FRegionLanguages
{
	TArray<struct FName>                               TextLanguages;                                            // 0x0000(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FName>                               VOLanguages;                                              // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FName>                               SubtitleLanguages;                                        // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
};

// ScriptStruct BendGame.VehicleHitDamageInfo
// 0x0090
struct FVehicleHitDamageInfo
{
	bool                                               bAllowHitDamage;                                          // 0x0000(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	float                                              SecondsBeforeNewDamageAllowed;                            // 0x0004(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MinSpeedDamageThreshold;                                  // 0x0008(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x000C(0x0004) MISSED OFFSET
	struct FRuntimeFloatCurve                          VelocityVsDamageGraph;                                    // 0x0010(0x0080) (Edit)
};

// ScriptStruct BendGame.VehicleSurfaceDamaegInfo
// 0x0018
struct FVehicleSurfaceDamaegInfo
{
	float                                              minSpeedBeforeDamageCounts;                               // 0x0000(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              timeBetweenDamageTicks;                                   // 0x0004(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              onRoadDamagePerSecond;                                    // 0x0008(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              trailsDamagePerSecond;                                    // 0x000C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              offRoadDamagePerSecond;                                   // 0x0010(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              extremeDamagePerSecond;                                   // 0x0014(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.VehicleJumpDamageInfo
// 0x0190
struct FVehicleJumpDamageInfo
{
	float                                              WheelProbeDownDist;                                       // 0x0000(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              SecondsBeforeNewJumpDamageAllowed;                        // 0x0004(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MinFallDistBeforeDMG;                                     // 0x0008(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x000C(0x0004) MISSED OFFSET
	struct FRuntimeFloatCurve                          VelocityVsDamageGraph;                                    // 0x0010(0x0080) (Edit)
	struct FRuntimeFloatCurve                          AngleVsDamageGraph;                                       // 0x0090(0x0080) (Edit)
	struct FRuntimeFloatCurve                          HeightVsDamageGraph;                                      // 0x0110(0x0080) (Edit)
};

// ScriptStruct BendGame.VehicleRamDamageInfo
// 0x0018
struct FVehicleRamDamageInfo
{
	float                                              MinDamageToInflictAsRammer;                               // 0x0000(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxDamageToInflictAsRammer;                               // 0x0004(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              RammerDamageModifier;                                     // 0x0008(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MinImpulseAtLocationRammie;                               // 0x000C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxImpuleAtLocationRammie;                                // 0x0010(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              RamDamageLockoutTimer;                                    // 0x0014(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.VehicleWaterDamageInfo
// 0x0098
struct FVehicleWaterDamageInfo
{
	float                                              MinSpeedBeforeDamage;                                     // 0x0000(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MinDepthBeforeConstantWaterDamage;                        // 0x0004(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TimeBeforeDamageAndNotification;                          // 0x0008(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x000C(0x0004) MISSED OFFSET
	struct FRuntimeFloatCurve                          WaterDepthVsDamagePerSecond;                              // 0x0010(0x0080) (Edit)
	float                                              WaterDamageResistance;                                    // 0x0090(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0094(0x0004) MISSED OFFSET
};

// ScriptStruct BendGame.VehicleDamageVsPawnInfo
// 0x0088
struct FVehicleDamageVsPawnInfo
{
	float                                              MinVelocityImpactThreshold;                               // 0x0000(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PlayerHitModifier;                                        // 0x0004(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FRuntimeFloatCurve                          ImpactVelocityVsDamageGraph;                              // 0x0008(0x0080) (Edit)
};

// ScriptStruct BendGame.XpecHourInterval
// 0x0008
struct FXpecHourInterval
{
	int                                                startHour;                                                // 0x0000(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                endHour;                                                  // 0x0004(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.XpecZoneDismissLocation
// 0x0018
struct FXpecZoneDismissLocation
{
	struct FName                                       m_ZoneID;                                                 // 0x0000(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FBendLocationReference                      m_DismissLocationReference;                               // 0x0008(0x0010) (Edit)
};

// ScriptStruct BendGame.XpecPawnToZoneIDMappings
// 0x0028
struct FXpecPawnToZoneIDMappings
{
	struct FName                                       pawnName;                                                 // 0x0000(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FName                                       zoneIDByTimeZones[0x4];                                   // 0x0008(0x0008) (ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.XpecShiftData
// 0x0028
struct FXpecShiftData
{
	int                                                startHour;                                                // 0x0000(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                endHour;                                                  // 0x0004(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<struct FName>                               upAreaPawnName;                                           // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FName>                               downAreaPawnName;                                         // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
};

// ScriptStruct BendGame.TalkingDummySpawnerArray
// 0x0018
struct FTalkingDummySpawnerArray
{
	class AXpecPOI*                                    talkingPOI;                                               // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<class AXpecTalkingPawnSpawnLocation*>       Spawners;                                                 // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
};

// ScriptStruct BendGame.XpecNeedData
// 0x0020
struct FXpecNeedData
{
	struct FName                                       m_name;                                                   // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_fMin;                                                   // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_fMax;                                                   // 0x000C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_fValue;                                                 // 0x0010(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0014(0x0004) MISSED OFFSET
	class UCurveFloat*                                 m_pWeightTbl;                                             // 0x0018(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.XpecPOICountData
// 0x0100
struct FXpecPOICountData
{
	unsigned char                                      UnknownData00[0xA0];                                      // 0x0000(0x00A0) MISSED OFFSET
	int                                                m_rawEntryCount;                                          // 0x00A0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                m_dummyCorrectCount;                                      // 0x00A4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                m_orderCompleteCount;                                     // 0x00A8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00AC(0x0004) MISSED OFFSET
	struct FTimespan                                   m_POIUseTime;                                             // 0x00B0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	struct FTimespan                                   m_POIDummyTime;                                           // 0x00B8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	struct FTimespan                                   m_POIOccupiedTime;                                        // 0x00C0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	struct FDateTime                                   m_LastOccupied;                                           // 0x00C8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	struct FDateTime                                   m_LastEmptied;                                            // 0x00D0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	struct FDateTime                                   m_LastCount;                                              // 0x00D8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	struct FTimespan                                   m_AverageInterval;                                        // 0x00E0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	bool                                               m_bIsOccupied;                                            // 0x00E8(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x17];                                      // 0x00E9(0x0017) MISSED OFFSET
};

// ScriptStruct BendGame.XpecVODebugData
// 0x0050
struct FXpecVODebugData
{
	int                                                m_Count;                                                  // 0x0000(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0004(0x0004) MISSED OFFSET
	struct FXpecVOData                                 m_VOData;                                                 // 0x0008(0x0048) (BlueprintVisible, BlueprintReadOnly)
};

// ScriptStruct BendGame.KillInfo
// 0x0038
struct FKillInfo
{
	class AController*                                 KillerController;                                         // 0x0000(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class AActor*                                      DamageCauser;                                             // 0x0008(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class AController*                                 KilledController;                                         // 0x0010(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class ABendPawn*                                   KilledPawn;                                               // 0x0018(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       HitBoneName;                                              // 0x0020(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UDamageType*                                 DamageType;                                               // 0x0028(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                XPValue;                                                  // 0x0030(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0034(0x0004) MISSED OFFSET
};

// ScriptStruct BendGame.BendCrowdMemberDiedInfo
// 0x0050
struct FBendCrowdMemberDiedInfo
{
	float                                              ActualDamage;                                             // 0x0000(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	TWeakObjectPtr<class AController>                  Killer;                                                   // 0x0004(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	struct FVector                                     HitLocation;                                              // 0x000C(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	TWeakObjectPtr<class UPrimitiveComponent>          HitComponent;                                             // 0x0018(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	struct FName                                       BoneName;                                                 // 0x0020(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	struct FVector                                     Momentum;                                                 // 0x0028(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	TWeakObjectPtr<class UDamageType>                  DamageType;                                               // 0x0034(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	TWeakObjectPtr<class AActor>                       DamageCauser;                                             // 0x003C(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      bWasDamageCriticalHit : 1;                                // 0x0044(0x0001) (BlueprintVisible, BlueprintReadOnly, Transient)
	unsigned char                                      bIsCrowdMemberPromoted : 1;                               // 0x0044(0x0001) (BlueprintVisible, BlueprintReadOnly, Transient)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0045(0x0003) MISSED OFFSET
	int                                                CrowdMemberId;                                            // 0x0048(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x004C(0x0004) MISSED OFFSET
};

// ScriptStruct BendGame.DebugOptionChangeDetails
// 0x0018
struct FDebugOptionChangeDetails
{
	struct FString                                     Name;                                                     // 0x0000(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	int                                                IntValue;                                                 // 0x0010(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FloatValue;                                               // 0x0014(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.KeyIcon
// 0x0028
struct FKeyIcon
{
	class UTexture2D*                                  Icon;                                                     // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                Color;                                                    // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FString                                     Glyph;                                                    // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
};

// ScriptStruct BendGame.KeyTextureData
// 0x00DF (0x00E0 - 0x0001)
struct FKeyTextureData : public FTableRowBase
{
	struct FKeyIcon                                    DualShock;                                                // 0x0000(0x0028) (Edit, BlueprintVisible)
	struct FKeyIcon                                    XBoxOne;                                                  // 0x0028(0x0028) (Edit, BlueprintVisible)
	struct FKeyIcon                                    SwitchPro;                                                // 0x0050(0x0028) (Edit, BlueprintVisible)
	struct FKeyIcon                                    GenericGamepad;                                           // 0x0078(0x0028) (Edit, BlueprintVisible)
	struct FKeyIcon                                    Keyboard;                                                 // 0x00A0(0x0028) (Edit, BlueprintVisible)
	struct FText                                       DisplayName;                                              // 0x00C8(0x0018) (Edit, BlueprintVisible)
};

// ScriptStruct BendGame.InventoryStatsTableCSV
// 0x0017 (0x0018 - 0x0001)
struct FInventoryStatsTableCSV : public FTableRowBase
{
	struct FName                                       StatName;                                                 // 0x0000(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinValue;                                                 // 0x0008(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxValue;                                                 // 0x000C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              StatMinValue;                                             // 0x0010(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              StatMaxValue;                                             // 0x0014(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
};

// ScriptStruct BendGame.InventoryMaterial
// 0x004F (0x0050 - 0x0001)
struct FInventoryMaterial : public FTableRowBase
{
	struct FText                                       DisplayName;                                              // 0x0000(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)
	struct FText                                       DisplayDesc;                                              // 0x0018(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)
	TAssetPtr<class UMaterialInstance>                 MaterialAsset;                                            // 0x0030(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)
};

// ScriptStruct BendGame.BaseInventoryTableCSV
// 0x015F (0x0160 - 0x0001)
struct FBaseInventoryTableCSV : public FTableRowBase
{
	unsigned char                                      UnknownData00[0x7];                                       // 0x0001(0x0007) MISSED OFFSET
	struct FString                                     Name;                                                     // 0x0008(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	struct FString                                     Desc;                                                     // 0x0018(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	struct FText                                       NameKey;                                                  // 0x0028(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FText                                       DescKey;                                                  // 0x0040(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FText                                       TutorialText;                                             // 0x0058(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FText                                       TutorialTextKey;                                          // 0x0070(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly)
	int                                                InventoryStackSize;                                       // 0x0088(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                ItemValue;                                                // 0x008C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                PickupMinCount;                                           // 0x0090(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                PickupMaxCount;                                           // 0x0094(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              PickupRespawnTime;                                        // 0x0098(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x009C(0x0004) MISSED OFFSET
	struct FName                                       ECraftComponentType;                                      // 0x00A0(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FName                                       WeaponPartLink;                                           // 0x00A8(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FString                                     StaticMeshPath;                                           // 0x00B0(0x0010) (ZeroConstructor)
	struct FString                                     BlueprintPath;                                            // 0x00C0(0x0010) (ZeroConstructor)
	struct FName                                       OnUseSound;                                               // 0x00D0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       OnEquipSound;                                             // 0x00D8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       OnPickupSound;                                            // 0x00E0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       OnDropSound;                                              // 0x00E8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       OnEnterBagSound;                                          // 0x00F0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       OnDeaconUse;                                              // 0x00F8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       OnDeaconPickup;                                           // 0x0100(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       OnDeaconDrop;                                             // 0x0108(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       Tag;                                                      // 0x0110(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FName                                       ComponentTypeTagA;                                        // 0x0118(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FName                                       ComponentTypeTagB;                                        // 0x0120(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FName                                       ComponentTypeTagC;                                        // 0x0128(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FName                                       ComponentTypeTagD;                                        // 0x0130(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FName                                       MerchantTag;                                              // 0x0138(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FName                                       MenuTag;                                                  // 0x0140(0x0008) (ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EItemRarity>                           Rarity;                                                   // 0x0148(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0149(0x0003) MISSED OFFSET
	int                                                SortIndex;                                                // 0x014C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              UseTime;                                                  // 0x0150(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              CraftTime;                                                // 0x0154(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bIsMissionItem : 1;                                       // 0x0158(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	unsigned char                                      bCannotBeSold : 1;                                        // 0x0158(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	unsigned char                                      bIsCarryOnly : 1;                                         // 0x0158(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	unsigned char                                      UnknownData03[0x7];                                       // 0x0159(0x0007) MISSED OFFSET
};

// ScriptStruct BendGame.CollectibleIdCSV
// 0x0070 (0x01D0 - 0x0160)
struct FCollectibleIdCSV : public FBaseInventoryTableCSV
{
	TEnumAsByte<ECollectibleType>                      CollectibleType;                                          // 0x0160(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0161(0x0007) MISSED OFFSET
	struct FText                                       ShortDescription;                                         // 0x0168(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FText                                       TextKey;                                                  // 0x0180(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FString                                     DetailsTextureThumbnail;                                  // 0x0198(0x0010) (ZeroConstructor)
	struct FName                                       AudioRecording;                                           // 0x01A8(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FString                                     AudioBank;                                                // 0x01B0(0x0010) (ZeroConstructor)
	struct FString                                     AudioCue;                                                 // 0x01C0(0x0010) (ZeroConstructor)
};

// ScriptStruct BendGame.CraftRecipeIdCSV
// 0x00C0 (0x0220 - 0x0160)
struct FCraftRecipeIdCSV : public FBaseInventoryTableCSV
{
	TEnumAsByte<ECraftCategory>                        RecipeCategory;                                           // 0x0160(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0161(0x0007) MISSED OFFSET
	struct FName                                       EInventoryID;                                             // 0x0168(0x0008) (ZeroConstructor, IsPlainOldData)
	int                                                CraftItemCount;                                           // 0x0170(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0174(0x0004) MISSED OFFSET
	struct FName                                       ComponentTag1A;                                           // 0x0178(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FName                                       ComponentTag1B;                                           // 0x0180(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FName                                       ComponentTag1C;                                           // 0x0188(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FName                                       ComponentTag2A;                                           // 0x0190(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FName                                       ComponentTag2B;                                           // 0x0198(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FName                                       ComponentTag2C;                                           // 0x01A0(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FName                                       ComponentTag3A;                                           // 0x01A8(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FName                                       ComponentTag3B;                                           // 0x01B0(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FName                                       ComponentTag3C;                                           // 0x01B8(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FName                                       ComponentTag4A;                                           // 0x01C0(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FName                                       ComponentTag4B;                                           // 0x01C8(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FName                                       ComponentTag4C;                                           // 0x01D0(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FName                                       ComponentTag5A;                                           // 0x01D8(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FName                                       ComponentTag5B;                                           // 0x01E0(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FName                                       ComponentTag5C;                                           // 0x01E8(0x0008) (ZeroConstructor, IsPlainOldData)
	int                                                ComponentQty1;                                            // 0x01F0(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                ComponentQty2;                                            // 0x01F4(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                ComponentQty3;                                            // 0x01F8(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                ComponentQty4;                                            // 0x01FC(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                ComponentQty5;                                            // 0x0200(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0204(0x0004) MISSED OFFSET
	struct FName                                       OnCraftSound;                                             // 0x0208(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FString                                     CraftAnimationPath;                                       // 0x0210(0x0010) (ZeroConstructor)
};

// ScriptStruct BendGame.SkillInventoryCSV
// 0x0020 (0x0180 - 0x0160)
struct FSkillInventoryCSV : public FBaseInventoryTableCSV
{
	unsigned char                                      bRequiresBroadcastOnLoad : 1;                             // 0x0160(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0161(0x0003) MISSED OFFSET
	TEnumAsByte<ESkillClass>                           SkillClass;                                               // 0x0164(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<ESkillType>                            SkillType;                                                // 0x0165(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<ESkillTier>                            SkillTier;                                                // 0x0166(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x0167(0x0001) MISSED OFFSET
	struct FString                                     UnlockRequirementDescription;                             // 0x0168(0x0010) (ZeroConstructor)
	struct FName                                       UnlockSkillIDWhenAcquired;                                // 0x0178(0x0008) (ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.WeaponPartTableCSV
// 0x0010 (0x0170 - 0x0160)
struct FWeaponPartTableCSV : public FBaseInventoryTableCSV
{
	struct FName                                       WeaponTagSetKey;                                          // 0x0160(0x0008) (ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EWeaponHardPoint>                      HardPoint;                                                // 0x0168(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0169(0x0007) MISSED OFFSET
};

// ScriptStruct BendGame.MotorcyclePartTableCSV
// 0x0030 (0x0190 - 0x0160)
struct FMotorcyclePartTableCSV : public FBaseInventoryTableCSV
{
	struct FName                                       PartType;                                                 // 0x0160(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FName                                       FrameRequirement;                                         // 0x0168(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FName                                       Stat0;                                                    // 0x0170(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FName                                       Stat1;                                                    // 0x0178(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FName                                       Stat2;                                                    // 0x0180(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FName                                       Stat3;                                                    // 0x0188(0x0008) (ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.ClothingIdCSV
// 0x002F (0x0030 - 0x0001)
struct FClothingIdCSV : public FTableRowBase
{
	struct FString                                     EClothingType;                                            // 0x0000(0x0010) (ZeroConstructor)
	struct FString                                     Name;                                                     // 0x0010(0x0010) (ZeroConstructor)
	struct FString                                     StaticMeshPath;                                           // 0x0020(0x0010) (ZeroConstructor)
};

// ScriptStruct BendGame.UtilityIdCSV
// 0x0000 (0x0160 - 0x0160)
struct FUtilityIdCSV : public FBaseInventoryTableCSV
{

};

// ScriptStruct BendGame.ConsumableId2CSV
// 0x0018 (0x0178 - 0x0160)
struct FConsumableId2CSV : public FBaseInventoryTableCSV
{
	struct FName                                       AttributeModified;                                        // 0x0160(0x0008) (ZeroConstructor, IsPlainOldData)
	float                                              EffectRank;                                               // 0x0168(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                HealCount;                                                // 0x016C(0x0004) (ZeroConstructor, IsPlainOldData)
	struct FName                                       CollectibleTag;                                           // 0x0170(0x0008) (ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.WeaponId4CSV
// 0x0020 (0x0180 - 0x0160)
struct FWeaponId4CSV : public FBaseInventoryTableCSV
{
	TEnumAsByte<EWeaponType>                           WeaponType;                                               // 0x0160(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<EWeaponRarity>                         WeaponRarity;                                             // 0x0161(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x0162(0x0006) MISSED OFFSET
	struct FName                                       EInventoryAmmoID;                                         // 0x0168(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       WeaponWheelTag;                                           // 0x0170(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                ClipSize;                                                 // 0x0178(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x017C(0x0004) MISSED OFFSET
};

// ScriptStruct BendGame.AmmoID3CSV
// 0x0018 (0x0178 - 0x0160)
struct FAmmoID3CSV : public FBaseInventoryTableCSV
{
	TEnumAsByte<EWeaponType>                           WeaponType;                                               // 0x0160(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0161(0x0007) MISSED OFFSET
	struct FString                                     NPCBlueprintPath;                                         // 0x0168(0x0010) (ZeroConstructor)
};

// ScriptStruct BendGame.CraftComponentId3CSV
// 0x0000 (0x0160 - 0x0160)
struct FCraftComponentId3CSV : public FBaseInventoryTableCSV
{

};

// ScriptStruct BendGame.CraftComponentTypeCSV
// 0x0077 (0x0078 - 0x0001)
struct FCraftComponentTypeCSV : public FTableRowBase
{
	struct FString                                     Name;                                                     // 0x0000(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	struct FString                                     Desc;                                                     // 0x0010(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	struct FText                                       NameKey;                                                  // 0x0020(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FText                                       DescKey;                                                  // 0x0038(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly)
	int                                                Value;                                                    // 0x0050(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                StackSize;                                                // 0x0054(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EItemRarity>                           Rarity;                                                   // 0x0058(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0059(0x0007) MISSED OFFSET
	struct FName                                       Tag;                                                      // 0x0060(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       MerchantTag;                                              // 0x0068(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       MenuTag;                                                  // 0x0070(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.BendLocationHandleArray
// 0x0010
struct FBendLocationHandleArray
{
	TArray<struct FBendLocationHandle>                 Handles;                                                  // 0x0000(0x0010) (BlueprintVisible, ZeroConstructor)
};

// ScriptStruct BendGame.BendClassDCinPawnData
// 0x0060
struct FBendClassDCinPawnData
{
	class ABendPawn*                                   BendPawn;                                                 // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           AnimationSequence;                                        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EClassDCinPawnStates>                  PawnState;                                                // 0x0010(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EClassDCinAnchorType>                  AnchorType;                                               // 0x0011(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xE];                                       // 0x0012(0x000E) MISSED OFFSET
	struct FTransform                                  PersonalAnchor;                                           // 0x0020(0x0030) (Edit, BlueprintVisible, IsPlainOldData)
	class UClass*                                      PropClass;                                                // 0x0050(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       PropSocketAttachName;                                     // 0x0058(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.BendBlendspaceData
// 0x0018
struct FBendBlendspaceData
{
	class UBlendSpaceBase*                             BlendSpace;                                               // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BlendInTime;                                              // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BlendOutTime;                                             // 0x000C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PlayRate;                                                 // 0x0010(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0014(0x0004) MISSED OFFSET
};

// ScriptStruct BendGame.WeaponComparisonData
// 0x0057 (0x0058 - 0x0001)
struct FWeaponComparisonData : public FTableRowBase
{
	float                                              ProjectileDamage;                                         // 0x0000(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ProjectilesPerShot;                                       // 0x0004(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              Damage;                                                   // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FireRate;                                                 // 0x000C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              Range;                                                    // 0x0010(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              Accuracy;                                                 // 0x0014(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AmmoCapacity;                                             // 0x0018(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ProjectilePenetration;                                    // 0x001C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MinSkillDamage;                                           // 0x0020(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxSkillDamage;                                           // 0x0024(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                MeleeHealth;                                              // 0x0028(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                Rarity;                                                   // 0x002C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       Slot;                                                     // 0x0030(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BaseStoppingPower;                                        // 0x0038(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              IncStoppingPower;                                         // 0x003C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AccumStoppingPower;                                       // 0x0040(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0044(0x0004) MISSED OFFSET
	struct FName                                       MagazineUpgradeTag;                                       // 0x0048(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                MagazineUpgradeSize;                                      // 0x0050(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0054(0x0004) MISSED OFFSET
};

// ScriptStruct BendGame.WeaponOrderList
// 0x0078
struct FWeaponOrderList
{
	unsigned char                                      UnknownData00[0x78];                                      // 0x0000(0x0078) MISSED OFFSET
};

// ScriptStruct BendGame.CreateProjectileData
// 0x0004
struct FCreateProjectileData
{
	unsigned char                                      UnknownData00[0x4];                                       // 0x0000(0x0004) MISSED OFFSET
};

// ScriptStruct BendGame.LoadoutData
// 0x007F (0x0080 - 0x0001)
struct FLoadoutData : public FTableRowBase
{
	TArray<TEnumAsByte<EAIFactionType>>                Faction;                                                  // 0x0000(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FName                                       LoadoutName;                                              // 0x0010(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<EBendWorldTier>                        Tier;                                                     // 0x0018(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0019(0x0007) MISSED OFFSET
	TAssetPtr<class UBendArchetypeDataBase>            DefaultArchetype;                                         // 0x0020(0x0020) (Edit, DisableEditOnInstance)
	TArray<struct FWeaponWeightData>                   PrimaryWeapon;                                            // 0x0040(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FWeaponWeightData>                   MeleeWeapon;                                              // 0x0050(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FWeaponWeightData>                   ThrowingWeapon;                                           // 0x0060(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FWeaponWeightData>                   RetreatThrowingWeapon;                                    // 0x0070(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
};

// ScriptStruct BendGame.StatusEmitter
// 0x0020
struct FStatusEmitter
{
	struct FName                                       AttachPoint;                                              // 0x0000(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UParticleSystem*                             PFX;                                                      // 0x0008(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       SoundName;                                                // 0x0010(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              startDelay;                                               // 0x0018(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x001C(0x0004) MISSED OFFSET
};

// ScriptStruct BendGame.BendArmor
// 0x00A8
struct FBendArmor
{
	unsigned char                                      UnknownData00[0xA8];                                      // 0x0000(0x00A8) MISSED OFFSET
};

// ScriptStruct BendGame.BendPawnArmor
// 0x0000 (0x00A8 - 0x00A8)
struct FBendPawnArmor : public FBendArmor
{

};

// ScriptStruct BendGame.RegionDynamicAudioListeners
// 0x0030
struct FRegionDynamicAudioListeners
{
	TArray<TEnumAsByte<EWorldRegions>>                 Region;                                                   // 0x0000(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TAssetPtr<class UClass>                            BlueprintListener;                                        // 0x0010(0x0020) (Edit, DisableEditOnInstance)
};

// ScriptStruct BendGame.DynamicAudioListenersTemp
// 0x0028
struct FDynamicAudioListenersTemp
{
	TAssetPtr<class UClass>                            BlueprintListener;                                        // 0x0000(0x0020) (Edit, DisableEditOnInstance)
	int                                                NumberOfListeners;                                        // 0x0020(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0024(0x0004) MISSED OFFSET
};

// ScriptStruct BendGame.DynamicAudioListenersMinMaxPer
// 0x0008
struct FDynamicAudioListenersMinMaxPer
{
	float                                              MinPercentage;                                            // 0x0000(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxPercentage;                                            // 0x0004(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
};

// ScriptStruct BendGame.DynamicAudioListenersList
// 0x0040
struct FDynamicAudioListenersList
{
	unsigned char                                      UnknownData00[0x40];                                      // 0x0000(0x0040) MISSED OFFSET
};

// ScriptStruct BendGame.DynamicListenersZoneData
// 0x0068
struct FDynamicListenersZoneData
{
	unsigned char                                      UnknownData00[0x68];                                      // 0x0000(0x0068) MISSED OFFSET
};

// ScriptStruct BendGame.InteractiveMusicLayerVolume
// 0x0010
struct FInteractiveMusicLayerVolume
{
	TArray<float>                                      LayerVolume;                                              // 0x0000(0x0010) (Edit, BlueprintVisible, EditFixedSize, ZeroConstructor)
};

// ScriptStruct BendGame.InteractiveMusicStateLayerVolume
// 0x0010
struct FInteractiveMusicStateLayerVolume
{
	TArray<struct FInteractiveMusicLayerVolume>        LayerVolume;                                              // 0x0000(0x0010) (Edit, BlueprintVisible, EditFixedSize, ZeroConstructor)
};

// ScriptStruct BendGame.InteractiveMusicTransitionWaitValues
// 0x0010
struct FInteractiveMusicTransitionWaitValues
{
	float                                              Mood;                                                     // 0x0000(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              Low;                                                      // 0x0004(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              Med;                                                      // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              High;                                                     // 0x000C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.InteractiveMusicTransitionValues
// 0x0018
struct FInteractiveMusicTransitionValues
{
	float                                              MoodToLow;                                                // 0x0000(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              LowToMed;                                                 // 0x0004(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MedToHigh;                                                // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              HighToMed;                                                // 0x000C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MedToLow;                                                 // 0x0010(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              LowToMood;                                                // 0x0014(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.SavedEdgeEntry
// 0x0040
struct FSavedEdgeEntry
{
	TWeakObjectPtr<class UStaticMeshComponent>         pMesh;                                                    // 0x0000(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	TArray<struct FTraversalEdgeData>                  transformedEdges;                                         // 0x0008(0x0010) (ZeroConstructor)
	TArray<struct FTraversalEdgeData>                  Edges;                                                    // 0x0018(0x0010) (ZeroConstructor)
	struct FName                                       EntryName;                                                // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData)
	bool                                               bWorldEdge;                                               // 0x0030(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0031(0x0007) MISSED OFFSET
	uint64_t                                           internalID;                                               // 0x0038(0x0008) (ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.DaVocalConversationsData
// 0x0140
struct FDaVocalConversationsData
{
	unsigned char                                      UnknownData00[0x140];                                     // 0x0000(0x0140) MISSED OFFSET
};

// ScriptStruct BendGame.RecoveryConversationData
// 0x0030
struct FRecoveryConversationData
{
	unsigned char                                      UnknownData00[0x30];                                      // 0x0000(0x0030) MISSED OFFSET
};

// ScriptStruct BendGame.SavePlayVO_Data
// 0x0118
struct FSavePlayVO_Data
{
	unsigned char                                      UnknownData00[0x118];                                     // 0x0000(0x0118) MISSED OFFSET
};

// ScriptStruct BendGame.VOSoundOnPawn
// 0x00B8
struct FVOSoundOnPawn
{
	unsigned char                                      UnknownData00[0xB8];                                      // 0x0000(0x00B8) MISSED OFFSET
};

// ScriptStruct BendGame.ActorTimelineSetupData
// 0x0018
struct FActorTimelineSetupData
{
	class UObject*                                     pPairedObject;                                            // 0x0000(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              fTimeOffset;                                              // 0x0008(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x000C(0x0004) MISSED OFFSET
	class UAudioComponent*                             pAudioComponentSyncToAudio;                               // 0x0010(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
};

// ScriptStruct BendGame.BendValueReconsilerDummyStruct
// 0x0001
struct FBendValueReconsilerDummyStruct
{
	unsigned char                                      UnknownData00[0x1];                                       // 0x0000(0x0001) MISSED OFFSET
};

// ScriptStruct BendGame.BendTrophyTable
// 0x004F (0x0050 - 0x0001)
struct FBendTrophyTable : public FTableRowBase
{
	struct FName                                       Name;                                                     // 0x0000(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       Tag;                                                      // 0x0008(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FText                                       TranslatedName;                                           // 0x0010(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FText                                       Description;                                              // 0x0028(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly)
	int                                                TrophyID;                                                 // 0x0040(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                RequiredCount;                                            // 0x0044(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bHidden : 1;                                              // 0x0048(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0049(0x0007) MISSED OFFSET
};

// ScriptStruct BendGame.BendVehicleMeshAttachmentSpecs_Struct
// 0x0038
struct FBendVehicleMeshAttachmentSpecs_Struct
{
	class UStaticMesh*                                 StaticMesh;                                               // 0x0000(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class USkeletalMesh*                               SkeletalMesh;                                             // 0x0008(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      bSkeletalMeshFollowsParentAnimation : 1;                  // 0x0010(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0011(0x0007) MISSED OFFSET
	struct FName                                       SocketName;                                               // 0x0018(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<EMotorcyclePartType>                   ParentPart;                                               // 0x0020(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0021(0x0007) MISSED OFFSET
	TArray<class UMaterialInstance*>                   MaterialOverrides;                                        // 0x0028(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
};

// ScriptStruct BendGame.VehiclePartsSpecs
// 0x0010
struct FVehiclePartsSpecs
{
	class UClass*                                      Specs;                                                    // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EMotorcyclePartType>                   PartType;                                                 // 0x0008(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0009(0x0007) MISSED OFFSET
};

// ScriptStruct BendGame.BendMissionRewardsTable
// 0x0027 (0x0028 - 0x0001)
struct FBendMissionRewardsTable : public FTableRowBase
{
	class UBendMissionData*                            MissionData;                                              // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UJobClassInfo*                               JobData;                                                  // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                XPReward;                                                 // 0x0010(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0014(0x0004) MISSED OFFSET
	TArray<struct FBendRewardData>                     FactionRewards;                                           // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
};

// ScriptStruct BendGame.BendMissionDataTable
// 0x000F (0x0010 - 0x0001)
struct FBendMissionDataTable : public FTableRowBase
{
	TArray<class UBendMissionData*>                    MissionDatas;                                             // 0x0000(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
};

// ScriptStruct BendGame.BendDemoJumpPointInventory
// 0x0010
struct FBendDemoJumpPointInventory
{
	struct FGameplayTag                                InventoryByTag;                                           // 0x0000(0x0008) (Edit, BlueprintVisible)
	int                                                Count;                                                    // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x000C(0x0004) MISSED OFFSET
};

// ScriptStruct BendGame.BendDLCInventory
// 0x008F (0x0090 - 0x0001)
struct FBendDLCInventory : public FTableRowBase
{
	TArray<struct FBendDemoJumpPointInventory>         Weapons;                                                  // 0x0000(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FBendDemoJumpPointInventory>         Ammo;                                                     // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FBendDemoJumpPointInventory>         CraftComponent;                                           // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FBendDemoJumpPointInventory>         Consumable;                                               // 0x0030(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FBendDemoJumpPointInventory>         Utility;                                                  // 0x0040(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FBendDemoJumpPointInventory>         Recipe;                                                   // 0x0050(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FVehiclePartsSpecs>                  VehicleParts;                                             // 0x0060(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FGameplayTag>                        SkillsByTag;                                              // 0x0070(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	int                                                Stamina;                                                  // 0x0080(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                Focus;                                                    // 0x0084(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                Health;                                                   // 0x0088(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                PlayerLevel;                                              // 0x008C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.BendDemoJumpPoints
// 0x019F (0x01A0 - 0x0001)
struct FBendDemoJumpPoints : public FTableRowBase
{
	struct FString                                     DemoDescription;                                          // 0x0000(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	bool                                               IsCompleteMissionOrJobSpecificRow;                        // 0x0010(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EMissionCategories>                    CurrentAct;                                               // 0x0011(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xE];                                       // 0x0012(0x000E) MISSED OFFSET
	struct FTransform                                  PlayerStartPosition;                                      // 0x0020(0x0030) (Edit, BlueprintVisible, IsPlainOldData)
	struct FTransform                                  BikeStartPosition;                                        // 0x0050(0x0030) (Edit, BlueprintVisible, IsPlainOldData)
	struct FVector                                     CameraStartLookAtPosition;                                // 0x0080(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               SpawnWithBike;                                            // 0x008C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               BlockGeneralMissionAndJobProgression;                     // 0x008D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x008E(0x0002) MISSED OFFSET
	TArray<class UDataAsset*>                          CategoryContent;                                          // 0x0090(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<class UJobClassInfo*>                       JobsUnlocked;                                             // 0x00A0(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TEnumAsByte<EMissionIDs>                           ActiveMission;                                            // 0x00B0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EMissionCategories>                    CompleteMissionJobsFromActAndBefore;                      // 0x00B1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x6];                                       // 0x00B2(0x0006) MISSED OFFSET
	TArray<class UJobClassInfo*>                       CompleteSpecificJobs;                                     // 0x00B8(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<TEnumAsByte<EMissionIDs>>                   CompleteSpecificMissions;                                 // 0x00C8(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FInventoryIDDetails>                 Items;                                                    // 0x00D8(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FGameplayTag>                        InventoryByTag;                                           // 0x00E8(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FBendDemoJumpPointInventory>         Weapons;                                                  // 0x00F8(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FBendDemoJumpPointInventory>         Ammo;                                                     // 0x0108(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FBendDemoJumpPointInventory>         CraftComponent;                                           // 0x0118(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FBendDemoJumpPointInventory>         Consumable;                                               // 0x0128(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FBendDemoJumpPointInventory>         Utility;                                                  // 0x0138(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FBendDemoJumpPointInventory>         Recipe;                                                   // 0x0148(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FVehiclePartsSpecs>                  VehicleParts;                                             // 0x0158(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<TEnumAsByte<EInventorySkillID>>             Skills;                                                   // 0x0168(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	int                                                Stamina;                                                  // 0x0178(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                Focus;                                                    // 0x017C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                Health;                                                   // 0x0180(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                PlayerLevel;                                              // 0x0184(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<struct FBendRewardData>                     FactionRewards;                                           // 0x0188(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	float                                              TimeOfDay;                                                // 0x0198(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EWeatherType>                          CurrentWeather;                                           // 0x019C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x019D(0x0003) MISSED OFFSET
};

// ScriptStruct BendGame.BendRewardsScreenData
// 0x00A8
struct FBendRewardsScreenData
{
	TEnumAsByte<EObjectiveCategories>                  Category;                                                 // 0x0000(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0001(0x0007) MISSED OFFSET
	struct FText                                       TitleText;                                                // 0x0008(0x0018) (Edit, BlueprintVisible)
	struct FText                                       SubtitleText;                                             // 0x0020(0x0018) (Edit, BlueprintVisible)
	TArray<struct FBendRewardData>                     FactionRewards;                                           // 0x0038(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	class UBendNestingZone*                            NestingZoneDataAsset;                                     // 0x0048(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                XPGained;                                                 // 0x0050(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0054(0x0004) MISSED OFFSET
	struct FText                                       DescriptionText;                                          // 0x0058(0x0018) (Edit, BlueprintVisible)
	TEnumAsByte<ERewardScreenType>                     PromptType;                                               // 0x0070(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0071(0x0007) MISSED OFFSET
	TArray<struct FBendStoryLinesBasicDataForUI>       PrimaryStoryLineData;                                     // 0x0078(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FBendStoryLinesBasicDataForUI>       StoryLineDataRewards;                                     // 0x0088(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	class UBendMissionData*                            AssociatedMissionData;                                    // 0x0098(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UJobClassInfo*                               AssociatedJobData;                                        // 0x00A0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.MissionStatisticsData
// 0x0018
struct FMissionStatisticsData
{
	struct FName                                       DisplayText;                                              // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       MapKey;                                                   // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EGameDataType>                         StatisticType;                                            // 0x0010(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0011(0x0007) MISSED OFFSET
};

// ScriptStruct BendGame.GrappleEnterAnimsData
// 0x0010
struct FGrappleEnterAnimsData
{
	class UAnimSequenceBase*                           GrappledEnterAnimSeq;                                     // 0x0000(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAnimSequenceBase*                           GrapplerEnterAnimSeq;                                     // 0x0008(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
};

// ScriptStruct BendGame.GrapplingAnimsData
// 0x0010
struct FGrapplingAnimsData
{
	class UAnimSequenceBase*                           GrappledAnimSeq;                                          // 0x0000(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAnimSequenceBase*                           GrapplerAnimSeq;                                          // 0x0008(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
};

// ScriptStruct BendGame.GrappleExitAnimsData
// 0x0010
struct FGrappleExitAnimsData
{
	class UAnimSequenceBase*                           GrappledBreakingOutAnimSeq;                               // 0x0000(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAnimSequenceBase*                           GrapplerBreakingOutAnimSeq;                               // 0x0008(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
};

// ScriptStruct BendGame.GrappleAnimationData_3
// 0x0038
struct FGrappleAnimationData_3
{
	float                                              GrapplePriority;                                          // 0x0000(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0004(0x0004) MISSED OFFSET
	TArray<struct FGrappleEnterAnimsData>              GrappleEnterAnimations;                                   // 0x0008(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FGrapplingAnimsData>                 GrapplingAnimations;                                      // 0x0018(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FGrappleExitAnimsData>               GrappleExitAnimations;                                    // 0x0028(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
};

// ScriptStruct BendGame.GrappleLocationData_3
// 0x0030
struct FGrappleLocationData_3
{
	struct FValidAttackAngleData                       ValidAttackAngle;                                         // 0x0000(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x000C(0x0004) MISSED OFFSET
	TArray<struct FGrappleAnimationData_3>             GrappleAnimations;                                        // 0x0010(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0020(0x0010) MISSED OFFSET
};

// ScriptStruct BendGame.GrappleInfoData
// 0x00E0
struct FGrappleInfoData
{
	TEnumAsByte<EAIFactionType>                        AttackerType;                                             // 0x0000(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	float                                              TimeBetweenGrappleAttacks;                                // 0x0004(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TimeBetweenMeleeAttacks;                                  // 0x0008(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinTimeBetweenMeleeAttacks;                               // 0x000C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ForceGrappleDistance;                                     // 0x0010(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              GrappleSuccessDistance;                                   // 0x0014(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DirectGrappleLockoutTime;                                 // 0x0018(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                MaxNumberOfGrapplesAllowed;                               // 0x001C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FGrappleLocationData_3                      FrontGrappleLocation;                                     // 0x0020(0x0030) (Edit, DisableEditOnInstance)
	struct FGrappleLocationData_3                      BackGrappleLocation;                                      // 0x0050(0x0030) (Edit, DisableEditOnInstance)
	struct FGrappleLocationData_3                      RightGrappleLocation;                                     // 0x0080(0x0030) (Edit, DisableEditOnInstance)
	struct FGrappleLocationData_3                      LeftGrappleLocation;                                      // 0x00B0(0x0030) (Edit, DisableEditOnInstance)
};

// ScriptStruct BendGame.CoolMeleeData
// 0x0050
struct FCoolMeleeData
{
	unsigned char                                      UnknownData00[0x50];                                      // 0x0000(0x0050) MISSED OFFSET
};

// ScriptStruct BendGame.BendMeleeAttackGroupData
// 0x0020
struct FBendMeleeAttackGroupData
{
	TArray<class UAnimSequenceBase*>                   Right;                                                    // 0x0000(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class UAnimSequenceBase*>                   Left;                                                     // 0x0010(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
};

// ScriptStruct BendGame.MeleeRandomAnimData
// 0x0018
struct FMeleeRandomAnimData
{
	unsigned char                                      UnknownData00[0x18];                                      // 0x0000(0x0018) MISSED OFFSET
};

// ScriptStruct BendGame.MeleePairedBlendSpaceAnimData
// 0x0010
struct FMeleePairedBlendSpaceAnimData
{
	class UBlendSpace*                                 AttackerBlendSpace;                                       // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UBlendSpace*                                 VictimBlendSpace;                                         // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.AimAssistTargetingInfo
// 0x001C
struct FAimAssistTargetingInfo
{
	float                                              AssistMinAwareness;                                       // 0x0000(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AssistDistNear;                                           // 0x0004(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AssistDistFar;                                            // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AssistAngleNear;                                          // 0x000C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AssistAngleFar;                                           // 0x0010(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AssistAngleSnapNear;                                      // 0x0014(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AssistAngleSnapFar;                                       // 0x0018(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.AimTargetPoint
// 0x0010
struct FAimTargetPoint
{
	struct FName                                       BoneName;                                                 // 0x0000(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              Radius;                                                   // 0x0008(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              Strength;                                                 // 0x000C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
};

// ScriptStruct BendGame.FactionTableCSV
// 0x00AF (0x00B0 - 0x0001)
struct FFactionTableCSV : public FTableRowBase
{
	float                                              Player;                                                   // 0x0000(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              Boozer;                                                   // 0x0004(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              Lisa;                                                     // 0x0008(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              Buddy;                                                    // 0x000C(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              Swarmer;                                                  // 0x0010(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              Newt;                                                     // 0x0014(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              LootNewt;                                                 // 0x0018(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              RagerBear;                                                // 0x001C(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              FreakCougar;                                              // 0x0020(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              FreakWolf;                                                // 0x0024(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              FreakCrow;                                                // 0x0028(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              Horde;                                                    // 0x002C(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              Survivor;                                                 // 0x0030(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              Cannibal;                                                 // 0x0034(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              Marauder;                                                 // 0x0038(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              Militia;                                                  // 0x003C(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              Hostage;                                                  // 0x0040(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              Loner;                                                    // 0x0044(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              Nero;                                                     // 0x0048(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              Pinnacles;                                                // 0x004C(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              Hotsprings;                                               // 0x0050(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              Copeland;                                                 // 0x0054(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              IronMikes;                                                // 0x0058(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              RIP;                                                      // 0x005C(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              Wolf;                                                     // 0x0060(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              Bear;                                                     // 0x0064(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              Crow;                                                     // 0x0068(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              Cougar;                                                   // 0x006C(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              Deer;                                                     // 0x0070(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              Bait;                                                     // 0x0074(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              FreakBait;                                                // 0x0078(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              Distractor;                                               // 0x007C(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              FreakDeer;                                                // 0x0080(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              Screamer;                                                 // 0x0084(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              Breaker;                                                  // 0x0088(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              Reacher;                                                  // 0x008C(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              Bleacher;                                                 // 0x0090(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              Burster;                                                  // 0x0094(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              Spitter;                                                  // 0x0098(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              PreBerserk;                                               // 0x009C(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              Berserk;                                                  // 0x00A0(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              DiamondLake;                                              // 0x00A4(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              WizardIsland;                                             // 0x00A8(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              OBrian;                                                   // 0x00AC(0x0004) (ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.CombatSlotData
// 0x0020
struct FCombatSlotData
{
	unsigned char                                      UnknownData00[0x20];                                      // 0x0000(0x0020) MISSED OFFSET
};

// ScriptStruct BendGame.BendCoverExitAnims
// 0x0018
struct FBendCoverExitAnims
{
	TEnumAsByte<ECoverExitAnim>                        CoverExitType;                                            // 0x0000(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0001(0x0007) MISSED OFFSET
	TArray<struct FBendCoverGroupType>                 CoverTypes;                                               // 0x0008(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
};

// ScriptStruct BendGame.TutorialTextImage
// 0x0038
struct FTutorialTextImage
{
	struct FText                                       Text;                                                     // 0x0000(0x0018) (Edit, BlueprintVisible)
	TAssetPtr<class UTexture2D>                        Image;                                                    // 0x0018(0x0020) (Edit, BlueprintVisible)
};

// ScriptStruct BendGame.ConfidenceSettingsData
// 0x0001
struct FConfidenceSettingsData
{
	unsigned char                                      UnknownData00[0x1];                                       // 0x0000(0x0001) MISSED OFFSET
};

// ScriptStruct BendGame.MeleeDamagedData
// 0x00C0
struct FMeleeDamagedData
{
	unsigned char                                      UnknownData00[0xC0];                                      // 0x0000(0x00C0) MISSED OFFSET
};

// ScriptStruct BendGame.BendVehicleMovementComponent_PostPhysicsTickFunction
// 0x0008 (0x0050 - 0x0048)
struct FBendVehicleMovementComponent_PostPhysicsTickFunction : public FTickFunction
{
	unsigned char                                      UnknownData00[0x8];                                       // 0x0048(0x0008) MISSED OFFSET
};

// ScriptStruct BendGame.AIPhysicsTestResult
// 0x000C
struct FAIPhysicsTestResult
{
	float                                              timeItTook;                                               // 0x0000(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              distanceItTook;                                           // 0x0004(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              accel_decelValue;                                         // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.BendAITeamResourceDescriptor
// 0x0008
struct FBendAITeamResourceDescriptor
{
	struct FName                                       Name;                                                     // 0x0000(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
};

// ScriptStruct BendGame.BendAITeamConditionDescriptor
// 0x0001
struct FBendAITeamConditionDescriptor
{
	unsigned char                                      UnknownData00[0x1];                                       // 0x0000(0x0001) MISSED OFFSET
};

// ScriptStruct BendGame.BendAITeamHumanTargetCloseToMember
// 0x0018
struct FBendAITeamHumanTargetCloseToMember
{
	unsigned char                                      UnknownData00[0x18];                                      // 0x0000(0x0018) MISSED OFFSET
};

// ScriptStruct BendGame.BendAIAttractorInfo
// 0x0078
struct FBendAIAttractorInfo
{
	unsigned char                                      UnknownData00[0x78];                                      // 0x0000(0x0078) MISSED OFFSET
};

// ScriptStruct BendGame.BendAIThrowableReactingNPC
// 0x002C
struct FBendAIThrowableReactingNPC
{
	unsigned char                                      UnknownData00[0x2C];                                      // 0x0000(0x002C) MISSED OFFSET
};

// ScriptStruct BendGame.AmbientEventInfo
// 0x0038
struct FAmbientEventInfo
{
	TWeakObjectPtr<class ABendAmbientEventMarker>      AmbientEvent;                                             // 0x0000(0x0008) (ZeroConstructor, IsPlainOldData)
	TWeakObjectPtr<class AActor>                       BlueprintInstanceOfEvent;                                 // 0x0008(0x0008) (ZeroConstructor, IsPlainOldData)
	TWeakObjectPtr<class ALevelScriptActor>            LevelInstanceOfEvent;                                     // 0x0010(0x0008) (ZeroConstructor, IsPlainOldData)
	TWeakObjectPtr<class ULevel>                       ULevel;                                                   // 0x0018(0x0008) (ZeroConstructor, IsPlainOldData)
	bool                                               MarkedForUnload;                                          // 0x0020(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               MarkedForReload;                                          // 0x0021(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x0022(0x0006) MISSED OFFSET
	struct FName                                       UMapForAmbientEvent;                                      // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData)
	bool                                               EventMarkedAsEngaged;                                     // 0x0030(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0031(0x0007) MISSED OFFSET
};

// ScriptStruct BendGame.BendAnimIKEntry
// 0x00B8
struct FBendAnimIKEntry
{
	unsigned char                                      UnknownData00[0xB8];                                      // 0x0000(0x00B8) MISSED OFFSET
};

// ScriptStruct BendGame.BendAnimInstanceProxy
// 0x01D0 (0x06A0 - 0x04D0)
struct FBendAnimInstanceProxy : public FAnimInstanceProxy
{
	unsigned char                                      UnknownData00[0x1D0];                                     // 0x04D0(0x01D0) MISSED OFFSET
};

// ScriptStruct BendGame.BendRandomSequenceData
// 0x0018
struct FBendRandomSequenceData
{
	float                                              CurrentTime;                                              // 0x0000(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              CurrentTimeRatio;                                         // 0x0004(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              Length;                                                   // 0x0008(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              TimeRemaining;                                            // 0x000C(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              TimeRemainingRatio;                                       // 0x0010(0x0004) (ZeroConstructor, IsPlainOldData)
	bool                                               IsCompleted;                                              // 0x0014(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0015(0x0003) MISSED OFFSET
};

// ScriptStruct BendGame.BendAnimGraphBlendspaceSlotData
// 0x0028
struct FBendAnimGraphBlendspaceSlotData
{
	bool                                               Active;                                                   // 0x0000(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0001(0x0007) MISSED OFFSET
	struct FName                                       SlotName;                                                 // 0x0008(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              X;                                                        // 0x0010(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              Y;                                                        // 0x0014(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              Z;                                                        // 0x0018(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x001C(0x0004) MISSED OFFSET
	class UBlendSpaceBase*                             BlendSpace;                                               // 0x0020(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
};

// ScriptStruct BendGame.BendAnimMoveSetEntry
// 0x0010
struct FBendAnimMoveSetEntry
{
	struct FName                                       SetGroupType;                                             // 0x0000(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBendAnimMoveSet*                            MoveSet;                                                  // 0x0008(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
};

// ScriptStruct BendGame.BendVehicleArmor
// 0x0000 (0x00A8 - 0x00A8)
struct FBendVehicleArmor : public FBendArmor
{

};

// ScriptStruct BendGame.InvestigatorSlot
// 0x0028
struct FInvestigatorSlot
{
	unsigned char                                      UnknownData00[0x28];                                      // 0x0000(0x0028) MISSED OFFSET
};

// ScriptStruct BendGame.ConflictArea
// 0x001C
struct FConflictArea
{
	float                                              Radius;                                                   // 0x0000(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              intensity;                                                // 0x0004(0x0004) (ZeroConstructor, IsPlainOldData)
	struct FVector                                     Center;                                                   // 0x0008(0x000C) (ZeroConstructor, IsPlainOldData)
	float                                              TimeOfLastAdd;                                            // 0x0014(0x0004) (ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EeConflictEventType>                   MostRecentEvent;                                          // 0x0018(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0019(0x0003) MISSED OFFSET
};

// ScriptStruct BendGame.ConflictEvent
// 0x0014
struct FConflictEvent
{
	float                                              intensity;                                                // 0x0000(0x0004) (ZeroConstructor, IsPlainOldData)
	struct FVector                                     Location;                                                 // 0x0004(0x000C) (ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EeConflictEventType>                   TypeOfEvent;                                              // 0x0010(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0011(0x0003) MISSED OFFSET
};

// ScriptStruct BendGame.BendManuallyEditedCoverSlot
// 0x001C
struct FBendManuallyEditedCoverSlot
{
	struct FVector                                     Location;                                                 // 0x0000(0x000C) (ZeroConstructor, IsPlainOldData)
	struct FVector                                     Normal;                                                   // 0x000C(0x000C) (ZeroConstructor, IsPlainOldData)
	uint32_t                                           Attributes;                                               // 0x0018(0x0004) (ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.AudioComponentRef
// 0x0008
struct FAudioComponentRef
{
	class UAudioComponent*                             AudioComponent;                                           // 0x0000(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
};

// ScriptStruct BendGame.BendCrowdControllerId
// 0x0004
struct FBendCrowdControllerId
{
	unsigned char                                      UnknownData00[0x4];                                       // 0x0000(0x0004) MISSED OFFSET
};

// ScriptStruct BendGame.TrapPlacementAnims
// 0x0020
struct FTrapPlacementAnims
{
	class UAnimMontage*                                WallHighPlacementMontage;                                 // 0x0000(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAnimMontage*                                WallLowPlacementMontage;                                  // 0x0008(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAnimMontage*                                GroundPlacementMontage;                                   // 0x0010(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAnimMontage*                                TreePlacementMontage;                                     // 0x0018(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
};

// ScriptStruct BendGame.AutoNavLinkTraversalEdge
// 0x0168
struct FAutoNavLinkTraversalEdge
{
	unsigned char                                      UnknownData00[0x168];                                     // 0x0000(0x0168) MISSED OFFSET
};

// ScriptStruct BendGame.BendInputPriorityTable
// 0x0003 (0x0004 - 0x0001)
struct FBendInputPriorityTable : public FTableRowBase
{
	int                                                Priority;                                                 // 0x0000(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
};

// ScriptStruct BendGame.BendInputMapInfo
// 0x0018
struct FBendInputMapInfo
{
	struct FName                                       ActionName;                                               // 0x0000(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<struct FName>                               LinkedTo;                                                 // 0x0008(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
};

// ScriptStruct BendGame.BendInputMappingGroupInfo
// 0x0030
struct FBendInputMappingGroupInfo
{
	struct FText                                       LamsName;                                                 // 0x0000(0x0018) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0018(0x0008) MISSED OFFSET
	TArray<struct FBendInputMapInfo>                   PrimaryMappingInfo;                                       // 0x0020(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
};

// ScriptStruct BendGame.XpecVO
// 0x0010
struct FXpecVO
{
	struct FName                                       EventName;                                                // 0x0000(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class USoundClass*                                 SoundClass;                                               // 0x0008(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
};

// ScriptStruct BendGame.XpecEventPawnGroup
// 0x0010
struct FXpecEventPawnGroup
{
	TArray<class AActor*>                              m_Spawners;                                               // 0x0000(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
};

// ScriptStruct BendGame.XpecEventPawnInfo
// 0x0058
struct FXpecEventPawnInfo
{
	struct FBendLocationReference                      m_SpawnPoint;                                             // 0x0000(0x0010) (Edit, BlueprintVisible)
	struct FBendLocationReference                      m_FleePoint;                                              // 0x0010(0x0010) (Edit, BlueprintVisible)
	TEnumAsByte<EXpecPOIUserGender>                    m_Gender;                                                 // 0x0020(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0021(0x0007) MISSED OFFSET
	class USoundClass*                                 m_pBankSoundClass;                                        // 0x0028(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           m_pAnimSequence;                                          // 0x0030(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UXpecDummyPawnTrustAnim*                     m_pTrustAnim;                                             // 0x0038(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<TEnumAsByte<EXpecTimeZone>>                 m_AvailableTimeZone;                                      // 0x0040(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	bool                                               m_bCanReplaceWithPOI;                                     // 0x0050(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0051(0x0007) MISSED OFFSET
};

// ScriptStruct BendGame.XpecEventPawnInfoArray
// 0x0010
struct FXpecEventPawnInfoArray
{
	TArray<struct FXpecEventPawnInfo>                  m_Info;                                                   // 0x0000(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
};

// ScriptStruct BendGame.XpecOverrideLook
// 0x0028
struct FXpecOverrideLook
{
	unsigned char                                      UnknownData00[0x28];                                      // 0x0000(0x0028) MISSED OFFSET
};

// ScriptStruct BendGame.XpecDebugTextData
// 0x0020
struct FXpecDebugTextData
{
	bool                                               IsVisible;                                                // 0x0000(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0001(0x0007) MISSED OFFSET
	struct FName                                       DisplayText;                                              // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     TextLocation;                                             // 0x0010(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FColor                                      TextColor;                                                // 0x001C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.ExplosionVictimData
// 0x0030
struct FExplosionVictimData
{
	unsigned char                                      UnknownData00[0x30];                                      // 0x0000(0x0030) MISSED OFFSET
};

// ScriptStruct BendGame.NearTargetData
// 0x002C
struct FNearTargetData
{
	unsigned char                                      UnknownData00[0x2C];                                      // 0x0000(0x002C) MISSED OFFSET
};

// ScriptStruct BendGame.PlayerProfileTitleDescription
// 0x0030
struct FPlayerProfileTitleDescription
{
	struct FText                                       Title;                                                    // 0x0000(0x0018) (Edit, BlueprintVisible)
	struct FText                                       Description;                                              // 0x0018(0x0018) (Edit, BlueprintVisible)
};

// ScriptStruct BendGame.PlayerNamedProfileMenuEntry
// 0x0020
struct FPlayerNamedProfileMenuEntry
{
	struct FText                                       ProfileOptionName;                                        // 0x0000(0x0018) (Edit, BlueprintVisible)
	TEnumAsByte<EPlayerSaveProfileType>                ProfileOption;                                            // 0x0018(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0019(0x0007) MISSED OFFSET
};

// ScriptStruct BendGame.PlayerNamedProfileMenuCategory
// 0x0030
struct FPlayerNamedProfileMenuCategory
{
	struct FText                                       Name;                                                     // 0x0000(0x0018) (Edit, BlueprintVisible)
	TEnumAsByte<EProfileOption>                        Type;                                                     // 0x0018(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0019(0x0007) MISSED OFFSET
	TArray<struct FPlayerNamedProfileMenuEntry>        ProfileEntris;                                            // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
};

// ScriptStruct BendGame.MenuElementSelectionDetails
// 0x0020
struct FMenuElementSelectionDetails
{
	struct FText                                       DisabledText;                                             // 0x0000(0x0018) (Edit, BlueprintVisible)
	unsigned char                                      bDisabled : 1;                                            // 0x0018(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0019(0x0007) MISSED OFFSET
};

// ScriptStruct BendGame.PlayerProfileSubMenuClass
// 0x0040
struct FPlayerProfileSubMenuClass
{
	TEnumAsByte<EProfileOption>                        Type;                                                     // 0x0000(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EPlayerSaveProfileType>                ProfileOption;                                            // 0x0001(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x0002(0x0006) MISSED OFFSET
	struct FText                                       Name;                                                     // 0x0008(0x0018) (Edit, BlueprintVisible)
	struct FMenuElementSelectionDetails                SelectionDetails;                                         // 0x0020(0x0020) (Edit, BlueprintVisible)
};

// ScriptStruct BendGame.PlayerSaveProfileMenuCategory
// 0x0030
struct FPlayerSaveProfileMenuCategory
{
	struct FText                                       Name;                                                     // 0x0000(0x0018) (Edit, BlueprintVisible)
	TEnumAsByte<EProfileOption>                        Type;                                                     // 0x0018(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0019(0x0007) MISSED OFFSET
	TArray<TEnumAsByte<EPlayerSaveProfileType>>        ProfileOptions;                                           // 0x0020(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
};

// ScriptStruct BendGame.PlayerProfileDisabledEntry
// 0x0020
struct FPlayerProfileDisabledEntry
{
	TEnumAsByte<EPlayerSaveProfileType>                ProfileOption;                                            // 0x0000(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0001(0x0007) MISSED OFFSET
	struct FText                                       DisabledText;                                             // 0x0008(0x0018) (Edit, BlueprintVisible)
};

// ScriptStruct BendGame.BendSplashEffectInstance
// 0x0010
struct FBendSplashEffectInstance
{
	struct FName                                       BoneName;                                                 // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UBendSmoothSwapParticleSystemComponent*      SplashingParticleComponent;                               // 0x0008(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, InstancedReference, IsPlainOldData)
};

// ScriptStruct BendGame.DebugSurfaceTypeData
// 0x00A0
struct FDebugSurfaceTypeData
{
	unsigned char                                      UnknownData00[0xA0];                                      // 0x0000(0x00A0) MISSED OFFSET
};

// ScriptStruct BendGame.WheelTireMarkData
// 0x0014
struct FWheelTireMarkData
{
	unsigned char                                      UnknownData00[0x14];                                      // 0x0000(0x0014) MISSED OFFSET
};

// ScriptStruct BendGame.Bend_UI_ButtonMarkup
// 0x001F (0x0020 - 0x0001)
struct FBend_UI_ButtonMarkup : public FTableRowBase
{
	class UTexture2D*                                  ButtonTexture;                                            // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EControllerInputButton>                ButtonEnum;                                               // 0x0008(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0009(0x0007) MISSED OFFSET
	struct FString                                     ButtonString;                                             // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
};

// ScriptStruct BendGame.InventoryBikePartMaterialInstance
// 0x0038
struct FInventoryBikePartMaterialInstance
{
	struct FInventoryBikePartMaterial                  PartMaterial;                                             // 0x0000(0x0030) (Edit, BlueprintVisible, BlueprintReadOnly)
	class UMaterialInstance*                           MaterialInstance;                                         // 0x0030(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
};

// ScriptStruct BendGame.InventoryTagMaterialParam
// 0x0020 (0x0030 - 0x0010)
struct FInventoryTagMaterialParam : public FInventoryMaterialParam
{
	struct FGameplayTagContainer                       PartTags;                                                 // 0x0010(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly)
};

// ScriptStruct BendGame.BikeSkin
// 0x0068
struct FBikeSkin
{
	struct FGameplayTag                                SkinTag;                                                  // 0x0000(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FName                                       SkinKey;                                                  // 0x0008(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TArray<struct FInventoryBikePartMaterialInstance>  Materials;                                                // 0x0010(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<struct FInventoryTagMaterialParam>          PartParams;                                               // 0x0020(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	struct FInventoryBikePartCustomDecal               Decal;                                                    // 0x0030(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly)
	class UTexture2D*                                  DecalTexture;                                             // 0x0048(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x18];                                      // 0x0050(0x0018) MISSED OFFSET
};

// ScriptStruct BendGame.UnlockablePatch
// 0x0001
struct FUnlockablePatch
{
	TEnumAsByte<EEarlyUnlockVersion>                   UnlockedFrom;                                             // 0x0000(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
};

// ScriptStruct BendGame.UnlockableRing
// 0x0001
struct FUnlockableRing
{
	TEnumAsByte<EEarlyUnlockVersion>                   UnlockedFrom;                                             // 0x0000(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
};

// ScriptStruct BendGame.MapMenuInputDetails
// 0x0060
struct FMapMenuInputDetails
{
	struct FKey                                        LocationSelection;                                        // 0x0000(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FKey                                        Zoom;                                                     // 0x0018(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FKey                                        ScrollX;                                                  // 0x0030(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FKey                                        ScrollY;                                                  // 0x0048(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
};

// ScriptStruct BendGame.BendVehicleEngineSpecs_Struct
// 0x0008 (0x0040 - 0x0038)
struct FBendVehicleEngineSpecs_Struct : public FBendVehicleMeshAttachmentSpecs_Struct
{
	float                                              MaxSpeed;                                                 // 0x0038(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FuelConsumption;                                          // 0x003C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.BendVehicleFuelTankSpecs_Struct
// 0x0008 (0x0040 - 0x0038)
struct FBendVehicleFuelTankSpecs_Struct : public FBendVehicleMeshAttachmentSpecs_Struct
{
	float                                              FuelCapacity;                                             // 0x0038(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x003C(0x0004) MISSED OFFSET
};

// ScriptStruct BendGame.BendVehicleNitrousSpecs_Struct
// 0x0020 (0x0058 - 0x0038)
struct FBendVehicleNitrousSpecs_Struct : public FBendVehicleMeshAttachmentSpecs_Struct
{
	float                                              MaxSpeed;                                                 // 0x0038(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              MaxSpeedScale;                                            // 0x003C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DepletionRate;                                            // 0x0040(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              RechargeRate;                                             // 0x0044(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MinReserveRequiredForActivation0To1;                      // 0x0048(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MinTimeBetweenActivations;                                // 0x004C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FuelConsumptionMultiplier;                                // 0x0050(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0054(0x0004) MISSED OFFSET
};

// ScriptStruct BendGame.BendVehicleStorageSpecs_Struct
// 0x0008 (0x0040 - 0x0038)
struct FBendVehicleStorageSpecs_Struct : public FBendVehicleMeshAttachmentSpecs_Struct
{
	int                                                StorageCapacity;                                          // 0x0038(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x003C(0x0004) MISSED OFFSET
};

// ScriptStruct BendGame.CollectiblesMenuSoundBank
// 0x0008
struct FCollectiblesMenuSoundBank
{
	class USoundClass*                                 SoundClass;                                               // 0x0000(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
};

// ScriptStruct BendGame.BendCrowd_PostEndPhysics_PreStartPhysics_TickFunction
// 0x0008 (0x0050 - 0x0048)
struct FBendCrowd_PostEndPhysics_PreStartPhysics_TickFunction : public FTickFunction
{
	unsigned char                                      UnknownData00[0x8];                                       // 0x0048(0x0008) MISSED OFFSET
};

// ScriptStruct BendGame.InventoryManagerItemTags
// 0x00A0
struct FInventoryManagerItemTags
{
	unsigned char                                      UnknownData00[0xA0];                                      // 0x0000(0x00A0) MISSED OFFSET
};

// ScriptStruct BendGame.InventoryMenuPanelSlots
// 0x0018
struct FInventoryMenuPanelSlots
{
	unsigned char                                      UnknownData00[0x8];                                       // 0x0000(0x0008) MISSED OFFSET
	TArray<struct FInventoryMenuSlotBase>              MenuSlots;                                                // 0x0008(0x0010) (BlueprintVisible, ZeroConstructor, Transient)
};

// ScriptStruct BendGame.InventoryEquipmentSlotHelper
// 0x0010
struct FInventoryEquipmentSlotHelper
{
	TArray<class UInventoryEquipmentSlot*>             EquipmentSlots;                                           // 0x0000(0x0010) (ExportObject, ZeroConstructor)
};

// ScriptStruct BendGame.BendBikePartCategoryData
// 0x0057 (0x0058 - 0x0001)
struct FBendBikePartCategoryData : public FTableRowBase
{
	TEnumAsByte<EMotorcyclePartType>                   PartType;                                                 // 0x0000(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0001(0x0007) MISSED OFFSET
	struct FGameplayTag                                MenuTag;                                                  // 0x0008(0x0008) (Edit, BlueprintVisible)
	TEnumAsByte<EBikePartMenuCategory>                 MenuCategory;                                             // 0x0010(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0011(0x0007) MISSED OFFSET
	struct FText                                       CategoryName;                                             // 0x0018(0x0018) (Edit, BlueprintVisible)
	struct FText                                       CategoryDescription;                                      // 0x0030(0x0018) (Edit, BlueprintVisible)
	class UTexture2D*                                  CategoryImage;                                            // 0x0048(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  CategoryImage_Alternate;                                  // 0x0050(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.TalkingDummyCandidate
// 0x0028
struct FTalkingDummyCandidate
{
	class AActor*                                      talkingPawn;                                              // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       voTag;                                                    // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       meatVOTag;                                                // 0x0010(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       greetVOTag;                                               // 0x0018(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class USoundClass*                                 SoundClass;                                               // 0x0020(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.XpecPopulationDetailData
// 0x004F (0x0050 - 0x0001)
struct FXpecPopulationDetailData : public FTableRowBase
{
	struct FName                                       levelName;                                                // 0x0000(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       zoneName;                                                 // 0x0008(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       spawnerID;                                                // 0x0010(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       spawnerName;                                              // 0x0018(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       pawnName;                                                 // 0x0020(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       populationID;                                             // 0x0028(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       newSpawnerID;                                             // 0x0030(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       newPawnName;                                              // 0x0038(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       newSpawnerName;                                           // 0x0040(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       newPopulationID;                                          // 0x0048(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.XpecRewardData
// 0x0010
struct FXpecRewardData
{
	struct FName                                       m_name;                                                   // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_fValue;                                                 // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x000C(0x0004) MISSED OFFSET
};

// ScriptStruct BendGame.BendCharacterAnimInstanceProxy
// 0x0100 (0x07A0 - 0x06A0)
struct FBendCharacterAnimInstanceProxy : public FBendAnimInstanceProxy
{
	unsigned char                                      UnknownData00[0x100];                                     // 0x06A0(0x0100) MISSED OFFSET
};

// ScriptStruct BendGame.AnimNode_Anchor
// 0x0170 (0x01A0 - 0x0030)
struct FAnimNode_Anchor : public FAnimNode_Base
{
	struct FPoseLink                                   Source;                                                   // 0x0030(0x0018) (Edit, BlueprintVisible)
	int                                                AnchorIndex;                                              // 0x0048(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x004C(0x0004) MISSED OFFSET
	struct FBoneReference                              ReferenceBone;                                            // 0x0050(0x0010) (Edit, BlueprintVisible)
	unsigned char                                      bUseRootBone : 1;                                         // 0x0060(0x0001) (Edit, BlueprintVisible)
	TEnumAsByte<EBendAnimAnchorRootBoneSampleTime>     RootBoneSampleTime;                                       // 0x0061(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x0062(0x0002) MISSED OFFSET
	float                                              RootBoneSpecifiedTime;                                    // 0x0064(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bAffectsTranslation : 1;                                  // 0x0068(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bAlwaysAbsoluteAnchor : 1;                                // 0x0068(0x0001) (Edit, BlueprintVisible)
	TEnumAsByte<EBendAnimAnchorTransformSource>        AnchorTransformSource;                                    // 0x0069(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bRefreshAnchorTransformEveryTick : 1;                     // 0x006A(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData02[0x5];                                       // 0x006B(0x0005) MISSED OFFSET
	struct FTransform                                  PinInputAnchorTransform;                                  // 0x0070(0x0030) (Edit, BlueprintVisible, Transient, IsPlainOldData)
	unsigned char                                      bSnapshotPinInputsWhenNodeStartsBlendingIn : 1;           // 0x00A0(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData03[0xFF];                                      // 0x00A1(0x00FF) MISSED OFFSET
};

// ScriptStruct BendGame.AnimNode_AnimalMultiNodesBase
// 0x0020 (0x0050 - 0x0030)
struct FAnimNode_AnimalMultiNodesBase : public FAnimNode_Base
{
	unsigned char                                      UnknownData00[0x20];                                      // 0x0030(0x0020) MISSED OFFSET
};

// ScriptStruct BendGame.AnimNode_AnimalMultiNodesBasePreForwarder
// 0x0020 (0x0050 - 0x0030)
struct FAnimNode_AnimalMultiNodesBasePreForwarder : public FAnimNode_Base
{
	struct FPoseLink                                   Base;                                                     // 0x0030(0x0018) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0048(0x0008) MISSED OFFSET
};

// ScriptStruct BendGame.AnimNode_AnimalMultiNodesAssetPlayerBase
// 0x0020 (0x0078 - 0x0058)
struct FAnimNode_AnimalMultiNodesAssetPlayerBase : public FAnimNode_AssetPlayerBase
{
	unsigned char                                      UnknownData00[0x20];                                      // 0x0058(0x0020) MISSED OFFSET
};

// ScriptStruct BendGame.AnimAnchorData
// 0x0028
struct FAnimAnchorData
{
	struct FName                                       AnchorName;                                               // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                AnchorIndex;                                              // 0x0008(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x000C(0x0004) MISSED OFFSET
	struct FBoneReference                              ReferenceBone;                                            // 0x0010(0x0010) (Edit, BlueprintVisible)
	unsigned char                                      bUseRootBone : 1;                                         // 0x0020(0x0001) (Edit, BlueprintVisible)
	TEnumAsByte<EBendAnimAnchorRootBoneSampleTime>     RootBoneSampleTime;                                       // 0x0021(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bAffectsTranslation : 1;                                  // 0x0022(0x0001) (Edit, BlueprintVisible)
	TEnumAsByte<EBendAnimAnchorTransformSource>        AnchorTransformSource;                                    // 0x0023(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bRefreshAnchorTransformEveryTick : 1;                     // 0x0024(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0025(0x0003) MISSED OFFSET
};

// ScriptStruct BendGame.AnimNode_MultiAnchorSequence
// 0x0098 (0x00C8 - 0x0030)
struct FAnimNode_MultiAnchorSequence : public FAnimNode_Base
{
	struct FPoseLink                                   Source;                                                   // 0x0030(0x0018) (Edit, BlueprintVisible)
	struct FName                                       BlendCurveName;                                           // 0x0048(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bReleaseAnchoringAtCurveThreshold : 1;                    // 0x0050(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0051(0x0003) MISSED OFFSET
	float                                              ReleaseAnchoringCurveThreshold;                           // 0x0054(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x20];                                      // 0x0058(0x0020) MISSED OFFSET
	TArray<struct FAnimAnchorData>                     AnchorBlendSequence;                                      // 0x0078(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<float>                                      RootBoneSpecifiedTimes;                                   // 0x0088(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FTransform>                          PinInputAnchorTransforms;                                 // 0x0098(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	unsigned char                                      bSnapshotPinInputsWhenNodeStartsBlendingIn : 1;           // 0x00A8(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData02[0x1F];                                      // 0x00A9(0x001F) MISSED OFFSET
};

// ScriptStruct BendGame.AnimNode_CollectCurveValue
// 0x0030 (0x0060 - 0x0030)
struct FAnimNode_CollectCurveValue : public FAnimNode_Base
{
	struct FPoseLink                                   Source;                                                   // 0x0030(0x0018) (Edit, BlueprintVisible)
	struct FName                                       CollectorName;                                            // 0x0048(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       CurveName;                                                // 0x0050(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0058(0x0008) MISSED OFFSET
};

// ScriptStruct BendGame.AnimNode_AnimalAttackAssetPlayer
// 0x0808 (0x0880 - 0x0078)
struct FAnimNode_AnimalAttackAssetPlayer : public FAnimNode_AnimalMultiNodesAssetPlayerBase
{
	bool                                               bUseCurves;                                               // 0x0078(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bUseFailed;                                               // 0x0079(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x007A(0x0006) MISSED OFFSET
	struct FName                                       CollectorName;                                            // 0x0080(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       StartMeleeCurveName;                                      // 0x0088(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FBoneReference                              ReferenceBone;                                            // 0x0090(0x0010) (Edit, BlueprintVisible)
	int                                                AnchorMeleeStartRotateIndex;                              // 0x00A0(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                AnchorMeleeStartIndex;                                    // 0x00A4(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                AnchorMeleeEndIndex;                                      // 0x00A8(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                AnchorMeleeEndRotateIndex;                                // 0x00AC(0x0004) (ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EAnimGroupRole>                        PlayersGroupRole;                                         // 0x00B0(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x00B1(0x0007) MISSED OFFSET
	class UAnimSequenceBase*                           Sequence;                                                 // 0x00B8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FAnimNode_BlendListByBool                   UseFailedBlend;                                           // 0x00C0(0x00F0)
	struct FAnimNode_SequencePlayer                    FailedPlayer;                                             // 0x01B0(0x0088)
	struct FAnimNode_BlendListByBool                   UseDefaultBlend;                                          // 0x0238(0x00F0)
	struct FAnimNode_BlendListByBool                   UseFinalBlend;                                            // 0x0328(0x00F0)
	struct FAnimNode_CollectCurveValue                 CollectCurveValue;                                        // 0x0418(0x0060)
	struct FAnimNode_SequencePlayer                    DefaultPlayer;                                            // 0x0478(0x0088)
	struct FAnimNode_SequencePlayer                    CurvePlayer;                                              // 0x0500(0x0088)
	struct FAnimNode_MultiAnchorSequence               CurveAnchor;                                              // 0x0588(0x00C8)
	struct FAnimNode_SequencePlayer                    FinalPlayer;                                              // 0x0650(0x0088)
	unsigned char                                      UnknownData02[0x8];                                       // 0x06D8(0x0008) MISSED OFFSET
	struct FAnimNode_Anchor                            FinalAnchor;                                              // 0x06E0(0x01A0)
};

// ScriptStruct BendGame.AnimNode_AnimalDamageAssetPlayer
// 0x03A0 (0x0418 - 0x0078)
struct FAnimNode_AnimalDamageAssetPlayer : public FAnimNode_AnimalMultiNodesAssetPlayerBase
{
	bool                                               bAdditive;                                                // 0x0078(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      DamageAnimInfoNdx;                                        // 0x0079(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bProcessDamagePercent;                                    // 0x007A(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x5];                                       // 0x007B(0x0005) MISSED OFFSET
	class UAnimSequenceBase*                           Sequence;                                                 // 0x0080(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UBlendSpaceBase*                             BlendSpace;                                               // 0x0088(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UAnimationAsset*                             AnimationBase;                                            // 0x0090(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FAnimationNode_TwoWayBlend                  BlendByDamagePercent;                                     // 0x0098(0x0070)
	struct FAnimNode_BlendListByBool                   BlendSequenceOrBlendspace;                                // 0x0108(0x00F0)
	struct FAnimNode_RefPose                           RefPoseNode;                                              // 0x01F8(0x0038)
	struct FAnimNode_SequencePlayer                    SequencePlayer;                                           // 0x0230(0x0088)
	struct FAnimNode_BlendSpacePlayer                  BlendspacePlayer;                                         // 0x02B8(0x0160)
};

// ScriptStruct BendGame.AnimNode_RandomBlendSpace
// 0x00D8 (0x0238 - 0x0160)
struct FAnimNode_RandomBlendSpace : public FAnimNode_BlendSpacePlayer
{
	struct FName                                       AnimBlendSpaceGroupName;                                  // 0x0160(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BlendTime;                                                // 0x0168(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EAlphaBlendOption>                     BlendOption;                                              // 0x016C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x016D(0x0003) MISSED OFFSET
	class UCurveFloat*                                 CustomBlendCurve;                                         // 0x0170(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0178(0x0008) MISSED OFFSET
	class UBlendProfile*                               BlendProfile;                                             // 0x0180(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<class UObject*>                             BlendListReferencedObjects;                               // 0x0188(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData02[0xA0];                                      // 0x0198(0x00A0) MISSED OFFSET
};

// ScriptStruct BendGame.AnimNode_RandomSequence
// 0x00E8 (0x0170 - 0x0088)
struct FAnimNode_RandomSequence : public FAnimNode_SequencePlayer
{
	struct FName                                       AnimSequenceGroupName;                                    // 0x0088(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bContinueToNextSequence;                                  // 0x0090(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bRandomOnInitOnly;                                        // 0x0091(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0092(0x0002) MISSED OFFSET
	float                                              BlendTime;                                                // 0x0094(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EAlphaBlendOption>                     BlendOption;                                              // 0x0098(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0099(0x0007) MISSED OFFSET
	class UCurveFloat*                                 CustomBlendCurve;                                         // 0x00A0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              desiredSpeed;                                             // 0x00A8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MinPlayRate;                                              // 0x00AC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxPlayRate;                                              // 0x00B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x00B4(0x0004) MISSED OFFSET
	class UBlendProfile*                               BlendProfile;                                             // 0x00B8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<class UObject*>                             BlendListReferencedObjects;                               // 0x00C0(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData03[0xA0];                                      // 0x00D0(0x00A0) MISSED OFFSET
};

// ScriptStruct BendGame.BendBonesPawData
// 0x00D0
struct FBendBonesPawData
{
	float                                              GroundDistanceToBone;                                     // 0x0000(0x0004) (ZeroConstructor, IsPlainOldData)
	struct FVector                                     CachedGroundPos;                                          // 0x0004(0x000C) (ZeroConstructor, IsPlainOldData)
	float                                              AnimationTrackingZ;                                       // 0x0010(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xC];                                       // 0x0014(0x000C) MISSED OFFSET
	struct FTransform                                  LastFrameTransform;                                       // 0x0020(0x0030) (IsPlainOldData)
	unsigned char                                      UnknownData01[0x80];                                      // 0x0050(0x0080) MISSED OFFSET
};

// ScriptStruct BendGame.BendBonesSpineData
// 0x0024
struct FBendBonesSpineData
{
	float                                              BlendspaceMinValue;                                       // 0x0000(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              BlendspaceMaxValue;                                       // 0x0004(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              Lowest;                                                   // 0x0008(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              Highest;                                                  // 0x000C(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              CenterPoint;                                              // 0x0010(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              NormalHeight;                                             // 0x0014(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              FrontNormalHeight;                                        // 0x0018(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              FrontLowest;                                              // 0x001C(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              FrontHighest;                                             // 0x0020(0x0004) (ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.BendBonesBlendspaceData
// 0x0370
struct FBendBonesBlendspaceData
{
	struct FBendBonesPawData                           FrontLeft;                                                // 0x0000(0x00D0)
	struct FBendBonesPawData                           FrontRight;                                               // 0x00D0(0x00D0)
	struct FBendBonesPawData                           Left;                                                     // 0x01A0(0x00D0)
	struct FBendBonesPawData                           Right;                                                    // 0x0270(0x00D0)
	struct FBendBonesSpineData                         Spine;                                                    // 0x0340(0x0024) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xC];                                       // 0x0364(0x000C) MISSED OFFSET
};

// ScriptStruct BendGame.AnimNode_BendBonesIKBlendspace
// 0x0980 (0x09B0 - 0x0030)
struct FAnimNode_BendBonesIKBlendspace : public FAnimNode_Base
{
	struct FPoseLink                                   LocalPose;                                                // 0x0030(0x0018) (Edit, BlueprintVisible)
	float                                              Alpha;                                                    // 0x0048(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x004C(0x0004) MISSED OFFSET
	struct FName                                       DisableSaggingAndIKCurveName;                             // 0x0050(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       IKAlphaCurveName;                                         // 0x0058(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bInvertIKAlphaCurve;                                      // 0x0060(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0061(0x0003) MISSED OFFSET
	float                                              CalculatedAlpha;                                          // 0x0064(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              PawProcessingAlpha;                                       // 0x0068(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x006C(0x0004) MISSED OFFSET
	struct FBoneReference                              IKBaseBoneFrontLeft;                                      // 0x0070(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FBoneReference                              IKBaseBoneFrontRight;                                     // 0x0080(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FBoneReference                              IKBaseBoneLeft;                                           // 0x0090(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FBoneReference                              IKBaseBoneRight;                                          // 0x00A0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly)
	float                                              ForwardProbeStartOffset;                                  // 0x00B0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              BackwardProbeStartOffset;                                 // 0x00B4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ForwardProbeZOffset;                                      // 0x00B8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              GroundProbeAmount;                                        // 0x00BC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MaxPawAdjustmentDownwards;                                // 0x00C0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MaxPawAdjustmentUpwards;                                  // 0x00C4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FBoneReference                              EffectorBoneFrontLeft;                                    // 0x00C8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FBoneReference                              EffectorBoneFrontRight;                                   // 0x00D8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FBoneReference                              EffectorBoneLeft;                                         // 0x00E8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FBoneReference                              EffectorBoneRight;                                        // 0x00F8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly)
	float                                              EffectorToGroundDistance;                                 // 0x0108(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector                                     RaycastStartOffset;                                       // 0x010C(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector                                     RaycastEndOffset;                                         // 0x0118(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               TraceComplex;                                             // 0x0124(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0125(0x0003) MISSED OFFSET
	float                                              RaycastSphereRadius;                                      // 0x0128(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              SpineAdjustmentSpeed;                                     // 0x012C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              PawBlendTime;                                             // 0x0130(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x0134(0x0004) MISSED OFFSET
	struct FName                                       SpineBlendspaceName;                                      // 0x0138(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       ReferencePoseAnimSeqName;                                 // 0x0140(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bTrackAnimationMovementByCurve;                           // 0x0148(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x3];                                       // 0x0149(0x0003) MISSED OFFSET
	float                                              TrackAnimationMovement;                                   // 0x014C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       DontTrackAnimationMovementCurve;                          // 0x0150(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              HardCodedZFrontLeftPaw;                                   // 0x0158(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              HardCodedZFrontRightPaw;                                  // 0x015C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              HardCodedZLeftPaw;                                        // 0x0160(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              HardCodedZRightPaw;                                       // 0x0164(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PrevTimeSeconds;                                          // 0x0168(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              DeltaTime;                                                // 0x016C(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              PawLerpAmount;                                            // 0x0170(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData06[0xC];                                       // 0x0174(0x000C) MISSED OFFSET
	struct FBendBonesBlendspaceData                    Data;                                                     // 0x0180(0x0370) (Transient)
	bool                                               bPawProcessingInitFailure;                                // 0x04F0(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData07[0x7];                                       // 0x04F1(0x0007) MISSED OFFSET
	struct FAnimNode_RandomBlendSpace                  SpineBlendspacePlayer;                                    // 0x04F8(0x0238) (Transient)
	struct FAnimNode_RandomSequence                    ReferencePoseAnimSeqPlayer;                               // 0x0730(0x0170) (Transient)
	unsigned char                                      UnknownData08[0x110];                                     // 0x08A0(0x0110) MISSED OFFSET
};

// ScriptStruct BendGame.AnimNode_BendTwoBoneIKBase
// 0x0048 (0x00B0 - 0x0068)
struct FAnimNode_BendTwoBoneIKBase : public FAnimNode_SkeletalControlBase
{
	struct FBoneReference                              IKBone;                                                   // 0x0068(0x0010) (Edit, BlueprintVisible)
	struct FBoneReference                              EndEffectorBone;                                          // 0x0078(0x0010) (Edit, BlueprintVisible)
	struct FVector                                     JointTargetLocation;                                      // 0x0088(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector2D                                   StretchLimits;                                            // 0x0094(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bTakeRotationFromEffectorTargetSpace : 1;                 // 0x009C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bMaintainEffectorTargetRelRot : 1;                        // 0x009C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bAllowStretching : 1;                                     // 0x009C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x3];                                       // 0x009D(0x0003) MISSED OFFSET
	TEnumAsByte<EBoneControlSpace>                     JointTargetLocationSpace;                                 // 0x00A0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x00A1(0x0007) MISSED OFFSET
	struct FName                                       JointTargetSpaceBoneName;                                 // 0x00A8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.AnimNode_BendTwoBoneIK
// 0x0010 (0x00C0 - 0x00B0)
struct FAnimNode_BendTwoBoneIK : public FAnimNode_BendTwoBoneIKBase
{
	struct FBoneReference                              EndEffectorTargetBone;                                    // 0x00B0(0x0010) (Edit, BlueprintVisible)
};

// ScriptStruct BendGame.AnimNode_BendTwoBoneIKCachedBones
// 0x0000 (0x00B0 - 0x00B0)
struct FAnimNode_BendTwoBoneIKCachedBones : public FAnimNode_BendTwoBoneIKBase
{

};

// ScriptStruct BendGame.AnimNode_BendTwoBoneIKExternal
// 0x0030 (0x00E0 - 0x00B0)
struct FAnimNode_BendTwoBoneIKExternal : public FAnimNode_BendTwoBoneIKBase
{
	struct FTransform                                  EndEffectorTargetWS;                                      // 0x00B0(0x0030) (Edit, BlueprintVisible, IsPlainOldData)
};

// ScriptStruct BendGame.AnimNode_BendTwoBoneIKRaycast
// 0x0130 (0x01E0 - 0x00B0)
struct FAnimNode_BendTwoBoneIKRaycast : public FAnimNode_BendTwoBoneIKBase
{
	struct FBoneReference                              RaycastSourceBone;                                        // 0x00B0(0x0010) (Edit, BlueprintVisible)
	bool                                               WorldSpaceOffsets;                                        // 0x00C0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00C1(0x0003) MISSED OFFSET
	struct FVector                                     RaycastStartOffset;                                       // 0x00C4(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     RaycastEndOffset;                                         // 0x00D0(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IgnorePawns;                                              // 0x00DC(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               TraceComplex;                                             // 0x00DD(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x00DE(0x0002) MISSED OFFSET
	float                                              RaycastSphereRadius;                                      // 0x00E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               RotateBoneToHitNormal;                                    // 0x00E4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x00E5(0x0003) MISSED OFFSET
	struct FName                                       RotationBoneOffsetSocket;                                 // 0x00E8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BlendInTime;                                              // 0x00F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BlendOutTime;                                             // 0x00F4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PenetrationBlendTime;                                     // 0x00F8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x00FC(0x0004) MISSED OFFSET
	struct FTransform                                  LastFrameTransform;                                       // 0x0100(0x0030) (Transient, IsPlainOldData)
	unsigned char                                      UnknownData04[0xB0];                                      // 0x0130(0x00B0) MISSED OFFSET
};

// ScriptStruct BendGame.AnimNode_BlendspaceSlot
// 0x0040 (0x01A0 - 0x0160)
struct FAnimNode_BlendspaceSlot : public FAnimNode_BlendSpacePlayer
{
	struct FPoseLink                                   Source;                                                   // 0x0160(0x0018) (Edit, BlueprintVisible)
	struct FName                                       SlotName;                                                 // 0x0178(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               DEBUG_ACTIVATE;                                           // 0x0180(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1F];                                      // 0x0181(0x001F) MISSED OFFSET
};

// ScriptStruct BendGame.AnimNode_ClearCurves
// 0x0020 (0x0050 - 0x0030)
struct FAnimNode_ClearCurves : public FAnimNode_Base
{
	struct FPoseLink                                   Source;                                                   // 0x0030(0x0018) (Edit, BlueprintVisible)
	bool                                               ClearCurves;                                              // 0x0048(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0049(0x0007) MISSED OFFSET
};

// ScriptStruct BendGame.AnimNode_EvaluateHelperRig
// 0x0000 (0x0068 - 0x0068)
struct FAnimNode_EvaluateHelperRig : public FAnimNode_SkeletalControlBase
{

};

// ScriptStruct BendGame.AnimNode_OffsetStartBlendspace
// 0x0008 (0x0168 - 0x0160)
struct FAnimNode_OffsetStartBlendspace : public FAnimNode_BlendSpacePlayer
{
	float                                              OffsetStartTime;                                          // 0x0160(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0164(0x0004) MISSED OFFSET
};

// ScriptStruct BendGame.AnimNode_RandomAimOffset
// 0x0018 (0x0250 - 0x0238)
struct FAnimNode_RandomAimOffset : public FAnimNode_RandomBlendSpace
{
	struct FPoseLink                                   BasePose;                                                 // 0x0238(0x0018) (Edit, BlueprintVisible)
};

// ScriptStruct BendGame.BendAnimNode_SkeletalControlBase_WithProxyRef
// 0x0008 (0x0070 - 0x0068)
struct FBendAnimNode_SkeletalControlBase_WithProxyRef : public FAnimNode_SkeletalControlBase
{
	unsigned char                                      UnknownData00[0x8];                                       // 0x0068(0x0008) MISSED OFFSET
};

// ScriptStruct BendGame.AnimNode_SaggyMesh
// 0x0120 (0x0190 - 0x0070)
struct FAnimNode_SaggyMesh : public FBendAnimNode_SkeletalControlBase_WithProxyRef
{
	struct FBoneReference                              SagBone;                                                  // 0x0070(0x0010) (Edit, BlueprintVisible)
	float                                              SagLimit;                                                 // 0x0080(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SagSpeed;                                                 // 0x0084(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                MinIKHitsToStartSagging;                                  // 0x0088(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x008C(0x0004) MISSED OFFSET
	TArray<struct FBoneReference>                      BonesUsedForIK;                                           // 0x0090(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	unsigned char                                      UnknownData01[0xF0];                                      // 0x00A0(0x00F0) MISSED OFFSET
};

// ScriptStruct BendGame.AnimNode_SaveCachedBones
// 0x0010 (0x0078 - 0x0068)
struct FAnimNode_SaveCachedBones : public FAnimNode_SkeletalControlBase
{
	TArray<struct FBoneReference>                      Bones;                                                    // 0x0068(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
};

// ScriptStruct BendGame.AnimNode_SetLocalAnimSequences
// 0x0040 (0x0070 - 0x0030)
struct FAnimNode_SetLocalAnimSequences : public FAnimNode_Base
{
	struct FPoseLink                                   Source;                                                   // 0x0030(0x0018) (Edit, BlueprintVisible)
	TArray<struct FName>                               Names;                                                    // 0x0048(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<class UAnimSequenceBase*>                   Values;                                                   // 0x0058(0x0010) (Edit, BlueprintVisible, EditFixedSize, ZeroConstructor)
	unsigned char                                      bSnapshotPinInputsWhenNodeStartsBlendingIn : 1;           // 0x0068(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0069(0x0007) MISSED OFFSET
};

// ScriptStruct BendGame.AnimNode_SetLocalBlendSpaces
// 0x0040 (0x0070 - 0x0030)
struct FAnimNode_SetLocalBlendSpaces : public FAnimNode_Base
{
	struct FPoseLink                                   Source;                                                   // 0x0030(0x0018) (Edit, BlueprintVisible)
	TArray<struct FName>                               Names;                                                    // 0x0048(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<class UBlendSpaceBase*>                     Values;                                                   // 0x0058(0x0010) (Edit, BlueprintVisible, EditFixedSize, ZeroConstructor)
	unsigned char                                      bSnapshotPinInputsWhenNodeStartsBlendingIn : 1;           // 0x0068(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0069(0x0007) MISSED OFFSET
};

// ScriptStruct BendGame.AnimNode_SetLocalFloats
// 0x0040 (0x0070 - 0x0030)
struct FAnimNode_SetLocalFloats : public FAnimNode_Base
{
	struct FPoseLink                                   Source;                                                   // 0x0030(0x0018) (Edit, BlueprintVisible)
	TArray<struct FName>                               Names;                                                    // 0x0048(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<float>                                      Values;                                                   // 0x0058(0x0010) (Edit, BlueprintVisible, EditFixedSize, ZeroConstructor)
	unsigned char                                      bSnapshotPinInputsWhenNodeStartsBlendingIn : 1;           // 0x0068(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0069(0x0007) MISSED OFFSET
};

// ScriptStruct BendGame.AnimNode_SetLocalInts
// 0x0040 (0x0070 - 0x0030)
struct FAnimNode_SetLocalInts : public FAnimNode_Base
{
	struct FPoseLink                                   Source;                                                   // 0x0030(0x0018) (Edit, BlueprintVisible)
	TArray<struct FName>                               Names;                                                    // 0x0048(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<int>                                        Values;                                                   // 0x0058(0x0010) (Edit, BlueprintVisible, EditFixedSize, ZeroConstructor)
	unsigned char                                      bSnapshotPinInputsWhenNodeStartsBlendingIn : 1;           // 0x0068(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0069(0x0007) MISSED OFFSET
};

// ScriptStruct BendGame.AnimNode_StartSequence
// 0x0018 (0x00A0 - 0x0088)
struct FAnimNode_StartSequence : public FAnimNode_SequencePlayer
{
	float                                              OffsetStartTime;                                          // 0x0088(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x14];                                      // 0x008C(0x0014) MISSED OFFSET
};

// ScriptStruct BendGame.AnimNode_XPECTwoBoneIKFootPlant
// 0x01D0 (0x0280 - 0x00B0)
struct FAnimNode_XPECTwoBoneIKFootPlant : public FAnimNode_BendTwoBoneIKBase
{
	struct FVector                                     RaycastFootStartOffset;                                   // 0x00B0(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     RaycastFootEndOffset;                                     // 0x00BC(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               WorldSpaceOffsets;                                        // 0x00C8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00C9(0x0007) MISSED OFFSET
	struct FBoneReference                              RaycastToeBone;                                           // 0x00D0(0x0010) (Edit, BlueprintVisible)
	struct FVector                                     RaycastToeStartOffset;                                    // 0x00E0(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     RaycastToeEndOffset;                                      // 0x00EC(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FBoneReference                              RaycastHeelBone;                                          // 0x00F8(0x0010) (Edit, BlueprintVisible)
	float                                              RaycastHeelStartOffset;                                   // 0x0108(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              RaycastHeelEndOffset;                                     // 0x010C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FootHalfWidth;                                            // 0x0110(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IsLeftFoot;                                               // 0x0114(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IgnorePawns;                                              // 0x0115(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               TraceComplex;                                             // 0x0116(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               ShouldFootStickToGround;                                  // 0x0117(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              RaycastSphereRadius;                                      // 0x0118(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               DrawSphere;                                               // 0x011C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x011D(0x0003) MISSED OFFSET
	struct FName                                       RotationBoneOffsetSocket;                                 // 0x0120(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BlendInTime;                                              // 0x0128(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BlendOutTime;                                             // 0x012C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ToleranceAngle;                                           // 0x0130(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FootPlantingThreshold;                                    // 0x0134(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              IKMeshSizeThreshold;                                      // 0x0138(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MeshSizeBuffer;                                           // 0x013C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               EnableFootLocking;                                        // 0x0140(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0141(0x0003) MISSED OFFSET
	float                                              FootLockBlendOutTime;                                     // 0x0144(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0148(0x0008) MISSED OFFSET
	struct FTransform                                  LastFrameTransform;                                       // 0x0150(0x0030) (Transient, IsPlainOldData)
	unsigned char                                      UnknownData04[0x100];                                     // 0x0180(0x0100) MISSED OFFSET
};

// ScriptStruct BendGame.BendAnimNode_AddAnimGraphTags
// 0x0038 (0x0068 - 0x0030)
struct FBendAnimNode_AddAnimGraphTags : public FAnimNode_Base
{
	struct FPoseLink                                   Source;                                                   // 0x0030(0x0018) (Edit, BlueprintVisible)
	TArray<struct FName>                               TagName;                                                  // 0x0048(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<bool>                                       Enabled;                                                  // 0x0058(0x0010) (Edit, BlueprintVisible, EditFixedSize, ZeroConstructor)
};

// ScriptStruct BendGame.BendAnimNode_AddCurveValue
// 0x0028 (0x0058 - 0x0030)
struct FBendAnimNode_AddCurveValue : public FAnimNode_Base
{
	struct FPoseLink                                   Source;                                                   // 0x0030(0x0018) (Edit, BlueprintVisible)
	struct FName                                       CurveName;                                                // 0x0048(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              CurveValue;                                               // 0x0050(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bOverrideCurveValueFromChildNodes : 1;                    // 0x0054(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0055(0x0003) MISSED OFFSET
};

// ScriptStruct BendGame.BendAnimJointLimit
// 0x0080
struct FBendAnimJointLimit
{
	struct FBoneReference                              Bone;                                                     // 0x0000(0x0010) (Edit)
	struct FRotator                                    Min;                                                      // 0x0010(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	struct FRotator                                    Max;                                                      // 0x001C(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector                                     ConstraintSpaceEuler;                                     // 0x0028(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUseRoundedLimits : 1;                                    // 0x0034(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x4B];                                      // 0x0035(0x004B) MISSED OFFSET
};

// ScriptStruct BendGame.BendAnimNode_ApplyJointLimits
// 0x0010 (0x0078 - 0x0068)
struct FBendAnimNode_ApplyJointLimits : public FAnimNode_SkeletalControlBase
{
	TArray<struct FBendAnimJointLimit>                 Limits;                                                   // 0x0068(0x0010) (Edit, ZeroConstructor)
};

// ScriptStruct BendGame.BendAnimNode_BlockGraphTillSetupValid
// 0x0020 (0x0050 - 0x0030)
struct FBendAnimNode_BlockGraphTillSetupValid : public FAnimNode_Base
{
	struct FPoseLink                                   Source;                                                   // 0x0030(0x0018) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0048(0x0008) MISSED OFFSET
};

// ScriptStruct BendGame.BendAnimGraphBranch
// 0x0018
struct FBendAnimGraphBranch
{
	struct FBoneReference                              StartBone;                                                // 0x0000(0x0010) (Edit, BlueprintVisible)
	unsigned char                                      bInclusive : 1;                                           // 0x0010(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0011(0x0007) MISSED OFFSET
};

// ScriptStruct BendGame.BendAnimNode_ExcludeJoints
// 0x0118 (0x0148 - 0x0030)
struct FBendAnimNode_ExcludeJoints : public FAnimNode_Base
{
	struct FPoseLink                                   Source;                                                   // 0x0030(0x0018) (Edit, BlueprintVisible)
	TArray<struct FBendAnimGraphBranch>                ExcludedBranches;                                         // 0x0048(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	unsigned char                                      bExcludeRuntimeJoints : 1;                                // 0x0058(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bEnable : 1;                                              // 0x0058(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0xEF];                                      // 0x0059(0x00EF) MISSED OFFSET
};

// ScriptStruct BendGame.BendAnimNode_FixupAnchoredMeshPostCollision
// 0x00E8 (0x0158 - 0x0070)
struct FBendAnimNode_FixupAnchoredMeshPostCollision : public FBendAnimNode_SkeletalControlBase_WithProxyRef
{
	struct FBoneReference                              FixupBone;                                                // 0x0070(0x0010) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0xD8];                                      // 0x0080(0x00D8) MISSED OFFSET
};

// ScriptStruct BendGame.BendAnimNode_InterpolateLocalFloats
// 0x0080 (0x00B0 - 0x0030)
struct FBendAnimNode_InterpolateLocalFloats : public FAnimNode_Base
{
	struct FPoseLink                                   Source;                                                   // 0x0030(0x0018) (Edit)
	TArray<struct FName>                               Names;                                                    // 0x0048(0x0010) (Edit, ZeroConstructor)
	TArray<float>                                      InterpolationRates;                                       // 0x0058(0x0010) (Edit, EditFixedSize, ZeroConstructor)
	TArray<float>                                      InitialValues;                                            // 0x0068(0x0010) (Edit, EditFixedSize, ZeroConstructor)
	TArray<float>                                      TargetValues;                                             // 0x0078(0x0010) (Edit, EditFixedSize, ZeroConstructor)
	unsigned char                                      UnknownData00[0x28];                                      // 0x0088(0x0028) MISSED OFFSET
};

// ScriptStruct BendGame.BendAnimNode_Mirror
// 0x0050 (0x0080 - 0x0030)
struct FBendAnimNode_Mirror : public FAnimNode_Base
{
	struct FPoseLink                                   Source;                                                   // 0x0030(0x0018) (Edit, BlueprintVisible)
	unsigned char                                      bEnable : 1;                                              // 0x0048(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bSnapshotPinInputsWhenNodeStartsBlendingIn : 1;           // 0x0048(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bQueryableExternally : 1;                                 // 0x0048(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0049(0x0007) MISSED OFFSET
	struct FName                                       MirrorNodeEventName;                                      // 0x0050(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x28];                                      // 0x0058(0x0028) MISSED OFFSET
};

// ScriptStruct BendGame.BendAnimNode_MotionMatching
// 0x01B8 (0x0240 - 0x0088)
struct FBendAnimNode_MotionMatching : public FAnimNode_SequencePlayer
{
	class UBendAnimMotionMatching_Database*            MotionMatchingData;                                       // 0x0088(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1B0];                                     // 0x0090(0x01B0) MISSED OFFSET
};

// ScriptStruct BendGame.AnimNode_MultiLimbSupportIk
// 0x00C8 (0x0130 - 0x0068)
struct FAnimNode_MultiLimbSupportIk : public FAnimNode_SkeletalControlBase
{
	TArray<struct FBoneReference>                      LimbEndBones;                                             // 0x0068(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	float                                              LimbEndStationarySpeedThreshold_WhenPlanted;              // 0x0078(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              NumGsAccelAlongLimbSupportDirFullWeightThreshold_WhenPlanted;// 0x007C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              LimbEndStationarySpeedThreshold_WhenUnplanted;            // 0x0080(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              NumGsAccelAlongLimbSupportDirFullWeightThreshold_WhenUnplanted;// 0x0084(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xA8];                                      // 0x0088(0x00A8) MISSED OFFSET
};

// ScriptStruct BendGame.BendAnimNode_MultiplyCurveValue
// 0x0028 (0x0058 - 0x0030)
struct FBendAnimNode_MultiplyCurveValue : public FAnimNode_Base
{
	struct FPoseLink                                   Source;                                                   // 0x0030(0x0018) (Edit, BlueprintVisible)
	struct FName                                       CurveName;                                                // 0x0048(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Multiplier;                                               // 0x0050(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0054(0x0004) MISSED OFFSET
};

// ScriptStruct BendGame.BendAnimNode_PostPhysicsInitialPose
// 0x0018 (0x0048 - 0x0030)
struct FBendAnimNode_PostPhysicsInitialPose : public FAnimNode_Base
{
	unsigned char                                      UnknownData00[0x18];                                      // 0x0030(0x0018) MISSED OFFSET
};

// ScriptStruct BendGame.BendAnimNode_PostPhysicsSwitch
// 0x0030 (0x0060 - 0x0030)
struct FBendAnimNode_PostPhysicsSwitch : public FAnimNode_Base
{
	struct FPoseLink                                   PrePhysics;                                               // 0x0030(0x0018) (Edit, BlueprintVisible)
	struct FPoseLink                                   PostPhysics;                                              // 0x0048(0x0018) (Edit, BlueprintVisible)
};

// ScriptStruct BendGame.BendAnimNode_PseudoStateInstanceRingBuffer
// 0x0030 (0x0118 - 0x00E8)
struct FBendAnimNode_PseudoStateInstanceRingBuffer : public FAnimNode_BlendListBase
{
	class UBendAnimStateInstancesHandle*               Handle;                                                   // 0x00E8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<struct FName>                               CollectedCurveNames;                                      // 0x00F0(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData00[0x18];                                      // 0x0100(0x0018) MISSED OFFSET
};

// ScriptStruct BendGame.BendAnimNode_RedirectRootMotion
// 0x0020 (0x0050 - 0x0030)
struct FBendAnimNode_RedirectRootMotion : public FAnimNode_Base
{
	struct FPoseLink                                   Source;                                                   // 0x0030(0x0018) (Edit, BlueprintVisible)
	float                                              RootMotionYaw;                                            // 0x0048(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              Alpha;                                                    // 0x004C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
};

// ScriptStruct BendGame.BendAnimNode_ResetGraphBelow
// 0x0020 (0x0050 - 0x0030)
struct FBendAnimNode_ResetGraphBelow : public FAnimNode_Base
{
	struct FPoseLink                                   Source;                                                   // 0x0030(0x0018) (Edit, BlueprintVisible)
	unsigned char                                      bReset : 1;                                               // 0x0048(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0049(0x0007) MISSED OFFSET
};

// ScriptStruct BendGame.BendAnimNode_ScalePlayRate
// 0x0020 (0x0050 - 0x0030)
struct FBendAnimNode_ScalePlayRate : public FAnimNode_Base
{
	struct FPoseLink                                   Source;                                                   // 0x0030(0x0018) (Edit, BlueprintVisible)
	float                                              TimeScale;                                                // 0x0048(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bSnapshotPinInputsWhenNodeStartsBlendingIn : 1;           // 0x004C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x3];                                       // 0x004D(0x0003) MISSED OFFSET
};

// ScriptStruct BendGame.BendAnimNode_SmoothStepUpStepDown
// 0x00A8 (0x0118 - 0x0070)
struct FBendAnimNode_SmoothStepUpStepDown : public FBendAnimNode_SkeletalControlBase_WithProxyRef
{
	struct FBoneReference                              AffectedBone;                                             // 0x0070(0x0010) (Edit, BlueprintVisible)
	float                                              MinPositionLag;                                           // 0x0080(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxPositionLag;                                           // 0x0084(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SpeedDescent;                                             // 0x0088(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SpeedAscent;                                              // 0x008C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AccelDescent;                                             // 0x0090(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AccelAscent;                                              // 0x0094(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x80];                                      // 0x0098(0x0080) MISSED OFFSET
};

// ScriptStruct BendGame.BendAnimNode_TransformBone
// 0x0058 (0x00C0 - 0x0068)
struct FBendAnimNode_TransformBone : public FAnimNode_SkeletalControlBase
{
	struct FBoneReference                              BoneToModify;                                             // 0x0068(0x0010) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0078(0x0008) MISSED OFFSET
	struct FTransform                                  Transform;                                                // 0x0080(0x0030) (Edit, BlueprintVisible, IsPlainOldData)
	TEnumAsByte<EBoneModificationMode>                 TransformMode;                                            // 0x00B0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EBoneControlSpace>                     TransformSpace;                                           // 0x00B1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0xE];                                       // 0x00B2(0x000E) MISSED OFFSET
};

// ScriptStruct BendGame.BendCrowdAnimInstanceProxy
// 0x0000 (0x05B0 - 0x05B0)
struct FBendCrowdAnimInstanceProxy : public FAnimSingleNodeInstanceProxy
{

};

// ScriptStruct BendGame.BendInputRemapTable
// 0x0087 (0x0088 - 0x0001)
struct FBendInputRemapTable : public FTableRowBase
{
	struct FText                                       GroupDisplayName;                                         // 0x0000(0x0018) (Edit, BlueprintVisible, DisableEditOnInstance)
	struct FText                                       ActionDisplayName;                                        // 0x0018(0x0018) (Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FName>                               LinkedTo;                                                 // 0x0030(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	struct FName                                       SubGroupName;                                             // 0x0040(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<struct FName>                               ConflictingSubGroups;                                     // 0x0048(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FName>                               ConflictingActions;                                       // 0x0058(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FName>                               ExceptionActions;                                         // 0x0068(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FKey>                                IllegalKeys;                                              // 0x0078(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
};

// ScriptStruct BendGame.BendSteamInputTable
// 0x0017 (0x0018 - 0x0001)
struct FBendSteamInputTable : public FTableRowBase
{
	struct FName                                       SteamSetName;                                             // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<struct FName>                               LinkedActions;                                            // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
};

// ScriptStruct BendGame.InventoryStorageItemList
// 0x0010
struct FInventoryStorageItemList
{
	TArray<struct FInventoryStorageGuidItem>           Items;                                                    // 0x0000(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
};

// ScriptStruct BendGame.WeaponPartSelectCustomizeHelper
// 0x0068
struct FWeaponPartSelectCustomizeHelper
{
	unsigned char                                      bIsPlayerEquippedWeapon : 1;                              // 0x0000(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)
	unsigned char                                      bIsDiscoveryWeapon : 1;                                   // 0x0000(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0001(0x0007) MISSED OFFSET
	struct FInventoryStorageWeapon                     StorageWeapon;                                            // 0x0008(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)
	TArray<class ABendWeapon*>                         Weapons;                                                  // 0x0058(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst)
};

// ScriptStruct BendGame.InventoryMenuWeapon
// 0x0068
struct FInventoryMenuWeapon
{
	unsigned char                                      UnknownData00[0x4];                                       // 0x0000(0x0004) MISSED OFFSET
	TEnumAsByte<EWeaponSocketLocation>                 Location;                                                 // 0x0004(0x0001) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0005(0x0003) MISSED OFFSET
	struct FInventoryStorageWeapon                     StorageWeapon;                                            // 0x0008(0x0050) (BlueprintVisible, Transient)
	class UInventoryItemAmmo*                          WeaponAmmo;                                               // 0x0058(0x0008) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	class ABendWeapon*                                 PawnWeapon;                                               // 0x0060(0x0008) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
};

// ScriptStruct BendGame.InventoryMenuWeaponMgr
// 0x0028
struct FInventoryMenuWeaponMgr
{
	class ABendPlayerPawn*                             Player;                                                   // 0x0000(0x0008) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	TArray<struct FInventoryMenuWeapon>                InitialWeapons;                                           // 0x0008(0x0010) (BlueprintVisible, ZeroConstructor, Transient)
	TArray<struct FInventoryMenuWeapon>                Weapons;                                                  // 0x0018(0x0010) (BlueprintVisible, ZeroConstructor, Transient)
};

// ScriptStruct BendGame.ExtractionPOIData
// 0x01F0
struct FExtractionPOIData
{
	class ABendPOISlot*                                ExtractionPOISlot;                                        // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class ABendScriptedEncounterSpawn*                 Spawn;                                                    // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FBendActionData                             ArriveAtExtractionPOISlotActionData;                      // 0x0010(0x00A0) (Edit, BlueprintVisible)
	struct FBendActionData                             ArriveAtEnterHeliSlotActionData;                          // 0x00B0(0x00A0) (Edit, BlueprintVisible)
	struct FBendActionData                             InsideHeliActionData;                                     // 0x0150(0x00A0) (Edit, BlueprintVisible)
};

}

#ifdef _MSC_VER
	#pragma pack(pop)
#endif
