#pragma once

// DaysGone (00) SDK

#ifdef _MSC_VER
	#pragma pack(push, 0x8)
#endif

namespace SDK
{
//---------------------------------------------------------------------------
//Classes
//---------------------------------------------------------------------------

// Class BendGame.ActionIcon
// 0x0090 (0x02D8 - 0x0248)
class UActionIcon : public UUserWidget
{
public:
	TEnumAsByte<EInputType>                            ActionType;                                               // 0x0248(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EBendInputPrimaryType>                 DesiredBinding;                                           // 0x0249(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x024A(0x0006) MISSED OFFSET
	struct FName                                       ActionName;                                               // 0x0250(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bShowHoldIndication;                                      // 0x0258(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EConsoleForGamepadLabels>              ForcedInputDevice;                                        // 0x0259(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bHideForKeyboardAndMouse;                                 // 0x025A(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x025B(0x0001) MISSED OFFSET
	int                                                DesiredIconSize;                                          // 0x025C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                KeyboardIconColor;                                        // 0x0260(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                KeyboardIconBackgroundColor;                              // 0x0270(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bShowBackgroundForKeyboardAndMouse;                       // 0x0280(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bShowBackgroundForGamepad;                                // 0x0281(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x2];                                       // 0x0282(0x0002) MISSED OFFSET
	float                                              HoldProgress;                                             // 0x0284(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	class UDataTable*                                  KeyTextureDataTable;                                      // 0x0288(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnColor;                                                  // 0x0290(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnVisualUpdate;                                           // 0x02A0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData03[0x28];                                      // 0x02B0(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.ActionIcon");
		return ptr;
	}


	void SetShowHoldIndication(bool bShow);
	void SetHoldProgress(float InProgress);
	void SetForcedInputDevice(TEnumAsByte<EConsoleForGamepadLabels> InForcedInputDevice);
	void SetActionType(TEnumAsByte<EInputType> InActionType);
	void SetActionName(const struct FName& InActionName);
	void OnHoldProgressChanged(float InProgress);
	bool HasValidVisuals();
	bool HasValidBinding();
	void HandleOnInputBindingChange(const struct FName& InputName);
};


// Class BendGame.ActionTextBlock
// 0x0058 (0x02A0 - 0x0248)
class UActionTextBlock : public UUserWidget
{
public:
	struct FText                                       Text;                                                     // 0x0248(0x0018) (Edit, DisableEditOnTemplate)
	struct FLinearColor                                DefaultActionColor;                                       // 0x0260(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FLinearColor                                DefaultBackgroundColor;                                   // 0x0270(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<EConsoleForGamepadLabels>              ForcedInputDevice;                                        // 0x0280(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0281(0x0007) MISSED OFFSET
	class UDataTable*                                  KeyTextureDataTable;                                      // 0x0288(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0290(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.ActionTextBlock");
		return ptr;
	}


	void SetText(const struct FText& InText);
	void SetForcedInputDevice(TEnumAsByte<EConsoleForGamepadLabels> InForcedInputDevice);
	struct FText GetText();
};


// Class BendGame.BendVehicleRamManager
// 0x0018 (0x0040 - 0x0028)
class UBendVehicleRamManager : public UObject
{
public:
	float                                              LockoutTimeBetweenInitalImpacts;                          // 0x0028(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bDebugEnabled;                                            // 0x002C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x13];                                      // 0x002D(0x0013) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendVehicleRamManager");
		return ptr;
	}

};


// Class BendGame.VehicleAwarenessManager
// 0x0010 (0x0038 - 0x0028)
class UVehicleAwarenessManager : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0028(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.VehicleAwarenessManager");
		return ptr;
	}

};


// Class BendGame.AIVehicleManager
// 0x0068 (0x03B0 - 0x0348)
class AAIVehicleManager : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0348(0x0008) MISSED OFFSET
	TArray<struct FCornerInfo>                         mCornerMaxVelocityTable;                                  // 0x0350(0x0010) (Edit, ZeroConstructor)
	class UBendRoadEdgeProvider*                       RoadEdgeProvider;                                         // 0x0360(0x0008) (ZeroConstructor, IsPlainOldData)
	float                                              LockTimeAfterAvoid;                                       // 0x0368(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DeltaTimeToPredict;                                       // 0x036C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ArtificialRadiusExpansion;                                // 0x0370(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bBlindfireDebug;                                          // 0x0374(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0375(0x0003) MISSED OFFSET
	class UBendVehicleRamManager*                      VehicleRammingManager;                                    // 0x0378(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UVehicleAwarenessManager*                    VehicleAwarenessManager;                                  // 0x0380(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0388(0x0008) MISSED OFFSET
	TArray<class UBendMotorcycleRiderGroup*>           m_motorcycleGroups;                                       // 0x0390(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData03[0x10];                                      // 0x03A0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.AIVehicleManager");
		return ptr;
	}


	void RemoveAllGroups();
	class UBendVehicleRamManager* GetRamManager();
	class UBendMotorcycleRiderGroup* GetGroup(const struct FString& GroupName);
	class UVehicleAwarenessManager* GetAwarenessManager();
	class AAIVehicleManager* STATIC_GetAIVehicleManager();
	void EnableRVODebug(bool enable);
	void EnableDebugDraw();
	void EnableCornerDebugDraw();
	void DisableDebugDraw();
	void DisableCornerDebugDraw();
	void DebugDrawToggle();
	class UBendMotorcycleRiderGroup* CreateGroup(const struct FString& GroupName, const struct FGroupFormationSettings& formationSettings);
	void CleanupDriver(class ABendPawn* driver);
	void AddGroup(class UBendMotorcycleRiderGroup* motoGroup);
};


// Class BendGame.AIVehicleWaypoint
// 0x0028 (0x0370 - 0x0348)
class AAIVehicleWaypoint : public AActor
{
public:
	struct FScriptMulticastDelegate                    OnStoppedAtVehicleWaypoint;                               // 0x0348(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	TArray<TEnumAsByte<EWaypointEnd>>                  mReachedEndTasks;                                         // 0x0358(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0368(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.AIVehicleWaypoint");
		return ptr;
	}


	void OnReachedWaypoint(class AVehiclePawn* VehiclePawn, bool isEndWaypoint);
	void OnReachedEndWaypoint(class AVehiclePawn* VehiclePawn);
};


// Class BendGame.BendTypes
// 0x0000 (0x0028 - 0x0028)
class UBendTypes : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendTypes");
		return ptr;
	}

};


// Class BendGame.CalloutActorInterface
// 0x0000 (0x0028 - 0x0028)
class UCalloutActorInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.CalloutActorInterface");
		return ptr;
	}

};


// Class BendGame.BendImpactEffect
// 0x0218 (0x0560 - 0x0348)
class ABendImpactEffect : public AActor
{
public:
	class UParticleSystemComponent*                    ParticleComponent;                                        // 0x0348(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UParticleSystemComponent*                    ParticleExitComponent;                                    // 0x0350(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UParticleSystemComponent*                    m_pProjParticleSmokeComponent;                            // 0x0358(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0360(0x0008) MISSED OFFSET
	struct FImpactFxData                               DefaultImpactFX;                                          // 0x0368(0x0198) (Edit, DisableEditOnInstance)
	bool                                               UseImpactEffectPool;                                      // 0x0500(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0501(0x0003) MISSED OFFSET
	struct FVector                                     avoidCenter;                                              // 0x0504(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0xC];                                       // 0x0510(0x000C) MISSED OFFSET
	bool                                               ImpactSndHandledInBlueprint;                              // 0x051C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData03[0x1B];                                      // 0x051D(0x001B) MISSED OFFSET
	TArray<struct FImpactFxData>                       ImpactFXs;                                                // 0x0538(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData04[0x18];                                      // 0x0548(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendImpactEffect");
		return ptr;
	}


	void RemoveAvoidance();
	void OnImpactEffectSpawned(TEnumAsByte<EPhysicalSurface> SurfaceType);
	void OnImpact();
	class AController* GetInstigator();
	class ABendImpactEffect* STATIC_CreateImpactEffectBP(class UClass* ImpactTemplate, const struct FVector& Location, const struct FRotator& Rotation, const struct FVector& SurfaceNormal, const struct FRotator& ParticleRotation, const struct FVector& ShootDir, class AController* InstigatorCtrl, bool DestructionOnly);
	void AddAvoidLocation(const struct FVector& Location, float Radius, float Duration, float FadeOutTime);
};


// Class BendGame.BendRegionWeaponData
// 0x0020 (0x0048 - 0x0028)
class UBendRegionWeaponData : public UDataAsset
{
public:
	class UDataTable*                                  LoadoutDataTable;                                         // 0x0028(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<struct FFactionTierData>                    FactionData;                                              // 0x0030(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TEnumAsByte<EBendWorldTier>                        WorldTier;                                                // 0x0040(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0041(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendRegionWeaponData");
		return ptr;
	}

};


// Class BendGame.BendCrowdSpawnListenerInterface
// 0x0000 (0x0028 - 0x0028)
class UBendCrowdSpawnListenerInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendCrowdSpawnListenerInterface");
		return ptr;
	}

};


// Class BendGame.BendVehiclePartsRandomizer
// 0x0018 (0x0360 - 0x0348)
class ABendVehiclePartsRandomizer : public AActor
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0348(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendVehiclePartsRandomizer");
		return ptr;
	}


	void SetVehiclePartsDatabase(class UBendVehiclePartsDatabase* PartsDatabase);
	void SetDefaultPartIndex(TEnumAsByte<EMotorcyclePartType> Type, int Index);
	void RandomizeParts();
	int RandomizeDefaultPartIndex(TEnumAsByte<EMotorcyclePartType> Type);
	class UBendVehiclePartsDatabase* GetVehiclePartsDatabase();
};


// Class BendGame.BendAmbientGenerator
// 0x0F70 (0x12B8 - 0x0348)
class ABendAmbientGenerator : public AActor
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0348(0x0010) MISSED OFFSET
	bool                                               SouthernRegionOptsActive;                                 // 0x0358(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0359(0x0003) MISSED OFFSET
	float                                              SpeedRequiredToTriggerLowerSpawnsSouthernRegions;         // 0x035C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TimeRequiredAtSpeedToLowerSpawnsSouthernRegions;          // 0x0360(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TimeRequiredBelowSpeedToRaiseSpawnsSouthernRegions;       // 0x0364(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                SouthernRegionMaxSpawnCount;                              // 0x0368(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                SouthernRegionMaxSpawnCountWhenFast;                      // 0x036C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               HordeCountReducesSpawnCountSouthernRegions;               // 0x0370(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0371(0x0003) MISSED OFFSET
	int                                                HordeCountToReduceSpawnsNormal;                           // 0x0374(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                HordeCountToReduceSpawnsSpeed;                            // 0x0378(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                MaxCountReductionForHordeWhenFast;                        // 0x037C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                MaxCountReductionForHordeNormal;                          // 0x0380(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0384(0x0004) MISSED OFFSET
	class UClass*                                      WorldTierConditions[0x5];                                 // 0x0388(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBendConditionsObject*                       WorldTierConditionsInstances[0x5];                        // 0x03B0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData04[0x8];                                       // 0x03D8(0x0008) MISSED OFFSET
	TArray<struct FBendAmbientSpawnType>               PooledSpawnTypes;                                         // 0x03E0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<TAssetPtr<class UBendArchetypeDataBase>>    AllArchetypes;                                            // 0x03F0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class UBendArchetypeDataBase*>              Archetypes;                                               // 0x0400(0x0010) (ZeroConstructor)
	TArray<TEnumAsByte<EInventoryWeaponID>>            PooledWeaponTypes;                                        // 0x0410(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FMeshListArray                              AlternativeMeshLists[0x2C];                               // 0x0420(0x0028) (Edit, DisableEditOnInstance)
	TArray<class UBendSkeletalMeshArrayData*>          PoolReplaceableMeshLists;                                 // 0x0B00(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class UObject*>                             PooledWeapons;                                            // 0x0B10(0x0010) (ZeroConstructor)
	TArray<struct FSpawnPool>                          PooledSpawns;                                             // 0x0B20(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData05[0x40];                                      // 0x0B30(0x0040) MISSED OFFSET
	class UEnvQuery*                                   SpawnLocationQuery;                                       // 0x0B70(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               m_bActive;                                                // 0x0B78(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x3];                                       // 0x0B79(0x0003) MISSED OFFSET
	float                                              m_fBaseAmbientSpawnModifier;                              // 0x0B7C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_fSpawnMinRadius;                                        // 0x0B80(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_fSpawnMaxRadius;                                        // 0x0B84(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_fCanDespawnRadius;                                      // 0x0B88(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_fForceDespawnRadius;                                    // 0x0B8C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_fTimeBetweenCollections;                                // 0x0B90(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_fTimeBetweenSpawns;                                     // 0x0B94(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_fTimeBetweenUpdates;                                    // 0x0B98(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0x4];                                       // 0x0B9C(0x0004) MISSED OFFSET
	TArray<struct FBendAmbientSpawnType>               CombatEscalationSpawnTypes;                               // 0x0BA0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<class UBendSkeletalMeshArrayData*>          AlwaysLoadedMeshLists;                                    // 0x0BB0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	bool                                               m_bDisableUnimportantSpawns;                              // 0x0BC0(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData)
	TEnumAsByte<ESpawnImportance>                      m_SpawnImportanceToBlockBelow;                            // 0x0BC1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData08[0x6];                                       // 0x0BC2(0x0006) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnSpawnedWithVehicle;                                     // 0x0BC8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnVehicleSpawned;                                         // 0x0BD8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnSpawned;                                                // 0x0BE8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnKilled;                                                 // 0x0BF8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class ABendCrowdGroupGlobal*                       ScreamCrowdGroup;                                         // 0x0C08(0x0008) (ZeroConstructor, IsPlainOldData)
	class ABendCrowdGroupGlobal*                       DemotedCrowdGroup;                                        // 0x0C10(0x0008) (ZeroConstructor, IsPlainOldData)
	bool                                               CombatEscalation_OpenArea;                                // 0x0C18(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               CombatEscalation_InCover;                                 // 0x0C19(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData09[0x6];                                       // 0x0C1A(0x0006) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnEscalationSpawnedTelemetry;                             // 0x0C20(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData10[0xB0];                                      // 0x0C30(0x00B0) MISSED OFFSET
	TArray<struct FBendSpawnRequestData>               m_QueuedRequests;                                         // 0x0CE0(0x0010) (ZeroConstructor, Transient)
	TArray<TWeakObjectPtr<class ABendAmbientSpawnArea>> m_spawnAreaPopulation;                                    // 0x0CF0(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData11[0x94];                                      // 0x0D00(0x0094) MISSED OFFSET
	int                                                m_iSpawnLimitByImportance[0x7];                           // 0x0D94(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData12[0x90];                                      // 0x0DB0(0x0090) MISSED OFFSET
	TAssetPtr<class UBlueprint>                        DefaultDrop;                                              // 0x0E40(0x0020)
	class UBlueprint*                                  LoadedDefaultDrop;                                        // 0x0E60(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData13[0x408];                                     // 0x0E68(0x0408) MISSED OFFSET
	class ABendAIPawn*                                 SpawningPawn;                                             // 0x1270(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData14[0x40];                                      // 0x1278(0x0040) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAmbientGenerator");
		return ptr;
	}


	void UpdateSouthernRegionOverlapOverrides(bool IncrementUp);
	void UpdateCurrentWorldTier();
	void UpdateConditionalLooks();
	bool SpawnForCombatEscalation(const struct FVector& CenterLocation, float Radius);
	void SpawnAllAvilable(float Brightness);
	void SetImportanceToBlockBelow(TEnumAsByte<ESpawnImportance> importance);
	void ScreamerSpawn(const struct FBendAmbientSpawnType& SpawnType, int spawnCount);
	void ReturnSpawnToPool(class ABendAIController* Controller);
	void ResetGlobalSpawnLimit();
	void ResetDemotedCrowdLimit();
	void ResetDeadSpawns();
	void RequestSpawnSimple(const struct FBendAmbientSpawnType& Type, class ABendSpawnLocationBase* Location, const struct FScriptDelegate& OnSpawnedDelegate, int Count, bool deactivateLocation);
	void RequestSpawn(const struct FBendSpawnRequestData& request, int Count, bool deactivateLocation);
	void RemoveAmbientVehicleSpawnBox(class ABendVehiclePawnSpawnLocation* abox);
	void RemoveAmbientSpawnBox(class ABendSpawnLocationBase* abox);
	void RemoveAmbientSpawnArea(class ABendAmbientSpawnArea* aArea);
	void OverrideGlobalSpawnLimitNEW(int newLimit);
	void OverrideGlobalSpawnLimit(int newLimit);
	void OverrideDemotedCrowdLimit(int newLimit);
	void OnScreamerSpawnSpawned(class ABendAIController* SpawnedController, class ABendPawn* SpawnedPawn, class ABendSpawnLocationBase* SpawnLocation);
	void OnRegionChanged(TEnumAsByte<ERegions> Region);
	void OnPlayerTeleported(class ABendPawn* Character);
	void OnPlayerRespawn(class ABendPlayerController* PlayerController);
	void OnMissionEnd(class UBendMissionData* LastMissionData);
	void OnMissionBegin(TEnumAsByte<EMissionIDs> MissionID);
	void OnFinishedSpawnOnVehicleSeat(class ABendAIController* SpawnedController, class ABendPawn* SpawnedPawn, class AVehiclePawn* SpawnedVehiclePawn);
	void OnFastTravelBegin(const struct FName& TravelDestination);
	void OnFadeFromBlackStart(const struct FString& Message);
	void OnEscalationSpawned(class ABendAIController* SpawnedController, class ABendPawn* SpawnedPawn, class ABendSpawnLocationBase* SpawnLocation);
	void OnDemoJumpPoint(class UDataAsset* JobOrMissionID);
	void NotifyVehicleSpawned(class AVehiclePawn* SpawnedVehiclePawn);
	void NotifySpawnedWithVehicle(class ABendSpawnLocationBase* SpawnBox, class ABendAIController* SpawnedController, class ABendPawn* SpawnedPawn, class AVehiclePawn* SpawnedVehiclePawn, bool autoSpawnOnVehicle, const struct FBendAmbientSpawnType& SpawnType);
	void NotifySpawned(class ABendAIController* SpawnedController, class ABendPawn* SpawnedPawn);
	void NotifyKilled(class ABendAIController* KilledController, class ABendPawn* KilledPawn);
	TEnumAsByte<EBendWorldTier> STATIC_GetWorldTierByLocation(const struct FVector& Location);
	TEnumAsByte<EBendWorldTier> GetWorldTier();
	int GetTotalActiveCount();
	int GetSpawnLimit(TEnumAsByte<ESpawnImportance> importance);
	float GetPercentageOfFactionInTrackedSpawns(TEnumAsByte<EAIFactionType> Faction);
	int GetNumSpawnsOfFactionLastHundred(TEnumAsByte<EAIFactionType> Faction);
	int GetGlobalSpawnLimit();
	int GetDemotedCrowdLimit();
	int GetAliveCrowdMembers();
	int GetActiveSpawnCount();
	int GetActiveByAwareness(TEnumAsByte<EAIAwareState> Awareness);
	void ForceDespawnAll(bool resetSpawnedCount, bool resetToKilled, bool Delay);
	void DespawnUnit(class ABendAIController* Controller, bool notifyDespawn, bool runFullDespawn);
	void DespawnUnimportantOutsideRadius(const struct FVector& Location, float Radius, bool immediate, TEnumAsByte<ESpawnImportance> importance);
	void DespawnUnimportantInRadius(const struct FVector& Location, float Radius, bool immediate, TEnumAsByte<ESpawnImportance> importance);
	void DespawnUnimportant(bool immediate, TEnumAsByte<ESpawnImportance> importance);
	void AddAmbientVehicleSpawnBox(class ABendVehiclePawnSpawnLocation* abox);
	void AddAmbientSpawnBox(class ABendSpawnLocationBase* abox);
	void AddAmbientSpawnArea(class ABendAmbientSpawnArea* aArea);
};


// Class BendGame.BendState
// 0x0038 (0x0060 - 0x0028)
class UBendState : public UObject
{
public:
	struct FString                                     m_StateName;                                              // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	class AActor*                                      m_Owner;                                                  // 0x0038(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class ABendStateMachine*                           m_StateMachine;                                           // 0x0040(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x18];                                      // 0x0048(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendState");
		return ptr;
	}


	void WhileInState(float DeltaSeconds);
	void ResetStateTimer();
	void RequestStateTimerEvent(float atTime);
	void ReenterState();
	void OnStateTimerEvent();
	void OnPathComplete(TEnumAsByte<EPathFollowingResult> Result);
	void OnInitState();
	void OnExitState();
	void OnEnterState();
	void OnBeginPlay();
	float GetStateTimer();
	void ChangeState(const struct FString& newStateName);
};


// Class BendGame.BendAnimState_Base
// 0x0050 (0x00B0 - 0x0060)
class UBendAnimState_Base : public UBendState
{
public:
	TEnumAsByte<EBendAnimCategory>                     AnimCategory;                                             // 0x0060(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0061(0x0007) MISSED OFFSET
	struct FAnimStateRotationParams                    RotationParams;                                           // 0x0068(0x0040) (Edit, BlueprintVisible)
	class ABendPawn*                                   PawnOwner;                                                // 0x00A8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAnimState_Base");
		return ptr;
	}


	bool IsActive();
	TEnumAsByte<EBendAnimState> GetStateEnumeratedType();
	class ABendPawn* GetPawnOwner();
	TEnumAsByte<EBendAnimCategory> GetAnimCategory();
};


// Class BendGame.PerformActionContext
// 0x00E0 (0x0108 - 0x0028)
class UPerformActionContext : public UObject
{
public:
	struct FBendActionData                             ActionData;                                               // 0x0028(0x00A0) (Edit, BlueprintVisible, BlueprintReadOnly)
	bool                                               ActionStarted;                                            // 0x00C8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               IsPlaying;                                                // 0x00C9(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x00CA(0x0002) MISSED OFFSET
	float                                              Duration;                                                 // 0x00CC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              CurrentTime;                                              // 0x00D0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EPeformActionFailedReason>             FailedReason;                                             // 0x00D4(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x33];                                      // 0x00D5(0x0033) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.PerformActionContext");
		return ptr;
	}


	void UpdateBlendspaceParameters(const struct FName& Slot, float X, float Y, float Z);
	void CancelThisAction(bool bReturnToPreviousState, float BlendOutTime);
};


// Class BendGame.BendAnimState_PerformAction
// 0x01F0 (0x02A0 - 0x00B0)
class UBendAnimState_PerformAction : public UBendAnimState_Base
{
public:
	TArray<class UPerformActionContext*>               ActiveContexts;                                           // 0x00B0(0x0010) (ZeroConstructor, Transient)
	TArray<TWeakObjectPtr<class UPerformActionContext>> CompletedContexts;                                        // 0x00C0(0x0010) (ZeroConstructor, Transient)
	class UPerformActionContext*                       CurrentContext;                                           // 0x00D0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x00D8(0x0008) MISSED OFFSET
	struct FPerformActionRequest                       CurrentRequest;                                           // 0x00E0(0x0120) (Transient)
	unsigned char                                      UnknownData01[0xA0];                                      // 0x0200(0x00A0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAnimState_PerformAction");
		return ptr;
	}


	float PerformAction(const struct FBendActionData& TheActionData, class AActor* PropActor, const struct FTransform& AnchorWorldTransform, const struct FScriptDelegate& OnCompleteDelegate, const struct FScriptDelegate& OnFailDelegate, const struct FScriptDelegate& OnLoopDelegate, const struct FName& MasterTimelineName);
	void OnMontageStarted(class UAnimMontage* Montage);
	bool CanGrapple();
	bool CancelActionWithBlendOutTime(float BlendOutTime, bool bForceCleanup);
	bool CancelActionWithActionData(const struct FBendActionData& ActionToCancel, float BlendOutTime);
	bool CancelAction();
	bool CanBeStealthKilled();
	bool CanBePairKilled();
	bool CanBeMeleeAttacked();
	bool CanBeGrappled();
};


// Class BendGame.FactionManager
// 0x00B0 (0x00D8 - 0x0028)
class UFactionManager : public UObject
{
public:
	struct FScriptMulticastDelegate                    OnFactionLevelChanged;                                    // 0x0028(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnTrustTierChanged;                                       // 0x0038(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0048(0x0010) MISSED OFFSET
	int                                                TrustRequiredForLow;                                      // 0x0058(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                TrustRequiredForMedium;                                   // 0x005C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                TrustRequiredForHigh;                                     // 0x0060(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                TrustTotal;                                               // 0x0064(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	TAssetPtr<class UDataTable>                        FactionDataTable;                                         // 0x0068(0x0020) (Edit, BlueprintVisible, DisableEditOnInstance)
	TAssetPtr<class UDataTable>                        ConfidenceDataTable;                                      // 0x0088(0x0020) (Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FFactionEntry>                       Factions;                                                 // 0x00A8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, SaveGame)
	TArray<struct FBaseConfidenceEntry>                BaseConfidences;                                          // 0x00B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	float                                              VeryLowThreshold;                                         // 0x00C8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData)
	float                                              LowThreshold;                                             // 0x00CC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData)
	float                                              HighThreshold;                                            // 0x00D0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData)
	float                                              VeryHighThreshold;                                        // 0x00D4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.FactionManager");
		return ptr;
	}


	void SetPlayerFaction(TEnumAsByte<EAIFactionType> TheirFaction, float NewValue);
	void SetFactionLevel(TEnumAsByte<EAIFactionType> MyFaction, TEnumAsByte<EAIFactionType> TheirFaction, TEnumAsByte<EFactionLevel> NewFactionType);
	void SetFaction(TEnumAsByte<EAIFactionType> MyFaction, TEnumAsByte<EAIFactionType> TheirFaction, float NewValue);
	float PlayerFactionValue(TEnumAsByte<EAIFactionType> TheirFaction);
	class UBendEncampmentData* GetEncampmentDataForFaction(TEnumAsByte<EAIFactionType> Type);
	float GetBaseConfidence(TEnumAsByte<EAIFactionType> MyFaction, TEnumAsByte<EAIFactionType> TheirFaction);
	TEnumAsByte<EFactionLevel> FactionValueToLevel(float FactionValue);
	float FactionValueBP(TEnumAsByte<EAIFactionType> MyFaction, TEnumAsByte<EAIFactionType> TheirFaction);
	float FactionLevelToValue(TEnumAsByte<EFactionLevel> FactionLevel);
	TEnumAsByte<EFactionLevel> FactionLevel(TEnumAsByte<EAIFactionType> MyFaction, TEnumAsByte<EAIFactionType> TheirFaction);
	float AdjustPlayerFaction(TEnumAsByte<EAIFactionType> TheirFaction, float AdjustValue);
	float AdjustFaction(TEnumAsByte<EAIFactionType> MyFaction, TEnumAsByte<EAIFactionType> TheirFaction, float AdjustValue);
};


// Class BendGame.BendAmbientBlockerComp
// 0x0030 (0x0240 - 0x0210)
class UBendAmbientBlockerComp : public USceneComponent
{
public:
	float                                              SphereRadius;                                             // 0x0210(0x0004) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, IsPlainOldData)
	bool                                               bBlockAmbientEvents;                                      // 0x0214(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bForceUnloadAmbientEvents;                                // 0x0215(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bBlockUnimportantSpawns;                                  // 0x0216(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData)
	TEnumAsByte<ESpawnImportance>                      LowestImportanceToAllow;                                  // 0x0217(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bForceDespawnUnimportant;                                 // 0x0218(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0219(0x0007) MISSED OFFSET
	TArray<TEnumAsByte<EAIFactionType>>                SpecificFactionsToBlock;                                  // 0x0220(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	bool                                               m_bDebugDrawSphere;                                       // 0x0230(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0xF];                                       // 0x0231(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAmbientBlockerComp");
		return ptr;
	}


	bool IsOverlapping(const struct FVector& testLocation, float testRadius);
};


// Class BendGame.BendAnimVariationData
// 0x0048 (0x0070 - 0x0028)
class UBendAnimVariationData : public UDataAsset
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	TArray<struct FBendAnimSetCompatibilityRating>     CompatibilityRatings;                                     // 0x0030(0x0010) (Edit, ZeroConstructor, EditConst)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0040(0x0008) MISSED OFFSET
	unsigned char                                      Priority;                                                 // 0x0048(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0049(0x0007) MISSED OFFSET
	TArray<struct FBendAnimSequenceGroup>              AnimSequenceGroup_FlatList;                               // 0x0050(0x0010) (Edit, ZeroConstructor, EditConst)
	TArray<struct FBendAnimBlendSpaceGroup>            AnimBlendSpaceGroup_FlatList;                             // 0x0060(0x0010) (Edit, ZeroConstructor, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAnimVariationData");
		return ptr;
	}


	TArray<struct FBendAnimSequenceEntry> GetSequenceEntryList(const struct FName& AnimSequenceGroupName);
	class UAnimSequenceBase* GetRandomSequence(const struct FName& AnimSequenceGroupName, class USkeleton* CurrentSkeleton, class UAnimSequenceBase* LastUsed);
	class UBlendSpaceBase* GetRandomBlendSpace(const struct FName& AnimBlendSpaceGroupName, class USkeleton* CurrentSkeleton, class UBlendSpaceBase* LastUsed);
	int GetNumSequences(const struct FName& AnimSequenceGroupName, class USkeleton* CurrentSkeleton, bool bForceStrictCompatibilityCheck);
	int GetNumBlendSpaces(const struct FName& AnimBlendSpaceGroupName, class USkeleton* CurrentSkeleton, bool bForceStrictCompatibilityCheck);
	TArray<struct FBendAnimBlendSpaceEntry> GetBlendSpaceEntryList(const struct FName& AnimBlendSpaceGroupName);
	bool ContainsGroup(const struct FName& AnimGroupName);
};


// Class BendGame.StatusEffect
// 0x0040 (0x0068 - 0x0028)
class UStatusEffect : public UObject
{
public:
	TEnumAsByte<EStatusEffects>                        EffectType;                                               // 0x0028(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0029(0x0003) MISSED OFFSET
	float                                              Duration;                                                 // 0x002C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TWeakObjectPtr<class AActor>                       EffectOwner;                                              // 0x0030(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TWeakObjectPtr<class AController>                  EffectInstigator;                                         // 0x0038(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TWeakObjectPtr<class ABendPawn>                    AffectedPawn;                                             // 0x0040(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              TickRate;                                                 // 0x0048(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               AllowedToFinish;                                          // 0x004C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               ShouldTransferEffect;                                     // 0x004D(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x004E(0x0002) MISSED OFFSET
	class UClass*                                      TransferEffect;                                           // 0x0050(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x10];                                      // 0x0058(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.StatusEffect");
		return ptr;
	}


	void SetTickRate(float newTickrate);
	void SetDuration(float newDuration);
	void RestartEffect();
	void OnTick(bool* StopEffect);
	void OnStart();
	void OnRestart();
	void OnEnd();
};


// Class BendGame.BendWeapon_Manager
// 0x0078 (0x0148 - 0x00D0)
class UBendWeapon_Manager : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x00D0(0x0018) MISSED OFFSET
	TArray<TWeakObjectPtr<class ABendEquippableItem>>  EquippedItems;                                            // 0x00E8(0x0010) (ZeroConstructor, Transient)
	TWeakObjectPtr<class ABendWeapon>                  PreviousWeapon;                                           // 0x00F8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TWeakObjectPtr<class ABendWeapon>                  LastProjectileWeapon;                                     // 0x0100(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TWeakObjectPtr<class ABendWeapon>                  LastMeleeWeapon;                                          // 0x0108(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TWeakObjectPtr<class ABendWeapon>                  DesiredWeapon;                                            // 0x0110(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TWeakObjectPtr<class ABendEquippableItem>          EquipingItem;                                             // 0x0118(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TWeakObjectPtr<class ABendEquippableItem>          HolsteringItem;                                           // 0x0120(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0128(0x0008) MISSED OFFSET
	float                                              WeaponHolsterTimeout_Normal;                              // 0x0130(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              WeaponHolsterTimeout_Blindfire;                           // 0x0134(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x10];                                      // 0x0138(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendWeapon_Manager");
		return ptr;
	}


	class ABendEquippableItem* GetHolsteringItem();
};


// Class BendGame.BendAIWeapon_Manager
// 0x0040 (0x0188 - 0x0148)
class UBendAIWeapon_Manager : public UBendWeapon_Manager
{
public:
	unsigned char                                      UnknownData00[0x40];                                      // 0x0148(0x0040) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAIWeapon_Manager");
		return ptr;
	}

};


// Class BendGame.BendEquippable_Manager
// 0x0220 (0x02F0 - 0x00D0)
class UBendEquippable_Manager : public UActorComponent
{
public:
	struct FScriptMulticastDelegate                    PostAddedWeaponCallback;                                  // 0x00D0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData00[0x18];                                      // 0x00E0(0x0018) MISSED OFFSET
	TArray<TEnumAsByte<EWeaponSocketLocation>>         WeaponSocketLocationOrder;                                // 0x00F8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FWeaponInitializationList                   DefaultWeaponInitializationData;                          // 0x0108(0x0018) (Edit, DisableEditOnInstance)
	TArray<TWeakObjectPtr<class ABendWeapon>>          DefaultWeapons;                                           // 0x0120(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData01[0xB0];                                      // 0x0130(0x00B0) MISSED OFFSET
	TAssetPtr<class UClass>                            BinocularsBlueprintRef;                                   // 0x01E0(0x0020) (Edit, DisableEditOnInstance)
	class ABendEquippableItem*                         Binoculars;                                               // 0x0200(0x0008) (ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EInventoryWeaponID>                    RockWeaponID;                                             // 0x0208(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0209(0x0007) MISSED OFFSET
	class ABendWeapon*                                 RockWeapon;                                               // 0x0210(0x0008) (ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EInventoryWeaponID>                    TrapDetonatorWeaponID;                                    // 0x0218(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x7];                                       // 0x0219(0x0007) MISSED OFFSET
	class ABendWeapon*                                 TrapDetonatorWeapon;                                      // 0x0220(0x0008) (ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EInventoryWeaponID>                    BootKnifeWeaponID;                                        // 0x0228(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x7];                                       // 0x0229(0x0007) MISSED OFFSET
	class ABendWeapon*                                 BootKnifeWeapon;                                          // 0x0230(0x0008) (ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EInventoryWeaponID>                    TaserWeaponID;                                            // 0x0238(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData05[0x7];                                       // 0x0239(0x0007) MISSED OFFSET
	class ABendWeapon*                                 TaserWeapon;                                              // 0x0240(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x78];                                      // 0x0248(0x0078) MISSED OFFSET
	struct FName                                       SocketLocationToName[0x6];                                // 0x02C0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendEquippable_Manager");
		return ptr;
	}


	class ABendEquippableItem* GetBinoculars();
	void AddEquippableItem(class ABendEquippableItem* Item, TEnumAsByte<EEquippableSlot> EquippableSlot, bool bEquip);
};


// Class BendGame.BendAttackAnimData
// 0x0048 (0x0070 - 0x0028)
class UBendAttackAnimData : public UDataAsset
{
public:
	TArray<struct FBendAttackAnim>                     AttackAnimsList;                                          // 0x0028(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FBendAttackAnim>                     AttackAnimsListTwoHand;                                   // 0x0038(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FBendNamedAttackList>                NamedAttacksList;                                         // 0x0048(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FBendNamedAttackList>                NamedAttacksListTwoHand;                                  // 0x0058(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	float                                              ScaleFactor;                                              // 0x0068(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x006C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAttackAnimData");
		return ptr;
	}


	struct FBendAttackData GetNamedAttackAction(const struct FName& Name, class ABendPawn* Attacker, class AActor* Target, const struct FVector& targetVel, class USkeleton* CurrentSkeleton, float aimAngle, bool ignoreDistanceCheck, bool HasRightArm, bool HasLeftArm, bool usingTwoHander);
	struct FBendAttackData GetAttackAction(class ABendPawn* Attacker, class AActor* Target, const struct FVector& targetVel, class USkeleton* CurrentSkeleton, float aimAngle, bool ignoreDistanceCheck, bool HasRightArm, bool HasLeftArm, bool usingTwoHander);
};


// Class BendGame.BendWeaponDamageableInterface
// 0x0000 (0x0028 - 0x0028)
class UBendWeaponDamageableInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendWeaponDamageableInterface");
		return ptr;
	}

};


// Class BendGame.BendArmorData
// 0x0018 (0x0040 - 0x0028)
class UBendArmorData : public UDataAsset
{
public:
	TArray<TEnumAsByte<EeDamageLocations>>             ProtectedBodyParts;                                       // 0x0028(0x0010) (Edit, ZeroConstructor)
	float                                              Health;                                                   // 0x0038(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ForceAmountForArmorShotOff;                               // 0x003C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendArmorData");
		return ptr;
	}

};


// Class BendGame.BendSkeletalMeshLook
// 0x0000 (0x0070 - 0x0070)
class UBendSkeletalMeshLook : public UBendSkeletalMeshLookBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendSkeletalMeshLook");
		return ptr;
	}

};


// Class BendGame.BendPawnArmorData
// 0x0018 (0x0058 - 0x0040)
class UBendPawnArmorData : public UBendArmorData
{
public:
	class UBendSkeletalMeshArrayData*                  PawnSkeletalMeshes;                                       // 0x0040(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<struct FBendPawnArmorParts>                 PawnsArmorParts;                                          // 0x0048(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendPawnArmorData");
		return ptr;
	}

};


// Class BendGame.BendAnimDamageData
// 0x00B8 (0x00E0 - 0x0028)
class UBendAnimDamageData : public UDataAsset
{
public:
	TArray<struct FBendAnimDamageTopLayerData>         AnimDamageDataList;                                       // 0x0028(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData00[0xA8];                                      // 0x0038(0x00A8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAnimDamageData");
		return ptr;
	}

};


// Class BendGame.BendAnimDyingData
// 0x0068 (0x0090 - 0x0028)
class UBendAnimDyingData : public UDataAsset
{
public:
	TArray<struct FBendAnimDyingTopLayerData>          AnimDyingDataList;                                        // 0x0028(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x58];                                      // 0x0038(0x0058) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAnimDyingData");
		return ptr;
	}

};


// Class BendGame.BendAnimFlinchData
// 0x0060 (0x0088 - 0x0028)
class UBendAnimFlinchData : public UDataAsset
{
public:
	TArray<struct FBendAnimFlinchTopLayerData>         AnimFlinchDataList;                                       // 0x0028(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x50];                                      // 0x0038(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAnimFlinchData");
		return ptr;
	}

};


// Class BendGame.BendMusic
// 0x0050 (0x0078 - 0x0028)
class UBendMusic : public UObject
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0028(0x0004) MISSED OFFSET
	TEnumAsByte<EMusicPlaybackState>                   State;                                                    // 0x002C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x002D(0x0003) MISSED OFFSET
	struct FBendAudioVolume                            Volume;                                                   // 0x0030(0x000C) (Edit, BlueprintVisible, Transient, EditConst)
	int                                                ScreamHandle;                                             // 0x003C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	TArray<struct FBendAudioVolume>                    MusicLayers;                                              // 0x0040(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst)
	struct FMusicTrack                                 MusicTrack;                                               // 0x0050(0x0010) (Edit, BlueprintVisible, Transient)
	unsigned char                                      bMusicLayerVolumeDirty : 1;                               // 0x0060(0x0001) (Edit, BlueprintVisible, Transient, EditConst)
	unsigned char                                      bDebugDisplayState : 1;                                   // 0x0060(0x0001) (Edit, BlueprintVisible, Transient)
	unsigned char                                      UnknownData02[0xF];                                       // 0x0061(0x000F) MISSED OFFSET
	class UAudioComponent*                             AudioComponent;                                           // 0x0070(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendMusic");
		return ptr;
	}


	struct FString ToString();
	void Stop(float FadeTime, bool StopImmediately);
	void SetMusicTrack(struct FMusicTrack* InTrack);
	void SetLocalRegisterValue(int Register, unsigned char Value);
	void SetGlobalRegisterValue(int Register, unsigned char Value);
	void SetDebugDisplayState(bool DisplayState);
	TEnumAsByte<EMusicPlaybackState> PlaybackState();
	void Play(float FadeTime);
	void OnTick(float DeltaTime, int TickNumber);
	void OnStop();
	void OnSetAsSecondary();
	void OnSetAsPrimary();
	void OnSetAsLast();
	void OnPlayerDied(TEnumAsByte<EAIFactionType> KilledByFaction, TEnumAsByte<ETypeOfBaseDamage> BaseDamageType, TEnumAsByte<ETypeOfDamage> DamageType, float AmountOfDamage);
	void OnPlayerDamaged(class UClass* TypeOfDamage, float AmountOfDamage, float CurrentHealth);
	void OnPlay();
	void OnLoadingScreenOpened();
	void OnLoadingScreenClosed();
	void OnFadeOut();
	void OnFadeIn();
	void OnBulletPassedByNearPlayer();
	void OnAudioStop();
	bool IsPlaying();
	bool IsOverlayMusic();
	bool IsInteractiveMusic();
	bool IsEventMusic();
	bool IsBlueprintMusic();
	float GetPlayerHealth();
	int GetNumberOfAI_AwareOfPlayer(float Radius);
	int GetLocalRegisterValue(int Register);
	int GetGlobalRegisterValue(int Register);
};


// Class BendGame.BendMusicManager
// 0x0020 (0x0048 - 0x0028)
class UBendMusicManager : public UObject
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0028(0x0004) MISSED OFFSET
	unsigned char                                      IsOpenWorld : 1;                                          // 0x002C(0x0001) (Edit, BlueprintVisible, Transient, DisableEditOnInstance)
	unsigned char                                      UnknownData01[0x7];                                       // 0x002D(0x0007) MISSED OFFSET
	unsigned char                                      bDebugDisplayState : 1;                                   // 0x0034(0x0001) (Edit, BlueprintVisible, Transient)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0035(0x0003) MISSED OFFSET
	TArray<TAssetPtr<class USoundClass>>               SoundClassesUsedByThisManager;                            // 0x0038(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendMusicManager");
		return ptr;
	}


	void StopAllMusic(float FadeTime, bool StopImmediately);
	void Stop(TEnumAsByte<EMusicLayer> Layer, float FadeTime);
	void SetOverlayPlayDuringPause(bool PlayDuringPause);
	void SetLocalRegisterValue(TEnumAsByte<EMusicLayer> Layer, int Register, unsigned char Value);
	void SetGlobalRegisterValue(int Register, unsigned char Value);
	void SetDebugDisplayState(bool DisplayState);
	void PlayOverlay(class UClass* MusicBlueprint, const struct FMusicTrack& MusicTrack, bool PlayDuringPause);
	void PlayBufferedMusic();
	void Play(class UClass* MusicBlueprint, const struct FMusicTrack& MusicTrack, bool BufferMusic);
	void OnTick(float DeltaTime, int TickNumber);
	void OnSetAsCurrentMusicManager(const struct FName& MusicEventName);
	void OnSaveGameLoadedFromCheckpoint();
	void OnRemovedAsCurrentMusicManager();
	void OnPlayerExitedBush();
	void OnPlayerEnteredBush();
	void OnPlayerDied(TEnumAsByte<EAIFactionType> KilledByFaction, TEnumAsByte<ETypeOfBaseDamage> BaseDamageType, TEnumAsByte<ETypeOfDamage> DamageType, float AmountOfDamage);
	void OnPlayerDamaged(class UClass* TypeOfDamage, float AmountOfDamage, float CurrentHealth);
	void OnLoadingScreenOpened();
	void OnLoadingScreenClosed();
	void OnCinematicAudioStarted();
	void OnBulletPassedByNearPlayer();
	bool IsOverlayMusicPlaying();
	bool IsOpenWorldManager();
	bool IsMusicPlaying();
	bool IsInteractiveMusicPlaying();
	bool IsEventMusicPlaying();
	bool IsBaseMusicManager();
	bool IsAnyMusicPlaying();
	int GetPlayerHealth();
	int GetNumberOfHumans_WithinRadius(float WithinRadius);
	int GetNumberOfHumans_AwareOfPlayerWithinRadius(float WithinRadius);
	int GetNumberOfAIType_WithinRadius(TEnumAsByte<EAIFactionType> TypeOfAI, float WithinRadius);
	int GetNumberOfAIType_AwareOfPlayerWithinRadius(TEnumAsByte<EAIFactionType> TypeOfAI, float WithinRadius);
	int GetNumberOfAI_AwareOfPlayer(float Radius);
	int GetNumberOfAI_AwareOfBuddy();
	class UBendMusic* GetMusic(TEnumAsByte<EMusicLayer> Layer);
	int GetLocalRegisterValue(TEnumAsByte<EMusicLayer> Layer, int Register);
	int GetGlobalRegisterValue(int Register);
	class UAudioComponent* GetBufferedMusicAudioComponent();
};


// Class BendGame.BendLevelSoundManager
// 0x0008 (0x0030 - 0x0028)
class UBendLevelSoundManager : public UObject
{
public:
	unsigned char                                      bDebugDisplayState : 1;                                   // 0x0028(0x0001) (Edit, BlueprintVisible, Transient)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0029(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendLevelSoundManager");
		return ptr;
	}


	void SetDebugDisplayState(bool DisplayState);
	void OnTick();
	void OnSetAsCurrentLevelSoundManager(const struct FName& LevelSoundEventName);
};


// Class BendGame.BendDoorData
// 0x0048 (0x0070 - 0x0028)
class UBendDoorData : public UDataAsset
{
public:
	class UStaticMesh*                                 DoorMesh;                                                 // 0x0028(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class USoundBase*                                  DoorOpenSoftSound;                                        // 0x0030(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class USoundBase*                                  DoorCloseStartSound;                                      // 0x0038(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class USoundBase*                                  DoorCloseFinishSound;                                     // 0x0040(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class USoundBase*                                  DoorLockedSound;                                          // 0x0048(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class USoundBase*                                  DoorKickSound;                                            // 0x0050(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class USoundBase*                                  DoorChargeSound;                                          // 0x0058(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class USoundBase*                                  DoorChargeFailSound;                                      // 0x0060(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<EDoorHandleType>                       HandleType;                                               // 0x0068(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0069(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendDoorData");
		return ptr;
	}


	class USoundBase* GetDoorOpenSoftSound();
	class UStaticMesh* GetDoorMesh();
	class USoundBase* GetDoorLockedSound();
	class USoundBase* GetDoorKickSound();
	TEnumAsByte<EDoorHandleType> GetDoorHandleType();
	class USoundBase* GetDoorCloseStartSound();
	class USoundBase* GetDoorCloseFinishSound();
	class USoundBase* GetDoorChargeSound();
	class USoundBase* GetDoorChargeFailSound();
};


// Class BendGame.BendDoorActionData
// 0x07A0 (0x07C8 - 0x0028)
class UBendDoorActionData : public UDataAsset
{
public:
	struct FBendActionData                             PlayerChargeToDoor;                                       // 0x0028(0x00A0) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FBendActionData                             PlayerJimmyDoorCW;                                        // 0x00C8(0x00A0) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FBendActionData                             PlayerJimmyDoorCCW;                                       // 0x0168(0x00A0) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FBendActionData                             PlayerJimmyDoorFinishCW;                                  // 0x0208(0x00A0) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FBendActionData                             PlayerJimmyDoorFinishCCW;                                 // 0x02A8(0x00A0) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FBendActionData                             PlayerHitLockedDoor;                                      // 0x0348(0x00A0) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	TArray<struct FBendDoorAnimData>                   OpenAnimationCW;                                          // 0x03E8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FBendDoorAnimData>                   OpenAnimationCCW;                                         // 0x03F8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	struct FBendActionData                             OpenDoorActionData;                                       // 0x0408(0x00A0) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	TArray<struct FBendDoorAnimData>                   KickOpenAnimationCW;                                      // 0x04A8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FBendDoorAnimData>                   KickOpenAnimationCCW;                                     // 0x04B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	struct FBendActionData                             KickOpenDoorActionData;                                   // 0x04C8(0x00A0) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	TArray<struct FBendDoorAnimData>                   CloseDoorOnRightCW;                                       // 0x0568(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FBendDoorAnimData>                   CloseDoorOnRightCCW;                                      // 0x0578(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FBendDoorAnimData>                   CloseDoorOnLeftCW;                                        // 0x0588(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FBendDoorAnimData>                   CloseDoorOnLeftCCW;                                       // 0x0598(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	struct FBendActionData                             CloseDoorActionData;                                      // 0x05A8(0x00A0) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	TArray<struct FBendDoorAnimData>                   PushDoorCloseCW;                                          // 0x0648(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FBendDoorAnimData>                   PushDoorCloseCCW;                                         // 0x0658(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	struct FBendActionData                             PushCloseActionData;                                      // 0x0668(0x00A0) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	TArray<struct FBendDoorAnimData>                   LockedDoorCW;                                             // 0x0708(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FBendDoorAnimData>                   LockedDoorCCW;                                            // 0x0718(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	struct FBendActionData                             LockedDoorActionData;                                     // 0x0728(0x00A0) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendDoorActionData");
		return ptr;
	}

};


// Class BendGame.InventoryItem
// 0x0108 (0x0130 - 0x0028)
class UInventoryItem : public UObject
{
public:
	struct FName                                       KeyName;                                                  // 0x0028(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	int                                                KeyHash;                                                  // 0x0030(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	int                                                ItemTableIndex;                                           // 0x0034(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	struct FText                                       DisplayName;                                              // 0x0038(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)
	struct FText                                       DisplayDesc;                                              // 0x0050(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)
	struct FText                                       TutorialText;                                             // 0x0068(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)
	int                                                BaseValue;                                                // 0x0080(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	int                                                StackSize;                                                // 0x0084(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	int                                                PickupMinCount;                                           // 0x0088(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	int                                                PickupMaxCount;                                           // 0x008C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              PickupRespawnTime;                                        // 0x0090(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	int                                                SortIndex;                                                // 0x0094(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              UseTime;                                                  // 0x0098(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              CraftTime;                                                // 0x009C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	TEnumAsByte<EInventoryBaseType>                    BaseType;                                                 // 0x00A0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	TEnumAsByte<EItemRarity>                           Rarity;                                                   // 0x00A1(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x00A2(0x0006) MISSED OFFSET
	TAssetPtr<class UStaticMesh>                       MeshAsset;                                                // 0x00A8(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)
	struct FInventoryItemTagContainer                  ItemTagContainer;                                         // 0x00C8(0x0030) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)
	class UInventoryItem*                              CraftComponent;                                           // 0x00F8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	class UInventoryItem*                              CraftComponentLinkedItem;                                 // 0x0100(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	struct FInventoryItemLink                          WeaponPartLinkItem;                                       // 0x0108(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)
	TArray<struct FName>                               SoundNames;                                               // 0x0118(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst)
	struct FInventoryItemFlagSet                       FlagSet;                                                  // 0x0128(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)
	unsigned char                                      UnknownData01[0x4];                                       // 0x012C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.InventoryItem");
		return ptr;
	}


	bool IsCarryOnlyItem();
	void IconTextureAsset(TAssetPtr<class UTexture2D>* OutAsset);
	class UTexture2D* IconTexture();
	struct FName GetSoundName(TEnumAsByte<EInventoryItemSound> SoundID);
	float GetPickupRespawnTime();
	class UTexture2D* GetItemTexture();
	struct FText GetItemName();
	struct FText GetItemDescription();
	struct FText STATIC_GetInventoryItemActionText(TEnumAsByte<EInventoryItemAction> Type);
	TEnumAsByte<ECraftComponentType> GetCraftComponentType();
	struct FText GetCraftComponentName();
	struct FText GetCraftComponentDescription();
	void GetBackgroundTextureAsset(TAssetPtr<class UTexture2D>* OutAsset);
	class UTexture2D* GetBackgroundTexture();
	bool ContainsTagEx(const struct FGameplayTag& Tag, TEnumAsByte<EGameplayTagMatchType> TagMatchType, TEnumAsByte<EGameplayTagMatchType> TagToCheckMatchType);
	bool ContainsTag(const struct FGameplayTag& Tag);
};


// Class BendGame.BendEdgeTraversal_Manager
// 0x01B8 (0x0288 - 0x00D0)
class UBendEdgeTraversal_Manager : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x00D0(0x0008) MISSED OFFSET
	TArray<struct FTraversalEdge>                      m_crowEdges;                                              // 0x00D8(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData01[0x148];                                     // 0x00E8(0x0148) MISSED OFFSET
	TArray<class UBendClimbStateDataBase*>             ClimbStateDataList;                                       // 0x0230(0x0010) (ZeroConstructor)
	TArray<struct FBendEdgeSector>                     LevelBoundsEdgeMap;                                       // 0x0240(0x0010) (ZeroConstructor)
	TArray<struct FVector>                             LadderTopEdgeLocations;                                   // 0x0250(0x0010) (ZeroConstructor)
	TArray<struct FVector>                             ClimbLockoutSpheres;                                      // 0x0260(0x0010) (ZeroConstructor)
	TArray<struct FVector>                             CurrentlyLockedLadderEdges;                               // 0x0270(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0280(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendEdgeTraversal_Manager");
		return ptr;
	}


	bool UnlockLadderEdge(const struct FTraversalEdge& Edge);
	bool TryLockLadderEdge(const struct FTraversalEdge& Edge);
	void SearchForLadderExitEdges(const struct FVector& Position, const struct FVector& dir, TArray<struct FTraversalEdge>* Visible);
	void RemoveClimbLockoutSphere(const struct FVector& Location);
	bool IsLadderEdgeLocked(const struct FTraversalEdge& Edge);
	bool IsAnyLadderEdgeLocked(TArray<struct FTraversalEdge> EdgeArray);
	TArray<struct FReservedPerchLocation> GetCurrentCrowPerchingLocations();
	class UBendEdgeTraversal_Manager* STATIC_GetBendTraversalManager();
	TArray<struct FTraversalEdge> FindEdgesNearLocation(const struct FVector& Location, float Radius);
	TArray<struct FTraversalEdge> FindCrowEdgesNearLocation(const struct FVector& Location, float Radius);
	struct FTraversalEdge FindClosestEdgeToLocation(const struct FVector& Location, float Radius);
	struct FTraversalEdge FindClosestCrowEdgeToLocation(const struct FVector& Location, float Radius);
	void DebugEnableDrawOnlySectorEdges(bool Toggle);
	void DebugEnableDrawEdges(bool Toggle);
	void DebugEnableDrawCrowEdges(bool Toggle);
	void DebugEnableDrawAllEdges(bool Toggle);
	void DebugEnableDrawActiveTickingEdges(bool Toggle);
	struct FVector ClosestPointOnEdge(const struct FTraversalEdge& Edge, const struct FVector& Location);
	void AggregatedStaticEdgesUnloaded(TArray<struct FTraversalEdge> AggregatedEdges);
	void AggregatedStaticEdgesLoaded(TArray<struct FTraversalEdge> AggregatedEdges);
	void AddClimbLockoutSphere(const struct FVector& Location);
};


// Class BendGame.BendTraversalNavLink
// 0x00B8 (0x0450 - 0x0398)
class ABendTraversalNavLink : public ANavLinkProxy
{
public:
	class UBendNavLinkCustomComponent*                 BendSmartLink;                                            // 0x0398(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x18];                                      // 0x03A0(0x0018) MISSED OFFSET
	bool                                               ForEdgeTraversal;                                         // 0x03B8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x03B9(0x0007) MISSED OFFSET
	TAssetPtr<class UBendClimbStateDataBase>           m_InverseClimbStateData;                                  // 0x03C0(0x0020) (Edit)
	TAssetPtr<class UBendClimbStateDataBase>           m_ClimbStateData;                                         // 0x03E0(0x0020) (Edit)
	TArray<struct FBendTraversalSettings>              TraversalSettings;                                        // 0x0400(0x0010) (Edit, ZeroConstructor)
	bool                                               OnlyUseWhenFrustrated;                                    // 0x0410(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               CanUseWhenAware;                                          // 0x0411(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               CanUseWhenSemiaware;                                      // 0x0412(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               CanUseWhenUnaware;                                        // 0x0413(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector                                     Start;                                                    // 0x0414(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector                                     End;                                                      // 0x0420(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               AdjustPointsToGeometry;                                   // 0x042C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x13];                                      // 0x042D(0x0013) MISSED OFFSET
	class UBendClimbStateDataBase*                     LoadedInverseClimbStateData;                              // 0x0440(0x0008) (ZeroConstructor, IsPlainOldData)
	class UBendClimbStateDataBase*                     LoadedClimbStateData;                                     // 0x0448(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendTraversalNavLink");
		return ptr;
	}


	void ClimbCompleted(class ABendPawn* Pawn, bool Success);
};


// Class BendGame.BendDoor
// 0x0378 (0x06C0 - 0x0348)
class ABendDoor : public AActor
{
public:
	struct FScriptMulticastDelegate                    OnDoorStartedOpening;                                     // 0x0348(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class USceneComponent*                             Root;                                                     // 0x0358(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UStaticMeshComponent*                        Mesh;                                                     // 0x0360(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UBendWidgetComponent*                        BendAdvertiseWidget;                                      // 0x0368(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UBoxComponent*                               ChargeDetectionBox;                                       // 0x0370(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UBoxComponent*                               PawnDetectionTrigger;                                     // 0x0378(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UArrowComponent*                             ClockwisePivot;                                           // 0x0380(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UArrowComponent*                             CWOpenAnimAnchor;                                         // 0x0388(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UArrowComponent*                             CCWOpenAnimAnchor;                                        // 0x0390(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UArrowComponent*                             CounterClockwisePivot;                                    // 0x0398(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UInteractComponent*                          InteractComponentType;                                    // 0x03A0(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class USlateInputInteractComponent*                SlateInputInteractComponent;                              // 0x03A8(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UBendSphereComponent*                        InnerDistanceSphere;                                      // 0x03B0(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class USphereComponent*                            AutoCloseDetectionSphere;                                 // 0x03B8(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UBendNavModifierComponent*                   BendNavModifier;                                          // 0x03C0(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class USoundClass*                                 DeaconSoundClass;                                         // 0x03C8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FBendActionData                             CurrentCloseData;                                         // 0x03D0(0x00A0) (Edit, BlueprintVisible, DisableEditOnInstance)
	float                                              ClosePlayRate;                                            // 0x0470(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0474(0x0004) MISSED OFFSET
	class UBendDoorActionData*                         DoorActionData;                                           // 0x0478(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBendDoorData*                               DoorDataAsset;                                            // 0x0480(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class ABendDoor*                                   DoubleDoorRef;                                            // 0x0488(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               CanGenerateNoise;                                         // 0x0490(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	bool                                               JimmyableCW;                                              // 0x0491(0x0001) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	bool                                               JimmyableCCW;                                             // 0x0492(0x0001) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	TEnumAsByte<EBendDoorState>                        DoorState;                                                // 0x0493(0x0001) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	bool                                               CanKickInDoor;                                            // 0x0494(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               CanChargeThroughDoor;                                     // 0x0495(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               CanClose;                                                 // 0x0496(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x0497(0x0001) MISSED OFFSET
	float                                              TimeToJimmy;                                              // 0x0498(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EIconTypes>                            LastKnownIconState;                                       // 0x049C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x049D(0x0003) MISSED OFFSET
	float                                              ExtraOpenRotation;                                        // 0x04A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IsDoubleDoor;                                             // 0x04A4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               HasNavComponents;                                         // 0x04A5(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x2];                                       // 0x04A6(0x0002) MISSED OFFSET
	struct FVector                                     ForwardOrSidewaysNavChecker;                              // 0x04A8(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               SuccessfullyRanConstructionScript;                        // 0x04B4(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x1];                                       // 0x04B5(0x0001) MISSED OFFSET
	bool                                               AreInteractsEnabled;                                      // 0x04B6(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               CanKick;                                                  // 0x04B7(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               PlayerInRange;                                            // 0x04B8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               EnemyEntering;                                            // 0x04B9(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               Kicking;                                                  // 0x04BA(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               Closing;                                                  // 0x04BB(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               OpenFast;                                                 // 0x04BC(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               Charging;                                                 // 0x04BD(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               LockedCCW;                                                // 0x04BE(0x0001) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	bool                                               LockedCW;                                                 // 0x04BF(0x0001) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	bool                                               Notifies_IsCW;                                            // 0x04C0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               DoorMoving;                                               // 0x04C1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               TriedLock;                                                // 0x04C2(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               Broken;                                                   // 0x04C3(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData)
	bool                                               InAdvertiseRange;                                         // 0x04C4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData05[0x3];                                       // 0x04C5(0x0003) MISSED OFFSET
	class USceneComponent*                             CurrentAttachParent;                                      // 0x04C8(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	int                                                NpcsAtDoor;                                               // 0x04D0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ExtraOpenMulti;                                           // 0x04D4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       NotifiesMessage;                                          // 0x04D8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FTimerHandle                                QueueTimer;                                               // 0x04E0(0x0004) (Edit, BlueprintVisible, DisableEditOnInstance)
	unsigned char                                      UnknownData06[0xC];                                       // 0x04E4(0x000C) MISSED OFFSET
	struct FTransform                                  LocalCWOpenAnchor;                                        // 0x04F0(0x0030) (Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData)
	struct FTransform                                  LocalCCWOpenAnchor;                                       // 0x0520(0x0030) (Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData)
	struct FTransform                                  CWAnimAnchorTransform;                                    // 0x0550(0x0030) (Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData)
	struct FTransform                                  CCWAnimAnchorTransform;                                   // 0x0580(0x0030) (Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData)
	struct FTransform                                  ChargeOffsetCW;                                           // 0x05B0(0x0030) (Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData)
	struct FTransform                                  ChargeOffsetCCW;                                          // 0x05E0(0x0030) (Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData)
	struct FTransform                                  LocalNavBlockDoor;                                        // 0x0610(0x0030) (Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData)
	struct FTransform                                  LocalNavBlockCW;                                          // 0x0640(0x0030) (Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData)
	struct FTransform                                  LocalNavBlockCCW;                                         // 0x0670(0x0030) (Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData)
	class ABendPawn*                                   NotifiesPawn;                                             // 0x06A0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class ABendPawn*                                   OpenDoorOwner;                                            // 0x06A8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class ABendTraversalNavLink*                       NavLink;                                                  // 0x06B0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0x8];                                       // 0x06B8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendDoor");
		return ptr;
	}


	void SetDoorVisibility(bool Hide);
	void SetDoorInteractDetails();
	void QueueTimerFunc();
	void PlaySound(TEnumAsByte<EDoorSoundType> DoorSoundType);
	void PawnDetectionEndOverlap(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex);
	void PawnDetectionBeginOverlap(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void OpenOrKickAnimCancelled(TEnumAsByte<EPeformActionFailedReason> FailedReason);
	void OnInteractEnd();
	void OnInteractBegin();
	void OnInputEnd(class USlateInputInteract* InputInteract);
	void OnAnimNotify(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, class UAnimNotify* AnimNotify);
	bool NPCAtDoor(class ABendAIPawn* PawnRef, bool SideOfDoor);
	void JimmyFailDelegate(TEnumAsByte<EPeformActionFailedReason> Fail);
	bool IsOpen();
	bool IsLocationOnFrontSideOfDoor(const struct FVector& Location);
	void InstantDoorState(TEnumAsByte<EBendDoorState> NewState);
	void HumanLockedCompleteDelegate();
	bool HordeAtDoor(int BodyIndex, const struct FVector& OverrideLocation);
	void HandleNavLinkState();
	void HandleButtonPress();
	void ForceOpenDoor(bool IsCw, bool Instant);
	void ForceLockOrUnlockDoor(bool NewLockedCW, bool NewLockedCCW, bool OverrideJimmyable, bool NewJimmyableCW, bool NewJimmyableCCW);
	void ForceCloseDoor(bool LockDoorCW, bool LockDoorCCW, bool Instant);
	TEnumAsByte<EIconTypes> FigureOutAdvertiseType(bool OverrideSide, bool Side);
	void DoorFinishedOpening();
	void DoorCWOpenAnimation();
	void DoorCWCloseAnimation();
	void DoorCCWOpenAnimation();
	void DoorCCWCloseAnimation();
	void DistanceSphereEndOverlap();
	void DistanceSphereBeginOverlapTimerEvent();
	void DistanceSphereBeginOverlap();
	void DisableDoorInteraction(bool Reenable);
	void CloseAnimationCompleted();
	void ChargePerformActionFailedDelegate(TEnumAsByte<EPeformActionFailedReason> Reason);
	void ChargePerformActionCompleteDelegate();
	void ChargeBoxBeginOverlap(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BP_ResetDoorInteractDetails(const struct FString& Message);
	void BP_PlayDoorTimeline();
	void BP_OnDoorLockedAttempt();
	void BP_JimmyStartDelegate();
	void BP_HandleFocusOutlinesColor();
	void BP_ForceBeginPlay();
	void BP_EnableFocusOutlines();
	void BP_DisplayAdvertiseIcon(class UBendWidgetComponent* Widget, bool UseWideLayout, class UInventoryItem* PickupItem, bool IsAmmoPickup, bool lockedIcon, float CurDurability);
	void BP_DisableFocusOutlines();
	void BP_DisableAdvertiseIcon(class UBendWidgetComponent* Widget);
	void AutoCloseEndOverlap(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex);
};


// Class BendGame.BendAudioManager
// 0x09A8 (0x0CF0 - 0x0348)
class ABendAudioManager : public AActor
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0348(0x0010) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnSoundClassLoaded;                                       // 0x0358(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnConversationBegin;                                      // 0x0368(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnConversationInterrupted;                                // 0x0378(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnConversationResumed;                                    // 0x0388(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnConversationFinished;                                   // 0x0398(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData01[0x28];                                      // 0x03A8(0x0028) MISSED OFFSET
	struct FConversationInterruptData                  ConversationInterruptData;                                // 0x03D0(0x0040) (Edit, DisableEditOnInstance)
	class UBendAudioEventVOWaitTimeData*               m_pDefaultEventVOWaitTime;                                // 0x0410(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0418(0x0008) MISSED OFFSET
	TArray<struct FRadioPreSendFilterData>             RadioFX;                                                  // 0x0420(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	float                                              ChildConversationVolumeMultiplier;                        // 0x0430(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4C];                                      // 0x0434(0x004C) MISSED OFFSET
	class USoundCue*                                   RiverSound;                                               // 0x0480(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class USoundCue*                                   StreamSound;                                              // 0x0488(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class USoundCue*                                   CanalSound;                                               // 0x0490(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              WaterWayMaxDistance;                                      // 0x0498(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x14];                                      // 0x049C(0x0014) MISSED OFFSET
	struct FOpenWorldDynamicAudioListeners             OpenWorldAudioListeners;                                  // 0x04B0(0x0050) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData05[0x90];                                      // 0x0500(0x0090) MISSED OFFSET
	float                                              MinTimeDilationValue;                                     // 0x0590(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData06[0x4];                                       // 0x0594(0x0004) MISSED OFFSET
	class USoundCue*                                   RingingEarsSound;                                         // 0x0598(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class USoundCue*                                   TrackingSound;                                            // 0x05A0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<struct FPlayerDebugVOData>                  DebugPlayVO;                                              // 0x05A8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	class UPhysicalMaterial*                           ArmorClothPhysicalMaterial;                               // 0x05B8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UPhysicalMaterial*                           ArmorMetalPhysicalMaterial;                               // 0x05C0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ObstructionFilterCutoff;                                  // 0x05C8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ObstructionFilterSlope;                                   // 0x05CC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ObstructionHFGainSlope;                                   // 0x05D0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ObstructionDPGainSlope;                                   // 0x05D4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinObstructionHFGain;                                     // 0x05D8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinObstructionDPGain;                                     // 0x05DC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ObstructionMinDistance;                                   // 0x05E0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ObstructionMaxDistance;                                   // 0x05E4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              OcclusionRoomMaxDistance;                                 // 0x05E8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              OcclusionRoomMinDistance;                                 // 0x05EC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              Occlusion2DMaxDistance;                                   // 0x05F0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              Occlusion2DMinDistance;                                   // 0x05F4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              OcclusionMinHFGain;                                       // 0x05F8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              OcclusionMinDPGain;                                       // 0x05FC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               OcclusionSmoothingEnabled;                                // 0x0600(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               OcclusionReverbEnabled;                                   // 0x0601(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData07[0x2];                                       // 0x0602(0x0002) MISSED OFFSET
	float                                              VOFilterCutoff;                                           // 0x0604(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              VOFilterSlope;                                            // 0x0608(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              VOFilterMinDistance;                                      // 0x060C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              VOFilterMaxDistance;                                      // 0x0610(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxPortalSize;                                            // 0x0614(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               UseVirtualPosition;                                       // 0x0618(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData08[0x3];                                       // 0x0619(0x0003) MISSED OFFSET
	float                                              VirtualPositionMaxDistance;                               // 0x061C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              VirtualPositionMinDistance;                               // 0x0620(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PostSendFilterFrames;                                     // 0x0624(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TimeDilationFrames;                                       // 0x0628(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData09[0x4];                                       // 0x062C(0x0004) MISSED OFFSET
	struct FReverbSettings                             TimeDilationReverb;                                       // 0x0630(0x0018) (Edit, DisableEditOnInstance)
	struct FReverbSettings                             DefaultReverb;                                            // 0x0648(0x0018) (Edit, DisableEditOnInstance)
	bool                                               UseDirection;                                             // 0x0660(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData10[0x7];                                       // 0x0661(0x0007) MISSED OFFSET
	TArray<TAssetPtr<class USoundClass>>               SoundClassForceCook;                                      // 0x0668(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData11[0xD8];                                      // 0x0678(0x00D8) MISSED OFFSET
	TAssetPtr<class UClass>                            m_pMusicManagerClass;                                     // 0x0750(0x0020) (Edit, BlueprintVisible, DisableEditOnInstance)
	TWeakObjectPtr<class UBendMusicManager>            m_pBaseMusicManager;                                      // 0x0770(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TArray<struct FRegionBasedOpenWorldMusicData>      OpenWorldMusicManagerClasses;                             // 0x0778(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class UBendMusicManager*>                   m_pMusicManagers;                                         // 0x0788(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData12[0x8];                                       // 0x0798(0x0008) MISSED OFFSET
	TAssetPtr<class UClass>                            m_pLevelSoundManagerClass;                                // 0x07A0(0x0020) (Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UBendLevelSoundManager*>              m_pLevelSoundManagers;                                    // 0x07C0(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData13[0x2C0];                                     // 0x07D0(0x02C0) MISSED OFFSET
	TArray<class USoundCue*>                           StaticSoundCueList;                                       // 0x0A90(0x0010) (ZeroConstructor)
	TArray<struct FPlayedConversation>                 m_PreviousPlayedConversations;                            // 0x0AA0(0x0010) (ZeroConstructor)
	class USoundWave*                                  SilentSoundWave;                                          // 0x0AB0(0x0008) (ZeroConstructor, IsPlainOldData)
	class USoundNodeWavePlayer*                        m_pSoundNodeWavePlayer;                                   // 0x0AB8(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<struct FDelayRadialForce>                   DelayRadialForceList;                                     // 0x0AC0(0x0010) (ZeroConstructor)
	TArray<struct FDelayImpulseAtPoint>                DelayImpulseAtPointList;                                  // 0x0AD0(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData14[0x48];                                      // 0x0AE0(0x0048) MISSED OFFSET
	class UAudioComponent*                             m_pRingingEarsComp;                                       // 0x0B28(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData15[0x8];                                       // 0x0B30(0x0008) MISSED OFFSET
	class UAudioComponent*                             m_pTrackingComp;                                          // 0x0B38(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData16[0xA0];                                      // 0x0B40(0x00A0) MISSED OFFSET
	TArray<struct FVOSoundData>                        m_pCurPlayingEventVOData;                                 // 0x0BE0(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData17[0xF0];                                      // 0x0BF0(0x00F0) MISSED OFFSET
	class UAudioComponent*                             m_pRadioSquelchComp;                                      // 0x0CE0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UAudioComponent*                             m_pRadioStaticComp;                                       // 0x0CE8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAudioManager");
		return ptr;
	}


	void WeaponWheelOpened();
	void WeaponWheelClosed();
	void UnpauseAllVO();
	void UnpauseAllSoundsInGroup(int GroupToUnpause);
	void UnpauseAllSounds();
	void UnloadLevelBanks();
	void TutorialOpened();
	void TutorialClosed();
	void StopAndRemoveAllMusicManagers();
	void StopAllMusicImmediately();
	void StopAllMusic();
	void SnapshotSetPriorityMode(int PriorityMode);
	bool SnapshotIsMixActive(const struct FString& SnapshotName);
	bool SnapshotDeactivateMix(const struct FString& SnapshotName, float FadeTimeOverride);
	void SnapshotDeactivateAllMix(float FadeTime);
	bool SnapshotActivateMix(const struct FString& SnapshotName, float MixScalar, int Priority, float FadeTimeOverride);
	void SetVolumeOnGroup(int Group, float NewVolume);
	void SetVoiceAudioVolume(float NewVolumeLevel, float FadeTime);
	int SetupSingleActorDataWithAnimationMasterTimeline(const struct FName& PairedName, class UObject* PairedObject, float TimeOffset, class UAudioComponent* SyncToAudioTime);
	bool SetTrackingIntensity(float intensity);
	void SetSoundsLocalRegisterValue(class UAudioComponent* pAudioComponent, int RegisterIndex, unsigned char RegisterValue);
	void SetSFXAudioVolume(float NewVolumeLevel, float FadeTime, bool calledFromSlider);
	bool SetPremasterSubmix(const struct FString& SubMixName);
	void SetOnWeaponWheelOpenPauseVO(bool Pause);
	void SetMusicAudioVolume(float NewVolumeLevel, float FadeTime);
	void SetMissionEndScreenUp(bool IsUp);
	void SetMaxObstruction(float fMaxObstruction);
	void SetGlobalRegisterValue(int RegisterIndex, int Value);
	void SetCurrentMusicManager(TAssetPtr<class UClass> MusicManagerClass, const struct FName& MusicEventName);
	void SetCurrentLevelSoundManager(TAssetPtr<class UClass> LevelSoundManagerClass, const struct FName& LevelSoundEventName);
	void SetControllerSpeakerEnabledFromUserSetting(bool Enabled);
	void SetCanPlayWildlifeAudio(bool CanPlay);
	void SetCanPlayDynamicListenerAudio(bool CanPlay);
	void SetCanPlayDistantNoiseAudio(bool CanPlay);
	void SetBankLastUsedTime(const struct FString& BankName);
	void SetAllAudioVolumes(float NewVolumeLevel, float FadeTime);
	void SetActorDataWithAnimationMasterTimelineID(const struct FName& PairedName, class UObject* PairedObject, float TimeOffset, int UniqueAnimTimeID, class UAudioComponent* SyncToAudioTime);
	void RemoveCurrentMusicManager(TAssetPtr<class UClass> MusicManagerClass);
	void RemoveCurrentLevelSoundManager(TAssetPtr<class UClass> LevelSoundManagerClass);
	void STATIC_PlayVOPOI(TEnumAsByte<EePOIType> POI, TEnumAsByte<EePOIStateForVO> State, class ABendPawn* pPawn);
	void PhotoModeOpened();
	void PhotoModeClosed();
	void PauseMenuOpened();
	void PauseMenuClosed();
	void PauseAllVO();
	void PauseAllSoundsInGroup(int GroupToPause);
	void PauseAllSounds(bool bPauseMusic);
	void OptionsMenuOpened();
	void OptionsMenuClosed(bool ClosedByPhotoMode);
	void OnTimeDilationChanged(float NewTimeDilation);
	void OnConversationUnpaused(bool ShouldDuckAudio);
	void OnConversationStarted(bool ShouldDuckAudio);
	void OnConversationPaused(bool ShouldUnduckAudio);
	void OnConversationEnded(bool ShouldUnduckAudio);
	void STATIC_MusicEventWasCalled(class UBendMusicManager* MusicManager, const struct FName& MusicEventName);
	void MainMenuOpened();
	void MainMenuClosed();
	void LoadSoundClass(class USoundClass* SoundClass);
	bool IsVO_Paused();
	bool IsSoundInSoundClass(class USoundClass* SoundClass, const struct FName& SoundName);
	bool IsMusicManagerWaitingToLoad();
	bool IsAudioPaused();
	bool HaveAllRippersBeenKilledInTheGame();
	void GroupMixerSetBaseLevel(float DBLevel, float FadeTimeSeconds);
	int GetSoundsLocalRegisterValue(class UAudioComponent* pAudioComponent, int RegisterIndex);
	float GetOuterRadius(class USoundBase* SoundBase);
	int GetNumMusicManagers();
	float GetMinTimeDilationValue();
	struct FVector GetListenerPosition();
	int GetGlobalRegisterValue(int RegisterIndex);
	float GetDistanceFromListenerSquared(const struct FVector& Location);
	float GetDistanceFromListener(const struct FVector& Location);
	class UBendMusicManager* STATIC_GetCurrentMusicManager();
	class UBendLevelSoundManager* STATIC_GetCurrentLevelSoundManager();
	int GetConversationPawnIsIn(class ABendPawn* pPawn, bool CheckPausedOrInterrupted);
	class ABendAudioManager* STATIC_GetBendAudioManager();
	void FadingOutToBlackStarted(bool IsForCinematic);
	void FadingInFromBlackStarted(bool IsForCinematic);
	void EndTrackingEffect();
	bool EnableTrackingEffect(float intensity);
	bool EnableRingingEarsEffect(float intensity);
	void EnableRenderingSubmix(class UAudioComponent* AudioComponent, class UBendAudioRenderingSubmixData* RenderingSubmixData);
	void DisableRenderingSubmix(class UAudioComponent* AudioComponent);
	void CinematicAudioInterrupted();
	void BendPlayImpactFX(class UObject* WorldContextObject, bool IsPlayer, const struct FVector& Location, class USoundCue* SndCueSurface, class UParticleSystem* ParticleSurface, class USoundCue* SndCuePuddle, class UParticleSystem* ParticlePuddle, float Volume, const struct FString& SurfaceTypeName);
	void ApplyUserSettings(class UGameUserSettings* InUserSettings);
	void AllRippersHaveBeenKilledInTheGame(bool AllKilled);
};


// Class BendGame.BendLipSyncComponent
// 0x0048 (0x0118 - 0x00D0)
class UBendLipSyncComponent : public UActorComponent
{
public:
	class UBendAnimVariationData*                      LipSyncAnimVariationData;                                 // 0x00D0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<struct FLipSyncVisemeData>                  LipSyncVisemeList;                                        // 0x00D8(0x0010) (BlueprintVisible, ZeroConstructor, Transient)
	unsigned char                                      UnknownData00[0x30];                                      // 0x00E8(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendLipSyncComponent");
		return ptr;
	}

};


// Class BendGame.BendCrowdFullFledgedPawnInterface
// 0x0000 (0x0028 - 0x0028)
class UBendCrowdFullFledgedPawnInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendCrowdFullFledgedPawnInterface");
		return ptr;
	}

};


// Class BendGame.AnimNotifyState_EarlyExit
// 0x0008 (0x0038 - 0x0030)
class UAnimNotifyState_EarlyExit : public UAnimNotifyState
{
public:
	TEnumAsByte<EBendAnimNotifyEarlyExitType>          EarlyExitType;                                            // 0x0030(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0031(0x0003) MISSED OFFSET
	float                                              BlendOutTime;                                             // 0x0034(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.AnimNotifyState_EarlyExit");
		return ptr;
	}

};


// Class BendGame.BendAnimBlueprintMessenger
// 0x01F8 (0x0220 - 0x0028)
class UBendAnimBlueprintMessenger : public UObject
{
public:
	struct FScriptMulticastDelegate                    OnAnimNotify;                                             // 0x0028(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnAnimNotifyStateBegin;                                   // 0x0038(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnAnimNotifyStateTick;                                    // 0x0048(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnAnimNotifyStateEnd;                                     // 0x0058(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData00[0x1B8];                                     // 0x0068(0x01B8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAnimBlueprintMessenger");
		return ptr;
	}


	void UnbindEventsFromTransitionNotifies(const struct FName& TransitionId, const struct FScriptDelegate& StartDelegate, const struct FScriptDelegate& EndDelegate, const struct FScriptDelegate& InterruptDelegate);
	void UnbindEventsFromStateNotifies(const struct FName& StateId, const struct FScriptDelegate& EnteredDelegate, const struct FScriptDelegate& LeftDelegate, const struct FScriptDelegate& FullyBlendedDelegate);
	void UnbindEventFromTransitionNotify(const struct FName& TransitionId, const struct FScriptDelegate& Delegate, TEnumAsByte<EBendAnimTransitionEvent> eventType);
	void UnbindEventFromStateNotify(const struct FName& StateId, const struct FScriptDelegate& Delegate, TEnumAsByte<EBendAnimStateEvent> eventType);
	void UnbindEventFromGeneralNotify(const struct FName& NotifyId, const struct FScriptDelegate& Delegate);
	void RequestTransition_WithStartEvent(const struct FName& TransitionId, const struct FScriptDelegate& StartDelegate);
	void RequestTransition_WithStartAndFailEvents(const struct FName& TransitionId, const struct FScriptDelegate& StartDelegate, const struct FScriptDelegate& FailStartDelegate);
	void RequestTransition_WithFailEvent(const struct FName& TransitionId, const struct FScriptDelegate& FailStartDelegate);
	void RequestTransition(const struct FName& TransitionId);
	void BindEventToTransitionNotify(const struct FName& TransitionId, const struct FScriptDelegate& Delegate, TEnumAsByte<EBendAnimTransitionEvent> eventType);
	void BindEventToStateNotify(const struct FName& StateId, const struct FScriptDelegate& Delegate, TEnumAsByte<EBendAnimStateEvent> eventType);
	void BindEventToGeneralNotify(const struct FName& NotifyId, const struct FScriptDelegate& Delegate);
	void BindEventsToTransitionNotifies(const struct FName& TransitionId, const struct FScriptDelegate& StartDelegate, const struct FScriptDelegate& EndDelegate, const struct FScriptDelegate& InterruptDelegate);
	void BindEventsToStateNotifies(const struct FName& StateId, const struct FScriptDelegate& EnteredDelegate, const struct FScriptDelegate& LeftDelegate, const struct FScriptDelegate& FullyBlendedDelegate);
};


// Class BendGame.BendVehicleSeatOccupierInterface
// 0x0000 (0x0028 - 0x0028)
class UBendVehicleSeatOccupierInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendVehicleSeatOccupierInterface");
		return ptr;
	}

};


// Class BendGame.BendSpringInterpolator
// 0x0000 (0x0028 - 0x0028)
class UBendSpringInterpolator : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendSpringInterpolator");
		return ptr;
	}


	void STATIC_TickWithTarget(const struct FBendSpringInterpolatedFloat& InInterpolatedFloat, float Target, float DeltaTime, struct FBendSpringInterpolatedFloat* OutInterpolatedFloat);
	void STATIC_Tick(const struct FBendSpringInterpolatedFloat& InInterpolatedFloat, float DeltaTime, struct FBendSpringInterpolatedFloat* OutInterpolatedFloat);
	void STATIC_SetTarget(const struct FBendSpringInterpolatedFloat& InInterpolatedFloat, float Target, struct FBendSpringInterpolatedFloat* OutInterpolatedFloat);
	void STATIC_SetNumIterations(const struct FBendSpringInterpolatedFloat& InInterpolatedFloat, float NumIterations, struct FBendSpringInterpolatedFloat* OutInterpolatedFloat);
	void STATIC_SetNaturalFrequency(const struct FBendSpringInterpolatedFloat& InInterpolatedFloat, float NaturalFrequency, struct FBendSpringInterpolatedFloat* OutInterpolatedFloat);
	void STATIC_SetDampingRatio(const struct FBendSpringInterpolatedFloat& InInterpolatedFloat, float DampingRatio, struct FBendSpringInterpolatedFloat* OutInterpolatedFloat);
	void STATIC_ResetCurrentAndTargetAndVelocity(const struct FBendSpringInterpolatedFloat& InInterpolatedFloat, float Current, float Target, float Velocity, struct FBendSpringInterpolatedFloat* OutInterpolatedFloat);
	void STATIC_OverrideVelocity(const struct FBendSpringInterpolatedFloat& InInterpolatedFloat, float Velocity, struct FBendSpringInterpolatedFloat* OutInterpolatedFloat);
	void STATIC_OverrideCurrent(const struct FBendSpringInterpolatedFloat& InInterpolatedFloat, float Current, struct FBendSpringInterpolatedFloat* OutInterpolatedFloat);
};


// Class BendGame.BendSpringInterpolatorFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UBendSpringInterpolatorFunctionLibrary : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendSpringInterpolatorFunctionLibrary");
		return ptr;
	}


	void STATIC_TickWithTarget_NEW(float Target, float DeltaTime, struct FBendSpringInterpolatedFloat* InterpolatedFloat);
	void STATIC_Tick_NEW(float DeltaTime, struct FBendSpringInterpolatedFloat* InterpolatedFloat);
	void STATIC_SetTarget_NEW(float Target, struct FBendSpringInterpolatedFloat* InterpolatedFloat);
	void STATIC_SetNumIterations_NEW(float NumIterations, struct FBendSpringInterpolatedFloat* InterpolatedFloat);
	void STATIC_SetNaturalFrequency_NEW(float NaturalFrequency, struct FBendSpringInterpolatedFloat* InterpolatedFloat);
	void STATIC_SetDampingRatio_NEW(float DampingRatio, struct FBendSpringInterpolatedFloat* InterpolatedFloat);
	void STATIC_ResetCurrentAndTargetAndVelocity_NEW(float Current, float Target, float Velocity, struct FBendSpringInterpolatedFloat* InterpolatedFloat);
	void STATIC_OverrideVelocity_NEW(float Velocity, struct FBendSpringInterpolatedFloat* InterpolatedFloat);
	void STATIC_OverrideCurrent_NEW(float Current, struct FBendSpringInterpolatedFloat* InterpolatedFloat);
	void STATIC_EnableUnwindAngle(bool bEnableUnwindAngle, bool bInUseRadians, struct FBendSpringInterpolatedFloat* InterpolatedFloat);
};


// Class BendGame.BendSpringInterpFunctionLibrary_WithAngleHysteresis
// 0x0000 (0x0028 - 0x0028)
class UBendSpringInterpFunctionLibrary_WithAngleHysteresis : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendSpringInterpFunctionLibrary_WithAngleHysteresis");
		return ptr;
	}


	void STATIC_TickWithTarget(float Target, float DeltaTime, struct FBendSpringInterp_WithAngleHysteresis* InterpolatedFloat);
	void STATIC_Tick(float DeltaTime, struct FBendSpringInterp_WithAngleHysteresis* InterpolatedFloat);
	void STATIC_SetTarget(float Target, struct FBendSpringInterp_WithAngleHysteresis* InterpolatedFloat);
	void STATIC_SetNumIterations(float NumIterations, struct FBendSpringInterp_WithAngleHysteresis* InterpolatedFloat);
	void STATIC_SetNaturalFrequency(float NaturalFrequency, struct FBendSpringInterp_WithAngleHysteresis* InterpolatedFloat);
	void STATIC_SetDampingRatio(float DampingRatio, struct FBendSpringInterp_WithAngleHysteresis* InterpolatedFloat);
	void STATIC_ResetCurrentAndTargetAndVelocity(float Current, float Target, float Velocity, struct FBendSpringInterp_WithAngleHysteresis* InterpolatedFloat);
	void STATIC_OverrideVelocity(float Velocity, struct FBendSpringInterp_WithAngleHysteresis* InterpolatedFloat);
	void STATIC_OverrideCurrent(float Current, struct FBendSpringInterp_WithAngleHysteresis* InterpolatedFloat);
	void STATIC_EnableUnwindAngle(bool bEnableUnwindAngle, bool bInUseRadians, struct FBendSpringInterp_WithAngleHysteresis* InterpolatedFloat);
};


// Class BendGame.BendSkeletalMeshActorInterface
// 0x0000 (0x0028 - 0x0028)
class UBendSkeletalMeshActorInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendSkeletalMeshActorInterface");
		return ptr;
	}

};


// Class BendGame.InventoryItemAmmo
// 0x0088 (0x01B8 - 0x0130)
class UInventoryItemAmmo : public UInventoryItem
{
public:
	TEnumAsByte<EWeaponType>                           WeaponType;                                               // 0x0130(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0131(0x0007) MISSED OFFSET
	TAssetPtr<class ABendProjectile>                   AmmoAssetBlueprint;                                       // 0x0138(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)
	TAssetPtr<class ABendProjectile>                   NPCAmmoAssetBlueprint;                                    // 0x0158(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)
	TAssetPtr<class UClass>                            AmmoAssetSubClass;                                        // 0x0178(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)
	TAssetPtr<class UClass>                            NPCAmmoAssetSubClass;                                     // 0x0198(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.InventoryItemAmmo");
		return ptr;
	}


	TEnumAsByte<EInventoryAmmoID> GetAmmoID();
};


// Class BendGame.InventoryItemCollectible
// 0x0078 (0x01A8 - 0x0130)
class UInventoryItemCollectible : public UInventoryItem
{
public:
	TEnumAsByte<ECollectibleType>                      CollectibleType;                                          // 0x0130(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0131(0x0007) MISSED OFFSET
	struct FText                                       ShortDescription;                                         // 0x0138(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)
	struct FText                                       TextKey;                                                  // 0x0150(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)
	struct FName                                       AudioRecordingName;                                       // 0x0168(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	struct FString                                     AudioBank;                                                // 0x0170(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst)
	TAssetPtr<class USoundCue>                         AudioCue;                                                 // 0x0180(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)
	bool                                               bHasAudio;                                                // 0x01A0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x01A1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.InventoryItemCollectible");
		return ptr;
	}


	struct FText GetShortDescription();
	TEnumAsByte<EInventoryCollectibleID> GetCollectibleID();
};


// Class BendGame.InventoryItemConsumable
// 0x0030 (0x0160 - 0x0130)
class UInventoryItemConsumable : public UInventoryItem
{
public:
	TEnumAsByte<EPlayerAttributeType>                  ModifiedAttribute;                                        // 0x0130(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0131(0x0003) MISSED OFFSET
	float                                              EffectRank;                                               // 0x0134(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	struct FName                                       CollectibleTag;                                           // 0x0138(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	TAssetPtr<class UClass>                            GameplayEffectAssetSubClass;                              // 0x0140(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.InventoryItemConsumable");
		return ptr;
	}


	float GetEffectDuration(class UBendAbilitySystemComponent* AbilityComponent, float EffectLevel);
};


// Class BendGame.InventoryItemMotorcyclePart
// 0x0018 (0x0148 - 0x0130)
class UInventoryItemMotorcyclePart : public UInventoryItem
{
public:
	TEnumAsByte<EMotorcyclePartType>                   BikePartType;                                             // 0x0130(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<EMotorcycleFrameID>                    RequiredFrameID;                                          // 0x0131(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0132(0x0002) MISSED OFFSET
	int                                                BikePartTypeID;                                           // 0x0134(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<struct FInventoryItemStatDef>               Stats;                                                    // 0x0138(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.InventoryItemMotorcyclePart");
		return ptr;
	}

};


// Class BendGame.InventoryItemRecipe
// 0x0048 (0x0178 - 0x0130)
class UInventoryItemRecipe : public UInventoryItem
{
public:
	TEnumAsByte<ECraftCategory>                        CraftCategory;                                            // 0x0130(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0131(0x0003) MISSED OFFSET
	int                                                CraftItemCount;                                           // 0x0134(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	class UInventoryItem*                              CraftItem;                                                // 0x0138(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	struct FName                                       OnCraftSound;                                             // 0x0140(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	TAssetPtr<class UAnimationAsset>                   CraftAnimation;                                           // 0x0148(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)
	TArray<struct FRecipeComponent>                    Components;                                               // 0x0168(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.InventoryItemRecipe");
		return ptr;
	}


	int NumComponentsRequired();
	int GetRequiredComponentCount(int Index);
	TEnumAsByte<EInventoryRecipeID> GetRecipeID();
};


// Class BendGame.InventoryItemSkill
// 0x0020 (0x0150 - 0x0130)
class UInventoryItemSkill : public UInventoryItem
{
public:
	TEnumAsByte<ESkillClass>                           SkillItemClass;                                           // 0x0130(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	TEnumAsByte<ESkillType>                            SkillItemType;                                            // 0x0131(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	TEnumAsByte<ESkillTier>                            SkillItemTier;                                            // 0x0132(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	TEnumAsByte<EInventorySkillID>                     UnlockSkillIDWhenAcquired;                                // 0x0133(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      bRequiresBroadcastOnLoad : 1;                             // 0x0134(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0135(0x0003) MISSED OFFSET
	struct FName                                       UnlockSkillIDWhenAcquiredName;                            // 0x0138(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	struct FString                                     UnlockRequirementDescription;                             // 0x0140(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.InventoryItemSkill");
		return ptr;
	}

};


// Class BendGame.InventoryWeaponItem
// 0x0050 (0x0180 - 0x0130)
class UInventoryWeaponItem : public UInventoryItem
{
public:
	TEnumAsByte<EWeaponType>                           WeaponType;                                               // 0x0130(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	TEnumAsByte<EInventoryAmmoID>                      AmmoID;                                                   // 0x0131(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0132(0x0002) MISSED OFFSET
	int                                                ClipSize;                                                 // 0x0134(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	TEnumAsByte<EWeaponRarity>                         WeaponRarity;                                             // 0x0138(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0139(0x0007) MISSED OFFSET
	TAssetPtr<class UClass>                            WeaponAssetSubClass;                                      // 0x0140(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)
	TArray<TEnumAsByte<EInventoryAmmoID>>              SupportedAmmoIDs;                                         // 0x0160(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst)
	TArray<class UInventoryItemWeaponPart*>            WeaponParts;                                              // 0x0170(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.InventoryWeaponItem");
		return ptr;
	}


	TEnumAsByte<EInventoryWeaponID> WeaponID();
	bool IsTrap();
	bool IsThrown();
	bool IsRock();
	bool IsRifle();
	bool IsProp();
	bool IsPistol();
	bool IsMelee();
	bool IsGun();
	bool IsExplosive();
	bool IsBait();
	class ABendWeapon* GetDefaultWeapon();
};


// Class BendGame.InventoryItemWeaponPart
// 0x0080 (0x01B0 - 0x0130)
class UInventoryItemWeaponPart : public UInventoryItem
{
public:
	TEnumAsByte<EWeaponHardPoint>                      WeaponHardPoint;                                          // 0x0130(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0131(0x0007) MISSED OFFSET
	struct FName                                       WeaponTagSetKey;                                          // 0x0138(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData01[0x50];                                      // 0x0140(0x0050) MISSED OFFSET
	TAssetPtr<class UClass>                            PartAssetSubClass;                                        // 0x0190(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.InventoryItemWeaponPart");
		return ptr;
	}


	TEnumAsByte<EWeaponPartID> GetWeaponPartID();
	TEnumAsByte<EWeaponHardPoint> GetHardPoint();
	bool CanPartGoOnWeapon(class ABendWeapon* Weapon);
};


// Class BendGame.InventoryDropTable
// 0x0018 (0x0040 - 0x0028)
class UInventoryDropTable : public UObject
{
public:
	struct FName                                       TableName;                                                // 0x0028(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<struct FInventoryDropTableEntry>            DropEntry;                                                // 0x0030(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.InventoryDropTable");
		return ptr;
	}


	bool RandomDropItem(struct FBendInventoryItemCount* outItemCount);
};


// Class BendGame.InventoryDropTableManager
// 0x0010 (0x0038 - 0x0028)
class UInventoryDropTableManager : public UObject
{
public:
	TArray<struct FCharacterClassDropTable>            CharacterDropTables;                                      // 0x0028(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.InventoryDropTableManager");
		return ptr;
	}


	class ABendInventoryPickup* SpawnPickupForCharacterSubClass(TEnumAsByte<ECharacterClass> CharacterClass, const struct FName& SubClass, const struct FTransform& Location, class AActor* pWorldOwner);
	struct FInventoryItemTag STATIC_GetRandomItemTag(TArray<struct FInventoryDropTagItem> Entries);
	struct FCharacterClassDropTable GetDropTableForClass(TEnumAsByte<ECharacterClass> dropClass);
	bool GetDropsEquippedItemForCharacterClass(TEnumAsByte<ECharacterClass> CharacterClass);
	bool DropItemForCharacterSubClass(TEnumAsByte<ECharacterClass> CharacterClass, const struct FName& SubClass, struct FBendInventoryItemCount* outItemCount);
};


// Class BendGame.MiniMapLocationComponent
// 0x0138 (0x0208 - 0x00D0)
class UMiniMapLocationComponent : public UActorComponent
{
public:
	class UTexture2D*                                  MapIcon;                                                  // 0x00D0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EMiniMapLocation>                      LocationType;                                             // 0x00D8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EMapRolloverType>                      RollOverType;                                             // 0x00D9(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EMiniMapDisplayRule>                   DisplayRule;                                              // 0x00DA(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EMiniMapEdgeDisplay>                   EdgeDisplay;                                              // 0x00DB(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EMiniMapEdgeDistance>                  EdgeDistance;                                             // 0x00DC(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00DD(0x0003) MISSED OFFSET
	struct FLinearColor                                MinimapColor;                                             // 0x00E0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                MarkerColor;                                              // 0x00F0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              IconScale;                                                // 0x0100(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0104(0x0004) MISSED OFFSET
	struct FText                                       DisplayName;                                              // 0x0108(0x0018) (Edit, BlueprintVisible)
	struct FText                                       DisplayDescription;                                       // 0x0120(0x0018) (Edit, BlueprintVisible)
	struct FString                                     locationName;                                             // 0x0138(0x0010) (ZeroConstructor, Deprecated)
	struct FString                                     LocationDescription;                                      // 0x0148(0x0010) (ZeroConstructor, Deprecated)
	struct FStringAssetReference                       LocationImage;                                            // 0x0158(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FVector                                     MarkerOffset;                                             // 0x0168(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	struct FVector                                     Position;                                                 // 0x0174(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	struct FMapLocationDetails                         MapLocation;                                              // 0x0180(0x0014) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0194(0x0004) MISSED OFFSET
	struct FMapObjectiveRegionDetails                  MapObjectiveRegion;                                       // 0x0198(0x0048) (Edit, BlueprintVisible)
	class UMaterialInstanceDynamic*                    GlobalRegionMID;                                          // 0x01E0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FName                                       LocationProxyName;                                        // 0x01E8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TArray<TEnumAsByte<EMiniMapLocationEvent>>         LocationEvents;                                           // 0x01F0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, SaveGame)
	unsigned char                                      bGetPositionFromOwner : 1;                                // 0x0200(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bHidden : 1;                                              // 0x0200(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bNew : 1;                                                 // 0x0200(0x0001) (Edit, BlueprintVisible, SaveGame)
	unsigned char                                      bNoDirectionalIndicator : 1;                              // 0x0200(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bUseSimpleMapInfoDisplay : 1;                             // 0x0200(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bUseMarkerOffset : 1;                                     // 0x0200(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst)
	unsigned char                                      bIsFastTravelLocation : 1;                                // 0x0200(0x0001) (Edit, BlueprintVisible, SaveGame)
	unsigned char                                      bSpawnProxyOnEndPlay : 1;                                 // 0x0200(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bIsLocationProxy : 1;                                     // 0x0201(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst)
	unsigned char                                      bRenderedOnMiniMap : 1;                                   // 0x0201(0x0001) (BlueprintVisible, Transient)
	unsigned char                                      bRenderWaypointMarker : 1;                                // 0x0201(0x0001) (BlueprintVisible, Transient)
	unsigned char                                      UnknownData03[0x6];                                       // 0x0202(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.MiniMapLocationComponent");
		return ptr;
	}


	void UpdateColor(const struct FLinearColor& NewColor);
	bool ShouldDisplay(bool IsOnBike);
	void SetVisibility(bool VisibleOnMiniMap, bool VisibleOnMap);
	void SetObjectiveRegionColor(const struct FLinearColor& Color);
	void SetMarkerOffset(float X, float Y);
	void SetMapObjectiveRegionDetails(const struct FMapObjectiveRegionDetails& MapObjectiveRegionDetails);
	void SetLocationType(TEnumAsByte<EMiniMapLocation> Type, bool ResetAlphaAndScale);
	void SetLocationImageTexturePath(const struct FString& Path);
	void SetLocationImageTexture(class UTexture2D* Texture);
	void SetHudAndMapVisibility(bool Visible);
	void SetAlwaysVisible(bool NewAlwaysVisible);
	void SetAlpha(float Alpha);
	bool IsNew();
	bool IsHidden();
	bool HasLocationImage();
	struct FVector GetPosition();
	TAssetPtr<class UTexture2D> GetLocationTextureAsset();
	class UTexture2D* GetLocationTexture();
	struct FString GetLocationName();
	struct FString GetLocationDescription();
	void CacheLocationTexture(bool FreeCache);
};


// Class BendGame.BendTrophyManager
// 0x00C8 (0x00F0 - 0x0028)
class UBendTrophyManager : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0028(0x0010) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnTrophyUnlockedTelemetry;                                // 0x0038(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class UDataTable*                                  AchievementTable;                                         // 0x0048(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      bImportTable : 1;                                         // 0x0050(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	unsigned char                                      bDirty : 1;                                               // 0x0050(0x0001) (Edit, BlueprintVisible, Transient, EditConst)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0051(0x0007) MISSED OFFSET
	TArray<struct FBendTrophy>                         Trophies;                                                 // 0x0058(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FName>                               WeaponLockerTagNames;                                     // 0x0068(0x0010) (Edit, BlueprintVisible, ZeroConstructor, SaveGame)
	unsigned char                                      UnknownData02[0x78];                                      // 0x0078(0x0078) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendTrophyManager");
		return ptr;
	}


	void UpdateWelcomeToThePartyPal(int AddedCount);
	void UpdateTrophyCounterTiedToGameplayDatabase(const struct FGameplayTag& TheTrophyTag, const struct FName& DatabaseID, int AddedCount);
	void UpdateSurvivingIsntLiving(int AddedCount);
	void UpdateStealthKill(int AddedCount);
	void UpdateOldReliable(int AddedCount);
	void UpdateLockerWeaponCounts(int AddedCount);
	void UpdateLendMeYourEars(int AddedCount);
	void UpdateInventorySponge(int AddedCount);
	void UpdateGraveRobber(int AddedCount);
	void UpdateGoKickRocks(int AddedCount);
	void UpdateEncampmentJobs(int AddedCount);
	void UpdateDIYOregonian(int AddedCount);
	void UpdateCollectibles(int AddedCount);
	void UpdateArtOfBikeRepair(int AddedCount);
	void UpdateAllSkills(int AddedCount);
	void Unlock(const struct FGameplayTag& TrophyTag);
	void TrophyUnlocked(const struct FBendTrophy& Trophy, bool DisplayWidget);
	void SyncUnlockedTrophies();
	bool SetScreenShotForTrophy(const struct FGameplayTag& TrophyTag);
	void SetCounter(const struct FGameplayTag& TrophyTag, int Value);
	void ResetTrophyData();
	void RegisterWeaponLockerTag(const struct FGameplayTag& WeaponTag, const struct FGameplayTag& AchievementTag);
	void PostMissionAwardFreakerKills();
	void OnUnlockedTrophiesRead(TArray<int> UnlockedIDs);
	void OnTrophyScreenShotEnd();
	void OnTrophyScreenShotBegin();
	void OnTrophyDataChanged();
	void OnRecipeCrafted();
	bool IsUnlocked(const struct FGameplayTag& TrophyTag);
	void InitializeBlueprintBinds();
	class UBendTrophyManager* STATIC_GetTrophyManager();
	struct FBendTrophy GetTrophy(const struct FGameplayTag& TrophyTag);
	void FreakerKilledByPlayerUpdate();
	void AdjustCounter(const struct FGameplayTag& TrophyTag, int Amount);
};


// Class BendGame.BendGameplayDatabase
// 0x0050 (0x0078 - 0x0028)
class UBendGameplayDatabase : public UObject
{
public:
	unsigned char                                      UnknownData00[0x50];                                      // 0x0028(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendGameplayDatabase");
		return ptr;
	}


	struct FVector GetVector(TEnumAsByte<EGameDatabaseCategory> Category, const struct FName& Key);
	struct FString GetString(TEnumAsByte<EGameDatabaseCategory> Category, const struct FName& Key);
	int GetInt(TEnumAsByte<EGameDatabaseCategory> Category, const struct FName& Key);
	float GetFloat(TEnumAsByte<EGameDatabaseCategory> Category, const struct FName& Key);
	bool GetBool(TEnumAsByte<EGameDatabaseCategory> Category, const struct FName& Key);
	bool DeleteString(TEnumAsByte<EGameDatabaseCategory> Category, const struct FName& Key);
	bool DeleteInt(TEnumAsByte<EGameDatabaseCategory> Category, const struct FName& Key);
	bool DeleteFVector(TEnumAsByte<EGameDatabaseCategory> Category, const struct FName& Key);
	bool DeleteFloat(TEnumAsByte<EGameDatabaseCategory> Category, const struct FName& Key);
	bool DeleteEntry(TEnumAsByte<EGameDatabaseCategory> Category, const struct FName& Key);
	bool DeleteBool(TEnumAsByte<EGameDatabaseCategory> Category, const struct FName& Key);
	bool ContainsVector(TEnumAsByte<EGameDatabaseCategory> Category, const struct FName& Key);
	bool ContainsString(TEnumAsByte<EGameDatabaseCategory> Category, const struct FName& Key);
	bool ContainsInt(TEnumAsByte<EGameDatabaseCategory> Category, const struct FName& Key);
	bool ContainsFloat(TEnumAsByte<EGameDatabaseCategory> Category, const struct FName& Key);
	bool ContainsBool(TEnumAsByte<EGameDatabaseCategory> Category, const struct FName& Key);
	void AddVector(TEnumAsByte<EGameDatabaseCategory> Category, const struct FName& Key, const struct FVector& Value);
	void AddString(TEnumAsByte<EGameDatabaseCategory> Category, const struct FName& Key, const struct FString& Value);
	void AddInt(TEnumAsByte<EGameDatabaseCategory> Category, const struct FName& Key, int Value);
	void AddFloat(TEnumAsByte<EGameDatabaseCategory> Category, const struct FName& Key, float Value);
	void AddBool(TEnumAsByte<EGameDatabaseCategory> Category, const struct FName& Key, bool Value);
};


// Class BendGame.BendSaveGame
// 0x0288 (0x0340 - 0x00B8)
class UBendSaveGame : public USaveGame
{
public:
	int                                                SaveVersion;                                              // 0x00B8(0x0004) (ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00BC(0x0004) MISSED OFFSET
	struct FDateTime                                   SaveDateTime;                                             // 0x00C0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, SaveGame)
	TEnumAsByte<ESaveGameType>                         SaveType;                                                 // 0x00C8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x00C9(0x0007) MISSED OFFSET
	struct FString                                     SaveGameID;                                               // 0x00D0(0x0010) (ZeroConstructor, SaveGame)
	struct FString                                     PersistentMapFileName;                                    // 0x00E0(0x0010) (ZeroConstructor, SaveGame)
	TArray<struct FName>                               StreamingMapFileNames;                                    // 0x00F0(0x0010) (ZeroConstructor, SaveGame)
	struct FVector                                     PlayerLocation;                                           // 0x0100(0x000C) (ZeroConstructor, SaveGame, IsPlainOldData)
	struct FRotator                                    PlayerRotation;                                           // 0x010C(0x000C) (ZeroConstructor, SaveGame, IsPlainOldData)
	struct FVector                                     BuddyLocation;                                            // 0x0118(0x000C) (ZeroConstructor, SaveGame, IsPlainOldData)
	struct FRotator                                    BuddyRotation;                                            // 0x0124(0x000C) (ZeroConstructor, SaveGame, IsPlainOldData)
	struct FVector                                     PlayerVehicleLocation;                                    // 0x0130(0x000C) (ZeroConstructor, SaveGame, IsPlainOldData)
	struct FRotator                                    PlayerVehicleRotation;                                    // 0x013C(0x000C) (ZeroConstructor, SaveGame, IsPlainOldData)
	struct FVector                                     BuddyVehicleLocation;                                     // 0x0148(0x000C) (ZeroConstructor, SaveGame, IsPlainOldData)
	struct FRotator                                    BuddyVehicleRotation;                                     // 0x0154(0x000C) (ZeroConstructor, SaveGame, IsPlainOldData)
	bool                                               BuddyIsOnVehicle;                                         // 0x0160(0x0001) (ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0161(0x0007) MISSED OFFSET
	TArray<struct FGameDatabaseSaveRecord>             GameDatabaseRecords;                                      // 0x0168(0x0010) (ZeroConstructor, SaveGame)
	TArray<struct FPermFlashbackLevelSaveRecord>       FlashbackLevelRecords;                                    // 0x0178(0x0010) (ZeroConstructor, SaveGame)
	struct FGuid                                       PlaythroughGUID;                                          // 0x0188(0x0010) (ZeroConstructor, SaveGame, IsPlainOldData)
	float                                              TimeSincePlaythroughStart;                                // 0x0198(0x0004) (ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x019C(0x0004) MISSED OFFSET
	struct FString                                     SaveDescription;                                          // 0x01A0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, SaveGame)
	float                                              PercentageComplete;                                       // 0x01B0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x01B4(0x0004) MISSED OFFSET
	struct FBendSaveGameImageData                      ImageData;                                                // 0x01B8(0x0020) (SaveGame)
	struct FVector                                     LastKnownPlayerPosition;                                  // 0x01D8(0x000C) (ZeroConstructor, SaveGame, IsPlainOldData)
	bool                                               SaveIsInAMission;                                         // 0x01E4(0x0001) (ZeroConstructor, SaveGame, IsPlainOldData)
	TEnumAsByte<EGameDifficulty>                       SaveDifficulty;                                           // 0x01E5(0x0001) (ZeroConstructor, SaveGame, IsPlainOldData)
	bool                                               IsNewGamePlusSave;                                        // 0x01E6(0x0001) (ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData05[0x1];                                       // 0x01E7(0x0001) MISSED OFFSET
	struct FNewGamePlusCarryOverData                   NewGamePlusCarryOverData;                                 // 0x01E8(0x0158) (SaveGame)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendSaveGame");
		return ptr;
	}


	void Reset();
	class UTexture2D* GetSaveImage();
};


// Class BendGame.BendVehicleMeshAttachmentSpecs
// 0x0098 (0x00C0 - 0x0028)
class UBendVehicleMeshAttachmentSpecs : public UObject
{
public:
	TEnumAsByte<EBendVehiclePartLevel>                 PartLevel;                                                // 0x0028(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0029(0x0007) MISSED OFFSET
	class UStaticMesh*                                 StaticMesh;                                               // 0x0030(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class USkeletalMesh*                               SkeletalMesh;                                             // 0x0038(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      bSkeletalMeshFollowsParentAnimation : 1;                  // 0x0040(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      bGenerateRandomStats : 1;                                 // 0x0040(0x0001) (Edit)
	unsigned char                                      bAlwaysTick : 1;                                          // 0x0040(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0041(0x0007) MISSED OFFSET
	struct FName                                       SocketName;                                               // 0x0048(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                Health;                                                   // 0x0050(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              WaterDamageResistance;                                    // 0x0054(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<EMotorcyclePartType>                   ParentPart;                                               // 0x0058(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0059(0x0007) MISSED OFFSET
	TArray<class UMaterialInstance*>                   MaterialOverrides;                                        // 0x0060(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	class UClass*                                      AnimClass;                                                // 0x0070(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVehiclePartStats                           VehiclePartStats;                                         // 0x0078(0x0038) (Edit, DisableEditOnInstance)
	TArray<struct FInventoryItemStatProperty>          PropertyStatEntries;                                      // 0x00B0(0x0010) (Edit, BlueprintVisible, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendVehicleMeshAttachmentSpecs");
		return ptr;
	}


	bool SetPartStats(const struct FInventoryItemStats& Stats);
	void OnVehiclePartAttached(class AVehiclePawn* VehiclePawn);
	float GetWaterDamageResistance();
	class UTireType* GetTireType();
	bool GetPartStats(struct FInventoryItemStats* Stats);
	float GetPartHealthIncrease();
	float GetEngineNoiseReductionPercent();
	float GetDamageReductionPercent();
	TArray<struct FGameplayTag> GetAmmoStorageTags();
	TArray<int> GetAmmoStorageQuantities();
	bool STATIC_CreateVehiclePart(class UInventoryItemMotorcyclePart* Part, bool GenerateStats, struct FInventoryPart* OutPart);
};


// Class BendGame.BendLevelScriptActor
// 0x0050 (0x03A8 - 0x0358)
class ABendLevelScriptActor : public ALevelScriptActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0358(0x0008) MISSED OFFSET
	TArray<struct FMissionBookKeepingEntry>            m_BookKeepingData;                                        // 0x0360(0x0010) (ZeroConstructor, SaveGame)
	TArray<struct FVehicleMissionBookKeepingEntry>     m_BookKeepingDataWithVehicles;                            // 0x0370(0x0010) (ZeroConstructor, SaveGame)
	int                                                m_NextBookKeepingID;                                      // 0x0380(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0384(0x0004) MISSED OFFSET
	TArray<struct FLevelWaitActionEntry>               m_LevelWaitActionEntries;                                 // 0x0388(0x0010) (ZeroConstructor)
	TArray<struct FLevelWaitActionEntry>               m_CheckpointedLevelWaitActionEntries;                     // 0x0398(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendLevelScriptActor");
		return ptr;
	}


	void STATIC_Wait(class UObject* WorldContextObject, float Duration, const struct FLatentActionInfo& LatentInfo);
	void SetupBookKeepingWithVehicles(TArray<class ABendSpawnLocationBase*> SpawnLocations, const struct FScriptDelegate& OnSpawned, const struct FScriptDelegate& OnKilled, const struct FScriptDelegate& OnDespawned, int* BookKeepingID);
	void SetupBookKeepingForAreaWithVehicles(class ABendAmbientSpawnArea* SpawnArea, const struct FScriptDelegate& OnSpawned, const struct FScriptDelegate& OnKilled, const struct FScriptDelegate& OnDespawned, int* BookKeepingID);
	void SetupBookKeepingForArea(class ABendAmbientSpawnArea* SpawnArea, const struct FScriptDelegate& OnSpawned, const struct FScriptDelegate& OnKilled, const struct FScriptDelegate& OnDespawned, int* BookKeepingID);
	void SetUpBookKeeping(TArray<class ABendSpawnLocationBase*> SpawnLocations, const struct FScriptDelegate& OnSpawned, const struct FScriptDelegate& OnKilled, const struct FScriptDelegate& OnDespawned, int* BookKeepingID);
	void RestoreWaitActionEntries();
	void ReadyToCheckpointSaveAfterMidCinematic(const struct FName& CinematicLevel);
	void ReadyForInitialCheckpoint();
	void PlayerDiedHandler(float ActualDamage, class AController* Killer, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, const struct FName& BoneName, const struct FVector& Momentum, class UDamageType* DamageType, class AActor* DamageCauser);
	void OnResumeAfterMidLevelCinematic(const struct FName& CinematicLevel);
	void OnRestoreCheckpoint(const struct FString& SaveGameID);
	void OnMissionBegin();
	void OnMidCinematicEnded(const struct FName& CinematicLevel);
	void OnCheckpointLoaded(const struct FString& SaveGameID);
	void HandleOnSpawnWithVehicle(class ABendAIController* Controller, class ABendPawn* Pawn, class AVehiclePawn* VehiclePawn, class ABendSpawnLocationBase* SpawnLocation);
	void HandleOnSpawn(class ABendAIController* Controller, class ABendPawn* Pawn, class ABendSpawnLocationBase* SpawnLocation);
	void HandleOnResumeGamplayAfterMidCinematic(const struct FString& Message);
	void HandleOnMissionCinematicSkipped(const struct FName& Message);
	void HandleOnMissionCinematicEnded(const struct FName& Message);
	void HandleOnMissionCinematicBegan(const struct FName& Message);
	void HandleOnMissionBegin(const struct FString& Message);
	void HandleOnKilled(class ABendPawn* Pawn, class ABendSpawnLocationBase* SpawnLocation);
	void HandleOnDespawned(class ABendSpawnLocationBase* SpawnLocation);
	void HandleOnCheckpoint(const struct FString& SaveGameID);
	void HandleOnActiveMissionSet(class ABendGameScriptBase* MissionScriptBase);
	void HandleDebugOnTeleportToCheckpoint(int Checkpoint);
	struct FBookKeepingData GetBookKeepingData(int BookKeepingID);
	void DeleteBookKeepingByID(int BookKeepingID, bool* Successful);
	void DebugOnTeleportToCheckpoint(int Checkpoint);
	void CheckpointWaitActionEntries();
	void CancelAllWaitCalls();
};


// Class BendGame.BendTriggerBox
// 0x0010 (0x0368 - 0x0358)
class ABendTriggerBox : public ATriggerBox
{
public:
	struct FScriptMulticastDelegate                    OnActorBeginOverlapWithReturnSelf;                        // 0x0358(0x0010) (Edit, BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendTriggerBox");
		return ptr;
	}

};


// Class BendGame.BendGameMission
// 0x06B8 (0x0A00 - 0x0348)
class ABendGameMission : public AActor
{
public:
	struct FString                                     StartGameAtMissionOverride;                               // 0x0348(0x0010) (BlueprintVisible, ZeroConstructor, Config)
	TAssetPtr<class UClass>                            MissionTriggerClassReference;                             // 0x0358(0x0020) (Edit, DisableEditOnInstance)
	bool                                               ReloadingJobFailure;                                      // 0x0378(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0379(0x0007) MISSED OFFSET
	class UBendStoryLineData*                          StoryLineData;                                            // 0x0380(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<struct FBendStoryLinesBasicDataForUI>       BasicStoryLineDataFromChainedMissions;                    // 0x0388(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, SaveGame)
	bool                                               IsInDLCChallengeMission;                                  // 0x0398(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0399(0x0007) MISSED OFFSET
	TArray<struct FBendCinematicLevelData>             CinematicQue;                                             // 0x03A0(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<class UObject*>                             CinematicQueueCorrespondingDatas;                         // 0x03B0(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FBendCinematicLevelData                     PreviousCinematicData;                                    // 0x03C0(0x00D8) (Edit, BlueprintVisible)
	class UObject*                                     PreviousCinematicAsset;                                   // 0x0498(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FailingTimeMax;                                           // 0x04A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x04A4(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnMissionEnding_MM;                                       // 0x04A8(0x0010) (Edit, BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnCinematicEnded_MM;                                      // 0x04B8(0x0010) (Edit, BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnCinematicStarted_MM;                                    // 0x04C8(0x0010) (Edit, BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnFlashbackCinematicToggled;                              // 0x04D8(0x0010) (Edit, BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnFadedToBlack_MM;                                        // 0x04E8(0x0010) (Edit, BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnFadeToBlackStart_MM;                                    // 0x04F8(0x0010) (Edit, BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnFadingFinished_MM;                                      // 0x0508(0x0010) (Edit, BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnFadeFromBlackStart_MM;                                  // 0x0518(0x0010) (Edit, BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnMissionComplete_MM;                                     // 0x0528(0x0010) (Edit, BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnMissionOverAndNoChainedMission;                         // 0x0538(0x0010) (Edit, BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnRewardScreenClosed;                                     // 0x0548(0x0010) (Edit, BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnTeleportToCheckpoint_MM;                                // 0x0558(0x0010) (Edit, BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnMissionUnlocked_MM;                                     // 0x0568(0x0010) (Edit, BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnMissionBegin_MM;                                        // 0x0578(0x0010) (Edit, BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnWeatherChangeRequest_MM;                                // 0x0588(0x0010) (Edit, BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnCinematicSkipped_MM;                                    // 0x0598(0x0010) (Edit, BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnMissionSpecialEvent;                                    // 0x05A8(0x0010) (Edit, BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnNewMissionOrJobTracked;                                 // 0x05B8(0x0010) (Edit, BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnTriggerMissionViaMissionTrigger;                        // 0x05C8(0x0010) (Edit, BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDemoJumpPoint;                                          // 0x05D8(0x0010) (Edit, BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnCinematicStartLoading_Telemetry;                        // 0x05E8(0x0010) (Edit, BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnCinematicStartPlaying_Telemetry;                        // 0x05F8(0x0010) (Edit, BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnCinematicBeginTelemetry;                                // 0x0608(0x0010) (Edit, BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnCinematicEndTelemetry;                                  // 0x0618(0x0010) (Edit, BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnSetCinematicTimeAndWeather;                             // 0x0628(0x0010) (Edit, BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnFailureOptionalSkipActivated;                           // 0x0638(0x0010) (Edit, BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnLeftMissionFailureZone;                                 // 0x0648(0x0010) (Edit, BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnReturnFromFailureZone;                                  // 0x0658(0x0010) (Edit, BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnFailedViaFailureZone;                                   // 0x0668(0x0010) (Edit, BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    EquipChallengeItems;                                      // 0x0678(0x0010) (Edit, BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDLCChallengeComplete;                                   // 0x0688(0x0010) (Edit, BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDLCChallengeFail;                                       // 0x0698(0x0010) (Edit, BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDlcChallengeRetry;                                      // 0x06A8(0x0010) (Edit, BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDLCChallengeQuitToMainMenu;                             // 0x06B8(0x0010) (Edit, BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable)
	class UBendMissionData*                            CurrentTrackedMission;                                    // 0x06C8(0x0008) (BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	bool                                               RecordAllCinematicsDebugActive;                           // 0x06D0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               RecordAllCinematicsFinished;                              // 0x06D1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               RecordCinematicsRecordEnabled;                            // 0x06D2(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               RecordCinematicsPlayDisabled;                             // 0x06D3(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              RecordCinematicsTimeout;                                  // 0x06D4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	int                                                RecordCinematicsBatchCount;                               // 0x06D8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	int                                                RecordCinematicsBatchId;                                  // 0x06DC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	int                                                RecordCinematicsBatchOffset;                              // 0x06E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	int                                                RecordCinematicsBatchMax;                                 // 0x06E4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	TArray<struct FString>                             RecordAllCinematicsNames;                                 // 0x06E8(0x0010) (Edit, BlueprintVisible, ZeroConstructor, Transient)
	TArray<struct FKey>                                GamepadKeys;                                              // 0x06F8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	class ABendGameScriptBase*                         ActiveMissionScript;                                      // 0x0708(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     ActiveMissionApproximateStartLocation;                    // 0x0710(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x071C(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnActiveMissionScriptSet;                                 // 0x0720(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class ABendJobManager*                             JobManagerPointer;                                        // 0x0730(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EMissionIDs>                           StartGameAtMission;                                       // 0x0738(0x0001) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	bool                                               DebugMissionChaining;                                     // 0x0739(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x6];                                       // 0x073A(0x0006) MISSED OFFSET
	class UBendMissionData*                            ActiveMissionData;                                        // 0x0740(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData)
	TArray<class ABendGameMissionTrigger*>             UnlockedMissionTriggers;                                  // 0x0748(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	class AMatineeActor*                               CurrentMatinee;                                           // 0x0758(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FString                                     FadeToBlackMessage;                                       // 0x0760(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	bool                                               CanSkipMatinee;                                           // 0x0770(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               ChangeFadingColorActive;                                  // 0x0771(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               CurrentlyFadeTypeBlack;                                   // 0x0772(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               StopBlackScreenMidway;                                    // 0x0773(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               CinematicSkipped;                                         // 0x0774(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               BlockSynchronousStreamingWhenNextCinPlays;                // 0x0775(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData05[0x2];                                       // 0x0776(0x0002) MISSED OFFSET
	class UMaterial*                                   MovieMat;                                                 // 0x0778(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UMediaPlayer*                                MovieFile;                                                // 0x0780(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FTimerHandle                                HandleForMovieCin;                                        // 0x0788(0x0004) (Edit, BlueprintVisible, DisableEditOnInstance)
	unsigned char                                      UnknownData06[0x4];                                       // 0x078C(0x0004) MISSED OFFSET
	class USoundCue*                                   MovieSound;                                               // 0x0790(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FTimerHandle                                SavingTimer;                                              // 0x0798(0x0004) (Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                               CinematicDebuggingActive;                                 // 0x079C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData07[0x3];                                       // 0x079D(0x0003) MISSED OFFSET
	TArray<TEnumAsByte<EMissionIDs>>                   MissionIDsComparisonArray;                                // 0x07A0(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FName>                               LevelArrayOnRestart;                                      // 0x07B0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class UBendMissionData*>                    UnlockedMissionData;                                      // 0x07C0(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<class UBendMissionData*>                    WaitingOnTimeMissionData;                                 // 0x07D0(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FTransform                                  MissionEndPlayerTransform;                                // 0x07E0(0x0030) (Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData)
	struct FTransform                                  MissionEndBikeTransform;                                  // 0x0810(0x0030) (Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData)
	bool                                               MissionEndShouldBeOnBike;                                 // 0x0840(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData08[0x7];                                       // 0x0841(0x0007) MISSED OFFSET
	TArray<class UBendEncampmentData*>                 EncampmentDataAssets;                                     // 0x0848(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class UBendMissionData*>                    MissionsCantQuitOutOf;                                    // 0x0858(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FName>                               DebugAllCinematics;                                       // 0x0868(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	int                                                DebugIterator;                                            // 0x0878(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               Resetting;                                                // 0x087C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData09[0x3];                                       // 0x087D(0x0003) MISSED OFFSET
	struct FVector                                     BeforeCinLocation;                                        // 0x0880(0x000C) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData10[0x4];                                       // 0x088C(0x0004) MISSED OFFSET
	TArray<struct FName>                               DebugCinematicsBatch;                                     // 0x0890(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class UBendMissionData*>                    DebugCinematicsParallel;                                  // 0x08A0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class UBendMissionData*>                    BatchCinematicsParallel;                                  // 0x08B0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	class UBendMissionData*                            DebugMissionContainingCin;                                // 0x08C0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<struct FName>                               LevelsToUnloadLoadAfterChainedIntroCin;                   // 0x08C8(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	bool                                               CinematicLoaded;                                          // 0x08D8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               NextCinematicRequiresSynchStreamingBecauseSaveLoadorDebug;// 0x08D9(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               AutoSkipCinematics;                                       // 0x08DA(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData11[0x1];                                       // 0x08DB(0x0001) MISSED OFFSET
	struct FTimerHandle                                JobFailTimer;                                             // 0x08DC(0x0004) (Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                               InPostSaveGameLoad;                                       // 0x08E0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               FadingToNextMission;                                      // 0x08E1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData12[0x6];                                       // 0x08E2(0x0006) MISSED OFFSET
	TArray<struct FBendStoryLinesBasicDataForUI>       StoryLinesWaitingForUpdate;                               // 0x08E8(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	bool                                               EndingMissionRewards;                                     // 0x08F8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData13[0x3];                                       // 0x08F9(0x0003) MISSED OFFSET
	int                                                PlayerFailureCountSinceLastSave;                          // 0x08FC(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               OptionalSkipOnPlayerFailureActive;                        // 0x0900(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData14[0x3];                                       // 0x0901(0x0003) MISSED OFFSET
	int                                                PlayerFailureCountSinceSkipActive;                        // 0x0904(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       DontIncreaseFailureCounterManualOverrideID;               // 0x0908(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       FailureCurrentSkipID;                                     // 0x0910(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData)
	struct FVector                                     PointToCheckAroundForIncreaseCount;                       // 0x0918(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData)
	bool                                               UseDistanceCheckForIncreasingFailCounts;                  // 0x0924(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData15[0x3];                                       // 0x0925(0x0003) MISSED OFFSET
	float                                              DistanceToCheckAgainstForFailCounts;                      // 0x0928(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData16[0x4];                                       // 0x092C(0x0004) MISSED OFFSET
	struct FName                                       LastPromptedFailureOptionalSkip;                          // 0x0930(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               FailureOptionalSkipNowAvailableToThePlayer;               // 0x0938(0x0001) (BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	bool                                               IsMissionActive;                                          // 0x0939(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               DebugCreatingDemoJumpPoint;                               // 0x093A(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData17[0x5];                                       // 0x093B(0x0005) MISSED OFFSET
	TArray<class UDataAsset*>                          Debug_UXTestingAssets;                                    // 0x0940(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	bool                                               ShouldUnhideHUDAtEndOfManualFade;                         // 0x0950(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ECinematicFadingTypes>                 CurrentCinematicType;                                     // 0x0951(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<EMissionCategories>                    CurrentEpisode;                                           // 0x0952(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData18[0x5];                                       // 0x0953(0x0005) MISSED OFFSET
	TArray<class UBendMissionData*>                    MissionDataInOrder;                                       // 0x0958(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData19[0x10];                                      // 0x0968(0x0010) MISSED OFFSET
	float                                              CurrentCinematicSkipTime;                                 // 0x0978(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SkipTimeSinceLastInput;                                   // 0x097C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               DisplayedSkipButton;                                      // 0x0980(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               CanQuitMission;                                           // 0x0981(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               CinematicActive;                                          // 0x0982(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               FadingFromBlack;                                          // 0x0983(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               CurrentlyChainingMissions;                                // 0x0984(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               PlayerPawnCurrentlyDead;                                  // 0x0985(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               MissionAndJobProgressionBlocked;                          // 0x0986(0x0001) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData20[0x1];                                       // 0x0987(0x0001) MISSED OFFSET
	class UPostProcessComponent*                       FadingPostProcess_CODE;                                   // 0x0988(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UPostProcessComponent*                       FailurePostProcess_CODE;                                  // 0x0990(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	bool                                               ReturningToMenuAfterDLCChallenge;                         // 0x0998(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData21[0x67];                                      // 0x0999(0x0067) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendGameMission");
		return ptr;
	}


	bool UpdateUnlockedMissions(TEnumAsByte<EMissionIDs> MissionID, TEnumAsByte<EMissionStates> NewState);
	void UpdateFailureCounts(bool Reset);
	void UpdateCurrentEpisode(TEnumAsByte<EMissionCategories> NewEpisode);
	void UnlockMissionFromID(TEnumAsByte<EMissionIDs> MissionID, bool* Success);
	void UnloadLevels(TArray<struct FName> Levels);
	bool TurnOnOptionalSkipOnPlayerMultipleFailure(const struct FVector& PointToCheckAround, bool useDistanceCheck, float DistanceFromPoint, bool enable, const struct FName& SkipID, bool DontReactivateIfActive);
	bool TrackAJobOrMission(class UObject* DataAsset, bool OverrideCurrentTracked);
	bool TemporaryEnableBlackScreenPost();
	void TeleportToCheckpoint(int Checkpoint);
	bool StoreAllMissionTriggers();
	void StopFading();
	void StartRecordAllCinematics();
	void StartMissionFromID(TEnumAsByte<EMissionIDs> MissionID, bool OnlyLoadIfUnlocked, bool* Success);
	void StartFading();
	bool StartEndingMission();
	void StartEndingDLCMission();
	void StartChainedMissionOnDelay(TEnumAsByte<EMissionIDs> MissionID);
	void SkipCurrentCinematic();
	void SetNewEndingCinematicLevel(class UBendMissionData* MissionData, const struct FName& NewEndingCin);
	void SetIsInDLCChallengeMission(bool bValue);
	bool SetCustomWorldSettings();
	void SetCurrentMatineeParams();
	bool SetCurrentCinematicLevelsToLoad();
	bool SetActiveMissionScript(class ABendGameScriptBase* Script);
	struct FString ReturnFormattedListOfCinematics();
	void ResumeAfterPostChallengeMenu(bool ReturningToMenu);
	bool ResetWorldSettingsToDefault();
	bool RequestCinematicToStart(class AMatineeActor* TheMatinee, class AActor* SafeTeleportPoint);
	void RemoveCinematicSkipButton();
	bool ReloadBecauseOfJobFailure(TEnumAsByte<EMissionFailureSubject> Subject, TEnumAsByte<EMissionFailureType> Reason, bool DisplayFailReason);
	bool PullAndStoreAllMissionAndJobRewards();
	void PreLoadCinematicLevelMatineeActor(const struct FName& CinID);
	void PreLoadCinematicLevelByID(const struct FName& CinID);
	bool PlayNextCinematicInQue();
	void PlayMissionCinematicByID(const struct FName& CinematicID, class UBendMissionData* OverrideMissionData);
	void PlayJobCinematicByID(class UJobClassInfo* JobsData, const struct FName& CinematicID);
	void OWVOUnlockMission();
	void OnWaitForPostChallengeWidgets();
	void OnLiveActorSwapComplete(TArray<struct FSwappedActorInfo> LiveSwappedActorInfos);
	void ManuallyOverrideFailureCounterActive(const struct FName& SkipID, bool DisableCounter);
	void LoadInLevelsAndPlayCinematic();
	void JobManagerLoaded();
	bool IsInProcessofLoadingSaveOrCheckpoint();
	bool IsCinematicSkippable();
	bool IsCinematicInQue(const struct FName& CinematicID);
	void HandlePlayerDeathAndRespawning();
	void HandleMidCin(bool EndOfCinematic);
	void HandleIntroCin(bool EndOfCinematic);
	void HandleEndingCin(bool EndOfCinematic);
	bool GoToFirstFrameOfBlackScreen();
	bool GiveStorylineRewards();
	bool GiveMissionRewards(class UBendMissionData* MissionData);
	class UBendStoryLineData* GetStoryLineData();
	class ABendGameMissionTrigger* GetMissionTriggerFromMissionData(class UBendMissionData* MissionData);
	class UBendMissionData* GetMissionDataFromIDNew(TEnumAsByte<EMissionIDs> MissionID);
	void GetIsMissionCompleteFromID(class UBendMissionData* MissionData, bool* Completed, TEnumAsByte<EMissionStates>* CurrentState);
	bool GetIsMissionCompleted(class UBendMissionData* MissionData);
	bool GetIsMissionAndJobProgressionBlocked();
	bool GetIsMissionActive();
	bool GetIsInDLCChallengeMission();
	bool GetIsCinematicActive();
	bool GetIsBlackScreenActive();
	class UPostProcessComponent* GetFailurePostProcess();
	float GetFailureMaxTime();
	class UPostProcessComponent* GetFadingPostProcess();
	class UObject* GetCurrentTrackedMissionOrJob();
	TEnumAsByte<EMissionCategories> GetCurrentEpisode();
	TEnumAsByte<EDebugDemoTypes> GetCurrentDemoType();
	struct FBendCinematicLevelData GetCurrentCinematicLevelData();
	struct FName GetCurrentCinematicLevel();
	class ABendGameMissionTrigger* GetCurrentActiveMissionTrigger();
	class ABendGameScriptBase* GetCurrentActiveMissionScript();
	struct FText GetCurrentActiveMissionNameText();
	void GetCurrentActiveMission(TEnumAsByte<EMissionIDs>* MissionID);
	struct FText GetChapterNameFromEpisode(TEnumAsByte<EMissionCategories> Act);
	bool GetCanQuitMission();
	TArray<class ABendGameMissionTrigger*> GetAllTheMissionTriggers();
	TArray<struct FBendStoryLinesBasicDataForUI> GetAllChainedStoryLineData();
	TArray<struct FName> GetAllAssociatedActiveMissionLevels();
	TArray<class UBendMissionData*> GetAllActiveOrUnlockedMissionDatas();
	class UBendMissionData* GetActiveMissionData();
	void ForceUpdateToNextMatineeAndPlay(class AMatineeActor* TheMatinee, bool PlayMatinee, bool HandleSkipping);
	bool FinishEndingMission();
	bool FinishEndingDLCChallenge();
	int FindCinematicOfTypeFromList(TArray<struct FBendCinematicLevelData> CinematicData, TEnumAsByte<ECinematicFadingTypes> CinType);
	int FindCinematicByIDFromList(TArray<struct FBendCinematicLevelData> CinematicData, const struct FName& CinID);
	bool FigureOutNextJobOrMissionToAutoTrack();
	bool FadeInStarted();
	void FadeInPostProcessToCin();
	bool FadeFromBlackStart();
	bool FadeFromBlackDone();
	bool FadedIn();
	void DontSynchStreamWhenPlayingNextCinematic(bool BlockSynchStream);
	void DisplayCinematicSkipButton();
	void DelayedMainMenuCall();
	void DebugUXTestingScreen(class UDataAsset* AssetRelated);
	bool DebugStartJobOrMissionFromExecutableString();
	bool DebugSetupSkillsAndData(class UBendMissionData* MissionData);
	bool DebugSetAllMissionPreReqsToComplete(class UBendMissionData* TheData, bool IncludeSelf);
	bool DebugRequestCinematicMovieStart(class UMaterial* MovieMaterial, class UMediaPlayer* MovieFilea, class USoundCue* MovieSounda);
	bool DebugLoadWorldDemo(const struct FName& RowName, class UBendMissionData* OverrideMission, bool DoTeleport, bool UseOverridenData, bool SettingCompletedInsteadOfUnlocked, TEnumAsByte<EMissionCategories> OverrideCategory, TArray<class UJobClassInfo*>* OverrideJobData);
	bool DebugLoadMissionNow(TEnumAsByte<EMissionIDs> MissionID);
	void DebugEndMovieFile();
	bool DebugCompleteAllObjectives(class UBendMissionData* MissionData);
	void CollectAndAggregateStoryLines();
	void ClearChainedStoryLineData();
	bool CinematicUnloaded();
	bool CinematicHasEnded();
	bool CheckTimeWaitToUnlockPreReq(class UBendMissionData* MissionData);
	bool CheckReLockReUnlockPreReqs(class UBendMissionData* MissionData);
	bool CheckMissionDataPreReqs(TArray<class UBendMissionData*> MissionData);
	bool CheckIfPlayerCinematicPositionValid();
	bool CheckIfInGoodStateToSave();
	bool CheckIfAutoFailMission(class UBendMissionData* MissionData);
	bool CheckForMissionsOnHourChange();
	bool CheckForAnyNewActiveMissions();
	bool CheckConditionObjectPreReqs(class UBendMissionData* MissionData);
	bool CheckAllPreReqs(class UBendMissionData* MissionData, TEnumAsByte<EMissionPreReqFailureReasons>* FailureReason);
	bool ChangeMissionTimeAndWeatherByID(const struct FName& TimeAndWeatherID);
	bool ChangeMissionTimeAndWeather(int TimeAndWeatherIndex);
	bool ChangeCinematicFadingColor(TEnumAsByte<ECinematicFadingColors> FadeType, bool ChangeWhenFadingDone);
	bool ChangeBlackScreenFadeSpeed(float NewSpeed);
	void ChallengeMissionRestarting(TEnumAsByte<EMissionIDs> MissionID);
	void ChainingSetupStartOfMissionSettings();
	bool CallFadeOutOfBlack(bool UnhideHudAtEnd);
	bool CallFadeIntoBlack(bool PauseInBlack, const struct FString& Message, bool UnhideHudAtEnd);
	bool BlackScreenTickChecks();
	bool BeginMission(TEnumAsByte<EMissionIDs> MissionID);
	bool AnyGamepadInputKeysDown();
	void ActivateCinematicMode_Code(bool MarkCinematicActive, bool AffectsHUD, TEnumAsByte<ECinematicHidingTypes> HideActors);
};


// Class BendGame.BendMissionData
// 0x02B8 (0x02E0 - 0x0028)
class UBendMissionData : public UDataAsset
{
public:
	TEnumAsByte<EMissionCategories>                    MissionsAct;                                              // 0x0028(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EStoryLines>                           PrimaryStoryLine;                                         // 0x0029(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x002A(0x0006) MISSED OFFSET
	TArray<TEnumAsByte<EStoryLines>>                   StoryLines;                                               // 0x0030(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FText                                       MissionNameText;                                          // 0x0040(0x0018) (Edit, BlueprintVisible)
	struct FText                                       MissionDescriptionPreText;                                // 0x0058(0x0018) (Edit, BlueprintVisible)
	struct FText                                       MissionDescriptionText;                                   // 0x0070(0x0018) (Edit, BlueprintVisible)
	struct FText                                       MissionDescriptionPostText;                               // 0x0088(0x0018) (Edit, BlueprintVisible)
	TEnumAsByte<EObjectiveCategories>                  MissionCategory;                                          // 0x00A0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x00A1(0x0007) MISSED OFFSET
	struct FName                                       MissionMap;                                               // 0x00A8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<struct FName>                               ExtraMaps;                                                // 0x00B0(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FName>                               InternalExtraMaps;                                        // 0x00C0(0x0010) (BlueprintVisible, ZeroConstructor)
	TEnumAsByte<EMissionIDs>                           MissionID;                                                // 0x00D0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x00D1(0x0007) MISSED OFFSET
	TArray<struct FBendMissionObjectiveData>           MissionObjectivesData;                                    // 0x00D8(0x0010) (Edit, BlueprintVisible, ZeroConstructor, SaveGame)
	TArray<TEnumAsByte<EMissionIDs>>                   PreReqMissions;                                           // 0x00E8(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<class UJobClassInfo*>                       PreReqJobs;                                               // 0x00F8(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	class UBendMissionData*                            AutoFailIfMissionComplete;                                // 0x0108(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UJobClassInfo*                               AutoFailIfJobComplete;                                    // 0x0110(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UBendMissionData*                            ReLockIfCompleted_Mission;                                // 0x0118(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UJobClassInfo*                               ReLockIfCompleted_Job;                                    // 0x0120(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UBendMissionData*                            ReUnlockIfCompleted_Mission;                              // 0x0128(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UJobClassInfo*                               ReUnlockIfCompleted_Job;                                  // 0x0130(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                TimeToWaitToUnlock;                                       // 0x0138(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                HourToUnlockMission;                                      // 0x013C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<TAssetPtr<class UClass>>                    Conditions;                                               // 0x0140(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TEnumAsByte<EMissionIDs>                           MissionToChainTo;                                         // 0x0150(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IsLastMissionInEpisode;                                   // 0x0151(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EMissionCategories>                    NewEpisodeUnlocked;                                       // 0x0152(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0xD];                                       // 0x0153(0x000D) MISSED OFFSET
	struct FTransform                                  WorldTransform;                                           // 0x0160(0x0030) (Edit, BlueprintVisible, IsPlainOldData)
	bool                                               IsDLCChallengeMission;                                    // 0x0190(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               UseTimeChangeToStart;                                     // 0x0191(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x2];                                       // 0x0192(0x0002) MISSED OFFSET
	float                                              OverrideTimeChangeHeight;                                 // 0x0194(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               CheckForValidAnimStateBeforeStarting;                     // 0x0198(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x7];                                       // 0x0199(0x0007) MISSED OFFSET
	TArray<struct FBendMissionStartConditions>         ConditionsRequiredToStart;                                // 0x01A0(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	class UTexture2D*                                  OverrideMissionMiniMapIcon;                               // 0x01B0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TAssetPtr<class UTexture2D>                        OverrideMapLocationImage;                                 // 0x01B8(0x0020) (Edit, BlueprintVisible)
	bool                                               LoadMissionBeforeIntroCin;                                // 0x01D8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               SkipEndFadingAndCinematic;                                // 0x01D9(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x6];                                       // 0x01DA(0x0006) MISSED OFFSET
	TArray<struct FBendCinematicLevelData>             CinematicLevelsToLoad;                                    // 0x01E0(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	bool                                               DisableUnimportantSpawns;                                 // 0x01F0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               AllowAmbientEvents;                                       // 0x01F1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               AllowConflictEscalation;                                  // 0x01F2(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               AllowOpenWorldJobsDisplay;                                // 0x01F3(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0x4];                                       // 0x01F4(0x0004) MISSED OFFSET
	TArray<struct FTimeAndWeatherSettings>             MissionTimeAndWeatherSettings;                            // 0x01F8(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TEnumAsByte<EWeatherType>                          TempDefaultWeather;                                       // 0x0208(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData08[0x7];                                       // 0x0209(0x0007) MISSED OFFSET
	struct FName                                       WeatherMap;                                               // 0x0210(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               CanRefuelRepairBikeDuringMission;                         // 0x0218(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               CustomWeatherMapInputted;                                 // 0x0219(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData09[0x2];                                       // 0x021A(0x0002) MISSED OFFSET
	int                                                ExperienceGainOnComplete;                                 // 0x021C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<struct FBendRewardData>                     FactionRewardsOnComplete;                                 // 0x0220(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FBendBoozerRewardData>               BoozerRewards;                                            // 0x0230(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FGameplayTag                                CollectibleUnlockedOnComplete;                            // 0x0240(0x0008) (Edit, BlueprintVisible)
	bool                                               HasRewardScreenAtEnd;                                     // 0x0248(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               JumpToStorylineMenuInRewardsScreen;                       // 0x0249(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData10[0x6];                                       // 0x024A(0x0006) MISSED OFFSET
	TArray<TEnumAsByte<EInventorySkillID>>             DebugSkillsAcquiredInMission;                             // 0x0250(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FGameplayTag>                        DebugRecipeAcquiredInMission;                             // 0x0260(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FGameDatabaseSaveRecord>             DebugDatabaseVariablesSetInMission;                       // 0x0270(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FBendFlashBackData>                  DebugFlashbackDataAfterMission;                           // 0x0280(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FString                                     DeveloperComments;                                        // 0x0290(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	bool                                               Deprecated;                                               // 0x02A0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EMissionStates>                        CurrentMissionState;                                      // 0x02A1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData11[0x2];                                       // 0x02A2(0x0002) MISSED OFFSET
	int                                                HourOnUnlock;                                             // 0x02A4(0x0004) (BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	int                                                DayOnUnlock;                                              // 0x02A8(0x0004) (BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	int                                                DayCompleted;                                             // 0x02AC(0x0004) (BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	int                                                HourCompleted;                                            // 0x02B0(0x0004) (BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData12[0x4];                                       // 0x02B4(0x0004) MISSED OFFSET
	TArray<class UBendMissionData*>                    PreReqMissionsData;                                       // 0x02B8(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class UBendUseCondition*>                   ConditionsPreReqRefs;                                     // 0x02C8(0x0010) (Edit, BlueprintVisible, ZeroConstructor, EditConst)
	unsigned char                                      UnknownData13[0x8];                                       // 0x02D8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendMissionData");
		return ptr;
	}


	void UpdateWeatherMapSettings();
	struct FString GetIdentifierInStringForm();
	TArray<struct FText> GetAllStartConditionsRequirements();
	TArray<struct FName> GetAllLevelsThatPreLoadWithIntroCin();
	struct FText GetActiveMissionObjectiveText();
	bool CheckIfPassConditions(struct FText* FailureText);
};


// Class BendGame.BendSkipGamePlaySectionComponent
// 0x0040 (0x0110 - 0x00D0)
class UBendSkipGamePlaySectionComponent : public UActorComponent
{
public:
	struct FScriptMulticastDelegate                    OnSkipGameplaySection;                                    // 0x00D0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               CanSkipSection;                                           // 0x00E0(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               SkipPressed;                                              // 0x00E1(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               MissionSkipActive;                                        // 0x00E2(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               MissionSkipDisplayed;                                     // 0x00E3(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TimeSinceLastPressed;                                     // 0x00E4(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TimeToDisplaySkipWithNoInput;                             // 0x00E8(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TimeNeededForCompletion;                                  // 0x00EC(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       MissionSkipIdentifier;                                    // 0x00F0(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       InputActionSkipKey;                                       // 0x00F8(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class ABendPlayerController*                       PlayerController;                                         // 0x0100(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class ABendGameMission*                            MissionManager;                                           // 0x0108(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendSkipGamePlaySectionComponent");
		return ptr;
	}


	void UpdatePercent(float Percent);
	void StopAllowingGameplaySectionSkip();
	void StartAllowingGameplaySectionSkip(const struct FName& SkipIdentifier);
	void RemoveMissionSkipButton(bool Hide);
	void DisplayMissionSkipButton();
};


// Class BendGame.BendInventoryPickupMeshComponent
// 0x0000 (0x0700 - 0x0700)
class UBendInventoryPickupMeshComponent : public UStaticMeshComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendInventoryPickupMeshComponent");
		return ptr;
	}

};


// Class BendGame.BendInventoryPickup
// 0x0428 (0x0770 - 0x0348)
class ABendInventoryPickup : public AActor
{
public:
	class UBendSphereComponent*                        InPickupRangeSphereComponent;                             // 0x0348(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UBendSphereComponent*                        InPickupAdvertiseRangeSphereComponent;                    // 0x0350(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UBendWidgetComponent*                        PickupAdvertisingWidget;                                  // 0x0358(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UClass*                                      AdvertiseWidgetClass;                                     // 0x0360(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class USlateInputInteractComponent*                PickupSlateInputComponent;                                // 0x0368(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class USceneComponent*                             OverrideTickTeleportLocationComponent;                    // 0x0370(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UInteractComponent*                          PickupInteractComponentHandler;                           // 0x0378(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UBendFocusModeOutlineComponent*              PickupFocusModeOutlineComponent;                          // 0x0380(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UMiniMapLocationComponent*                   MapLocationRef;                                           // 0x0388(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0390(0x0001) MISSED OFFSET
	bool                                               BlockOnModifiedInventoryUpdates;                          // 0x0391(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x6];                                       // 0x0392(0x0006) MISSED OFFSET
	struct FBendInventoryItem                          PickupItem;                                               // 0x0398(0x0010) (Edit, BlueprintVisible)
	struct FInventoryWeaponPartSpec                    WeaponSpec;                                               // 0x03A8(0x0018) (Edit, BlueprintVisible)
	struct FInventoryItemTag                           PickupItemTag;                                            // 0x03C0(0x0010)
	TEnumAsByte<EInventoryBaseType>                    InventoryItemBaseType;                                    // 0x03D0(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x03D1(0x0003) MISSED OFFSET
	int                                                ItemCount;                                                // 0x03D4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	int                                                DropWeaponClipAmmo;                                       // 0x03D8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData)
	int                                                DropWeaponExtraAmmo;                                      // 0x03DC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData)
	struct FString                                     InteractPreButtonText;                                    // 0x03E0(0x0010) (BlueprintVisible, ZeroConstructor, Transient)
	struct FString                                     InteractText;                                             // 0x03F0(0x0010) (BlueprintVisible, ZeroConstructor, Transient)
	struct FString                                     PickupNotificationText;                                   // 0x0400(0x0010) (BlueprintVisible, ZeroConstructor, Transient)
	TEnumAsByte<EInventoryPickupAnimState>             PickupAnimState;                                          // 0x0410(0x0001) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData03[0x7];                                       // 0x0411(0x0007) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnInventoryPickup;                                        // 0x0418(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class UStaticMeshComponent*                        MeshComp;                                                 // 0x0428(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	TArray<class ABendWeaponPart*>                     WeaponParts;                                              // 0x0430(0x0010) (Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst)
	unsigned char                                      bDynamicallyConstructed : 1;                              // 0x0440(0x0001) (BlueprintVisible, Transient)
	unsigned char                                      bAllowSinglePressInteract : 1;                            // 0x0440(0x0001) (BlueprintVisible, Transient)
	unsigned char                                      bAllowHoldInteract : 1;                                   // 0x0440(0x0001) (BlueprintVisible, Transient)
	unsigned char                                      bInteractEnabled : 1;                                     // 0x0440(0x0001) (BlueprintVisible, Transient)
	unsigned char                                      bAutoPickup : 1;                                          // 0x0440(0x0001) (BlueprintVisible, Transient)
	unsigned char                                      bItemAssetsCached : 1;                                    // 0x0440(0x0001) (BlueprintVisible, BlueprintReadOnly, Transient)
	unsigned char                                      bSpawnedFromSaveGame : 1;                                 // 0x0440(0x0001) (BlueprintVisible, BlueprintReadOnly, Transient)
	unsigned char                                      bIsNPCWeapon : 1;                                         // 0x0440(0x0001) (Edit, BlueprintVisible, SaveGame)
	unsigned char                                      bDroppedByPlayer : 1;                                     // 0x0441(0x0001) (SaveGame)
	unsigned char                                      UnknownData04[0x6];                                       // 0x0442(0x0006) MISSED OFFSET
	struct FInventoryStorageWeapon                     InvStorageWeapon;                                         // 0x0448(0x0050) (Edit, BlueprintVisible, SaveGame)
	bool                                               Enabled;                                                  // 0x0498(0x0001) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	bool                                               HideByDefault;                                            // 0x0499(0x0001) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	bool                                               HideIfInMission;                                          // 0x049A(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               RefreshInventoryItem;                                     // 0x049B(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               OverrideAdvertiseLocation;                                // 0x049C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x3];                                       // 0x049D(0x0003) MISSED OFFSET
	struct FVector                                     WidgetAdvertiseLoc;                                       // 0x04A0(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               AutoChangeDisplayName;                                    // 0x04AC(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               AllowedToWorkInFlashBack;                                 // 0x04AD(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               ShouldAddToLockerWhenPickedUp;                            // 0x04AE(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x1];                                       // 0x04AF(0x0001) MISSED OFFSET
	struct FString                                     LastTestedItemName;                                       // 0x04B0(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	int                                                OwnedPickupIndex;                                         // 0x04C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               InPickupRange;                                            // 0x04C4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData07[0x3];                                       // 0x04C5(0x0003) MISSED OFFSET
	class UAnimSequence*                               AnimToPlay;                                               // 0x04C8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBlendSpace*                                 AnimToPlay_Blendspace;                                    // 0x04D0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UPerformActionContext*                       ActionContext;                                            // 0x04D8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FBendActionData                             ActionData;                                               // 0x04E0(0x00A0) (Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                               DestroyOnPickup;                                          // 0x0580(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               AnchorAnim;                                               // 0x0581(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData08[0x2];                                       // 0x0582(0x0002) MISSED OFFSET
	float                                              AnimBlendInTime;                                          // 0x0584(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               DisableAllOverlaps;                                       // 0x0588(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData09[0x7];                                       // 0x0589(0x0007) MISSED OFFSET
	struct FName                                       PlantParameter;                                           // 0x0590(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PlantParameterValue;                                      // 0x0598(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData10[0x4];                                       // 0x059C(0x0004) MISSED OFFSET
	class UAnimSequence*                               OverrideAnim;                                             // 0x05A0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData11[0x8];                                       // 0x05A8(0x0008) MISSED OFFSET
	struct FTransform                                  OverrideAnimAnchor;                                       // 0x05B0(0x0030) (Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData)
	bool                                               UseOverrideAnchor;                                        // 0x05E0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               InteractRangeOverride;                                    // 0x05E1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData12[0x6];                                       // 0x05E2(0x0006) MISSED OFFSET
	struct FName                                       RefName;                                                  // 0x05E8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               DidPickup;                                                // 0x05F0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData13[0x7];                                       // 0x05F1(0x0007) MISSED OFFSET
	class UInputInteractWidget*                        InteractRef;                                              // 0x05F8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FString                                     OverrideNotifyText;                                       // 0x0600(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	float                                              GREENTHUMBSPercentChance;                                 // 0x0610(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               DisableNotification;                                      // 0x0614(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData14[0x3];                                       // 0x0615(0x0003) MISSED OFFSET
	struct FText                                       Notify_Progress;                                          // 0x0618(0x0018) (Edit, BlueprintVisible)
	struct FText                                       Notify_Title;                                             // 0x0630(0x0018) (Edit, BlueprintVisible)
	bool                                               IsAPlant;                                                 // 0x0648(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               IsMushroom;                                               // 0x0649(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               UseWideLayout;                                            // 0x064A(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               FoundAnAxe;                                               // 0x064B(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData15[0x4];                                       // 0x064C(0x0004) MISSED OFFSET
	TArray<class UMaterialInstanceDynamic*>            MaterialArray;                                            // 0x0650(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	bool                                               FoundBluntMetal;                                          // 0x0660(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               FoundMeleeBladed;                                         // 0x0661(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData16[0x6];                                       // 0x0662(0x0006) MISSED OFFSET
	struct FTimespan                                   TimeOfLastPickup;                                         // 0x0668(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame)
	bool                                               LootingAmmo;                                              // 0x0670(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               IsAmmoPickup;                                             // 0x0671(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               SinglePressInput;                                         // 0x0672(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               ViaResetCall;                                             // 0x0673(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                OutCount;                                                 // 0x0674(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               DoingPickup;                                              // 0x0678(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData17[0x3];                                       // 0x0679(0x0003) MISSED OFFSET
	int                                                ForceWalkToken;                                           // 0x067C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               FoundDurability;                                          // 0x0680(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData18[0x7];                                       // 0x0681(0x0007) MISSED OFFSET
	class UTexture2D*                                  IconRef;                                                  // 0x0688(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UTexture2D*                                  SaplingIcon;                                              // 0x0690(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UTexture2D*                                  PlantIcon;                                                // 0x0698(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UTexture2D*                                  BerryIcon;                                                // 0x06A0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UTexture2D*                                  MushroomIcon;                                             // 0x06A8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UTexture2D*                                  DeathIcon;                                                // 0x06B0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAnimSequence*                               AnimCedarSapling;                                         // 0x06B8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAnimSequence*                               AnimHerbGather;                                           // 0x06C0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     AdvertiseOffset;                                          // 0x06C8(0x000C) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               FoundAmmoCue;                                             // 0x06D4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData19[0x3];                                       // 0x06D5(0x0003) MISSED OFFSET
	struct FName                                       PlantTutorialKey;                                         // 0x06D8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       ScrapTutorialKey;                                         // 0x06E0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       FreakerEarTutorialKey;                                    // 0x06E8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       NestResidueTutorialKey;                                   // 0x06F0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               FinishedNavTo;                                            // 0x06F8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData20[0x7];                                       // 0x06F9(0x0007) MISSED OFFSET
	struct FName                                       TargetShoulderBlendspaceAnim;                             // 0x0700(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       TargetArmSlotBlendspaceAnim;                              // 0x0708(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               DisabledBecauseMission;                                   // 0x0710(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               isFlashbackEnabled;                                       // 0x0711(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               DisabledBecauseNoRecipe;                                  // 0x0712(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               NeverCheckForRecipe;                                      // 0x0713(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               IsUniversalAmmoCrate;                                     // 0x0714(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData21[0x3];                                       // 0x0715(0x0003) MISSED OFFSET
	float                                              AnchorAnimBlendOutTime;                                   // 0x0718(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               DidLastAnimComplete;                                      // 0x071C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               CanTurnInNonAnchoredAnim;                                 // 0x071D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               NonAnchoredAnimationLookAt;                               // 0x071E(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               SkipInventoryFullCheck;                                   // 0x071F(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               FriendlyTrap;                                             // 0x0720(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData22[0x3];                                       // 0x0721(0x0003) MISSED OFFSET
	float                                              DistanceToCheckNearbyPickups;                             // 0x0724(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<EMiniMapLocation>                      MiniMapType;                                              // 0x0728(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<EMiniMapEdgeDistance>                  MinimapEdgeDistance;                                      // 0x0729(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               PhysicsBasedTickUpdating;                                 // 0x072A(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               TryClampingTheVelocity;                                   // 0x072B(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               EnableVelClamping;                                        // 0x072C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData23[0x3];                                       // 0x072D(0x0003) MISSED OFFSET
	float                                              MaxPhysicsLinearVelocity;                                 // 0x0730(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData24[0x4];                                       // 0x0734(0x0004) MISSED OFFSET
	class USoundClass*                                 VOSoundClass;                                             // 0x0738(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               IsDroppedFromNPC;                                         // 0x0740(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData25[0xB];                                       // 0x0741(0x000B) MISSED OFFSET
	int                                                MaxBounceCount;                                           // 0x074C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData26[0x5];                                       // 0x0750(0x0005) MISSED OFFSET
	bool                                               NeverPlayPickupVO;                                        // 0x0755(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IfEnemiesNearbyIncreaseHoldTime;                          // 0x0756(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData27[0x1];                                       // 0x0757(0x0001) MISSED OFFSET
	float                                              DefaultHoldTimeStoredFromEnemies;                         // 0x0758(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              IncreaseHoldTimeForEnemies;                               // 0x075C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData28[0x10];                                      // 0x0760(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendInventoryPickup");
		return ptr;
	}


	void UpdatePlantMaterial();
	void UpdateInventoryItem();
	void STATIC_UnBlockInventoryModifiedUpdatesOnList(TArray<class ABendInventoryPickup*> Items);
	void UnbindOnPlayerReloadFinished();
	void UnBindOnInventoryModified();
	void UnbindMoveComplete();
	void Tutorials();
	void TryMeleeTutorial();
	void Tick_UpdateBlendspacePosition();
	void Tick_UpdateAdvertiseLocation();
	void SyncIsNPCWeaponFlag(bool IsNPCWeapon);
	void StartOverlaps();
	bool SpawnPickupFromInventoryItem(const struct FBendInventoryItemCount& InventoryItemCount);
	bool SpawnCharacterSubClassDrop(TEnumAsByte<ECharacterClass> CharacterClass, const struct FName& SubClass);
	void SnapToGround(class AActor* ActorToIgnore);
	bool ShouldLootAmmo();
	void SetWeaponPickupAmmoCountExtra(int AmmoCount);
	void SetWeaponPickupAmmoCount(int AmmoCount);
	void SetTypeFromItem(const struct FInventoryIDDetails& ItemDetails);
	void SetTypeAndItemID(TEnumAsByte<EInventoryBaseType> Type, int ItemID, int NumItems);
	void SetPickupAnimState(TEnumAsByte<EInventoryPickupAnimState> Type);
	void SetNotificationDetails(bool IsGunAmmoPickup);
	void SetMeleeWeaponType();
	void SetIconColor(bool RedIcon);
	void SetGlint(bool On);
	void SetColorToFriendly(bool Friendly);
	bool SetAdvertisePosition();
	void ResetObject();
	void ResetItemInteract();
	void ResetItemAdvertise();
	void RequestNotificationTexture();
	void renameActor();
	void RemovePickupFromNearbyPlayerList();
	void ReleaseCachedItemAssets();
	void RecheckBindEventsForDisables();
	void PlayPlantEffects();
	void PlayPickupVO();
	void PlayPickupEffects();
	void PlayPickupAnimation();
	void PlayInventoryFullVO();
	void PlayInventoryAlmostFullVO();
	void PlayAnimation();
	void OverridePickupRangeCallNew(bool Enter);
	void OverrideAdvertiseRangeCallNew(bool Enter);
	void OnPlayerReloadFinished();
	void OnPlayerDiscoverRecipe(class UInventoryItemRecipe* Recipe);
	void OnPickupAccepted();
	void OnPerformActionMid(bool FromAnim, bool AlreadyDidPickup);
	void OnPerformActionEnd();
	void OnPerformActionBegin();
	void OnNotificationTextureLoaded(class UTexture2D* Icon);
	void OnMissionComplete(class UBendMissionData* MissionData);
	void OnMissionBegin(TEnumAsByte<EMissionIDs> MissionID);
	void OnMeshHit(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void OnInventoryModifiedDelegate(const struct FInventoryOperation& Operation);
	void OnEndInteract();
	void OnBeginInteract();
	void NotificationTextureLoadedCallback();
	bool LastCheckWasFullOnObject();
	bool IsWeaponWeAlreadyHave();
	bool IsPlayerFullOnAmmo();
	void IsPlant();
	bool IsMelee();
	bool IsItemInEncampment();
	bool IsInventoryFull();
	bool IsGun();
	bool IsDroppedByPlayer();
	bool InventoryItemValid();
	void InteractOnEnd();
	void InteractOnBegin();
	void InputPressStarted();
	void InputPressReleased();
	void InitPickupInteract();
	bool HasTag(const struct FGameplayTag& Tag, bool VerboseOutput);
	bool HasMatchingAmmoType();
	void HandleVisibility(bool aHide);
	bool HandlePlantMapIconSkill();
	void HandleMiniMapLocationVisibility(bool TurnOn, class UTexture2D* NewIcon);
	void GREENTHUMBSModifier();
	bool GivePickupTo(class ABendPlayerPawn* pPawn, bool attemptToUse);
	struct FVector GetWidgetAdvertizeLocation();
	class ABendWeapon* GetWeaponWithMatchingAmmo();
	struct FName GetPickupSoundName(TEnumAsByte<EInventoryItemSound> Sound);
	class USoundCue* GetPickupSoundByType(TEnumAsByte<EInventoryItemSound> Sound);
	class USoundCue* GetPickupSound();
	class UBendWidgetComponent* GetPickupAdvertisingWidget();
	TEnumAsByte<EInventoryBaseType> GetInventoryItemType();
	class UTexture2D* GetInventoryItemTexture();
	struct FString GetInventoryItemName();
	class UInventoryItem* GetInventoryItem();
	float GetHoldInteractTime();
	float GetDurability();
	class USoundCue* GetDropSound();
	int GetAmmoCount();
	TArray<class ABendInventoryPickup*> GetAllPickupsFromNearbyPlayerList();
	void GenerateWeaponStats(class ABendPlayerPawn* Pawn);
	void ForceUpdateInventoryModification();
	void EventPlayerUnlocksSkill(TEnumAsByte<EInventorySkillID> SkillID, class UInventoryItemSkill* SkillItem);
	void EvaulatePlantStatus();
	void EndOverlapWithInteractRange();
	void EndOverlapWithAdvertiseRange();
	void EndInteract();
	void EnableInputInteract();
	void EnableFocusHighlight();
	void EnableDisableInteract(bool enable, bool HideItem);
	void EnableAnimOverride();
	bool DoAutoPickup();
	void DisplayPickupNotification();
	void DisplayHudNotificationInternal(class UTexture2D* NotifyTexture);
	void DisableOverlaps();
	void DisableFocusHighlight();
	void CreateInteract();
	void ConfigureInteractFlags();
	void Complain();
	void STATIC_CollectAllItemsPassedThroughInArea(TArray<class ABendInventoryPickup*> Items, float DistanceToCheck);
	void STATIC_CollectAllItemsInArea(float DistanceToCheck);
	bool CheckTimeSincePickup();
	bool CheckHerbHighlightSkill();
	void CheckFreakerEar();
	bool CanPickupItem();
	void CallNotifyForInteractStart();
	void CallNotifyForInteractEnd();
	void CallNotifyForExactMomentOfPickup();
	void BlueprintMissionComplete();
	void STATIC_BlockInventoryModifiedUpdatesOnList(TArray<class ABendInventoryPickup*> Items);
	void BindOnPlayerReloadFinished();
	void BindOnInventoryModified();
	void BeginTheInteract();
	void BeginOverlapWithInteractRange();
	void BeginOverlapWithAdvertiseRange();
	void BeginInteract();
	void BeginAsyncItemAssetCache();
	bool AttemptToPickup();
	bool AttemptTakeItemFromAreaPickup(const struct FVector& PlayerLocation);
	int AmmoToPickUp();
	void AddPickupToNearbyPlayerList();
};


// Class BendGame.BendPairedKillData
// 0x00C0 (0x00E8 - 0x0028)
class UBendPairedKillData : public UDataAsset
{
public:
	TArray<struct FPairedKill>                         BrutalPairedKills;                                        // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FPairedKill>                         SilentPairedKills;                                        // 0x0038(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	unsigned char                                      UnknownData00[0xA0];                                      // 0x0048(0x00A0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendPairedKillData");
		return ptr;
	}

};


// Class BendGame.BendAnimState_PairedKill
// 0x0000 (0x00B0 - 0x00B0)
class UBendAnimState_PairedKill : public UBendAnimState_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAnimState_PairedKill");
		return ptr;
	}

};


// Class BendGame.BendAttackManager
// 0x0808 (0x0830 - 0x0028)
class UBendAttackManager : public UObject
{
public:
	TArray<struct FFactionCombatData>                  CombatDataOverrideByFaction;                              // 0x0028(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x50];                                      // 0x0038(0x0050) MISSED OFFSET
	float                                              GrappleMaxSlope;                                          // 0x0088(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TimeBetweenGrappleAttacks;                                // 0x008C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              GrappleChance;                                            // 0x0090(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              GrappleChanceTimeout;                                     // 0x0094(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<EInventoryWeaponID>                    KnifeComboSkillUnlockWeapon;                              // 0x0098(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0099(0x0003) MISSED OFFSET
	float                                              MeleeHeavyHitMultiplier;                                  // 0x009C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinNearDistForLongKills;                                  // 0x00A0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinAwareDistForLongKills;                                 // 0x00A4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinTargetingDistForLongKills;                             // 0x00A8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TimeBetweenMeleeAttacks;                                  // 0x00AC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TimeBetweenMeleeAttacksBikeMult;                          // 0x00B0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TimeBetweenMeleeAttacksHasKnifeMult;                      // 0x00B4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinTimeBetweenMeleeAttacks;                               // 0x00B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MissSwingLockoutTime;                                     // 0x00BC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TimeBetweenMeleeAttacksReductionPrefix;                   // 0x00C0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              OutgoingAttackTimerMultiplier;                            // 0x00C4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxVictimSpeedBreakAnchor;                                // 0x00C8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x00CC(0x0004) MISSED OFFSET
	float                                              ExtraTravelDistanceBreakAnchor;                           // 0x00D0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TimeBetweenPersueAttacks;                                 // 0x00D4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ForceGrappleDistance;                                     // 0x00D8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TimeBetweenGrappleAttacksAsAttacker;                      // 0x00DC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TimeBetweenMeleeAttacksAsAttacker;                        // 0x00E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MinTimeBetweenMeleeAttacksAsAttacker;                     // 0x00E4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxGrappleDistanceAsAttacker;                             // 0x00E8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ForceGrappleDistanceAsAttacker;                           // 0x00EC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              m_fInitAttackerGrappleDistance;                           // 0x00F0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              m_fTimeBetweenMeleeAttackAndGrapple;                      // 0x00F4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FValidAttackAngleData                       FrontFaceAngle;                                           // 0x00F8(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DirectGrappleLockoutTime;                                 // 0x0104(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              GrappleChanceOffScreenModifier;                           // 0x0108(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              CombatDistanceForCloseRing;                               // 0x010C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinCombatDistanceForCloseRing;                            // 0x0110(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CombatDistanceForFarRing;                                 // 0x0114(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x10];                                      // 0x0118(0x0010) MISSED OFFSET
	float                                              m_fMeleeKillSwingLockoutTime;                             // 0x0128(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              m_fMeleeAfterGrappleLockoutTime;                          // 0x012C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x18];                                      // 0x0130(0x0018) MISSED OFFSET
	float                                              MinWaitTimeOrCancelEarlyExitHitReaction;                  // 0x0148(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               AllowMeleeOnBike;                                         // 0x014C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               AllowMeleeStunState;                                      // 0x014D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               AllowEnterIntoMeleeAnims;                                 // 0x014E(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               AllowOffscreenMeleeAgainstPlayer;                         // 0x014F(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               AllowDeaconsAttacksToBeDodged;                            // 0x0150(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               AllowNPCsAttacksToBeDodged;                               // 0x0151(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               AllowNPCsAttacksToBeDodgedAfterProvoke;                   // 0x0152(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               AllowDeaconToDoDirectionalDodgeOnNPC;                     // 0x0153(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               AllowComboEnders;                                         // 0x0154(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               AllowHardHitReactionsForCriticalHit;                      // 0x0155(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               AllowContextualKills;                                     // 0x0156(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               AllowContextualAttacks;                                   // 0x0157(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               AllowCliffContextualKills;                                // 0x0158(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               AllowCliffContextualAttacks;                              // 0x0159(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               AllowChargedAttacks;                                      // 0x015A(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               AllowNewCounterAttackSystem;                              // 0x015B(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               AllowStickInputUsePrimaryConeOnly;                        // 0x015C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               AllowCoolMeleeAttackSystem;                               // 0x015D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               MeleeAutoTargetEnabled;                                   // 0x015E(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x1];                                       // 0x015F(0x0001) MISSED OFFSET
	float                                              CoolMeleeAttackCoolDownTime;                              // 0x0160(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CoolMeleeAttackBlockMeleeButtonTime;                      // 0x0164(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MeleeTargetAnglePositionOffset;                           // 0x0168(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x4];                                       // 0x016C(0x0004) MISSED OFFSET
	float                                              MeleeAutoTargetMaxAngle;                                  // 0x0170(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MeleeAutoTargetMaxSecondaryAngle;                         // 0x0174(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MeleeAutoTargetMaxDistance;                               // 0x0178(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FindMeleeTargetMaxDistance;                               // 0x017C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MeleeTargetMaxDistBlockMissSwing;                         // 0x0180(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ReenterIntoMeleeDistanceAway;                             // 0x0184(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MeleeEnterIntoAnimOffsetRange;                            // 0x0188(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MeleeContextualAnimOffsetRange;                           // 0x018C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0x4];                                       // 0x0190(0x0004) MISSED OFFSET
	float                                              MeleePlayRateMinStamina;                                  // 0x0194(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MeleePlayRateMaxStamina;                                  // 0x0198(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MeleeButtonPressedBufferTime;                             // 0x019C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MeleeAutoSwingAfterFullyChargeTime;                       // 0x01A0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxDistanceAllowBrutalStunKill;                           // 0x01A4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              VictimForwardFacingAngleForStunState;                     // 0x01A8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxContextualKillAngle;                                   // 0x01AC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FBendMeleeAttackData                        MeleeDefaultAnimations;                                   // 0x01B0(0x0140) (Edit, DisableEditOnInstance)
	TArray<struct FBendMeleeAttackData>                MeleeAttackAnimations;                                    // 0x02F0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData08[0x54];                                      // 0x0300(0x0054) MISSED OFFSET
	float                                              MaxNPCMeleeAttackMeter;                                   // 0x0354(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              IncNPCMeleeAttackMeterPerSecond;                          // 0x0358(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ReduceNPCMeleeAttackMeterPerAttack;                       // 0x035C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               UseNPCMeleeAttackMeterWhenLowStamina;                     // 0x0360(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData09[0x3];                                       // 0x0361(0x0003) MISSED OFFSET
	float                                              MeleeCriticleHitMultiplier;                               // 0x0364(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData10[0xC];                                       // 0x0368(0x000C) MISSED OFFSET
	int                                                MeleeComboEnderHitIncreaseAmount;                         // 0x0374(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ReduceMeleeHitAttackerCountPerSecond;                     // 0x0378(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ReduceMeleeHitAttackerCountWhenDamaged;                   // 0x037C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ReduceMeleeHitAttackerCountWhenSwitchTarget;              // 0x0380(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               UseProvokeSystemMeleeHitAttackerCounter;                  // 0x0384(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData11[0x7];                                       // 0x0385(0x0007) MISSED OFFSET
	float                                              ReduceMeleeHitVictimCountPerSecond;                       // 0x038C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                MinNumMeleeHitVictimDoProvoke;                            // 0x0390(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                MaxNumMeleeHitVictimDoProvoke;                            // 0x0394(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                MinNumProvokesBeforeProvokeAttack;                        // 0x0398(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                MaxNumProvokesBeforeProvokeAttack;                        // 0x039C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData12[0x5];                                       // 0x03A0(0x0005) MISSED OFFSET
	bool                                               AllowProvokeDodge;                                        // 0x03A5(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               AllowProvokeGrapple;                                      // 0x03A6(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               AllowProvokeBigAttack;                                    // 0x03A7(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               AllowBlockedBigAttack;                                    // 0x03A8(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               ClearAllProvokeFlags;                                     // 0x03A9(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData13[0x2];                                       // 0x03AA(0x0002) MISSED OFFSET
	float                                              CooldownTimeAfterProvoke;                                 // 0x03AC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<struct FProvokedWithWeaponData>             ProvokeBasedOnWeapon;                                     // 0x03B0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData14[0x18];                                      // 0x03C0(0x0018) MISSED OFFSET
	bool                                               m_bIsGrappling;                                           // 0x03D8(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               m_bGrappleFromAttack;                                     // 0x03D9(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               m_bIsAttemptingToGrapple;                                 // 0x03DA(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               m_bSuccessfulGrappleAttempt;                              // 0x03DB(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               m_bIsAttemptingDirectGrapple;                             // 0x03DC(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               m_bIsAttemptingNavToMeleeZone;                            // 0x03DD(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               m_bFailedToGrapple;                                       // 0x03DE(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               m_bAttackerWillGrappleMe;                                 // 0x03DF(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               m_bGrappleNearCollision;                                  // 0x03E0(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               m_bIsBeingGrappled;                                       // 0x03E1(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               m_bIsAttemptingToBreakGrapple;                            // 0x03E2(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               m_bFailedToBreakGrapple;                                  // 0x03E3(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               m_bCanExitGrapple;                                        // 0x03E4(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               m_bGrappleBroken;                                         // 0x03E5(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               m_bBeingGrappledInFront;                                  // 0x03E6(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               m_bGrapplingInFront;                                      // 0x03E7(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               m_bTempUseNewAnchorGetSystem;                             // 0x03E8(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               m_bAttackerIsAttemptingingToGrapple;                      // 0x03E9(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               m_bGrappleFailedSwipe;                                    // 0x03EA(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData15[0x1];                                       // 0x03EB(0x0001) MISSED OFFSET
	float                                              m_fGrappleOffsetStartTime;                                // 0x03EC(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              GrappleAcceptanceDistance;                                // 0x03F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TWeakObjectPtr<class ABendPawn>                    m_pOwner;                                                 // 0x03F4(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TWeakObjectPtr<class ABendPawn>                    m_pGrapplingTarget;                                       // 0x03FC(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TWeakObjectPtr<class ABendPawn>                    m_pAttemptingGrappleTarget;                               // 0x0404(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData16[0xC];                                       // 0x040C(0x000C) MISSED OFFSET
	class UAnimationAsset*                             m_pGrappleAnim;                                           // 0x0418(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           m_pGrappleBreakingOutAnim;                                // 0x0420(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           m_pGrappleFailedAnim;                                     // 0x0428(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           m_pGrappleEnterAnim;                                      // 0x0430(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FGrapplePairAnimData                        m_pGrappleEnterSet;                                       // 0x0438(0x0020) (BlueprintVisible, BlueprintReadOnly)
	struct FGrapplePairAnimData                        m_pGrappleLoopSet;                                        // 0x0458(0x0020) (BlueprintVisible, BlueprintReadOnly)
	struct FGrapplePairAnimData                        m_pGrappleExitSet;                                        // 0x0478(0x0020) (BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData17[0x10];                                      // 0x0498(0x0010) MISSED OFFSET
	TWeakObjectPtr<class ABendPawn>                    m_pMeleeingTarget;                                        // 0x04A8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData18[0x18];                                      // 0x04B0(0x0018) MISSED OFFSET
	TArray<struct FMeleeHitThrowPairedAnimBasedOnFactionTypeData> MeleeHitAndThrowData;                                     // 0x04C8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	float                                              PawnsDodgingForwadFacingAngle;                            // 0x04D8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TWeakObjectPtr<class ABendPawn>                    m_pPairedDodgeAttacker;                                   // 0x04DC(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData19[0x4];                                       // 0x04E4(0x0004) MISSED OFFSET
	TArray<struct FDodgeInfoData>                      DodgeData;                                                // 0x04E8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	class UBlendSpace*                                 FreeDodgeBlendSpace;                                      // 0x04F8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinRagerRushAttackDistance;                               // 0x0500(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxRagerRushAttackDistance;                               // 0x0504(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinWaitTimeAfterDodge;                                    // 0x0508(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxWaitTimeAfterDodge;                                    // 0x050C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DodgeFocusModeValue;                                      // 0x0510(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CounterLockOutTimer;                                      // 0x0514(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                StabRagerDamageAmount;                                    // 0x0518(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PercentChanceToBlock;                                     // 0x051C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               ForceBlockAttack;                                         // 0x0520(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData20[0x7];                                       // 0x0521(0x0007) MISSED OFFSET
	struct FBlockAttackInfoData                        BlockAttackAnimations;                                    // 0x0528(0x0020) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData21[0x1];                                       // 0x0548(0x0001) MISSED OFFSET
	bool                                               DebugAimCalc;                                             // 0x0549(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData22[0x2];                                       // 0x054A(0x0002) MISSED OFFSET
	float                                              MissDistanceOffset;                                       // 0x054C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AccuracyRadius;                                           // 0x0550(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinDistanceApplyScale;                                    // 0x0554(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CrouchMissDistanceOffset;                                 // 0x0558(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CrouchMissAimUpAmount;                                    // 0x055C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CrouchHitAimUpAmount;                                     // 0x0560(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData23[0x4];                                       // 0x0564(0x0004) MISSED OFFSET
	struct FName                                       TargetBoneOnMiss;                                         // 0x0568(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       TargetBoneOnHit;                                          // 0x0570(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       TargetBoneOnCrit;                                         // 0x0578(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       TargetBoneWhileCrouched;                                  // 0x0580(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       TargetBoneWithRocket;                                     // 0x0588(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                MaxRangedAttackersFromOpen;                               // 0x0590(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                MaxRangedAttackersFromCover;                              // 0x0594(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinOpenRangedAttackerLockoutTime;                         // 0x0598(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxOpenRangedAttackerLockoutTime;                         // 0x059C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinCoverRangedAttackerLockoutTime;                        // 0x05A0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxCoverRangedAttackerLockoutTime;                        // 0x05A4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NPCDontShootRadius;                                       // 0x05A8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              NPCDontShootLockoutTime;                                  // 0x05AC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              AutoHolsterMaxDistNPCNear;                                // 0x05B0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AutoHolsterMaxDistNPCAware;                               // 0x05B4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AutoHolsterMaxDistNPCTargeting;                           // 0x05B8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxSimultaneousRusherValue;                               // 0x05BC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class USoundCue*                                   BulletBySound;                                            // 0x05C0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBendAnimFlinchData*                         AnimFlinchData;                                           // 0x05C8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FlinchReactionPercentage;                                 // 0x05D0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxDistanceAway_DoFlinchReaction;                         // 0x05D4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxDistanceAway_PlayBulletBySounds;                       // 0x05D8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                MaxAttackersToAllowGrapple;                               // 0x05DC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bDisableGrapple;                                          // 0x05E0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData24[0xF];                                       // 0x05E1(0x000F) MISSED OFFSET
	float                                              AutoTargetMaxAngle;                                       // 0x05F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AutoTargetMaxDistance;                                    // 0x05F4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AutoTargetMaxBufferDistance;                              // 0x05F8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AutoTargetMaxDistanceCover;                               // 0x05FC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_fStealthKillMinLastSeenTime;                            // 0x0600(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              StealthButtonPressedBufferTime;                           // 0x0604(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ValidStealthTargetBufferTime;                             // 0x0608(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              StealthKillMaxSlope;                                      // 0x060C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData25[0x10];                                      // 0x0610(0x0010) MISSED OFFSET
	bool                                               m_bDoStealthKill;                                         // 0x0620(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData26[0x7];                                       // 0x0621(0x0007) MISSED OFFSET
	class UAnimationAsset*                             m_pStealthKillAnim;                                       // 0x0628(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_bIsStealthKilling;                                      // 0x0630(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_bIsBeingStealthKilled;                                  // 0x0631(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData27[0x1A];                                      // 0x0632(0x001A) MISSED OFFSET
	struct FDamageBlendSpaceAngles                     MeleeDamageBlendSpaceAngles;                              // 0x064C(0x0010) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData28[0xE4];                                      // 0x065C(0x00E4) MISSED OFFSET
	TArray<struct FMeleeRingData>                      MeleeRingList;                                            // 0x0740(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FGrappleLocationData>                GrappleLocationList;                                      // 0x0750(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FGrappleOverrideData>                GrappleOverrideList;                                      // 0x0760(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData29[0x88];                                      // 0x0770(0x0088) MISSED OFFSET
	TArray<TEnumAsByte<EAIFactionType>>                FactionsToTrackForSurround;                               // 0x07F8(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	unsigned char                                      UnknownData30[0x4];                                       // 0x0808(0x0004) MISSED OFFSET
	int                                                NumToBeSurrounded;                                        // 0x080C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnSurrounded;                                             // 0x0810(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               BroadcastPlayerSurrounded;                                // 0x0820(0x0001) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData31[0xF];                                       // 0x0821(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAttackManager");
		return ptr;
	}


	bool WaitingForPairedDodgeInput();
	void StealthKillFinished();
	bool StartBeingStealthKilled(class ABendPawn* Attacker, class UAnimationAsset* StealthKillAnim, struct FRotator* rAttackRotation, struct FTransform* AnchorTransform);
	bool RemoveRangedAttacker(class ABendPawn* pAttacker);
	bool RemoveAttackerFromList(class ABendPawn* pAttacker);
	void OnAttackerReachedSlot(class ABendPawn* pAttacker);
	bool IsRangedAttacker(class ABendPawn* pAttacker);
	bool IsBeingGrappled();
	bool IsAttackerInList(class ABendPawn* pAttacker);
	struct FPairedKillAnims GetStealthKillAnims(class ABendPawn* Attacker, class UClass** AttackerProp);
	class ABendPawn* GetPotentialMeleeTargetVictim();
	TArray<struct FMeleeRingData> GetMeleeRingList();
	int GetGrappleTiers();
	struct FTransform GetGrappleStartAnchorTransform();
	struct FTransform GetGrappleLandingAnchorTransform();
	class ABendPawn* GetGrappleAttacker();
	float GetCurrentGrapplePriority();
	float GetCurrentGrapplePercent();
	float GetCombatDistanceForRing();
	int GetAttackerCount();
	bool ForceSimultaneousGrapple(class ABendPawn* pGrappleTarget, class ABendPawn* SecondaryGrappler, const struct FName& GrappleCategory);
	void ForceExitGrapple();
	bool ForceDirectGrapple(class ABendPawn* pGrappleTarget, bool bGrappleFront, bool bWithEnter, const struct FName& GrappleCategory);
	void FinishedGrappleFail();
	class ABendPawn* FindStealthKillTarget();
	class ABendPawn* FindMeleeVictim(bool bUseSavedJoystickAngle, bool bCalledFromTick, bool* bIsFromPrimaryAngle);
	void FailedToBreakOutOfGrapple();
	void DonePlayingBreakOutOfGrappleAnim();
	void DiedHandler(float ActualDamage, class AController* Killer, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, const struct FName& BoneName, const struct FVector& Momentum, class UDamageType* DamageType, class AActor* DamageCauser);
	bool CanStealthKill(class ABendPawn* Target);
	bool CanBeStealthKilled(class ABendPawn* Attacker);
	bool CanBeMeleeAttacked(bool AllowInterruptingAttacker);
	bool AttemptToMeleeFindTarget(TEnumAsByte<EMeleeAttackBasedOnHeight> MeleeSwingType, bool CalledFromCode);
	void AttemptToBreakOutOfGrapple(float defaultCompletionPercent);
	bool AttemptStealthKill(class ABendPawn* Target);
	void AttemptGrappleAnimDone();
	bool AttemptDirectGrapple(class ABendPawn* pGrappleTarget, bool WithEnter, const struct FName& GrappleCategory, bool FromAttack, bool SkipDistanceCheck);
	void AllowGrappleExit();
	void AddRangedAttacker(class ABendPawn* pAttacker);
	void AddAttackerToList(class ABendPawn* pAttacker);
};


// Class BendGame.BendStateMachine
// 0x0050 (0x0398 - 0x0348)
class ABendStateMachine : public AActor
{
public:
	TArray<class UClass*>                              m_StateClassArray;                                        // 0x0348(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	bool                                               bGiveControlToPOI;                                        // 0x0358(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bDebugDrawState;                                          // 0x0359(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xE];                                       // 0x035A(0x000E) MISSED OFFSET
	TArray<class UBendState*>                          m_States;                                                 // 0x0368(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData01[0x20];                                      // 0x0378(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendStateMachine");
		return ptr;
	}


	void WhileOutOfControl(float DeltaTime);
	void SetInitState(const struct FString& initStateName);
	void ReturnToLastState();
	void ReenterState();
	void OnRegainControl();
	void OnPathComplete(TEnumAsByte<EPathFollowingResult> Result);
	void OnLossOfControl();
	void OnInitState();
	bool IsOutOfControl();
	bool IsInStateName(const struct FString& StateName);
	bool IsInStateFName(const struct FName& StateName);
	bool IsInState(class UBendState* State);
	class AActor* GetStateMachineOwner();
	class UBendState* GetNextState();
	TArray<class UBendState*> GetMachineStates();
	class UBendState* GetLastState();
	struct FString GetCurrentStateName();
	struct FName GetCurrentStateFName();
	class UBendState* GetCurrentState();
	class UBendState* FindStateByName(const struct FString& StateName);
	class UBendState* FindStateByFName(const struct FName& StateName);
	void ChangeState(const struct FString& newStateName, bool ForceReenter);
};


// Class BendGame.BendStateMachineImmediate
// 0x0000 (0x0398 - 0x0398)
class ABendStateMachineImmediate : public ABendStateMachine
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendStateMachineImmediate");
		return ptr;
	}

};


// Class BendGame.BendAnimStateMachine
// 0x0058 (0x03F0 - 0x0398)
class ABendAnimStateMachine : public ABendStateMachineImmediate
{
public:
	unsigned char                                      UnknownData00[0x58];                                      // 0x0398(0x0058) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAnimStateMachine");
		return ptr;
	}


	bool RequestStateChange(TEnumAsByte<EBendAnimStates> State, bool ForceReenter);
	bool IsInStateEnum(TEnumAsByte<EBendAnimStates> State);
	bool IsInAnyState(TArray<TEnumAsByte<EBendAnimStates>> States);
	void EnterSwimming();
	void EnterSprintSliding();
	void EnterSliding();
	void EnterRagdoll();
	void EnterPerformAction();
	void EnterPairedKill();
	void EnterMeleeAttack();
	void EnterLadder();
	void EnterJumping();
	void EnterGroundMovement();
	void EnterGrapple();
	void EnterFalling();
	void EnterEdgeTraversal();
	void EnterDodge();
	void EnterDamage();
	void EnterCover();
	void EnterBodyCarry();
	void EnterBike();
};


// Class BendGame.BendCrowdInteractablePawnInterface
// 0x0000 (0x0028 - 0x0028)
class UBendCrowdInteractablePawnInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendCrowdInteractablePawnInterface");
		return ptr;
	}

};


// Class BendGame.BendCrowdAwarenessZoneData
// 0x0040 (0x0068 - 0x0028)
class UBendCrowdAwarenessZoneData : public UObject
{
public:
	TEnumAsByte<EBendCrowdAwarenessTriggerType>        Type;                                                     // 0x0028(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0029(0x0003) MISSED OFFSET
	float                                              GainAwarenessRadius;                                      // 0x002C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              LoseAwarenessRadius;                                      // 0x0030(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AwarenessRampUp_NearDist;                                 // 0x0034(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AwarenessRampUp_FarDist;                                  // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AwarenessRampUp_NearTime;                                 // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AwarenessRampUp_FarTime;                                  // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              FrenzyRampUp_NearDist;                                    // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              FrenzyRampUp_FarDist;                                     // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              FrenzyRampUp_NearTime;                                    // 0x004C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              FrenzyRampUp_FarTime;                                     // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              InduceFrenziedLocomotionAndAnimsMaxDist;                  // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EBendCrowdAwarenessZone_AwareDistVsFrenzyAlphaPower> AwareDistVsFrenzyAlphaPower;                              // 0x0058(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bCanExpire : 1;                                           // 0x0059(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x2];                                       // 0x005A(0x0002) MISSED OFFSET
	float                                              FullIntensityTime;                                        // 0x005C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              FadeOutIntensityTime;                                     // 0x0060(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bRequiresVisibility : 1;                                  // 0x0064(0x0001) (Edit)
	unsigned char                                      bEnableArrivalBehavior : 1;                               // 0x0064(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0065(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendCrowdAwarenessZoneData");
		return ptr;
	}

};


// Class BendGame.BaseUserWidget
// 0x0008 (0x0250 - 0x0248)
class UBaseUserWidget : public UUserWidget
{
public:
	TEnumAsByte<ESlateVisibility>                      PreOverrideVisibility;                                    // 0x0248(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0249(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BaseUserWidget");
		return ptr;
	}


	bool UIVisibilityEnabled();
	void SetVisibilityOverride(TEnumAsByte<ESlateVisibility> VisibilityType);
};


// Class BendGame.BendNPCCalloutWidget
// 0x0008 (0x0258 - 0x0250)
class UBendNPCCalloutWidget : public UBaseUserWidget
{
public:
	TEnumAsByte<ECalloutWidgetType>                    CurrentWidgetType;                                        // 0x0250(0x0001) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0251(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendNPCCalloutWidget");
		return ptr;
	}


	void UpdateHealthOnCallout(float Percentage);
	void SetIndicatorProgress(float NormalizedProgress);
	void DeactivateMarkedCallout();
	void DeactivateAwarenessCallout(bool DeactivateDueToAware);
	void ActivateSuspiciousIndicator();
	void ActivateMarkedCallout(TEnumAsByte<ECalloutWidgetType> CalloutType);
	void ActivateAlertIndicator();
};


// Class BendGame.BendPawn
// 0x1FD0 (0x2740 - 0x0770)
class ABendPawn : public ACharacter
{
public:
	unsigned char                                      UnknownData00[0x50];                                      // 0x0770(0x0050) MISSED OFFSET
	class UBendCrowdAwarenessZoneComponent*            CrowdAwarenessZoneComponent;                              // 0x07C0(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UBendCharacterMovementComponent*             BendCharacterMovement;                                    // 0x07C8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x07D0(0x0002) MISSED OFFSET
	bool                                               IsWithinNest;                                             // 0x07D2(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsPlayer;                                                // 0x07D3(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bCanBeKnockedDownByVehicleImpact;                         // 0x07D4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bCanTakeDamageFromVehicleImpact;                          // 0x07D5(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bShouldBeKilledFromVehicleImpact;                         // 0x07D6(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bCanKnockOffRidersOnVehicleImpact;                        // 0x07D7(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bHackUseNewBikeGunFireSystem : 1;                         // 0x07D8(0x0001) (Edit)
	unsigned char                                      bEnableTempHackNavToVehicle : 1;                          // 0x07D8(0x0001) (Edit)
	unsigned char                                      bDoNotCollectForSave : 1;                                 // 0x07D8(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData02[0x3];                                       // 0x07D9(0x0003) MISSED OFFSET
	float                                              ChainReactionTimeWindow;                                  // 0x07DC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              LastMeleedCounter;                                        // 0x07E0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x07E4(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnWeaponHitStaticMesh;                                    // 0x07E8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnWeaponHitEnemy;                                         // 0x07F8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnMeleeComboReset;                                        // 0x0808(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnTriggerMeleeMissBranch;                                 // 0x0818(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnWeaponAdded;                                            // 0x0828(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnAimStanceChanged;                                       // 0x0838(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBeginEnteringVehicleSeat;                               // 0x0848(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnRiderStartedEnteringVehicle;                            // 0x0858(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnRiderFinishedEnteringVehicle;                           // 0x0868(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnRiderStartedExitingVehicle;                             // 0x0878(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnRiderFinishedExitingVehicle;                            // 0x0888(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnEnemyJoinedMelee;                                       // 0x0898(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnEnemyLeftMelee;                                         // 0x08A8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnHidingStateChanged;                                     // 0x08B8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBendPawnTakeAnyDamage;                                  // 0x08C8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnCriticalHitTaken;                                       // 0x08D8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBodyLooted;                                             // 0x08E8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnScopeEntered;                                           // 0x08F8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnScopeExited;                                            // 0x0908(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnNoScopeZoomEntered;                                     // 0x0918(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnNoScopeZoomExited;                                      // 0x0928(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class UBendCalloutWidgetComponent*                 Callout;                                                  // 0x0938(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	bool                                               CalloutActive;                                            // 0x0940(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               AwarenessCalloutActive;                                   // 0x0941(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               PoisonCalloutActive;                                      // 0x0942(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x1];                                       // 0x0943(0x0001) MISSED OFFSET
	struct FVector                                     CalloutOffset;                                            // 0x0944(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnCrowdControllerGainedAwarenessOf;                       // 0x0950(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnCrowdControllerLostAwarenessOf;                         // 0x0960(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	int                                                FocusModeStencilDefaultValue;                             // 0x0970(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                FocusModeStencilDeathValue;                               // 0x0974(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               ShouldHighlightInFocusMode;                               // 0x0978(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               FocusModeIsActive;                                        // 0x0979(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x2];                                       // 0x097A(0x0002) MISSED OFFSET
	TWeakObjectPtr<class USkeletalMeshComponent>       SeveredFocusModePart;                                     // 0x097C(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	bool                                               SeveredFocusModePartActivated;                            // 0x0984(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0xB];                                       // 0x0985(0x000B) MISSED OFFSET
	float                                              ImpactDragFactor;                                         // 0x0990(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0x55];                                      // 0x0994(0x0055) MISSED OFFSET
	bool                                               RemoveWeaponsOnDeath;                                     // 0x09E9(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               DelayWeaponInit;                                          // 0x09EA(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               NeverDropWeapon;                                          // 0x09EB(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                AmmoDropQuantityOverride;                                 // 0x09EC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData08[0x20];                                      // 0x09F0(0x0020) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnTriggeredTrap;                                          // 0x0A10(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData09[0x1];                                       // 0x0A20(0x0001) MISSED OFFSET
	bool                                               m_bIsInOutOfStaminaMeleeMode;                             // 0x0A21(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData10[0x3E];                                      // 0x0A22(0x003E) MISSED OFFSET
	float                                              AccumulatedStoppingPowerDecAmount;                        // 0x0A60(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData11[0x8];                                       // 0x0A64(0x0008) MISSED OFFSET
	int                                                DefaultXPValue;                                           // 0x0A6C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                StealthKillBonusXP;                                       // 0x0A70(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               CanBeForceKilledInAdrenalineMode;                         // 0x0A74(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData12[0x53];                                      // 0x0A75(0x0053) MISSED OFFSET
	bool                                               m_bMeleeHeavyHitWindowActive;                             // 0x0AC8(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_bCriticalHitWindowActive;                               // 0x0AC9(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData13[0x2];                                       // 0x0ACA(0x0002) MISSED OFFSET
	float                                              m_fMeleeCriticalDamageMultiplier;                         // 0x0ACC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               UseDayNightforDamage;                                     // 0x0AD0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_bDoBlockAttackAnim;                                     // 0x0AD1(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_bIsInProvokeAttackAnim;                                 // 0x0AD2(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData14[0x1];                                       // 0x0AD3(0x0001) MISSED OFFSET
	TWeakObjectPtr<class UAnimSequenceBase>            m_pBlockAttackAnim;                                       // 0x0AD4(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               m_bDoPostBlockAttackAnim;                                 // 0x0ADC(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData15[0x3];                                       // 0x0ADD(0x0003) MISSED OFFSET
	TWeakObjectPtr<class UAnimSequenceBase>            m_pPostBlockAttackAnim;                                   // 0x0AE0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class ABendPawn*                                   m_pEnemyWhoBlockedAttack;                                 // 0x0AE8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class ABendPawn*                                   m_pSavedEnemyWhoBlockedAttack;                            // 0x0AF0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               m_bDodgeUseFocusMode;                                     // 0x0AF8(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData16[0x3];                                       // 0x0AF9(0x0003) MISSED OFFSET
	TWeakObjectPtr<class UAnimationAsset>              m_pPairedDodgeAnim;                                       // 0x0AFC(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TWeakObjectPtr<class UAnimationAsset>              m_pMissDodgeAnim;                                         // 0x0B04(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TWeakObjectPtr<class UAnimationAsset>              m_pPairedDodgeDirectionalAnim;                            // 0x0B0C(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData17[0x18];                                      // 0x0B14(0x0018) MISSED OFFSET
	TWeakObjectPtr<class UAnimationAsset>              m_pCounterAttackReadyAnim;                                // 0x0B2C(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData18[0x1C];                                      // 0x0B34(0x001C) MISSED OFFSET
	class ABendPawn*                                   m_pPairedDodgeAttacker;                                   // 0x0B50(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class ABendPawn*                                   m_pDodgeAttackVictim;                                     // 0x0B58(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TWeakObjectPtr<class UAnimSequenceBase>            m_pDodgeAttackAnim;                                       // 0x0B60(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FBendPairedAnimDodgeAttackData              m_pDodgeAttackAnimData;                                   // 0x0B68(0x0070) (BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData19[0x4];                                       // 0x0BD8(0x0004) MISSED OFFSET
	bool                                               PerformQuickRecovery;                                     // 0x0BDC(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_bCanBeStealthKilled;                                    // 0x0BDD(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData20[0x2];                                       // 0x0BDE(0x0002) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnBeingStealthKilledStart;                                // 0x0BE0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData21[0x8];                                       // 0x0BF0(0x0008) MISSED OFFSET
	class UCapsuleComponent*                           AnchorTransformCapsuleOverride;                           // 0x0BF8(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UBendGraphicsBufferQueryComponent*           GraphicsBufferQuery;                                      // 0x0C00(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnFreeDodgeStarted;                                       // 0x0C08(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnFreeDodgeEnded;                                         // 0x0C18(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               m_CanBeMeleeTargeted;                                     // 0x0C28(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               m_bCanSwitchMeleeTarget;                                  // 0x0C29(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               CanBeStunned;                                             // 0x0C2A(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               m_bInMeleeStunState;                                      // 0x0C2B(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               m_bDiedInMeleeStunState;                                  // 0x0C2C(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               m_bMeleeKillSwing;                                        // 0x0C2D(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               m_bIsInMeleeKillSwing;                                    // 0x0C2E(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               m_bMeleeContextualKill;                                   // 0x0C2F(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_bMeleeContextualAttack;                                 // 0x0C30(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData22[0xF];                                       // 0x0C31(0x000F) MISSED OFFSET
	struct FTransform                                  m_tContextualTrans;                                       // 0x0C40(0x0030) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	bool                                               m_bIsInMeleeAttack;                                       // 0x0C70(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_bMeleeSwingLeftHit;                                     // 0x0C71(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               m_bAttemptMeleeSwing;                                     // 0x0C72(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               m_bMeleeForceAttack;                                      // 0x0C73(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               m_bMeleeCanSwingAgain;                                    // 0x0C74(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               m_bMeleeSwingRightHit;                                    // 0x0C75(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               m_bMeleeSwingRightMiss;                                   // 0x0C76(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               m_bBeingMeleedDeathBlow;                                  // 0x0C77(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               m_bEnemyHasStartedToMeleeDeathBlow;                       // 0x0C78(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData23[0x2];                                       // 0x0C79(0x0002) MISSED OFFSET
	bool                                               m_bAttemptBeingMeleedDeathBlow;                           // 0x0C7B(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData24[0x1];                                       // 0x0C7C(0x0001) MISSED OFFSET
	bool                                               m_bAttemptMeleeDeathBlow;                                 // 0x0C7D(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               m_bKilledByMeleeDeathBlow;                                // 0x0C7E(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData25[0x1];                                       // 0x0C7F(0x0001) MISSED OFFSET
	float                                              MeleeDeathBlowMaxSlope;                                   // 0x0C80(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MeleeDeathBlowChance;                                     // 0x0C84(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               m_bDontAllowToBeKilledDoHalfHealthDamage;                 // 0x0C88(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_bPreventDamageModification;                             // 0x0C89(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_bMeleeNewTargetSelected;                                // 0x0C8A(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               m_bDoStabKill;                                            // 0x0C8B(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               m_bMeleeSwingBrokenWpnDeathBlow;                          // 0x0C8C(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               CanDodgeAttacker;                                         // 0x0C8D(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               m_bDodgeIgnoreAnimState;                                  // 0x0C8E(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               AllowPairedKills;                                         // 0x0C8F(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               AllowContextualKills;                                     // 0x0C90(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               AllowContextualAttacks;                                   // 0x0C91(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               AimAssistTargetable;                                      // 0x0C92(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               AimAssistVehicleTargetableOnly;                           // 0x0C93(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               AimAssistRenderIcon;                                      // 0x0C94(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bWantsToLowerGun;                                         // 0x0C95(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData26[0x56];                                      // 0x0C96(0x0056) MISSED OFFSET
	TWeakObjectPtr<class ABendPawn>                    m_pMeleeDeathBlowVictim;                                  // 0x0CEC(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TimeToDeathByTaser;                                       // 0x0CF4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TimeToDeathByPoisonBolt;                                  // 0x0CF8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PoisonBoltEffectDuration;                                 // 0x0CFC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               ShouldDieFromPoisonBolt;                                  // 0x0D00(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_bDoVictimsPairedAnim;                                   // 0x0D01(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_bDoVictimsPairedAnim_3;                                 // 0x0D02(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_bIsInVictimsPairedAnimState;                            // 0x0D03(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_bDoVictimsLoopingAnim;                                  // 0x0D04(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_bDoVictimsExitLoopingAnim;                              // 0x0D05(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData27[0x2];                                       // 0x0D06(0x0002) MISSED OFFSET
	struct FFreeDodgeData                              m_FreeDodgeData;                                          // 0x0D08(0x0010) (BlueprintVisible, BlueprintReadOnly)
	bool                                               m_bDoDodge;                                               // 0x0D18(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_bStationaryDodge;                                       // 0x0D19(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               m_bDoPairedDodge;                                         // 0x0D1A(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData28[0x2];                                       // 0x0D1B(0x0002) MISSED OFFSET
	bool                                               m_bDoCounterAttackReady;                                  // 0x0D1D(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData29[0x3];                                       // 0x0D1E(0x0003) MISSED OFFSET
	TEnumAsByte<EBodyCarryState>                       BodyCarryState;                                           // 0x0D21(0x0001) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData30[0x6];                                       // 0x0D22(0x0006) MISSED OFFSET
	class ABendPawn*                                   PairedAnimPartner;                                        // 0x0D28(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TWeakObjectPtr<class ABendPawn>                    Grappler;                                                 // 0x0D30(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimationAsset*                             GrappleAttemptAsset;                                      // 0x0D38(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               GrappleFromAttack;                                        // 0x0D40(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData31[0x3];                                       // 0x0D41(0x0003) MISSED OFFSET
	float                                              GrappleTimeMax;                                           // 0x0D44(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              GrappleTimeMin;                                           // 0x0D48(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              GrappleKillWindowSizeMax;                                 // 0x0D4C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              GrappleKillWindowSizeMin;                                 // 0x0D50(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              GrappleKillTargetEnd;                                     // 0x0D54(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              GrappleKillTargetStart;                                   // 0x0D58(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              GrappleStartDelay;                                        // 0x0D5C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<class UAnimSequenceBase*>                   m_pMeleeAttackerAnim;                                     // 0x0D60(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<class UAnimSequenceBase*>                   m_pNextVictimsPairedAnimation;                            // 0x0D70(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<float>                                      m_fMeleeAnimPlayRate;                                     // 0x0D80(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<bool>                                       m_bMeleeAttackFromRightSide;                              // 0x0D90(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<int>                                        m_iMeleeAnimRefOffset;                                    // 0x0DA0(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<struct FMeleeAttackData>                    m_aMeleeAttackData;                                       // 0x0DB0(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	unsigned char                                      UnknownData32[0x10];                                      // 0x0DC0(0x0010) MISSED OFFSET
	class UAnimSequenceBase*                           m_pMeleeAttackerAnimMissRight;                            // 0x0DD0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           m_pMeleeAttackerAnimMissLeft;                             // 0x0DD8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           m_pMeleeAttackerAnimMissOverhead;                         // 0x0DE0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                m_iNextMeleeAttackerAnimIdx;                              // 0x0DE8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData33[0x4];                                       // 0x0DEC(0x0004) MISSED OFFSET
	class UAnimSequenceBase*                           m_pMeleeAttackedDeathAnim;                                // 0x0DF0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData34[0x28];                                      // 0x0DF8(0x0028) MISSED OFFSET
	class UAnimSequenceBase*                           m_pMeleeAttackerDeathKillAnim;                            // 0x0E20(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           m_pVictimsPairedAnimation;                                // 0x0E28(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData35[0x28];                                      // 0x0E30(0x0028) MISSED OFFSET
	class UAnimSequenceBase*                           m_pVictimsPairedAnimation_3;                              // 0x0E58(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData36[0x28];                                      // 0x0E60(0x0028) MISSED OFFSET
	class UAnimSequenceBase*                           m_pVictimsLoopingAnimation;                               // 0x0E88(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           m_pVictimsExitLoopingAnimation;                           // 0x0E90(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               AdjustAnchorToCamera;                                     // 0x0E98(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               DisablePariedKill;                                        // 0x0E99(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData37[0x6];                                       // 0x0E9A(0x0006) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnUnpairedDyingAnimStarted;                               // 0x0EA0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnMeleeDeathBlowStarted;                                  // 0x0EB0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               BrutalKillAvailable;                                      // 0x0EC0(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bContainsOnFireBearTrapAnim;                              // 0x0EC1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData38[0x2];                                       // 0x0EC2(0x0002) MISSED OFFSET
	TWeakObjectPtr<class ABendPawn>                    m_pPairedAnimAttackerPawn;                                // 0x0EC4(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData39[0x160];                                     // 0x0ECC(0x0160) MISSED OFFSET
	float                                              m_fAttackingBuffer;                                       // 0x102C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ShootingAccuracyNPC;                                      // 0x1030(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData40[0x4];                                       // 0x1034(0x0004) MISSED OFFSET
	struct FGameplayTag                                ReducedAccuracyPenaltySkill;                              // 0x1038(0x0008) (Edit, BlueprintVisible)
	float                                              MaxMovementSpeedAccuracyValue;                            // 0x1040(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxMovementSpeedAccuracyPenalty;                          // 0x1044(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxMovementSpeedAccuracyPenalty_SkillReduced;             // 0x1048(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxTurnRateAccuracyValue;                                 // 0x104C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxTurnRateAccuracyPenalty;                               // 0x1050(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxTurnRateAccuracyPenalty_SkillReduced;                  // 0x1054(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FBendSpringInterpolatedFloat                TurnAccuracyPenaltySpring;                                // 0x1058(0x0028) (Edit, DisableEditOnInstance)
	float                                              AimMovementPlayRate_SkillUnlocked;                        // 0x1080(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               m_bStealthKillAvilable;                                   // 0x1084(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bStuckInBearTrap;                                         // 0x1085(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bStuckInSnareTrap;                                        // 0x1086(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData41[0x1];                                       // 0x1087(0x0001) MISSED OFFSET
	struct FAvoidanceModifiers                         AvoidanceModifiers;                                       // 0x1088(0x0018) (Edit, DisableEditOnInstance)
	class UBendAttackAnimData*                         AttackAnimData;                                           // 0x10A0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              EdgeAnchorAttackHeightRequirement;                        // 0x10A8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData42[0x4];                                       // 0x10AC(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnMeleeAttackEnded;                                       // 0x10B0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnArmorPartDestroyed;                                     // 0x10C0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               bIsAttacking;                                             // 0x10D0(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData43[0x7];                                       // 0x10D1(0x0007) MISSED OFFSET
	struct FBendAttackData                             ValidAttackData;                                          // 0x10D8(0x0060) (BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData44[0x10];                                      // 0x1138(0x0010) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnAttackTargetFreeDodgeStarted;                           // 0x1148(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData45[0x10];                                      // 0x1158(0x0010) MISSED OFFSET
	class UBendPairedKillData*                         PairedKillData;                                           // 0x1168(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAnimSequenceBase*                           CurVocalFaceAnimSeq;                                      // 0x1170(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UBendLipSyncComponent*                       LipSyncComponent;                                         // 0x1178(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData46[0x1];                                       // 0x1180(0x0001) MISSED OFFSET
	bool                                               BlockAnchorCollisionFixup;                                // 0x1181(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               WantsToSprintSlide;                                       // 0x1182(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bCanSprintSlide;                                          // 0x1183(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bShouldExitLadder;                                        // 0x1184(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bLadderExitUp;                                            // 0x1185(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bStartLadderUp;                                           // 0x1186(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData47[0x9];                                       // 0x1187(0x0009) MISSED OFFSET
	struct FTransform                                  LadderClimbTransform;                                     // 0x1190(0x0030) (BlueprintVisible, IsPlainOldData)
	bool                                               bIsClimbingWindow;                                        // 0x11C0(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bIsVaultingWideVault;                                     // 0x11C1(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bIsClimbingLadder;                                        // 0x11C2(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bIsClimbingToEdge;                                        // 0x11C3(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData48[0x10];                                      // 0x11C4(0x0010) MISSED OFFSET
	TWeakObjectPtr<class UBendClimbStateDataBase>      ClimbStateData;                                           // 0x11D4(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData49[0x24];                                      // 0x11DC(0x0024) MISSED OFFSET
	bool                                               ShouldFallAfterClimb;                                     // 0x1200(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData50[0x3];                                       // 0x1201(0x0003) MISSED OFFSET
	float                                              OtherSideVaultHeight;                                     // 0x1204(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ClimbAnimLength;                                          // 0x1208(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData51[0x4];                                       // 0x120C(0x0004) MISSED OFFSET
	class UBendDynamicClimbAnimData*                   ClimbAnimData;                                            // 0x1210(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData52[0x8];                                       // 0x1218(0x0008) MISSED OFFSET
	struct FTransform                                  QueuedEdgeTransform;                                      // 0x1220(0x0030) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FTransform                                  QueuedEdge2Transform;                                     // 0x1250(0x0030) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FTransform                                  QueuedEdge3Transform;                                     // 0x1280(0x0030) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FTransform                                  QueuedEdge4Transform;                                     // 0x12B0(0x0030) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnClimbStarting;                                          // 0x12E0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnClimbFinished;                                          // 0x12F0(0x0010) (ZeroConstructor, InstancedReference)
	struct FScriptMulticastDelegate                    OnLadderEnter;                                            // 0x1300(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnLadderExit;                                             // 0x1310(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	TArray<struct FTraversalEdge>                      LadderEdgeSet;                                            // 0x1320(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	struct FName                                       AttributeGroupName;                                       // 0x1330(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               HitByStealthGunShot;                                      // 0x1338(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData53[0x7];                                       // 0x1339(0x0007) MISSED OFFSET
	class UBendStateMachineComponent*                  StateMachineComponent;                                    // 0x1340(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class ABendAnimStateMachine*                       AnimStateMachine;                                         // 0x1348(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FString                                     CanceledPerformActionPOIName;                             // 0x1350(0x0010) (Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst)
	float                                              CanceledPerformActionTime;                                // 0x1360(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData54[0xC];                                       // 0x1364(0x000C) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnWaterEntered;                                           // 0x1370(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnWaterExited;                                            // 0x1380(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	float                                              WaterDepthEnterThreshold;                                 // 0x1390(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              WaterDepthExitThreshold;                                  // 0x1394(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               WaterDepthKillThresholdEnabled;                           // 0x1398(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData55[0x3];                                       // 0x1399(0x0003) MISSED OFFSET
	float                                              WaterDepthKillThreshold;                                  // 0x139C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FBendRVOAvoidanceGroups                     RVOAvoidanceGroups;                                       // 0x13A0(0x0030) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData56[0xC0];                                      // 0x13D0(0x00C0) MISSED OFFSET
	float                                              MaxDesiredGroundSpeed;                                    // 0x1490(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MinDesiredGroundSpeed;                                    // 0x1494(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BlindFireAimOffsetAngle;                                  // 0x1498(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              AimMoveOffsetAngle;                                       // 0x149C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              AimUpDownAngle;                                           // 0x14A0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MaxAimAngle;                                              // 0x14A4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HeadTrackingYaw;                                          // 0x14A8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              HeadTrackingPitch;                                        // 0x14AC(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bWantsToJump;                                             // 0x14B0(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bCanCriticalHit;                                          // 0x14B1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               CanBeCriticalHit;                                         // 0x14B2(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               OnAllFours;                                               // 0x14B3(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData57[0x4];                                       // 0x14B4(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnAmbushModeEnded;                                        // 0x14B8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBendPawnMakeNoise;                                      // 0x14C8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               IsDrugged;                                                // 0x14D8(0x0001) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData58[0x3];                                       // 0x14D9(0x0003) MISSED OFFSET
	struct FVector2D                                   DruggedSprintStumbleTimerValueRange;                      // 0x14DC(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DruggedSprintStumbleTimerMax;                             // 0x14E4(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              DruggedSprintStumbleTimerCurrent;                         // 0x14E8(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               TryDruggedSprintStumble;                                  // 0x14EC(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData59[0x3];                                       // 0x14ED(0x0003) MISSED OFFSET
	class UBendCharacterLookComponent*                 LookComponent;                                            // 0x14F0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	TAssetPtr<class UBendSkeletalMeshArrayData>        PawnSkeletalMeshes;                                       // 0x14F8(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	unsigned char                                      UnknownData60[0x8];                                       // 0x1518(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnFinishedLoadingLook;                                    // 0x1520(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	TEnumAsByte<EInventoryWeaponID>                    DefaultWeaponID;                                          // 0x1530(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<EInventoryWeaponID>                    DefaultThrowableID;                                       // 0x1531(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<EInventoryWeaponID>                    DefaultRetreatThrowableID;                                // 0x1532(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<EWeaponEquipOnSpawn>                   AutoEquipType;                                            // 0x1533(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<EEquippableSlot>                       DefaultThrowableSlot;                                     // 0x1534(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData61[0x3];                                       // 0x1535(0x0003) MISSED OFFSET
	float                                              VehicleSpeedWeaponThreshold;                              // 0x1538(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CoverProjectileSafetyAngle;                               // 0x153C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class AActor*                                      CarriedObject;                                            // 0x1540(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bBeginDroppingCarriedObject;                              // 0x1548(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData62[0x7];                                       // 0x1549(0x0007) MISSED OFFSET
	class UFootIKController*                           FootIKComponent;                                          // 0x1550(0x0008) (ExportObject, ZeroConstructor, InstancedReference, Deprecated, IsPlainOldData)
	class UMiniMapLocationComponent*                   MiniMapLocationComponent;                                 // 0x1558(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	bool                                               bNeverDisplayMapIcon;                                     // 0x1560(0x0001) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               bDoNotUnhideAfterCinematic;                               // 0x1561(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData63[0x6];                                       // 0x1562(0x0006) MISSED OFFSET
	TArray<class UPrimitiveComponent*>                 OwnedDataComponents;                                      // 0x1568(0x0010) (ExportObject, ZeroConstructor, Transient)
	unsigned char                                      UnknownData64[0x10];                                      // 0x1578(0x0010) MISSED OFFSET
	float                                              SoundEventLifetime;                                       // 0x1588(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData65[0x4];                                       // 0x158C(0x0004) MISSED OFFSET
	class UAudioComponent*                             m_pVocalComp;                                             // 0x1590(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData66[0x8];                                       // 0x1598(0x0008) MISSED OFFSET
	TWeakObjectPtr<class UAudioComponent>              m_pMovementFoliageAudioComp;                              // 0x15A0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	TWeakObjectPtr<class UAudioComponent>              m_pMovementWaterAudioComp;                                // 0x15A8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class USoundCue*                                   WaterMovementSound;                                       // 0x15B0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<struct FFoliageMovementData>                FoliageAudioFX;                                           // 0x15B8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData67[0x4];                                       // 0x15C8(0x0004) MISSED OFFSET
	float                                              FoliageAudioMinDist;                                      // 0x15CC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData68[0xC0];                                      // 0x15D0(0x00C0) MISSED OFFSET
	TEnumAsByte<EePawnGender>                          m_eGender;                                                // 0x1690(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData69[0x7];                                       // 0x1691(0x0007) MISSED OFFSET
	class USoundClass*                                 BankSoundClass;                                           // 0x1698(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBendAudioEventVOWaitTimeData*               EventVOWaitTimeData;                                      // 0x16A0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               m_bCanPlayConversationInterruptVO;                        // 0x16A8(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData70[0x58];                                      // 0x16A9(0x0058) MISSED OFFSET
	bool                                               m_bIgnoreDamage;                                          // 0x1701(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData71[0x6];                                       // 0x1702(0x0006) MISSED OFFSET
	TArray<TEnumAsByte<ETypeOfBaseDamage>>             m_IgnoreDamageExceptions;                                 // 0x1708(0x0010) (BlueprintVisible, ZeroConstructor)
	bool                                               m_bPlayHitReactions;                                      // 0x1718(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData72[0x7];                                       // 0x1719(0x0007) MISSED OFFSET
	float                                              DamageAngle;                                              // 0x1720(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EeDamageLocations>                     DamageLocation;                                           // 0x1724(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EWeaponType>                           DamagedBy;                                                // 0x1725(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData73[0x2];                                       // 0x1726(0x0002) MISSED OFFSET
	class UClass*                                      LastDamageType;                                           // 0x1728(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               HasBlendSpaceDamageAnim;                                  // 0x1730(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               HasSequenceDamageAnim;                                    // 0x1731(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               HasRecoveryAnim;                                          // 0x1732(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               DisarmMeleeWeaponWhenHit;                                 // 0x1733(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_bMeleeWeaponDoneDisarming;                              // 0x1734(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData74[0x3];                                       // 0x1735(0x0003) MISSED OFFSET
	float                                              StumbleChance;                                            // 0x1738(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_fMustStumbleTimer;                                      // 0x173C(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_bShouldStumble;                                         // 0x1740(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData75[0x6F];                                      // 0x1741(0x006F) MISSED OFFSET
	float                                              FadeOffBloodDamageTimer;                                  // 0x17B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData76[0xA4];                                      // 0x17B4(0x00A4) MISSED OFFSET
	bool                                               IgnoreArmDestruction;                                     // 0x1858(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               IgnoreLegDestruction;                                     // 0x1859(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData77[0x6];                                       // 0x185A(0x0006) MISSED OFFSET
	class UBendDestructionData*                        DestructionData;                                          // 0x1860(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ExplosiveLeftArmDestructionChance;                        // 0x1868(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ExplosiveRightArmDestructionChance;                       // 0x186C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ExplosiveLeftLegDestructionChance;                        // 0x1870(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ExplosiveRightLegDestructionChance;                       // 0x1874(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ExplosiveHeadDestructionChance;                           // 0x1878(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData78[0x4];                                       // 0x187C(0x0004) MISSED OFFSET
	TArray<class ASkeletalMeshActor*>                  SeveredLimbs;                                             // 0x1880(0x0010) (ZeroConstructor)
	TWeakObjectPtr<class ASkeletalMeshActor>           SeveredHead;                                              // 0x1890(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData79[0x8];                                       // 0x1898(0x0008) MISSED OFFSET
	class UBendAnimDamageData*                         AnimDamageData;                                           // 0x18A0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBendAnimDyingData*                          AnimDyingData;                                            // 0x18A8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData80[0x10];                                      // 0x18B0(0x0010) MISSED OFFSET
	bool                                               InDamageAnimState;                                        // 0x18C0(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               WasDamaged;                                               // 0x18C1(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               WasDamagedAgain;                                          // 0x18C2(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData81[0x5];                                       // 0x18C3(0x0005) MISSED OFFSET
	TArray<struct FDamageAnimInfo>                     DamageAnimInfo;                                           // 0x18C8(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	int                                                DamageAnimInfoIdx;                                        // 0x18D8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               m_bInFullBodyHitReaction;                                 // 0x18DC(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_bInUpperBodyHitReaction;                                // 0x18DD(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_bInAdditiveHitReaction;                                 // 0x18DE(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData82[0x1];                                       // 0x18DF(0x0001) MISSED OFFSET
	float                                              m_fFullBodyHitReactionCoolDownTime;                       // 0x18E0(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData83[0x4];                                       // 0x18E4(0x0004) MISSED OFFSET
	class UAnimSequenceBase*                           BurningInBearTrapAnim;                                    // 0x18E8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FullBodyHitReactionCoolDownTimer;                         // 0x18F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData84[0xC];                                       // 0x18F4(0x000C) MISSED OFFSET
	struct FDyingAnimInfo                              DyingAnimInfo;                                            // 0x1900(0x0070) (BlueprintVisible, BlueprintReadOnly)
	struct FFlinchAnimInfo                             FlinchAnimInfo;                                           // 0x1970(0x0020) (BlueprintVisible, BlueprintReadOnly)
	int                                                EngulfedStage;                                            // 0x1990(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              EngulfedPercentage;                                       // 0x1994(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DistanceToEnemyCombat;                                    // 0x1998(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               CanBeTargeted;                                            // 0x199C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData85[0x3];                                       // 0x199D(0x0003) MISSED OFFSET
	float                                              DetectionTimeMult;                                        // 0x19A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData86[0x4];                                       // 0x19A4(0x0004) MISSED OFFSET
	struct FName                                       HeadBoneName;                                             // 0x19A8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       HipsBoneName;                                             // 0x19B0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData87[0x8];                                       // 0x19B8(0x0008) MISSED OFFSET
	struct FName                                       HeadSocketName;                                           // 0x19C0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<struct FName>                               HeadAreaBones;                                            // 0x19C8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FName>                               ChestAreaBones;                                           // 0x19D8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FName>                               StomachAreaBones;                                         // 0x19E8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FName>                               RightArmUpperBones;                                       // 0x19F8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FName>                               RightArmLowerBones;                                       // 0x1A08(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FName>                               RightLegUpperBones;                                       // 0x1A18(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FName>                               RightLegLowerBones;                                       // 0x1A28(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FName>                               RightFootBones;                                           // 0x1A38(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FName>                               LeftArmUpperBones;                                        // 0x1A48(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FName>                               LeftArmLowerBones;                                        // 0x1A58(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FName>                               LeftLegUpperBones;                                        // 0x1A68(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FName>                               LeftLegLowerBones;                                        // 0x1A78(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FName>                               LeftFootBones;                                            // 0x1A88(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData88[0x8];                                       // 0x1A98(0x0008) MISSED OFFSET
	class UClass*                                      BendAttackManager;                                        // 0x1AA0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBendAttackManager*                          m_pBendAttackManager;                                     // 0x1AA8(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<struct FLimbTrackingInfo>                   LimbTrackingInfoArray;                                    // 0x1AB0(0x0010) (Edit, ZeroConstructor)
	float                                              NoiseVolumeCrouchRun;                                     // 0x1AC0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NoiseVolumeFastWalk;                                      // 0x1AC4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NoiseVolumeJog;                                           // 0x1AC8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NoiseVolumeRun;                                           // 0x1ACC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NoiseVolumeSprint;                                        // 0x1AD0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NoiseVolumeRoll;                                          // 0x1AD4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NoiseVolumeLand;                                          // 0x1AD8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NoiseVolumeLadder;                                        // 0x1ADC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData89[0x8];                                       // 0x1AE0(0x0008) MISSED OFFSET
	class UBlendSpace1D*                               m_pFlinchReactionBlendSpace;                              // 0x1AE8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               m_bDoFlinchReaction;                                      // 0x1AF0(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData90[0x3];                                       // 0x1AF1(0x0003) MISSED OFFSET
	float                                              m_fFlinchReactionAngle;                                   // 0x1AF4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData91[0x4];                                       // 0x1AF8(0x0004) MISSED OFFSET
	float                                              m_fRemainingForcedRagdollTime;                            // 0x1AFC(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData92[0x38];                                      // 0x1B00(0x0038) MISSED OFFSET
	struct FName                                       RightHandAttachPoint;                                     // 0x1B38(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       LeftHandAttachPoint;                                      // 0x1B40(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       RightFootAttachPoint;                                     // 0x1B48(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       LeftFootAttachPoint;                                      // 0x1B50(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       HeadAttachPoint;                                          // 0x1B58(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       FullBodyAttachPoint;                                      // 0x1B60(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       BikeImpactWpnAttachPoint;                                 // 0x1B68(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       RollingWpnAttachPoint;                                    // 0x1B70(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<class UClass*>                              DefaultInventoryClasses;                                  // 0x1B78(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	class UBendWeapon_Manager*                         WeaponManagerComponent;                                   // 0x1B88(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UBendEquippable_Manager*                     EquippableManagerComponent;                               // 0x1B90(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData93[0xE0];                                      // 0x1B98(0x00E0) MISSED OFFSET
	TArray<TWeakObjectPtr<class ABendWeapon>>          EquippedWeapons;                                          // 0x1C78(0x0010) (ZeroConstructor, Transient)
	TWeakObjectPtr<class ABendWeapon>                  PreviousWeapon;                                           // 0x1C88(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TWeakObjectPtr<class ABendWeapon>                  DesiredWeapon;                                            // 0x1C90(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TWeakObjectPtr<class ABendWeapon>                  EquipingWeapon;                                           // 0x1C98(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	uint32_t                                           PrevWpnThrownInvHashKey;                                  // 0x1CA0(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	uint32_t                                           PrevWpnMeleeInvHashKey;                                   // 0x1CA4(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData94[0x8C];                                      // 0x1CA8(0x008C) MISSED OFFSET
	TEnumAsByte<EVocalEventFaceState>                  VocalFaceState;                                           // 0x1D34(0x0001) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData95[0x3];                                       // 0x1D35(0x0003) MISSED OFFSET
	struct FTakeHitInfo                                LastTakeHitInfo;                                          // 0x1D38(0x0140) (Net, Transient)
	unsigned char                                      UnknownData96[0x4];                                       // 0x1E78(0x0004) MISSED OFFSET
	float                                              TargetingSpeedModifier;                                   // 0x1E7C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<EAimStance>                            AimStance;                                                // 0x1E80(0x0001) (BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData)
	TEnumAsByte<ETensePose>                            TensePose;                                                // 0x1E81(0x0001) (BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData97[0x1E];                                      // 0x1E82(0x001E) MISSED OFFSET
	float                                              ForceJogSpeedModifier;                                    // 0x1EA0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ForceWalkSpeedModifier;                                   // 0x1EA4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData98[0x19];                                      // 0x1EA8(0x0019) MISSED OFFSET
	unsigned char                                      UnknownData99 : 5;                                        // 0x1EC1(0x0001)
	unsigned char                                      m_bDisableHeavyBreathing : 1;                             // 0x1EC1(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bHidePawnMiniMap : 1;                                     // 0x1EC1(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bIsHiding : 1;                                            // 0x1EC1(0x0001)
	unsigned char                                      bIsInteracting : 1;                                       // 0x1EC2(0x0001)
	unsigned char                                      m_bIsSprinting : 1;                                       // 0x1EC2(0x0001)
	unsigned char                                      bHiddenBlockControl : 1;                                  // 0x1EC2(0x0001)
	unsigned char                                      UnknownData100[0x1];                                      // 0x1EC3(0x0001) MISSED OFFSET
	unsigned char                                      bRequiresCoverWhenThreat : 1;                             // 0x1EC4(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData101[0x3];                                      // 0x1EC5(0x0003) MISSED OFFSET
	unsigned char                                      bStopMontagesAndPlayDeathAnimOnDeath : 1;                 // 0x1EC8(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData102[0x7];                                      // 0x1EC9(0x0007) MISSED OFFSET
	TArray<class UAnimMontage*>                        DeathAnims;                                               // 0x1ED0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	bool                                               PlayDyingOnFire;                                          // 0x1EE0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData103[0x3];                                      // 0x1EE1(0x0003) MISSED OFFSET
	TWeakObjectPtr<class APawn>                        CompanionPawn;                                            // 0x1EE4(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData104[0x4];                                      // 0x1EEC(0x0004) MISSED OFFSET
	class UBendRideVehicleComponent*                   RideVehicleComponent;                                     // 0x1EF0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData105[0x8];                                      // 0x1EF8(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnGrappleExitBegin;                                       // 0x1F00(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnGrappleEnterBegin;                                      // 0x1F10(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnGrappledBegin;                                          // 0x1F20(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnGrappledEnded;                                          // 0x1F30(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnNewGrappler;                                            // 0x1F40(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnStabKillBegin;                                          // 0x1F50(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnStabKillEnded;                                          // 0x1F60(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPairedDodgeBegin;                                       // 0x1F70(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPairedDodgeEnded;                                       // 0x1F80(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBrutalKillBegin;                                        // 0x1F90(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBrutalKillEnded;                                        // 0x1FA0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnWeaponFired;                                            // 0x1FB0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      bReplicateHealthToAll : 1;                                // 0x1FC0(0x0001)
	unsigned char                                      UnknownData106[0x3];                                      // 0x1FC1(0x0003) MISSED OFFSET
	float                                              Health;                                                   // 0x1FC4(0x0004) (Edit, BlueprintVisible, Net, ZeroConstructor, SaveGame, IsPlainOldData)
	float                                              UnderArmorHealth;                                         // 0x1FC8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              UnderArmorBarrierCooldown;                                // 0x1FCC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData107[0x4];                                      // 0x1FD0(0x0004) MISSED OFFSET
	float                                              MaxHealth;                                                // 0x1FD4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bIsDying : 1;                                             // 0x1FD8(0x0001)
	unsigned char                                      UnknownData108[0xF];                                      // 0x1FD9(0x000F) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnDied;                                                   // 0x1FE8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData109[0x78];                                     // 0x1FF8(0x0078) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnKilledByPlayer;                                         // 0x2070(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnKilledByPlayerPreUnpossess;                             // 0x2080(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnKilledByNPC;                                            // 0x2090(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDiedOrDestroyed;                                        // 0x20A0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnLimbSevered;                                            // 0x20B0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnTeleported;                                             // 0x20C0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	TEnumAsByte<EAIFactionType>                        pawnDefaultFaction;                                       // 0x20D0(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData110[0x1];                                      // 0x20D1(0x0001) MISSED OFFSET
	TEnumAsByte<EBendPawnBodyType>                     PawnDefaultBodyType;                                      // 0x20D2(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               IsBuddy;                                                  // 0x20D3(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData111[0x4];                                      // 0x20D4(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnGoreBodySpawned;                                        // 0x20D8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	TWeakObjectPtr<class ABendPOI>                     m_pGoreBodyPOI;                                           // 0x20E8(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnBeginActorOverrideForCinematics;                        // 0x20F0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnEndActorOverrideForCinematics;                          // 0x2100(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnRestingInPeace;                                         // 0x2110(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnFallingOffBikeBecauseOfWater;                           // 0x2120(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class UBendAITeam*                                 AITeam;                                                   // 0x2130(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UBendAISquad*                                Squad;                                                    // 0x2138(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData112[0x4];                                      // 0x2140(0x0004) MISSED OFFSET
	unsigned char                                      bHasRightHandStumpProsthetic : 1;                         // 0x2144(0x0001) (Edit)
	bool                                               bCanReactToFlashbang;                                     // 0x2145(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData113[0x2];                                      // 0x2146(0x0002) MISSED OFFSET
	TArray<struct FDamageTypeModifier>                 DamageModifiers;                                          // 0x2148(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	float                                              SelfDamageMultiplier;                                     // 0x2158(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SelfExplosiveDamageMultiplier;                            // 0x215C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SelfFireDamageMultiplier;                                 // 0x2160(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FriendlyBulletDamageMultiplier;                           // 0x2164(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FriendlyNonbulletDamageMultiplier;                        // 0x2168(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FriendlyExplosiveDamageMultiplier;                        // 0x216C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PlayerExplosiveDamageMultiplier;                          // 0x2170(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PlayerFireDamageMultiplier;                               // 0x2174(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              NonPlayerEnemyDamageMultiplayer;                          // 0x2178(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData114[0x4];                                      // 0x217C(0x0004) MISSED OFFSET
	class UClass*                                      WaterDamageType;                                          // 0x2180(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bCanTakeFallingDamage;                                    // 0x2188(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bCanTakeFallingDamageBeforeLanding;                       // 0x2189(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData115[0x2];                                      // 0x218A(0x0002) MISSED OFFSET
	float                                              MinFallDistanceForDamage;                                 // 0x218C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUseFallDamageCurve;                                      // 0x2190(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData116[0x7];                                      // 0x2191(0x0007) MISSED OFFSET
	class UCurveFloat*                                 FallDamageCurve;                                          // 0x2198(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinFallingDamage;                                         // 0x21A0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FallingVelocityForDamage;                                 // 0x21A4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FallingVelocityForDeath;                                  // 0x21A8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData117[0x4];                                      // 0x21AC(0x0004) MISSED OFFSET
	class UClass*                                      FallingDamageType;                                        // 0x21B0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      FallingCameraShake;                                       // 0x21B8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinFallDistance;                                          // 0x21C0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FallingCollisionCheckDistance;                            // 0x21C4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FallingDurationBeforeSound;                               // 0x21C8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData118[0x4];                                      // 0x21CC(0x0004) MISSED OFFSET
	TArray<class USoundCue*>                           FallingScaredSounds;                                      // 0x21D0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TArray<class USoundCue*>                           FallingDamageSounds;                                      // 0x21E0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	class USoundCue*                                   LandingSound;                                             // 0x21F0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bIsFalling;                                               // 0x21F8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData119[0x3];                                      // 0x21F9(0x0003) MISSED OFFSET
	float                                              FallingZStart;                                            // 0x21FC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	float                                              LastFallingVelocityZ;                                     // 0x2200(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	float                                              FallingDuration;                                          // 0x2204(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	bool                                               bHavePlayedFallingVo;                                     // 0x2208(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData120[0x7];                                      // 0x2209(0x0007) MISSED OFFSET
	bool                                               DisableDrops;                                             // 0x2210(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               SearchBodyLootTaken;                                      // 0x2211(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               DroppedItemLootTaken;                                     // 0x2212(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData121[0x5];                                      // 0x2213(0x0005) MISSED OFFSET
	class AActor*                                      SearchBodySpawnedReference;                               // 0x2218(0x0008) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	class ABendInventoryPickup*                        DroppedPickupSpawnedRefs;                                 // 0x2220(0x0008) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	class ABendInventoryPickup*                        DroppedWeaponRef;                                         // 0x2228(0x0008) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	TEnumAsByte<ETrophyKillType>                       TrophyKillType;                                           // 0x2230(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EBND150TrophyKillType>                 BND150TrophyKillType;                                     // 0x2231(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_bDoLipSync;                                             // 0x2232(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData122[0x5];                                      // 0x2233(0x0005) MISSED OFFSET
	TArray<struct FInventoryIDDetails>                 NonTableDrops;                                            // 0x2238(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	unsigned char                                      UnknownData123[0xD0];                                     // 0x2248(0x00D0) MISSED OFFSET
	TWeakObjectPtr<class AVehiclePawn>                 AssignedVehicle;                                          // 0x2318(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData124[0x40];                                     // 0x2320(0x0040) MISSED OFFSET
	float                                              VehicleImpactCooldown;                                    // 0x2360(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData125[0x16];                                     // 0x2364(0x0016) MISSED OFFSET
	unsigned char                                      UnknownData126 : 1;                                       // 0x237A(0x0001)
	unsigned char                                      bDisableAutoHolsterForCinematics : 1;                     // 0x237A(0x0001) (Edit)
	unsigned char                                      UnknownData127[0xC5];                                     // 0x237B(0x00C5) MISSED OFFSET
	TArray<class UStatusEffect*>                       CurrentStatusEffects;                                     // 0x2440(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	struct FStatusEffectResponseData                   ValidStatusEffects[0xE];                                  // 0x2450(0x000C) (Edit, DisableEditOnInstance)
	struct FScriptMulticastDelegate                    StatusStartedDelegate;                                    // 0x24F8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    StatusEndingDelegate;                                     // 0x2508(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData128[0x78];                                     // 0x2518(0x0078) MISSED OFFSET
	TArray<TEnumAsByte<EStatusEffects>>                ScaryStatusEffects;                                       // 0x2590(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	class UClass*                                      DefaultFireEffect;                                        // 0x25A0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData129[0x8];                                      // 0x25A8(0x0008) MISSED OFFSET
	TArray<class UBendAnimVariationData*>              AnimVariationDataArray;                                   // 0x25B0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData130[0x8];                                      // 0x25C0(0x0008) MISSED OFFSET
	class UBendAnimGestureData*                        GestureAnimData;                                          // 0x25C8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FHitResult                                  EmptyHitResult;                                           // 0x25D0(0x0088) (Transient)
	unsigned char                                      UnknownData131[0x98];                                     // 0x2658(0x0098) MISSED OFFSET
	unsigned char                                      bCanJoinCrowd : 1;                                        // 0x26F0(0x0001) (Edit)
	unsigned char                                      UnknownData132[0x4F];                                     // 0x26F1(0x004F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendPawn");
		return ptr;
	}


	void WillHearThrownNoise(class ABendWeapon_Projectile* ThrownWeapon, bool WillHear);
	void WeaponStolen(class ABendWeapon* StolenWeapon);
	bool WasLastHitOnArmor();
	bool WasDamageCriticalHit();
	void WaitingForInput_End(TEnumAsByte<EWaitForInputType> eInputWaitType);
	void WaitingForInput_Begin(TEnumAsByte<EWaitForInputType> eInputWaitType, bool bIgnoreAnimState);
	void VictimStabInputSuccessful();
	void VictimBrutalKillInputSuccessful(class ABendPawn* pVictim);
	void UsePreviousWeapon();
	void UpdateNPCCalloutLocation(const struct FVector& Offset);
	void UpdateConditionalLookNow();
	void UpdateAwarenessIndicatorProgress(float NormalizedProgress);
	void UnsuppressWeaponEquip();
	void UnsuppressWeaponDrawn(bool InstantWeaponEquip);
	void UnsuppressManualAim();
	void UnhideGunClip(TEnumAsByte<EEquippableSlot> EquippableSlot);
	void Unhide();
	void UnequipBinoculars(bool bForceHolster);
	void TurnRagdollOnDelay();
	bool TryStumble(float MustStumbleTime);
	bool TryExitVehicle(bool bForce, bool bFallOff, bool bQueueRequest, float QueueRequestTime);
	bool TryExitScopeMode();
	bool TryEnterVehicle(class AVehiclePawn* VehiclePawn, const struct FName& SeatName, bool bForce, bool bQueueRequest, float QueueRequestTime, float MaxDistance, bool UseAutoNav, bool UsingOveriddenAnimation);
	bool TryEnterScopeMode();
	void ToggleHiding();
	void ThrowWeapon(TEnumAsByte<EEquippableSlot> EquippableSlot);
	void ThrowExtraClip(const struct FVector& DirectionalImpulse, const struct FVector& RotationalImpulse, const struct FVector& MirroredDirectionalImpulse, const struct FVector& MirroredRotationalImpulse, bool UseWeaponSocket, const struct FName& SocketLocationName, TEnumAsByte<EEquippableSlot> EquippableSlot);
	void ThrowClip(const struct FVector& DirectionalImpulse, const struct FVector& RotationalImpulse, const struct FVector& MirroredDirectionalImpulse, const struct FVector& MirroredRotationalImpulse, bool UseClipTimer, float ClipTimer, TEnumAsByte<EEquippableSlot> EquippableSlot);
	void SwitchToLoadedConditionalLook();
	void SuppressWeaponDrawn(bool InstantWeaponUnequip, bool CanDrawDuringSuppression, bool UnequipCurrentWeapon);
	void SuppressManualAim();
	void Suicide();
	void StopStatusEffectsOfType(TEnumAsByte<EStatusEffects> Type);
	void StopAllStatusEffects();
	void StopAllAnimMontages();
	void StartMeleeMissBranch();
	struct FBendAttackData StartMeleeAttack(class AActor* AttackTarget, const struct FName& AttackName, bool IgnoreDistance);
	void StartedProvokeAttack();
	void StartedBlockingAttackersAttack();
	void StartBulletByFlinchReaction();
	struct FBendAttackData StartBerserkAttack(class AActor* AttackTarget, const struct FName& AttackName, bool IgnoreDistance);
	void Spawned();
	void SpawnClipMesh(TEnumAsByte<EEquippableSlot> EquippableSlot);
	class AVehiclePawn* SpawnAssignedVehicle(class UClass* Class, bool SpawnEvenIfColliding, struct FTransform* SpawnTransform);
	void SpawnActorPOIGoreBody();
	bool ShouldTakeHalfDamage();
	void ShellLoaded(TEnumAsByte<EEquippableSlot> EquippableSlot);
	void SetVocalSoundClass(class USoundClass* pBnkSndClass);
	void SetVocalFaceAnimationSequence(class UAnimSequenceBase* VocalFaceAnimSeq);
	void SetVehicleRiderShouldDodge(bool bShouldDodge);
	void SetTakeHalfDamage(bool HalfDamage);
	void SetSprinting(bool inside);
	void SetSaggyMeshEnabled(bool bSet);
	void SetReloadSpeedScalar(float fScalar);
	void SetReactionState(TEnumAsByte<ECurrentStateForHitReaction> NewState);
	bool SetRagdoll(bool bSet);
	void SetPlayHitReactions_CalledFromAnimations(bool PlayThem);
	void SetPlayHitReactions(bool bPlayThem);
	void SetPairedKillData(class UBendPairedKillData* NewData);
	void SetOutOfBreath(bool bOutOfBreath);
	void SetNonTableDrops(TArray<struct FInventoryIDDetails> newArray, bool addToExisting);
	void SetMovementParameters(TEnumAsByte<EAIMoveSpeed> MaxSpeed, bool canSprint, float OverrideSprintSpeed, bool canCrouch, bool canFreeDodge, bool CanSprintSlide, int* Token);
	void SetMountedToTurret(bool Mounted);
	void SetMinNumProvokesBeforeProvokeAttack(int MinNumHits);
	void SetMinNumMeleeHitVictimDoProvoke(int MinNumHits);
	void SetMaxNumProvokesBeforeProvokeAttack(int MaxNumHits);
	void SetMaxNumMeleeHitVictimDoProvoke(int MaxNumHits);
	void SetMaxHealth(float NewMaxHealth, bool MaintainHealthPercent);
	void SetLyingDown(bool bLyingDown);
	void SetLiveSwappedVehicle(class AVehiclePawn* InVehicle);
	void SetLastProjectileWeapon(class ABendWeapon* theWeapon);
	void SetLastMeleeWeapon(class ABendWeapon* theWeapon);
	void SetIsBeingStealthKilled(bool bBeingStealthKilled);
	void SetInteracting(bool NewInteracting);
	void SetInside(bool inside);
	void SetGender(TEnumAsByte<EePawnGender> eGender);
	void SetForceInjuredWalk(bool NewValue);
	struct FBendReconcilerToken SetForceIdle(const struct FBendReconcilerToken& Handle, bool bForce);
	void SetForcedWalk_New(bool forceWalk, bool canSprint, float sprintSpeed, bool canCrouch, bool canFreeDodge, bool useSlowerWalk, bool CanSprintSlide, int* Token);
	void SetForcedWalk(bool forceWalk, bool canSprint, float sprintSpeed, bool canCrouch, bool canFreeDodge, bool useSlowerWalk);
	void SetForcedStrafeFacingTarget(class AActor* FacingTarget);
	void SetForcedStrafe(bool bForceStrafe);
	void SetForceDirectionalThrowAtLocation(bool enable, const struct FVector& Location);
	void SetFlowAttractorIntensityAndRadiusScale(float Scale);
	void SetFadeOffBloodValues(TArray<TEnumAsByte<EeDamageLocations>> DamageLocations, TArray<float> FadeMultipliers);
	void SetFadeOffBloodOnHeadValue(float MultipleFadeTime);
	void SetFactionType(TEnumAsByte<EAIFactionType> newFaction);
	void SetEventVOWaitTimeData(class UBendAudioEventVOWaitTimeData* EventVOWaitTime);
	void SetEnableAnchorCollisionFixup(bool bEnable, bool bVerticalDirectionOnly);
	void SetDrugged(bool NewDrugged, bool ForceStrafe);
	void SetDesiredWeapon(class ABendWeapon* NewWeapon);
	void SetCriticalHitDamageAmount(float fCriticalHit);
	void SetCanUseWeapons(bool AllowWeaponUse);
	void SetCanUseTraps(bool AllowTrapEquip);
	void SetCanUseRangedWeapons(bool AllowRangedUse);
	void SetCanUseMeleeWeapons(bool AllowMeleeUse);
	void SetCanPlayVO(bool CanPlayVO);
	void SetCanPlayResponseVO(bool CanPlayResponseVO);
	void SetCanMeleeAttack(bool CanMeleeAttack);
	void SetCanJoinCrowd(bool bCanJoin);
	void SetCanEquipWeapons(bool AllowWeaponEquip);
	void SetCanEquipTraps(bool AllowTrapEquip);
	void SetCanEquipRangedWeapons(bool AllowRangedEquip);
	void SetCanEquipMeleeWeapons(bool AllowMeleeEquip);
	void SetCanEquipItems(bool AllowItemEquip);
	void SetCanEquipDamageTypes(TArray<TEnumAsByte<ETypeOfBaseDamage>> UsableWeaponsBasedOnDamageTypes);
	void SetCanEquipBasedOnDamageTypes(TArray<TEnumAsByte<ETypeOfBaseDamage>> UsableWeaponsBasedOnDamageTypes, TArray<TEnumAsByte<ETypeOfDamage>> UsableWeaponsBasedOnSpecificDamageTypes);
	void SetCanDoWheelie(bool bCanDo);
	void SetCanBeMarkedByBinoculars(bool CanBeMarked);
	void SetAssignedVehicle(class AVehiclePawn* InAssignedVehicle);
	void SetAmountOfTimeToDisableProvoke(float NumberOfSeconds);
	void SetAmbushMode(bool bYesOrNo, bool bInEnclosedSpace, bool bAllowAimAssist);
	void SetAiming(TEnumAsByte<EAimStance> NewAimStance, TEnumAsByte<EEquippableSlot> EquippableSlot);
	void SetAdrenalineMeter(float Value);
	void ServerHolsterWeapon();
	void ServerEquipWeapon(class ABendWeapon* NewWeapon);
	void ScriptedNavWalking(bool enable);
	void ResetFinishedCounterAttack();
	void ResetDoPairedDodgeFlag();
	void ResetDoFlinchReactionFlag();
	void ResetDoDodgeFlag();
	void ResetDoCounterAttackReadyFlag();
	void ResetCanArmMeleeFlag();
	void RemoveWeapon(class ABendWeapon* Weapon);
	void RemoveForceIdleInfluence(struct FBendReconcilerToken* InHandle);
	void RemoveEquippedMeleeWeapon(TEnumAsByte<EEquippableSlot> EquippableSlot);
	void RemoveDestroyedTrap(class ABendTrap* Trap);
	void RemoveBloodFromLowerArms();
	void RemoveBloodFromHead();
	void RemoveAnimVariationData(class UBendAnimVariationData* OldData);
	void RemoveAllWeapons(bool IncludeDefaults);
	void RemoveAllBloodAndBurns();
	void ReloadComplete(TEnumAsByte<EEquippableSlot> EquippableSlot);
	void RefreshWeaponBarrels(TEnumAsByte<EEquippableSlot> EquippableSlot);
	void ReEnableAllCollision();
	void PreUnEquipComplete();
	void PlayDropThrowableAnim(TEnumAsByte<EEquippableSlot> EquippableSlot);
	float PlayAnimMontage(class UAnimMontage* anim, float PlayRate, const struct FName& StartSectionName);
	void PickUpCarriedObject(class AActor* ObjectToCarry);
	float PerformActionWithLooping(const struct FBendActionData& TheActionData, class AActor* PropActor, const struct FTransform& AnchorWorldTransform, const struct FScriptDelegate& OnCompleteDelegate, const struct FScriptDelegate& OnFailDelegate, const struct FScriptDelegate& OnLoopDelegate);
	float PerformActionNoDelegates(const struct FBendActionData& TheActionData, class AActor* PropActor, const struct FTransform& AnchorWorldTransform);
	class UPerformActionContext* PerformAction_NEW(const struct FBendActionData& TheActionData, class AActor* PropActor, const struct FTransform& AnchorWorldTransform, const struct FScriptDelegate& OnCompleteDelegate, const struct FScriptDelegate& OnFailDelegate, const struct FScriptDelegate& OnLoopDelegate);
	float PerformAction(const struct FBendActionData& TheActionData, class AActor* PropActor, const struct FTransform& AnchorWorldTransform, const struct FScriptDelegate& OnCompleteDelegate, const struct FScriptDelegate& OnFailDelegate, const struct FScriptDelegate& OnLoopDelegate, const struct FName& MasterTimelineName);
	void PawnIsDead();
	void PairDodgeStarted();
	void PairDodgeEnded();
	void OverrideShootingAccuracyNPC(float Accuracy);
	void OnStopSprinting();
	void OnStartSprinting();
	void OnStartedExitingVehicleSeat_NoParams_WithForce();
	void OnStartedExitingVehicleSeat_NoParams();
	void OnStartedEnteringVehicleSeat_NoParams_WithForce();
	void OnStartedEnteringVehicleSeat_NoParams();
	void OnSlomoEnd(class UAnimNotifyState* AnimNotify);
	void OnSlomoBegin(class UAnimNotifyState* AnimNotify);
	void OnRightLegBlownOff(class USkeletalMeshComponent* pLimbMesh, class ASkeletalMeshActor* pSeveredLimb);
	void OnRightArmBlownOff(class USkeletalMeshComponent* pLimbMesh, class ASkeletalMeshActor* pSeveredLimb);
	void OnRep_LastTakeHitInfo();
	void OnRep_Health();
	void OnRep_CurrentWeapon();
	void OnReloadStarted();
	void OnReloadFinished();
	void OnPostSetLook();
	void OnPlayDying(float Damage, class APawn* InstigatedBy, const struct FVector& HitLocation, const struct FVector& Momentum, class UDamageType* DamageType, const struct FHitResult& HitInfo, class AActor* DamageCauser);
	void OnMissionEnding(TEnumAsByte<EMissionIDs> MissionID);
	void OnMeleeCriticalHitSuccessful();
	void OnLeftLegBlownOff(class USkeletalMeshComponent* pLimbMesh, class ASkeletalMeshActor* pSeveredLimb);
	void OnLeftArmBlownOff(class USkeletalMeshComponent* pLimbMesh, class ASkeletalMeshActor* pSeveredLimb);
	void OnHeadBlownOff(class USkeletalMeshComponent* pLimbMesh, class ASkeletalMeshActor* pSeveredLimb);
	void OnFinishedExitingVehicleSeat();
	void OnFinishedEnteringVehicleSeat();
	void OnFailedEnteringVehicleSeat();
	void OnExitStunState();
	void OnEquipCompleted(class ABendWeapon* EquippedItem);
	void OnEnemyBulletFlyBy(class ABendProjectile* Projectile);
	void OnEndAllowCancelActionWithMoveInput();
	void OnClimbFailed(TEnumAsByte<EPeformActionFailedReason> ReasonForFailure);
	void OnClimbCompleted();
	void OnChargeDodgeBegin(class ABendPawn* Rager);
	void OnBeginAllowCancelActionWithMoveInput(float BlendOutTime, TEnumAsByte<EBendAnimNotifyEarlyExitType> CancelCondition);
	void NotifyOnWeaponHitStaticMesh();
	void NotifyOnWeaponHitEnemy();
	void NotifyNewGrappler(class ABendPawn* NewGrappler, int GrapplerCount);
	void NotifyGrappleEnded(class ABendPawn* PreviousGrappler);
	void NotifyGrappleBegan(bool SkipButtonEvent);
	void NotifyEnemyLeftMelee(class ABendPawn* OldEnemy);
	void NotifyEnemyJoinedMelee(class ABendPawn* NewEnemy);
	void NewMeleeAttackStarted();
	void MoveItemSlots(TEnumAsByte<EEquippableSlot> FromSlot, TEnumAsByte<EEquippableSlot> ToSlot);
	float ModifyDamage(float Damage, class UClass* DamageType, class AController* EventInstigator, class AActor* DamageCauser);
	void MeleeWeaponAttackCompleted();
	void MeleeMissStarted();
	void MeleeKillMoveStarted();
	void MeleeButtonReleased();
	void MeleeButtonPressed();
	void MeleeAttackHitSwingEnded(int iIndex);
	void MeleeAttackFullyBlendedIn(int iIndex);
	void LoadConditionalLook(bool SwitchAfterLoad);
	bool IsWeaponDefault(class ABendWeapon* Weapon);
	bool IsUsingFlashlight();
	bool IsTryingToEnterVehicle();
	bool IsSwimming();
	bool IsSprinting();
	bool IsRestingInPeace();
	bool IsReloading();
	bool IsProtectedByFullBodyArmor();
	bool IsPlayingVO();
	bool IsPawnJumping();
	bool IsPawnFallingForTime(float Time);
	bool IsPawnFalling();
	bool IsOutOfBreath();
	bool IsOnFloor();
	bool IsMountedToTurret();
	bool IsMeleeWeaponDefault();
	bool IsMeleeAttackCriticalHit(float weaponCriticalHitChance);
	bool IsManualAimSuppressed();
	bool IsLyingDown();
	bool IsInWater();
	bool IsInVehicle();
	bool IsInteracting();
	bool IsInside();
	bool IsInScopeMode();
	bool IsInRockStunState();
	bool IsInRagdoll();
	bool IsInPairedQuickKillAnim();
	bool IsInPairedKillAnim();
	bool IsInPairedAnimation();
	bool IsInMelee();
	bool IsInLowCover();
	bool IsInHitReaction();
	bool IsInHighCover();
	bool IsInDodge();
	bool IsInCoverFacingRight();
	bool IsInCoverFacingLeft();
	bool IsInCornerCoverRight();
	bool IsInCornerCoverLeft();
	bool IsInBlindfire();
	bool IsInAmbushMode();
	bool IsInAGrapple();
	bool IsHoldingTwoHandedWeapon();
	bool IsHidingInEnclosedSpace();
	bool IsHiding();
	bool IsHeavyBreathingDisabled();
	bool IsFrozenOutsideOfPhysicsActivationBounds();
	bool IsFirstPerson();
	bool IsFiring();
	bool IsFireFocusMeleeAttackingMe();
	bool IsEquippedWeaponThrown(TEnumAsByte<EEquippableSlot> EquippableSlot);
	bool IsEquippedWeaponMelee(TEnumAsByte<EEquippableSlot> EquippableSlot);
	bool IsEquippedWeaponGunNotCrossbow(TEnumAsByte<EEquippableSlot> EquippableSlot);
	bool IsEquippedWeaponGun(TEnumAsByte<EEquippableSlot> EquippableSlot);
	bool IsEquippedWeaponFists(TEnumAsByte<EEquippableSlot> EquippableSlot);
	bool IsDefaultWeaponEquipped(TEnumAsByte<EEquippableSlot> EquippableSlot);
	bool IsCurrentlyInAMeleeAttack();
	bool IsCrowdAwareOf();
	bool IsCarryingObject();
	bool IsBinocularMarkCalloutActive();
	bool IsBeingStealthKilled();
	bool IsAwarenessCalloutActive();
	bool IsAutoHolsterDisabled();
	bool IsAttackBeingBlocked();
	bool IsAlive();
	bool IsAimingThrowable();
	bool IsAimingGun();
	bool IsAimingBehindLowCover(TEnumAsByte<EEquippableSlot> EquippableSlot);
	bool IsAiming();
	bool IsAimed(TEnumAsByte<EEquippableSlot> EquippableSlot);
	void InterpSmoothedMoveSpeedForAnimationSelectionAndScaling(float OldSmoothedSpeed, float DeltaTime, float InterpRateRampingUp, float InterpRateRampingDown, bool bIgnoreVerticalSpeedWhenNotUsingRootMotion, float* NewSmoothedSpeed, float* NewSpeed);
	void IncreaseAdrenalineMeter(float IncAmount);
	void IgnoreDamage_AnimNotifyExit();
	void IgnoreDamage_AnimNotifyEnter(TArray<TEnumAsByte<ETypeOfBaseDamage>> exceptions);
	void HolsterWeapon(TEnumAsByte<EEquippableSlot> EquippableSlot, bool bForce);
	void HolsterComplete(TEnumAsByte<EEquippableSlot> EquippableSlot);
	bool HitPawnArmor(const struct FName& BoneName);
	void HideWeapon(bool bHide, TEnumAsByte<EWeaponType> WeaponType);
	void HideGunClip(TEnumAsByte<EEquippableSlot> EquippableSlot);
	void HideAllWeapons(bool bHide);
	void HideAllPawnInventory(bool bHide);
	void Hide(bool CanControl, bool bIsInEnclosedSpace);
	bool HasWeaponEquipedOrIsEquiping();
	bool HasWeaponEquiped(TEnumAsByte<EEquippableSlot> EquippableSlot);
	bool HasValidAttackAnim();
	bool HasTrapDetonatorEquiped();
	bool HasStatusEffect(TEnumAsByte<EStatusEffects> Type);
	bool HasScaryStatusEffect();
	bool HasRightLeg();
	bool HasRightArm();
	bool HasLeftLeg();
	bool HasLeftArm();
	bool HasHeadBlownOff();
	bool HasHead();
	bool HasFullBodyArmorEquipped();
	bool HasFinishedStatusEffect(TEnumAsByte<EStatusEffects> Type);
	bool HasBodyPart(const struct FName& BoneName);
	bool HasBinocularsEquipedInHand();
	bool HasBinocularsEquiped();
	bool HasAThrowingWeapon();
	bool HasArmorEquipped();
	bool HasARetreatThrowingWeapon();
	bool HasARangedWeapon();
	bool HasAMeleeWeapon();
	void HandleFocusModeStateChange(bool EnteredFocusMode);
	void HandleFocusModeDeactivation();
	class ABendWeapon* GetWeaponToSwapToPrimaryOrPistol(TEnumAsByte<EEquippableSlot> EquippableSlot);
	TEnumAsByte<EWeaponScariness> GetWeaponScarinessAtSocketLocation(TEnumAsByte<EWeaponSocketLocation> socketLocation);
	class ABendWeapon* GetWeaponForAiming();
	class ABendWeapon* GetWeaponAtSocketLocation(TEnumAsByte<EWeaponSocketLocation> socketLocation);
	class ABendWeapon* GetWeapon(TEnumAsByte<EEquippableSlot> EquippableSlot);
	bool GetWantsToFreeDodge();
	bool GetWantsToAim();
	class UAudioComponent* GetVocalAudioComponent();
	float GetVehicleSteeringNeg1To1();
	TEnumAsByte<EVehicleRiderState> GetVehicleRiderState();
	bool GetVehicleRiderShouldDodge();
	class AVehiclePawn* GetVehicle();
	TEnumAsByte<EUnaimedAnimMoveStyle> GetUnaimedMoveStyle();
	class ABendWeapon* GetTrapDetonatorWeapon();
	TEnumAsByte<ETensePose> GetTensePose();
	class ABendWeapon* GetTaserWeapon();
	struct FTransform GetTargetTransformFlattened(class AActor* Target);
	TArray<class UStatusEffect*> GetStatusEffectsOfType(TEnumAsByte<EStatusEffects> Type);
	class ABendAnimStateMachine* GetStateMachine();
	class UBendAISquad* GetSquad();
	class ABendWeapon* GetSecondAlternativePrimaryWeapon(TEnumAsByte<EEquippableSlot> EquippableSlot);
	TEnumAsByte<EWeaponScariness> GetScariestWeapon(bool NeedAmmo);
	class UBendRideVehicleComponent* GetRideVehicleComponent();
	class ABendWeapon* GetRandomThrownWeapon(bool IncludingFromInventory);
	class ABendWeapon* GetRandomShootingWeapon(bool IncludingFromInventory);
	class UAnimSequenceBase* GetRandomSequence(const struct FName& AnimSequenceGroupName, class UAnimSequenceBase* LastUsed);
	class ABendWeapon* GetRandomRetreatThrownWeapon(bool IncludingFromInventory);
	class ABendWeapon* GetRandomMeleeWeapon(bool IncludingFromInventory);
	int GetRandomBurstNum(TEnumAsByte<EEquippableSlot> EquippableSlot);
	class UBlendSpaceBase* GetRandomBlendSpace(const struct FName& AnimBlendSpaceGroupName, class UBlendSpaceBase* LastUsed);
	class ABendWeapon* GetRandomAnyWeapon(bool IncludingFromInventory);
	struct FBendAnimSequenceData GetRandomAnimation(TArray<struct FBendAnimSequenceData> pAnimList, const struct FBendAnimSequenceData& pAnimToIgnore);
	struct FBendActionData GetRandomAction(TArray<struct FBendActionData> pActionList, struct FBendActionData* pActionToIgnore);
	TEnumAsByte<EBendPropGripStyle> GetPropGripStyle();
	class ABendEquippableItem* GetPrimaryEquippedItem();
	class ABendWeapon* GetPreviousWeapon();
	class ABendPawn* GetPotentialMeleeVictim();
	float GetPercentageOfBodyProtectedByArmor();
	class UPawnNoiseEmitterComponent* GetPawnNoiseEmitterComponent();
	class USkeletalMeshComponent* GetPawnMesh();
	TEnumAsByte<EBendPawnBodyType> GetPawnBodyType();
	struct FTransform GetPairedDodgeFaceAttackerAnchorTransform();
	class ABendPawn* GetPairedDodgeAttacker();
	int GetNumWeapons();
	int GetNumCrowdMembersAwareOf();
	class UBendNPCCalloutWidget* GetNPCCalloutWidget();
	class UPawnNoiseEmitterComponent* GetNoiseEmitter();
	class ABendWeapon* GetNextProjectileWeapon(TEnumAsByte<EEquippableSlot> EquippableSlot);
	struct FName GetNextForwardLimb_New(const struct FVector& ForwardDirectionNormalized, float StrideLength, float PredictionTime, bool bIsSlowLimbMovement);
	struct FName GetNextForwardLimb(const struct FVector& ForwardDirectionNormalized, float StrideLength, float PredictionTime, bool bIsSlowLimbMovement);
	class ABendPawn* GetMyKiller();
	struct FTransform GetMoveToTarget_UpdatedStartAnchorTransform(class AActor* TargetToFace);
	struct FTransform GetMoveToTarget_StartAnchorTransform(class AActor* TargetToFace);
	struct FTransform GetMoveToTarget_EndAnchorTransform(class AActor* TargetMoveTo, bool ReverseAngle, bool AdjustAttackToTargetCapsuleSize, float TargetToPawnAnchorOffset);
	float GetMoveSpeedForAnimationSelectionAndScaling(bool bIgnoreVerticalSpeedWhenNotUsingRootMotion);
	class AVehiclePawn* GetMountedVehicleOrVehicleBeingDismounted();
	bool GetMeleeWeaponDoneDisarming();
	class ABendPawn* GetMeleeTarget();
	struct FTransform GetMeleeStartAnchorTransform();
	struct FTransform GetMeleeEndAnchorTransform();
	class AVehiclePawn* GetLiveSwappedVehicle();
	class UBendLipSyncComponent* GetLipSyncComponent();
	struct FVector GetHeadLocation(bool bUseHeadBone);
	struct FVector GetHeadForward(bool bUseHeadBone);
	TEnumAsByte<EePawnGender> GetGender();
	float GetFullBodyArmorHealth();
	bool GetForceInjuredWalk();
	struct FVector GetFloorWaterLocation();
	float GetFloorWaterDepth();
	TEnumAsByte<EPhysicalSurface> STATIC_GetFloorSurfaceTypeOfCharacter(class ABendPawn* Character);
	TEnumAsByte<EPhysicalSurface> GetFloorSurfaceType();
	class UPhysicalMaterial* GetFloorPhysicalMaterial();
	class ABendWeapon* GetFirstWeapon(bool bCheckAmmo, bool bCheckCanDrawWeapon);
	class ABendWeapon* GetFirstThrowingWeapon();
	TEnumAsByte<EAIFactionType> GetFactionType();
	TEnumAsByte<EAIFactionType> GetFactionForMelee();
	struct FTransform GetFaceTarget_EndAnchorTransform(class AActor* TargetToFace, bool ReverseAngle);
	class ABendEquippableItem* GetEquippedOrEquippingItem();
	class ABendEquippableItem* GetEquippedItemCurrentlyInHand();
	class ABendWeapon* GetEquipingWeapon();
	class ABendPawn* GetEnemyWhoBlockedAttack();
	bool GetDruggedSprintStumble();
	bool GetDrugged();
	class ABendWeapon* GetDesiredWeapon();
	TEnumAsByte<EeDamageLocations> GetDamageLocation(const struct FName& BoneName);
	TEnumAsByte<EWeaponScariness> GetCurrentGunsScariness();
	int GetCurrentAttackAnimIndex();
	struct FTransform GetCurPosition_StartAnchorTransform();
	float GetCriticalHitDamageAmount();
	struct FRotator GetCompanionPawnActorSpaceAngle();
	class UCharacterMovementComponent* GetCharacterMovementComponent();
	bool GetCanJoinCrowd();
	float GetBrightness();
	class ABendWeapon* GetBootKnifeWeapon();
	TEnumAsByte<EBlindFireAnimMoveStyle> GetBlindFireMoveStyle();
	class ABendAIController* GetBendAIController();
	struct FTransform GetBeingMeleedDeathBlowStartAnchorTransform();
	struct FTransform GetBeingMeleedDeathBlowEndAnchorTransform();
	class UBendAttackManager* GetAttackManager();
	class AVehiclePawn* GetAssignedVehicle();
	bool GetAreWeaponsThisScary(TEnumAsByte<EWeaponScariness> WeaponScarinessEnum, bool NeedAmmo);
	class UBendAnimVariationData* GetAnimVariationData(const struct FName& AnimGroupName);
	class UBendAnimBlueprintMessenger* GetAnimMessenger();
	class UCapsuleComponent* GetAnchorTransformCapsule();
	class ABendWeapon* GetAlternativePrimaryWeapon(TEnumAsByte<EEquippableSlot> EquippableSlot);
	class UBendAITeam* GetAITeam();
	TEnumAsByte<EAimStance> GetAimType();
	struct FRotator GetAimOffsets();
	TEnumAsByte<EAimedAnimMoveStyle> GetAimedMoveStyle();
	float GetAdrenalineMeter();
	TArray<class UStatusEffect*> GetActiveStatusEffects();
	void FreeDodgeStarted();
	void FreeDodgeEnded();
	void ForceKillWithDamageType(const struct FDamageEvent& DamageEvent, class ABendPawn* Killer, bool forceRagdoll);
	void ForceKillByDamageType(class UClass* DamageType, class ABendPawn* Killer, bool forceRagdoll);
	void ForceKill(class ABendPawn* Killer, bool forceRagdoll);
	void ForceHiddenFromCrowd(bool bHiddenFromCrowd);
	void ForceExitVehicleSeat(TEnumAsByte<EBendVehicleExitReason> ExitReason);
	void ForceExitHitReaction(bool ExitHitReaction);
	void ForceDrawMeleeWeapon(TEnumAsByte<EEquippableSlot> EquippableSlot);
	void ForceDrawBootKnifeWeapon(TEnumAsByte<EEquippableSlot> EquippableSlot);
	void FinishPlacingTrap();
	void FinishedStreamingLook(bool SwitchAfterLoad);
	class ABendWeapon* FindWeaponByID(TEnumAsByte<EInventoryWeaponID> WeaponID);
	class AVehiclePawn* FindAVehicleToEnter(float MaxDistance);
	void FinalEquipComplete(TEnumAsByte<EEquippableSlot> EquippableSlot);
	bool ExitVehicleWithAnim_Deprecated(bool bForce);
	bool ExitLadderClimb(const struct FVector& EdgePos, const struct FVector& EdgeNormal);
	void ExitingLoopingAnim();
	void EquipBinoculars();
	bool EnterVehicleWithAnim_Deprecated(class AVehiclePawn* VehiclePawn, const struct FName& SeatName, bool bForce);
	void EnableProceduralRotation(bool bEnable);
	void EnableCrowdAttractionAndAwarenessTrigger(bool bEnable);
	void EnableAutoHolster();
	void EarlyExitHitReacationInputSuccessful();
	void DruggedSprintStumbled();
	void DropWeapon(class ABendWeapon* Weapon, bool BrokenWeaponOnly);
	void DropThrownWeapon(TEnumAsByte<EEquippableSlot> EquippableSlot);
	void DropCarriedObjectComplete();
	void DropCarriedObject();
	void DrawWeapon(class ABendWeapon* theWeapon, TEnumAsByte<EEquippableSlot> EquippableSlot, bool bForce, bool bShouldStopAiming);
	bool DrawTrapWeapon(TEnumAsByte<EEquippableSlot> EquippableSlot, bool bForce);
	void DrawTrapDetonatorWeapon(TEnumAsByte<EEquippableSlot> EquippableSlot, bool Force);
	bool DrawThrownWeaponByID(TEnumAsByte<EInventoryWeaponID> WeaponID, bool bForce);
	bool DrawThrownWeapon(bool bForce);
	void DrawTaserWeapon(TEnumAsByte<EEquippableSlot> EquippableSlot, bool Force);
	bool DrawRifle(TEnumAsByte<EWeaponSocketLocation> socketLocation, TEnumAsByte<EEquippableSlot> EquippableSlot, bool bForce);
	bool DrawRetreatThrownWeapon(bool bForce);
	bool DrawPistol(TEnumAsByte<EWeaponSocketLocation> socketLocation, TEnumAsByte<EEquippableSlot> EquippableSlot, bool bForce);
	void DrawOrSelectWeaponFromWheel(class ABendWeapon* theWeapon, TEnumAsByte<EEquippableSlot> EquippableSlot, bool bForce);
	bool DrawMeleeWeapon(TEnumAsByte<EEquippableSlot> EquippableSlot, bool bForce);
	void DrawLastWeapon(bool ForceEquip);
	bool DrawGun(bool bForce, TEnumAsByte<EEquippableSlot> EquippableSlot);
	void DrawComplete(TEnumAsByte<EEquippableSlot> EquippableSlot, bool bFinalize);
	void DodgeInputSuccessful();
	void DodgeInputButtonPressed();
	void DisarmMeleeWeapon(bool IsHeavyHit, TEnumAsByte<EEquippableSlot> EquippableSlot, bool IsFromAnimNotify);
	void DisarmAllMeleeWeapons(bool bSetMeleeArmLockoutFlag);
	void DisableStatusEffects(bool Disabled);
	void DisableInput(class APlayerController* PlayerController);
	void DisableHeavyBreathing(bool bDisable);
	bool DisableEquippingByWeaponSocket(bool DisableEquip, TEnumAsByte<EWeaponSocketLocation> HolsterSocketName);
	void DisableCanDodge(bool Disable, bool ActivateDodgeInput);
	void DisableAutoHolsterForCinematics(bool bDisable);
	void DisableAutoHolster(bool bAutoEquip);
	void DisableAllCollision();
	bool Die(float KillingDamage, const struct FDamageEvent& DamageEvent, class AController* Killer, class AActor* DamageCauser);
	void DetonateTrapTriggered(TEnumAsByte<EEquippableSlot> EquippableSlot);
	void DetonateTrap();
	void DetonateThrowable(class UClass* DetonationStatusEffect, TEnumAsByte<EEquippableSlot> EquippableSlot);
	void DecreaseAdrenalineMeter(float DecAmount);
	void DeactivateMarkedCallout();
	void DeactivateAwarenessCallout(bool DeactivateDueToAware);
	void DeactivateAdrenalineMode();
	bool CurrentWeaponHasScope();
	void Crouch(bool bClientSimulation);
	void CrossbowCocked(TEnumAsByte<EEquippableSlot> EquippableSlot);
	void ClipRemoved(TEnumAsByte<EEquippableSlot> EquippableSlot);
	void ClipLoaded(TEnumAsByte<EEquippableSlot> EquippableSlot);
	void ClearOverrideShootingAccuracyNPC();
	void ClearMovementParameters(int* Token);
	void ClearCanEquipDamageTypes();
	void ClearCanEquipBasedOnDamageTypes();
	void ClearAttackTarget();
	void CleanupLastClimbLockout();
	float ClampGrappleResult(float InResult);
	void CheckIfCanDoCoolMeleeAttack_WindowStarted_AnimNotify(bool DisplayIcon, class UParticleSystem* EmitterTemplate, const struct FName& AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, TEnumAsByte<EAttachLocation> LocationType, bool bAutoDestroy, bool FailedDisplayIcon, class UParticleSystem* FailedEmitterTemplate, const struct FName& FailedAttachPointName, const struct FVector& FailedLocation, const struct FRotator& FailedRotation, TEnumAsByte<EAttachLocation> FiledLocationType, bool FailedAutoDestroy);
	void CheckIfCanDoCoolMeleeAttack_WindowEnded_AnimNotify();
	bool CanPlayCombatAudio(float MaxDistance);
	bool CanPawnBeForceKilledInAdrenalineMode();
	bool CanDetonateTrap();
	void CanCounterAttack_Started();
	void CanCounterAttack_Ended(class ABendPawn* pAttacker);
	void CancelReload();
	void CancelProvokeAttack();
	void CancelItemEquip();
	bool CancelActionWithBlendOutTime(float BlendOutTime);
	bool CancelActionWithActionData(const struct FBendActionData& ActionToCancel, float BlendOutTime);
	bool CancelAction();
	bool CanCancelActionWithMoveInput();
	bool CanBeMarkedByBinoculars();
	int CalculateXPValue();
	float CalculateMeleeCriticalHit(const struct FHitResult& Hit, class UDamageType* DamageType, class ABendWeapon* Weapon, float DamageAmount);
	void CalculateCriticalHit_NEW(const struct FHitResult& Hit, class UDamageType* DamageType, class ABendProjectile* Projectile, float DamageAmount);
	void CalculateCriticalHit(const struct FName& BoneName, class UDamageType* DamageType, class ABendProjectile* Projectile, float DamageAmount);
	void BendPawnMakeNoise(float Loudness, class APawn* NoiseInstigator, const struct FVector& NoiseLocation, TEnumAsByte<EBendSoundEventType> SoundEvent);
	void BeingMeleedDeathBlowStarted();
	void BeingMeleedDeathBlowEnded();
	bool AttemptDodge(float angle);
	void AttackTargetFreeDodgeStarted();
	void AttackersCounterWindowStarted_AnimNotify(bool DisplayIcon, class UParticleSystem* EmitterTemplate, const struct FName& AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, TEnumAsByte<EAttachLocation> LocationType, bool bAutoDestroy);
	void AttackersCounterWindowEnded_AnimNotify();
	void AttackersCounterFlagTriggerd_AnimNotify();
	void ArmMeleeWeapon(bool IsHeavyHit, TEnumAsByte<EEquippableSlot> EquippableSlot, float DamagePercentage, bool disableTargetsHitReactions, class UClass* OverrideDamageType, TEnumAsByte<EMeleeSwingDirection> SwingDirection, bool KillingBlow, bool RenderImpactParticle, TEnumAsByte<EMeleeUpDownSwingDirection> UpDownSwingDirection, TEnumAsByte<EDamageAnimationTypes> ForceHitReactionType, float ForceStrength);
	class USkeletalMeshComponent* ApplyDestruction(const struct FName& BoneName, class UClass* DamageType, bool PlaySound, bool RenderParticles, bool RenderBloodStain, bool SimulatePhysics, const struct FVector& ForceDirection, float ForceAmount);
	void AnimNotifySlomoEnd(class UAnimNotifyState* AnimNotify);
	void AnimNotifySlomoBegin(class UAnimNotifyState* AnimNotify, float TimeDilationValue);
	void AnimNotify_VictimStabbed(class UAnimNotify* Notify);
	void AnimNotify_StunState(bool IsStunned);
	void AnimNotify_StartVictimPairedAnim(class UAnimNotify* Notify);
	void AnimNotify_StartVictimDeathAnim(class UAnimNotify* Notify);
	void AnimNotify_SetVocalFaceState(TEnumAsByte<EVocalEventFaceState> FaceStateIn);
	void AnimNotify_SetDyingAndRespawnParameters(float FadeToBlackTimer);
	void AnimNotify_Release(class UAnimNotify* Notify);
	void AnimNotify_NavWalking(bool enable, TEnumAsByte<EeNavWalkingTypes> NavWalkingType);
	void AnimNotify_MeleeKill(class UAnimNotify* Notify);
	void AnimNotify_MeleeHeavyHitWindowEnd();
	void AnimNotify_MeleeHeavyHitWindowBegin();
	void AnimNotify_MeleeDeathBlow(class UAnimNotify* Notify);
	void AnimNotify_HolsterComplete(class UAnimNotify* Notify);
	void AnimNotify_DrawComplete(class UAnimNotify* Notify);
	void AnimNotify_CriticalHitWindowEnd();
	void AnimNotify_CriticalHitWindowBegin();
	void AnimNotify_CanSwitchMeleeTarget(class UAnimNotify* Notify);
	void AnimNotify_CanBeThrown(bool bBegin);
	void AnimNotify_BreakWeapon(class UAnimNotify* Notify);
	void AnimNotify_AttackCanBeDodged(bool bBegin);
	void AllowFreeDodge(bool bAllow);
	void AllowCrouch(bool bAllow);
	void AddWeapon_NEW(TEnumAsByte<EInventoryWeaponID> WeaponID, const struct FLatentActionInfo& LatentInfo, TEnumAsByte<EEquippableSlot> EquippableSlot, TEnumAsByte<EInventoryAmmoID> AmmoID, bool bEquip, class ABendWeapon** ReturnValue);
	void AddToNonTableDrops(const struct FInventoryIDDetails& newItem);
	class UStatusEffect* AddStatusEffect(class UClass* Effect, class AActor* EffectOwner, class AController* EffectInstigator);
	void AddDetonatableTrap(class ABendTrap* Trap);
	void AddBloodToBodyPart(TEnumAsByte<EeBloodOnBodyParts> BodyPart);
	void AddBloodFXHit(class USceneComponent* HitComponent, const struct FName& BoneName, const struct FVector& ImpactPoint, float RadiusInitial, float RadiusFinal, float RadiusTransitionTime, float intensity, float Randomization, bool UseHeadValues);
	void AddBloodFadingMultiplierToBones(float Multiplier, TArray<struct FName> BoneNames);
	void AddAnimVariationData(class UBendAnimVariationData* NewData);
	void ActivateUnawareCallout();
	void ActivateSemiAwareCallout();
	bool ActivateMarkedCallout(TEnumAsByte<ECalloutWidgetType> WidgetType);
	void ActivateFirstDetectionCallout();
	void ActivateAdrenalineMode();
};


// Class BendGame.BendSensingComponent
// 0x05A0 (0x06B8 - 0x0118)
class UBendSensingComponent : public UPawnSensingComponent
{
public:
	TArray<struct FDetectedPawn>                       m_DetectedPawns;                                          // 0x0118(0x0010) (ZeroConstructor, Transient)
	TArray<struct FDetectedBody>                       m_DetectedBodies;                                         // 0x0128(0x0010) (ZeroConstructor, Transient)
	struct FDetectedHorde                              m_DetectedHorde;                                          // 0x0138(0x0028) (Transient)
	unsigned char                                      UnknownData00[0xB0];                                      // 0x0160(0x00B0) MISSED OFFSET
	unsigned char                                      UnknownData01 : 2;                                        // 0x0210(0x0001)
	unsigned char                                      DetectionConeDebug : 1;                                   // 0x0210(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      HearingDebug : 1;                                         // 0x0210(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      SensingIntervalDebug : 1;                                 // 0x0210(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bNeverForgetEnemy : 1;                                    // 0x0210(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bHearPlayerWithLos : 1;                                   // 0x0210(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bSeeBodies : 1;                                           // 0x0210(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bSeeVehicles : 1;                                         // 0x0211(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bDetectHorde : 1;                                         // 0x0211(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bAlwaysUseHeadDir : 1;                                    // 0x0211(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bTestForLOSBlockedByFriendly : 1;                         // 0x0211(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bSenseWhileOnFire : 1;                                    // 0x0211(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData02[0x2];                                       // 0x0212(0x0002) MISSED OFFSET
	float                                              SemiAwareThreshold;                                       // 0x0214(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SafeTimeBetweenRocks;                                     // 0x0218(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FBendSensingData                            DayUnaware;                                               // 0x021C(0x00F4) (Edit, BlueprintVisible)
	struct FBendSensingData                            DayAware;                                                 // 0x0310(0x00F4) (Edit, BlueprintVisible)
	struct FBendSensingData                            NightUnaware;                                             // 0x0404(0x00F4) (Edit, BlueprintVisible)
	struct FBendSensingData                            NightAware;                                               // 0x04F8(0x00F4) (Edit, BlueprintVisible)
	float                                              HeardSoundMinAwareness;                                   // 0x05EC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              HeardSoundMaxAwareness;                                   // 0x05F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              HeardSoundFullVolume;                                     // 0x05F4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DamagedMinAwareness;                                      // 0x05F8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DetectFriendlyRadius;                                     // 0x05FC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              IgnoreFriendlyRadius;                                     // 0x0600(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SurvivalSightMult;                                        // 0x0604(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SurvivalSightAngleMult;                                   // 0x0608(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SurvivalHearingMult;                                      // 0x060C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EGameDifficulty>                       SurvivalDifficulty;                                       // 0x0610(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0xA7];                                      // 0x0611(0x00A7) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendSensingComponent");
		return ptr;
	}


	void SetFactionValueOfPawn(class ABendPawn* Pawn, float Value);
	bool SawPawnHide(class ABendPawn* Pawn);
	bool PreviouslyAwareAndTimeSinceLastSeen(class ABendPawn* SearchPawn, bool* PreviouslyAware, float* TimeSinceSeen);
	void OnBonesFinalized();
	bool HaveLOS(class ABendPawn* Pawn);
	int GetNumFriendlyBodies();
	int GetNumDetectedByFaction(TEnumAsByte<EAIFactionType> Faction);
	float GetDistToPawn(class ABendPawn* Pawn);
	class ABendPawn* GetClosestThreatPawn();
	class ABendPawn* GetClosestTargetPawn();
	class ABendPawn* GetClosestPawnByFaction(TEnumAsByte<EAIFactionType> Faction);
	class ABendPawn* GetClosestFriendPawn();
	TEnumAsByte<EAIAwareState> GetAwarenessOfPawn(class ABendPawn* Pawn);
	float GetAwarenessLevelOfPawn(class ABendPawn* Pawn);
};


// Class BendGame.BendHumanCoverQueryManager
// 0x0048 (0x0070 - 0x0028)
class UBendHumanCoverQueryManager : public UObject
{
public:
	unsigned char                                      UnknownData00[0x48];                                      // 0x0028(0x0048) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendHumanCoverQueryManager");
		return ptr;
	}

};


// Class BendGame.BendCalloutWidgetComponent
// 0x0020 (0x07C0 - 0x07A0)
class UBendCalloutWidgetComponent : public UBendWidgetComponent
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x07A0(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendCalloutWidgetComponent");
		return ptr;
	}


	bool ShouldUpdateAwarenessCallout();
	void SetHidePawnMiniMap(bool bHide);
	bool IsEnemy(class ABendPlayerController* PlayerController);
	bool IsCalloutActive();
	TEnumAsByte<EBendPawnBodyType> GetPawnBodyType();
	TEnumAsByte<EAIFactionType> GetFactionType();
	float GetAwarenessValue();
	TEnumAsByte<EAIAwareState> GetAwarenessOfPawn(class ABendPawn* PawnInQuestion);
	struct FVector GetActorLocation();
	void ActivateUnawareCallout();
	void ActivateSemiAwareCallout();
	bool ActivateMarkedCallout(TEnumAsByte<ECalloutWidgetType> WidgetType);
};


// Class BendGame.BendAIManager
// 0x0208 (0x0550 - 0x0348)
class ABendAIManager : public AActor
{
public:
	unsigned char                                      UnknownData00[0x1C];                                      // 0x0348(0x001C) MISSED OFFSET
	int                                                MaxActiveCallouts;                                        // 0x0364(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      FactionManagerClass;                                      // 0x0368(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UFactionManager*                             FactionManager;                                           // 0x0370(0x0008) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0378(0x0010) MISSED OFFSET
	class UBendAmbientBlockerComp*                     EscalationAmbientBlocker;                                 // 0x0388(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	bool                                               m_bAwarenessCalloutsEnabled;                              // 0x0390(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0391(0x0007) MISSED OFFSET
	TArray<class ABendAIController*>                   m_NPCs;                                                   // 0x0398(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst)
	unsigned char                                      UnknownData03[0x20];                                      // 0x03A8(0x0020) MISSED OFFSET
	TArray<class ABendPawn*>                           m_DetectablePawns;                                        // 0x03C8(0x0010) (Edit, BlueprintVisible, ZeroConstructor, EditConst)
	unsigned char                                      UnknownData04[0x48];                                      // 0x03D8(0x0048) MISSED OFFSET
	float                                              m_StealthRecoverTime;                                     // 0x0420(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              m_StealthRecoverDist;                                     // 0x0424(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnStealthBroken;                                          // 0x0428(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnStealthRecovered;                                       // 0x0438(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDeviceExploded;                                         // 0x0448(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	float                                              m_InnerRadiusScreamTime;                                  // 0x0458(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              m_OuterScreamTime;                                        // 0x045C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              m_InnerRadiusForScream;                                   // 0x0460(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                m_MaxSimultaneousSenses;                                  // 0x0464(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              RockHearingMaxRadius;                                     // 0x0468(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              RockHearingVolume;                                        // 0x046C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              RockHearingVolumeMetal;                                   // 0x0470(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              RockHearingRainMult;                                      // 0x0474(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              RockHearingHeavyRainMult;                                 // 0x0478(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              RockHearingSnowMult;                                      // 0x047C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              RockHearingHeavySnowMult;                                 // 0x0480(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              RockHearingWindMult;                                      // 0x0484(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnPawnDetectedPlayer;                                     // 0x0488(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class UClass*                                      m_EscalationClass;                                        // 0x0498(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x10];                                      // 0x04A0(0x0010) MISSED OFFSET
	TArray<class UBendAIMiniMapLocationComponent*>     MiniMapLocationComponents;                                // 0x04B0(0x0010) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient)
	unsigned char                                      UnknownData06[0x38];                                      // 0x04C0(0x0038) MISSED OFFSET
	class UBendHumanCoverQueryManager*                 m_CoverTestManager;                                       // 0x04F8(0x0008) (ZeroConstructor, IsPlainOldData)
	class UBendConflictTracker*                        m_pConflictTracker;                                       // 0x0500(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<class UBendUseCondition*>                   m_UseConditionInstances;                                  // 0x0508(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData07[0x38];                                      // 0x0518(0x0038) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAIManager");
		return ptr;
	}


	float TimeSinceStealthBroken();
	void SetStealthRecoverable(bool recoverable);
	void SetCrowdSimulationEnabled(bool Enabled);
	void SetAwarenessCalloutsEnabled(bool AreEnabled);
	class ABendAIController* SelectDebugNPC();
	void ResetStealthMode();
	void OverrideTargetEvaluatorByFactions(TAssetPtr<class UClass> NewEvaluator, TArray<TEnumAsByte<EAIFactionType>> FactionsToOverride);
	void NotifyOfExplosiveDevice(class AActor* device, float explosionRadius, TEnumAsByte<EExplosiveType> ExplosiveType);
	void NotifyDeviceExploded(class AActor* device);
	void MidMissionCinematicHandler(const struct FName& CinematicLevel);
	bool IsStealthMode();
	bool IsHostileEnemy(class ABendPawn* DoesThisGuy, class ABendPawn* HateThisGuy);
	bool IsEnemy(class ABendPawn* DoesThisGuy, class ABendPawn* HateThisGuy);
	bool IsCrowdSimulationEnabled();
	class UBendUseCondition* GetUseCondition(TAssetPtr<class UClass> UseConditionClass);
	float GetRockVolumeBySurface(TEnumAsByte<EPhysicalSurface> SurfaceType);
	float GetRockHearingRadiusBySurface(TEnumAsByte<EPhysicalSurface> SurfaceType);
	float GetRockHearingRadius(float Volume);
	float GetPlayerVisibleLevel();
	float GetPlayerSoundLevel();
	int GetNumThreatsToPlayer(float NearDistance, float AwareDistance, float TargetingDistance, bool includeHorde);
	int GetNumThreatsToPawn(class ABendPawn* pPawn, float NearDistance, float AwareDistance, float TargetingDistance, bool includeHorde);
	int GetNumNearPlayer(float Distance);
	int GetNumAwareOfPlayerWithinRadius(float Distance, bool AndTargeting);
	class ABendAIController* GetNextDebugNpc();
	class ABendPawn* GetNextByDirection(class ABendPawn* pPawnTarget, bool RightOfTarget, float MaxDist);
	float GetFurthestBikeThreatToPlayer(float Distance);
	float GetFurthestAwareOfPlayer(float Distance);
	float GetFactionValue(TEnumAsByte<EAIFactionType> MyFaction, TEnumAsByte<EAIFactionType> TheirFaction);
	TEnumAsByte<EFactionLevel> GetFactionLevel(class ABendPawn* DoesThisGuy, class ABendPawn* TrustThisGuy);
	TArray<class ABendPawn*> GetEnemiesWithinRadius(float Dist);
	class ABendAIController* GetDebugNpc();
	bool STATIC_GetDebugAwarenessCalloutsEnabled();
	class UBendConflictTracker* GetConflictTracker();
	class ABendPawn* GetClosestToPlayerOfFaction(TEnumAsByte<EAIFactionType> Faction, float MaxDist);
	class ABendPawn* GetClosestToPlayer();
	class ABendPawn* GetClosestToLocation(const struct FVector& Location, float MaxDist);
	class ABendPawn* GetClosestOnScreen(float MaxDist);
	class ABendPawn* GetClosestHumanToPlayer(float MaxDist);
	float GetClosestDistToPlayer(bool includeHorde);
	float GetBaseConfidence(TEnumAsByte<EAIFactionType> MyFaction, class ABendPawn* TheirPawn);
	class ABendAIManager* STATIC_GetAIManager();
	bool EvaluateUseConditions(class UObject* CondOwner, bool bResetConditions, TArray<TAssetPtr<class UClass>>* UseConditions);
	bool EvaluateUseCondition(TAssetPtr<class UClass> UseConditionClass, class UObject* CondOwner, bool bResetConditions);
	float DistSinceStealthBroken();
	void DebugEndScripting();
	void ClearTargetOverridesByFactions(TArray<TEnumAsByte<EAIFactionType>> FactionsToOverride);
	void ClearDebugNpc();
	void CheckDebugNPCs(const struct FVector& pos, const struct FVector& AimDir);
	bool CanScreamAtLocation(const struct FVector& Location);
	void BreakStealthMode();
	bool AreAwarenessCalloutsEnabled();
	bool AreAnyNearPlayer(float Distance);
	bool AreAnyMotorcycleRidersAwareOfPlayer();
	bool AreAnyLOSToPlayer();
	bool AreAnyHumansRecentLOSToPlayer();
	bool AreAnyHumansLOSToPlayer();
	bool AreAnyBikeThreatsAwareOfPlayer();
	bool AreAnyAwareOfPlayer(bool AndTargeting);
	bool AreAnyAwareLOSToPlayer();
};


// Class BendGame.BendCoverAnimData
// 0x0058 (0x0080 - 0x0028)
class UBendCoverAnimData : public UDataAsset
{
public:
	TArray<struct FBendCoverTypeAnimGroup>             EnterCoverTypes;                                          // 0x0028(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	float                                              LongestDistance;                                          // 0x0038(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x003C(0x0004) MISSED OFFSET
	TArray<struct FBendCoverTypeAnimGroup>             EnterCoverFromFrontTypes;                                 // 0x0040(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	float                                              LongestDistanceFromFront;                                 // 0x0050(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0054(0x0004) MISSED OFFSET
	TArray<struct FBendCoverAnimGroup>                 CoverAnimGroups;                                          // 0x0058(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FBendCoverAimSweepGroup>             CoverAimSweeps;                                           // 0x0068(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	bool                                               SyncHighCover;                                            // 0x0078(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0079(0x0003) MISSED OFFSET
	float                                              SlideForwardTolerance;                                    // 0x007C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendCoverAnimData");
		return ptr;
	}

};


// Class BendGame.BendGameCoverSystem
// 0x0000 (0x00C0 - 0x00C0)
class UBendGameCoverSystem : public UBendCoverSystem
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendGameCoverSystem");
		return ptr;
	}

};


// Class BendGame.BendAIConfidenceComponent
// 0x00B8 (0x0188 - 0x00D0)
class UBendAIConfidenceComponent : public UActorComponent
{
public:
	TEnumAsByte<EConfidenceType>                       MaxConfidenceLevel;                                       // 0x00D0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EConfidenceType>                       MinConfidenceLevel;                                       // 0x00D1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x00D2(0x0006) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnConfidenceChangedDelegate;                              // 0x00D8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               UpdateConfidence;                                         // 0x00E8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               HasBloodRage;                                             // 0x00E9(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IgnoreFriendlyCasualties;                                 // 0x00EA(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IgnorePanickedFriends;                                    // 0x00EB(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IgnoreOwnInjuries;                                        // 0x00EC(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IgnoreFriendInjuries;                                     // 0x00ED(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               IgnoreStatusEffects;                                      // 0x00EE(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IgnoreSounds;                                             // 0x00EF(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IgnoreDefendZone;                                         // 0x00F0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               UseSpecialPlayerTreatment;                                // 0x00F1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x96];                                      // 0x00F2(0x0096) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAIConfidenceComponent");
		return ptr;
	}


	void SetConfidenceLevel(TEnumAsByte<EConfidenceType> NewConfidenceLevel);
	void OnPawnDamageCallback(float ActualDamage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser, class ABendPawn* PawnDamaged, bool CriticalHit, bool KillingBlow);
	TEnumAsByte<EConfidenceType> GetConfidenceLevel();
};


// Class BendGame.BendPathFollowingComponent
// 0x0020 (0x0430 - 0x0410)
class UBendPathFollowingComponent : public UCrowdFollowingComponent
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0410(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendPathFollowingComponent");
		return ptr;
	}

};


// Class BendGame.BendCharacterControllerInterface
// 0x0000 (0x0028 - 0x0028)
class UBendCharacterControllerInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendCharacterControllerInterface");
		return ptr;
	}

};


// Class BendGame.BendAIController
// 0x0A78 (0x0EA0 - 0x0428)
class ABendAIController : public AAIController
{
public:
	unsigned char                                      UnknownData00[0xC];                                       // 0x0428(0x000C) MISSED OFFSET
	float                                              SemiAwareNearDist;                                        // 0x0434(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SemiAwareFarDist;                                         // 0x0438(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x14];                                      // 0x043C(0x0014) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnTeamRoleAssigned;                                       // 0x0450(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnTeamRoleComplete;                                       // 0x0460(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnTeamRoleCleared;                                        // 0x0470(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnTeamRoleTreeExecutionStart;                             // 0x0480(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnTeamRoleTreeExecutionEnd;                               // 0x0490(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnTeamRoleTreeExecutionReplaced;                          // 0x04A0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData02[0x68];                                      // 0x04B0(0x0068) MISSED OFFSET
	class UBendArchetypeDataBase*                      m_CurrentArchetype;                                       // 0x0518(0x0008) (ZeroConstructor, IsPlainOldData)
	class UBendArchetypeDataBase*                      m_PreArchetypeData;                                       // 0x0520(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x50];                                      // 0x0528(0x0050) MISSED OFFSET
	TAssetPtr<class UBehaviorTree>                     m_BehaviorTree;                                           // 0x0578(0x0020) (Edit, BlueprintVisible)
	TEnumAsByte<EAIFactionType>                        m_eAIFactionType;                                         // 0x0598(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<EBendPawnBodyType>                     PawnsBodyType;                                            // 0x0599(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x2];                                       // 0x059A(0x0002) MISSED OFFSET
	float                                              m_TimeSinceLastDetection;                                 // 0x059C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_TimeSinceUnaware;                                       // 0x05A0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x4];                                       // 0x05A4(0x0004) MISSED OFFSET
	class UClass*                                      m_DamageType;                                             // 0x05A8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_Damage;                                                 // 0x05B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_RandomPathing;                                          // 0x05B4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_CanBeBlinded;                                           // 0x05B5(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x2];                                       // 0x05B6(0x0002) MISSED OFFSET
	float                                              m_BlindTimeTillStun;                                      // 0x05B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0x4];                                       // 0x05BC(0x0004) MISSED OFFSET
	struct FString                                     m_POI_Type;                                               // 0x05C0(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	bool                                               m_bPOITypeExclusive;                                      // 0x05D0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_bOverridePoiAutoNav;                                    // 0x05D1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_FaceTargetWhileIdle;                                    // 0x05D2(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_ShouldStrafeWhenAware;                                  // 0x05D3(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IgnoreLoSForMeleeAttacks;                                 // 0x05D4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData08[0x3];                                       // 0x05D5(0x0003) MISSED OFFSET
	float                                              WalkSpeed;                                                // 0x05D8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FastWalkSpeed;                                            // 0x05DC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              JogSpeed;                                                 // 0x05E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              RunSpeed;                                                 // 0x05E4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              sprintSpeed;                                              // 0x05E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               ShouldAmbush;                                             // 0x05EC(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               useClosestSlot;                                           // 0x05ED(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData09[0x2];                                       // 0x05EE(0x0002) MISSED OFFSET
	struct FVector                                     ambushPoint;                                              // 0x05F0(0x000C) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData10[0x4];                                       // 0x05FC(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    UsePOIEvent;                                              // 0x0600(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    LeavePOIEvent;                                            // 0x0610(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBecomeAware;                                            // 0x0620(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBecomeSemiAware;                                        // 0x0630(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBecomeUnaware;                                          // 0x0640(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnFirstDetectedPlayer;                                    // 0x0650(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnAwarePlayer;                                            // 0x0660(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnSemiAwarePlayer;                                        // 0x0670(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnUnawarePlayer;                                          // 0x0680(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnZeroAwarenessPlayer;                                    // 0x0690(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnInitialAwarenessPlayer;                                 // 0x06A0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               CanBeMarkedInBinoculars;                                  // 0x06B0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               AwarenessCalloutsWhileBinocularMarked;                    // 0x06B1(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               AwarenessCalloutsWhileUnMarked;                           // 0x06B2(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               AwarenessCalloutsDisabledDueToCombat;                     // 0x06B3(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               FullAwarenessIndicatorCanBeTriggered;                     // 0x06B4(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData11[0x3];                                       // 0x06B5(0x0003) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnHitByBrightLight;                                       // 0x06B8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnTargetChange;                                           // 0x06C8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnTurnInPlace;                                            // 0x06D8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnSetPOIMode;                                             // 0x06E8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnSetDocileMode;                                          // 0x06F8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    PeekDelegate;                                             // 0x0708(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    CancelPeekDelegate;                                       // 0x0718(0x0010) (ZeroConstructor, InstancedReference)
	struct FScriptMulticastDelegate                    StepOutDelegate;                                          // 0x0728(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    CancelStepOutDelegate;                                    // 0x0738(0x0010) (ZeroConstructor, InstancedReference)
	struct FScriptMulticastDelegate                    StepInDelegate;                                           // 0x0748(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    CancelStepInDelegate;                                     // 0x0758(0x0010) (ZeroConstructor, InstancedReference)
	struct FScriptMulticastDelegate                    EnterCoverDelegate;                                       // 0x0768(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ChangedCoverAnchorDelegate;                               // 0x0778(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    LeaveCoverDelegate;                                       // 0x0788(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    CancelLeaveCoverDelegate;                                 // 0x0798(0x0010) (ZeroConstructor, InstancedReference)
	unsigned char                                      UnknownData12[0x158];                                     // 0x07A8(0x0158) MISSED OFFSET
	struct FScriptMulticastDelegate                    TargetedDelegate;                                         // 0x0900(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBecomeScripted;                                         // 0x0910(0x0010) (ZeroConstructor, InstancedReference)
	struct FScriptMulticastDelegate                    OnScriptingCommandIssued;                                 // 0x0920(0x0010) (ZeroConstructor, InstancedReference)
	unsigned char                                      UnknownData13[0x150];                                     // 0x0930(0x0150) MISSED OFFSET
	int                                                Level;                                                    // 0x0A80(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              XPAwarded;                                                // 0x0A84(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData14[0x8];                                       // 0x0A88(0x0008) MISSED OFFSET
	class UEnvQuery*                                   StuckInGeoTeleportQuery;                                  // 0x0A90(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      m_NavFilter;                                              // 0x0A98(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_BlindTimeToCD;                                          // 0x0AA0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              m_BlindCDDuration;                                        // 0x0AA4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               m_Blinded;                                                // 0x0AA8(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               m_bJustBlinded;                                           // 0x0AA9(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData15[0x2];                                       // 0x0AAA(0x0002) MISSED OFFSET
	float                                              m_BlindAngle;                                             // 0x0AAC(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              m_TargetAngle;                                            // 0x0AB0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               m_Flashbanged;                                            // 0x0AB4(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData16[0x3];                                       // 0x0AB5(0x0003) MISSED OFFSET
	float                                              m_TimeOfFlashbang;                                        // 0x0AB8(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              bIsEscalationSpawn;                                       // 0x0ABC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	TEnumAsByte<EeNPCVoiceTypes>                       m_eAIVoiceType;                                           // 0x0AC0(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData17[0x3];                                       // 0x0AC1(0x0003) MISSED OFFSET
	float                                              m_fVoicePitch;                                            // 0x0AC4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                m_iVoiceBankID;                                           // 0x0AC8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MaxVoicePitch;                                            // 0x0ACC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MinVoicePitch;                                            // 0x0AD0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EeNPCVoiceTypes>                       m_eFemaleAIVoiceType;                                     // 0x0AD4(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData18[0x3];                                       // 0x0AD5(0x0003) MISSED OFFSET
	float                                              FemaleMaxVoicePitch;                                      // 0x0AD8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FemaleMinVoicePitch;                                      // 0x0ADC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<float>                                      ListOfValidMalePitchValues;                               // 0x0AE0(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<float>                                      ListOfValidFemalePitchValues;                             // 0x0AF0(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	int                                                ConfidenceHudLevel;                                       // 0x0B00(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                SuppressedHudLevel;                                       // 0x0B04(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UBendSensingComponent*                       SensingComponent;                                         // 0x0B08(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UBendAIConfidenceComponent*                  ConfidenceComponent;                                      // 0x0B10(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	float                                              m_MaxPOIDistance;                                         // 0x0B18(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TWeakObjectPtr<class ABendPawn>                    m_pTargetedBy;                                            // 0x0B1C(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              m_fTargetedTime;                                          // 0x0B24(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              MinTargetSwitchTime;                                      // 0x0B28(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_fFirstAwareAnimDistance;                                // 0x0B2C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              NearbyFriendThreshold;                                    // 0x0B30(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TWeakObjectPtr<class ABendPOI>                     m_OverridePOI;                                            // 0x0B34(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData19[0x40];                                      // 0x0B3C(0x0040) MISSED OFFSET
	struct FBehaviorParams                             m_BehaviorParams;                                         // 0x0B7C(0x0004) (BlueprintVisible)
	unsigned char                                      UnknownData20[0x8];                                       // 0x0B80(0x0008) MISSED OFFSET
	bool                                               m_bShouldGrapple;                                         // 0x0B88(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_bShouldAttack;                                          // 0x0B89(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_bPersueMode;                                            // 0x0B8A(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData21[0x1];                                       // 0x0B8B(0x0001) MISSED OFFSET
	float                                              MinAimTime;                                               // 0x0B8C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxAimTime;                                               // 0x0B90(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MissAngleForcedConeAccuracy;                              // 0x0B94(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CrouchRunCoverToCover;                                    // 0x0B98(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              StandOrCrouchFiring;                                      // 0x0B9C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FleeEQSDistance;                                          // 0x0BA0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinimumFleeTime;                                          // 0x0BA4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FleeDistanceThreshold;                                    // 0x0BA8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData22[0x6];                                       // 0x0BAC(0x0006) MISSED OFFSET
	bool                                               m_bUnableToReachTarget;                                   // 0x0BB2(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               m_bFrustratedNav;                                         // 0x0BB3(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_bCanBeFrustrated;                                       // 0x0BB4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData23[0x3];                                       // 0x0BB5(0x0003) MISSED OFFSET
	float                                              FrustratedDuration;                                       // 0x0BB8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FrustratedNavDuration;                                    // 0x0BBC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_fFrustratedDurationTimer;                               // 0x0BC0(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_bDebugOn;                                               // 0x0BC4(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bCanUseNavLinks;                                          // 0x0BC5(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bOnlyUseDownwardNavLinks;                                 // 0x0BC6(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_bPassive;                                               // 0x0BC7(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               m_bCanDetectTraps;                                        // 0x0BC8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ECoverLeanDirection>                   DesiredLeanDir;                                           // 0x0BC9(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData24[0x6];                                       // 0x0BCA(0x0006) MISSED OFFSET
	class UBendCoverAnimData*                          CoverAnimData;                                            // 0x0BD0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UBendCoverAnimData*                          CrouchedCoverAnimData;                                    // 0x0BD8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              BadCoverSearchAngle;                                      // 0x0BE0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData25[0x4];                                       // 0x0BE4(0x0004) MISSED OFFSET
	float                                              EnclosedSpaceMaxArea;                                     // 0x0BE8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              EnclosedSpaceTargetMaxArea;                               // 0x0BEC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              SmallEnclosedSpaceMaxArea;                                // 0x0BF0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              SmallEnclosedTargetSpaceMaxArea;                          // 0x0BF4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               RunOverrideBehavior;                                      // 0x0BF8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData26[0x3];                                       // 0x0BF9(0x0003) MISSED OFFSET
	TWeakObjectPtr<class UBehaviorTree>                OverrideBehaviorTree;                                     // 0x0BFC(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData27[0x4];                                       // 0x0C04(0x0004) MISSED OFFSET
	class UBehaviorTree*                               ScriptedCoverTree;                                        // 0x0C08(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBehaviorTree*                               ScriptedMoveTree;                                         // 0x0C10(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBehaviorTree*                               ScriptedIdleTree;                                         // 0x0C18(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBehaviorTree*                               ScriptedThrowTree;                                        // 0x0C20(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FScriptMulticastDelegate                    OverrideBehaviorDelegate;                                 // 0x0C28(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    PerformOneShotDelegate;                                   // 0x0C38(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    AbortOneShotDelegate;                                     // 0x0C48(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData28[0xF9];                                      // 0x0C58(0x00F9) MISSED OFFSET
	unsigned char                                      UnknownData29 : 5;                                        // 0x0D51(0x0001)
	unsigned char                                      m_HasConfidence : 1;                                      // 0x0D51(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData30[0xAE];                                      // 0x0D52(0x00AE) MISSED OFFSET
	unsigned char                                      bPooledSpawn : 1;                                         // 0x0E00(0x0001) (BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bPooledSpawnInUse : 1;                                    // 0x0E00(0x0001) (BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bHasPooledSpawnEverBeenUsed : 1;                          // 0x0E00(0x0001) (BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData31[0x7];                                       // 0x0E01(0x0007) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnReturnedToPool;                                         // 0x0E08(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData32[0x88];                                      // 0x0E18(0x0088) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAIController");
		return ptr;
	}


	bool UsingTreeCover();
	bool UseSecondaryDefendZone();
	void UseNavRotation(const struct FBendNavRotationParams& Params);
	bool UseCombatCenterLocation();
	void UpdateStrafing();
	void UpdateDefendZoneCenter(const struct FVector& newCenter);
	void UpdateBrightness(float Brightness);
	void UnregisterWithTarget(bool IsRanged);
	void TurnInPlaceToPoint(const struct FVector& TargetPoint);
	void TurnInPlaceToDirection(const struct FVector& newDir);
	void TurnInPlaceToAngle(float angle);
	void TurnInPlaceByAngle(float angle);
	void ThrowThrowableAtPoint(const struct FVector& TargetPoint, float TargetArcHeight);
	void ThrowThrowableAtFireFocus();
	void TargetedByWeapon(class ABendPawn* pWeaponOwner);
	void StopNavRotation();
	void StopMoveFromBP(const struct FString& Reason, bool skipped);
	void StopFire();
	void StopBehaviorTree();
	void StopAiming();
	void StartNewBT(class UBehaviorTree* newTree);
	void Spawned();
	bool ShouldUpdateAwarenessCallout();
	void SetThreatLocation(const struct FVector& InThreatLocation);
	void SetScriptingMode(TEnumAsByte<EBendAIScriptingMode> ScriptingMode);
	void SetScriptedPose(TEnumAsByte<ETensePose> poseType);
	void SetPawn(class APawn* InPawn);
	void SetNextPOI(class ABendPOI* POI);
	float SetMoveSpeed(TEnumAsByte<EAIMoveSpeed> moveType);
	void SetMoveFocusToLastSeen();
	void SetMoveFocusPos(const struct FVector& pos);
	void SetMoveFocus(class AActor* Actor);
	void SetLevel(int MinLevel, int MaxLevel, int Variance, float Brightness);
	void SetFleeing(bool NewValue);
	void SetFireFocus(class AActor* FireFocus);
	void SetFemaleAIVoiceType(TEnumAsByte<EeNPCVoiceTypes> eAIType);
	void SetFactionValueOfPawn(class ABendPawn* targetPawn, float Value);
	void SetDocileMode(bool Docile, bool stopMove, bool stopMontage);
	void SetDefendZoneVolume(class AVolume* NewVolume);
	void SetDefendZone(const struct FDefendZoneInfo& newDefendZoneInfo);
	void SetCrowdSimulationEnabled(bool Enabled);
	void SetCombatCenterLocation(const struct FVector& vCombatCenterLocation);
	void SetCanBeMarkedInBinoculars(bool CanBeMarked);
	void SetAwarenessOfTarget(float AwarenessLevel);
	void SetAwarenessOfPawn(class ABendPawn* awarePawn, float AwarenessLevel);
	void SetAttackWhileScripted(bool Value);
	void SetArchetype(class UBendArchetypeDataBase* Archetype);
	void SetAIVoiceType(TEnumAsByte<EeNPCVoiceTypes> eAIType);
	void SetAIFactionType(TEnumAsByte<EAIFactionType> eAIType);
	class ABendPOI* SelectPOI(TArray<class ABendPOI*> AvailablePOIs, const struct FString& POIType);
	bool ScriptedMoveToGrapple(class ABendPawn* GrappleTarget, TEnumAsByte<EAIMoveSpeed> MoveSpeed, float AcceptableRadius, bool SlowApproach, bool RunNow, const struct FScriptDelegate& OnGrappleStarted, const struct FScriptDelegate& OnFailed);
	bool ScriptedMeleeAttack(class ABendPawn* AttackTarget, const struct FName& AttackName, TEnumAsByte<EAIMoveSpeed> MoveSpeed, float AcceptableRadius, bool RunNow, const struct FScriptDelegate& OnSuccess, const struct FScriptDelegate& OnFailed);
	bool SawPawnHide(class ABendPawn* P);
	void RunOverrideBehaviorTree(class UBehaviorTree* behavior);
	void ResetScriptedPose();
	void ResetForcedAwareness();
	void ResetDetection(class ABendPawn* dude);
	void ResetAllDetectedPawns(bool sight, bool Sound, bool memory);
	bool RequestUnawareVO(TEnumAsByte<EUnawareAnim> animType, struct FName* VOToPlay);
	bool RequestSemiAwareVO(TEnumAsByte<ESemiAwareAnim> animType, struct FName* VOToPlay);
	bool RequestSemiAwareAnim(TEnumAsByte<ESemiAwareAnim> animType, bool isBlendspace);
	TEnumAsByte<EPathFollowingRequestResult> RequestNavToMoveFocus(TEnumAsByte<EAIMoveSpeed> MoveSpeed, float Radius, bool SlowApproach, float approachOuterRadius, bool SkipDefendZoneCheck, bool AllowPartialPath);
	TEnumAsByte<EPathFollowingRequestResult> RequestNavToFireFocus(TEnumAsByte<EAIMoveSpeed> MoveSpeed, float Radius, bool SlowApproach, float approachOuterRadius, bool SkipDefendZoneCheck, bool AllowPartialPath);
	TEnumAsByte<EPathFollowingRequestResult> RequestNavToActor(class AActor* Target, TEnumAsByte<EAIMoveSpeed> MoveSpeed, float Radius, bool SlowApproach, float approachOuterRadius, bool SkipDefendZoneCheck, bool AllowPartialPath);
	TEnumAsByte<EPathFollowingRequestResult> RequestInvestigateMoveFocus(TEnumAsByte<EAIMoveSpeed> MoveSpeed, float Radius, bool SlowApproach, bool SkipDefendZoneCheck, bool AllowPartialPath);
	bool RequestGrappleOnPawn(class ABendPawn* targetPawn, bool Direct);
	bool RequestGrappleOnFireFocus(bool Direct);
	void RepathToLastNav(bool bEvenIfScripted);
	void RegisterWithTarget(bool IsRanged);
	void OverrideSpawnImportance(TEnumAsByte<ESpawnImportance> newImportance);
	void OverrideFlashlight(bool On);
	void OnWeaponAdded(class ABendWeapon* pWeapon);
	void OnTrapSpawned(class ABendTrap* Trap);
	void OnTrapRemoved(class ABendTrap* Trap);
	void OnMeleeAttackEnded();
	void OnLeavePOIScripted(class ABendPOI* CompletedPOI, class ABendAIController* BendAIController);
	void OnHitByFlashlight(class ABendPawn* pLightOwner);
	void OnEnterCoverStarted();
	void OnEnterCoverFinished(bool bSuccess);
	void NotifyUsePOI();
	void NotifyLeftPOI();
	bool NavToMoveFocus(float Speed, float Radius, bool SlowApproach, float approachOuterRadius, bool SkipDefendZoneCheck);
	bool MoveToScripted(const struct FVector& Location, TEnumAsByte<EAIMoveSpeed> MoveSpeed, float AcceptableRadius, bool SlowApproach, bool RunNow, const struct FScriptDelegate& OnSuccess, const struct FScriptDelegate& OnFailed);
	bool LeaveCover(bool hasPath, bool bDisableCoverSlot);
	void LeaveAmbush();
	bool IsUsingNavRotation();
	bool IsStrafing();
	bool IsShooting();
	bool IsScripted();
	bool IsRegisteredWithTarget(bool IsRanged);
	bool IsPrimaryAttacker();
	bool IsPointInDefendZone(const struct FVector& Point, bool CheckOnlyPrimary);
	bool IsPassive();
	bool IsOverrideFlashlight();
	bool IsMovingTowardLocation(const struct FVector& Location, float MinDot);
	bool STATIC_IsMoveCommand(TEnumAsByte<EBendAIScriptingCommand> CommandType);
	bool IsInDefendZone();
	bool IsInCover();
	bool IsInAGrapple();
	bool IsFrustrated();
	bool IsEnemy(class ABendPawn* BendPawn);
	bool IsDocile();
	bool IsDark();
	bool IsCurrentTargetEnemy();
	bool IsCrowdSimulationEnabled();
	bool STATIC_IsAnAnimal(class AController* Controller);
	bool IsAlone();
	bool STATIC_IsAHuman(class AController* Controller);
	bool STATIC_IsAFreaker(class AController* Controller);
	bool InitializeAttributes();
	void HitByHighBeam(class ABendPawn* pLightOwner, bool blinding, float lightAngle);
	bool HeardSoundBehind();
	bool HaveLosToPawn(class ABendPawn* P);
	bool HaveLosToHorde(float timeSinceLos, float MaxDist);
	bool HaveLosToFireFocus(bool bUseWeaponInfo);
	bool HasTeamRole();
	bool HasDetectedHorde(bool AllowFriendlyHorde);
	bool HasDetectedBody(class ABendPawn* Body);
	void HandleCalloutOnZeroAwareness(class ABendAIController* Controller);
	void HandleCalloutOnUnAware(class ABendAIController* Controller, TEnumAsByte<EAIAwareState> ControllerPreviousAwareness);
	void HandleCalloutOnSemiAware(class ABendAIController* Controller, TEnumAsByte<EAIAwareState> ControllerPreviousAwareness);
	void HandleCalloutOnFirstDetection(class ABendAIController* Controller);
	void HandleCalloutOnAware(class ABendAIController* Controller, TEnumAsByte<EAIAwareState> ControllerPreviousAwareness);
	int GetXPAwarded();
	float GetUnawarePercent(class ABendPawn* Target);
	struct FVector GetThreatLocation();
	struct FName GetTeamRoleName();
	float GetTargetAimAngle(bool prediction);
	TEnumAsByte<ESpawnImportance> GetSpawnImportance();
	class ABendSpawnLocationBase* GetSpawnBox();
	class UBendSensingComponent* GetSensingComponent();
	float GetSemiAwarePercent(class ABendPawn* Target);
	class UAnimSequenceBase* GetRandomSequence(const struct FName& AnimSequenceGroupName, class UAnimSequenceBase* LastUsed);
	class UAnimMontage* GetRandomMontage(class UAnimMontage* pMontageToIgnore, TArray<class UAnimMontage*>* pMontageList);
	class UBlendSpaceBase* GetRandomBlendSpace(const struct FName& AnimBlendSpaceGroupName, class UBlendSpaceBase* LastUsed);
	struct FBendActionData GetRandomAction(TArray<struct FBendActionData>* pActionList, struct FBendActionData* pActionToIgnore);
	class ABendPOI* GetPreviousPOI();
	TEnumAsByte<EBendPawnBodyType> GetPawnBodyType();
	bool GetOverrideFlashlightValue();
	int GetNumDetectedByFaction(TEnumAsByte<EAIFactionType> Faction);
	class ABendPOI* GetNextPOI();
	struct FVector GetMoveFocusPos();
	float GetMoveFocusDist2();
	float GetMoveFocusDist();
	int GetLevel();
	TEnumAsByte<ECoverLeanDirection> GetLeanDirection();
	struct FVector GetLastSeenPos();
	TEnumAsByte<EAIFactionType> GetLastFireFocusFaction();
	class ABendPawn* GetHighestThreat();
	struct FVector GetGoalVelocity();
	float GetGoalDistance();
	float GetFireFocusForwardVectorDotProd();
	float GetFireFocusDist2();
	float GetFireFocusDist();
	class AActor* GetFireFocusConst();
	class AActor* GetFireFocus();
	float GetDistToPawn(class ABendPawn* P);
	float GetDistanceToClosestThreat();
	float GetDistanceToClosestTarget();
	float GetDistanceToClosestOfFaction(TEnumAsByte<EAIFactionType> Faction);
	float GetDistanceToClosestFriend();
	struct FDetectedPawn GetDetectedPawn();
	class AVolume* GetDefendZoneVolume();
	struct FVector GetDefendZoneCenter();
	TEnumAsByte<EDefendZoneBindingStrength> GetDefendZoneBinding(bool CheckOnlyPrimary);
	struct FDefendZoneInfo GetDefendZone();
	float GetDamage();
	class ABendPawn* GetCurrentTargetPawn();
	struct FVector GetCurrentTargetLocation();
	float GetCurrentTargetDist();
	class ABendPOI* GetCurrentPOI();
	class UBendArchetypeDataBase* GetCurrentArchetype();
	class UBendAIConfidenceComponent* GetConfidenceComponent();
	float GetCombatSlotDist2();
	float GetCombatSlotDist();
	struct FMeleeRingData GetCombatRing();
	struct FVector GetCombatLocationForTarget(class ABendPawn* Target);
	float GetCombatDistance();
	struct FVector GetCombatCenterLocation();
	struct FVector GetClosestPointWithinDefendZone(const struct FVector& Point, bool CheckOnlyPrimary);
	struct FVector GetClosestPointToPawnWithinDefendZone();
	float GetBrightness();
	float GetBlindedTime();
	struct FVector GetBikeChaseLocationForTarget(class ABendPawn* Target);
	class ABendPawn* GetBendPawn();
	class ABendAIPawn* GetBendAIPawn();
	int GetBaseLevel();
	float GetAwarenessValue();
	TEnumAsByte<EAIAwareState> GetAwarenessOfPawn(class ABendPawn* PawnInQuestion);
	TEnumAsByte<EAIAwareState> GetAwareness();
	class UBendAnimVariationData* GetAnimVariationData(const struct FName& AnimGroupName);
	class UBendAnimBlueprintMessenger* GetAnimMessenger();
	TEnumAsByte<EAIFactionType> GetAIFactionType();
	bool ForceUsePOI(class ABendPOI* POI, bool skipTests);
	void ForceUnawareForTime(float Duration);
	void ForceUnaware();
	void ForceStaySemiAware();
	void ForceStayAware();
	void ForceSemiAwareForTime(const struct FVector& semiAwarePos, float Duration, class ABendPawn* Target);
	void ForceSemiAware(const struct FVector& semiAwarePos, class ABendPawn* Target);
	void ForceReleasePOI();
	void ForceOrientToMovement(bool Force);
	void ForceAwareUntilLos(class AActor* forceFocus);
	void ForceAwareForTime(class AActor* forceFocus, float Duration);
	void ForceAware(class AActor* forceFocus);
	bool FireNumRounds(int numRounds);
	bool FireForTime(float Time);
	void FinishOverrideBehavior();
	void FinishedLoadingBT();
	void FinishedLoadingArchetypeData();
	class ABendPOI* FindPOIByType(const struct FString& POIType);
	class ABendPOI* FindPOIByDefendZone();
	class ABendPOI* FindPOI();
	struct FDetectedPawn FindDetectedPawn(class ABendPawn* FindPawn);
	void EndScriptingMode(bool ResetScriptingPose);
	void EnableUnmarkedAwarenessCallouts();
	bool DrawWeapon();
	void DisableUnmarkedAwarenessCallouts();
	void DisableForcedAwareness();
	void DestroyTargetAttractor();
	void Despawn(bool notifyDespawn);
	TEnumAsByte<EAIAwareState> ConvertAwarenessToEnum(float AwarenessLevel);
	void CompleteTeamRole(bool bSuccess);
	void ClearTeamRole(class UObject* Clearer);
	void ClearCombatCenterLocation();
	TEnumAsByte<EAIMoveSpeed> ClampMoveSpeed(float* MoveSpeed);
	bool CanMeleeAttack(class ABendPawn* AttackTarget, bool AllowInterruptingAttacker);
	bool CanIgnoreDefendZone(bool forceRespectHardDZ);
	bool CanGrappleAttack(class ABendPawn* AttackTarget);
	void CancelScriptingCommand();
	void CancelOverrideFlashlight();
	bool AreAwarenessCalloutsEnabled();
	void AnimNotify_MeleeDamage(float DamagePercent);
	void AISetAmbush(const struct FVector& ambushPoint, bool useClosestSlot);
	bool AimAtPoint(const struct FVector& TargetPoint, float TargetArcHeight);
	bool AimAtFireFocus();
	void AddWeapon(TEnumAsByte<EInventoryWeaponID> NPCWeaponID, bool DontEquip);
	void AddThrowable(TEnumAsByte<EInventoryWeaponID> NPCWeaponID);
	void AddOrUpdateLocationProxiesMap_Reference(const struct FName& CategoryName, TArray<struct FBendLocationReference> LocationReferences);
	void AddOrUpdateLocationProxiesMap(const struct FName& CategoryName, TArray<struct FBendLocationHandle> Handles);
	void AbortOneShot(const struct FName& CategoryName);
};


// Class BendGame.BendUseCondition
// 0x0010 (0x0038 - 0x0028)
class UBendUseCondition : public UObject
{
public:
	unsigned char                                      bDoesNotAccessOwner : 1;                                  // 0x0028(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	unsigned char                                      UnknownData00[0xF];                                       // 0x0029(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendUseCondition");
		return ptr;
	}


	void Reset();
	void OnEvaluationComplete(bool bEvaluationSuccess);
	bool GetCanUse(class UObject* CondOwner, bool forceTest);
	bool CanUse(class UObject* CondOwner);
};


// Class BendGame.BendTimeOfDayCondition
// 0x0008 (0x0040 - 0x0038)
class UBendTimeOfDayCondition : public UBendUseCondition
{
public:
	float                                              StartTime;                                                // 0x0038(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              EndTime;                                                  // 0x003C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendTimeOfDayCondition");
		return ptr;
	}

};


// Class BendGame.AnimalMeleeRing
// 0x0010 (0x0038 - 0x0028)
class UAnimalMeleeRing : public UObject
{
public:
	TArray<struct FMeleeLocationData>                  MeleeLocationList;                                        // 0x0028(0x0010) (BlueprintVisible, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.AnimalMeleeRing");
		return ptr;
	}


	void UpdateMeleeLocationList();
	bool TakeClosestMeleeLocation(class ABendPawn* Pawn);
	void LeaveMeleeLocation(class ABendPawn* Pawn);
};


// Class BendGame.BendAnimalController
// 0x0140 (0x0FE0 - 0x0EA0)
class ABendAnimalController : public ABendAIController
{
public:
	class UBendAnimalAnimInstance*                     AnimalAnimInstance;                                       // 0x0EA0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UBendAnimalMovementComponent*                BendAnimalMovement;                                       // 0x0EA8(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class ABendAnimalPawn*                             AnimalPawn;                                               // 0x0EB0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     SpawnLocation;                                            // 0x0EB8(0x000C) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	float                                              MinAngleForIdleTurn;                                      // 0x0EC4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              StartHuntingTime;                                         // 0x0EC8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              EndHuntingTime;                                           // 0x0ECC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SleepStartTime;                                           // 0x0ED0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SleepEndTime;                                             // 0x0ED4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bInCombat;                                                // 0x0ED8(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0ED9(0x0003) MISSED OFFSET
	float                                              m_fDodgeMinTime;                                          // 0x0EDC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DodgePercent;                                             // 0x0EE0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DodgePercentBlinded;                                      // 0x0EE4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DodgeAngle;                                               // 0x0EE8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TauntAngle;                                               // 0x0EEC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxMoveSpeedReductionFromHit;                             // 0x0EF0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              FireStatusMoveSpeedReduction;                             // 0x0EF4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MinDistanceToRespondWhenReceivesAlert;                    // 0x0EF8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bCanBeScared;                                             // 0x0EFC(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0EFD(0x0003) MISSED OFFSET
	float                                              ScaredMinimumTime;                                        // 0x0F00(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BaseConfidenceFactor;                                     // 0x0F04(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TemporaryConfidenceDecayRate;                             // 0x0F08(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ScaredInjured;                                            // 0x0F0C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ScaredLoudNoise;                                          // 0x0F10(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              EnemyAwarenessScareFactor;                                // 0x0F14(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HordeScareFactor;                                         // 0x0F18(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ScaredPerHealthPercentDamaged;                            // 0x0F1C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ThreatSafeDistance;                                       // 0x0F20(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              LoudNoiseVolume;                                          // 0x0F24(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ScaredStatusEffect;                                       // 0x0F28(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ScaredTeamMemberKilled;                                   // 0x0F2C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ConfidenceBoostPerTeamMember;                             // 0x0F30(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ScaredAmountPerEnemy;                                     // 0x0F34(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ScaredAmountWhenWorried;                                  // 0x0F38(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ScaredAmountWhenPanicked;                                 // 0x0F3C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBendAnimalFoodChainData*                    PreyInterestData;                                         // 0x0F40(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ConfidenceFactor;                                         // 0x0F48(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	float                                              TemporaryConfidence;                                      // 0x0F4C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	float                                              ScaredMinimumTimeRemaining;                               // 0x0F50(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	float                                              MaxFrustratedZDistance;                                   // 0x0F54(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                MaxFrustratedTriggerCount;                                // 0x0F58(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinFrustratedTimeBeforeFlee;                              // 0x0F5C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxFrustratedTimeBeforeFlee;                              // 0x0F60(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinLurkingTime;                                           // 0x0F64(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               TriggerLurkingOnNoPathToTarget;                           // 0x0F68(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0F69(0x0003) MISSED OFFSET
	float                                              MaxSenseAttractorDistance;                                // 0x0F6C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bIsFrenzied;                                              // 0x0F70(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0F71(0x0003) MISSED OFFSET
	float                                              FrenziedAttackTimeMultiplier;                             // 0x0F74(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x8];                                       // 0x0F78(0x0008) MISSED OFFSET
	bool                                               bCanGrapple;                                              // 0x0F80(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x3];                                       // 0x0F81(0x0003) MISSED OFFSET
	float                                              MaxGrappleAngleToTarget;                                  // 0x0F84(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MinGrappleMoveSpeed;                                      // 0x0F88(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MinGrappleDistance;                                       // 0x0F8C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MinClearDistanceBehindTargetForGrapple;                   // 0x0F90(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxGrappleSlope;                                          // 0x0F94(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UClass*                                      NavFilter_Restrictive;                                    // 0x0F98(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      NavFilter_Unrestrictive;                                  // 0x0FA0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBendTimeOfDayCondition*                     HuntingTimeOfDayCondition;                                // 0x0FA8(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x30];                                      // 0x0FB0(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAnimalController");
		return ptr;
	}


	bool TryTaunt();
	bool TryDodge(class ABendPawn* AttackerPawn);
	void TriggerLurking();
	void TriggerFlee();
	bool ShouldBeSleeping();
	void SetLurking(bool bLurk);
	void SetFrenzyTrigger(class UShapeComponent* ShapeComponent);
	void SetCanLookAtTarget(bool bLookAtTarget);
	void ResetFrustrated();
	bool PositionToReachableLocation(const struct FVector& Location, const struct FVector& Extents, struct FVector* ReachableLocation);
	void OnTargetChanged(class ABendAIController* OwnerController, class ABendPawn* PreviousTarget, class ABendPawn* NewTarget);
	void OnTakeDamage(float Damage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser, class ABendPawn* PawnDamaged, bool CriticalHit, bool KillingBlow);
	void OnSuccessfulAttack();
	void OnSquadMemberKilled(class UBendAISquad* Squad, class ABendPawn* Member, class ABendPawn* Killer);
	void OnJoinWarningGroup();
	void OnImpactSpawned(const struct FString& ImpactName, const struct FVector& ImpactLocation, class ABendProjectile* Projectile);
	void OnFrenzyShapeEndOverlap(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex);
	void OnFrenzyShapeBeginOverlap(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool FromSweep, const struct FHitResult& SweepResult);
	void LookAtRotation(const struct FRotator& TargetRotation);
	bool IsScared();
	bool IsLurking();
	bool IsFrenzied();
	bool IsFreakerAnimal();
	bool IsBearOrRager();
	bool HasReached(const struct FVector& TestPoint, float AcceptanceRadius, bool bExactSpot);
	bool HasPathToFireFocus(bool AllowNavLinks);
	struct FVector GetWarningLocationForTarget(class ABendPawn* Target);
	class UBendAnimalWarningGroupComponent* GetWarningGroupComponent();
	struct FRotator GetTargetRotation();
	float GetCurrentConfidenceFactor();
	class ABendAnimalPawn* GetBendAnimalPawn();
	void AddTemporaryConfidence(float ToAdd);
};


// Class BendGame.AnimNotify_ExpressFace
// 0x0008 (0x0038 - 0x0030)
class UAnimNotify_ExpressFace : public UAnimNotify
{
public:
	TEnumAsByte<EBendAnimFaceExpression>               Expression;                                               // 0x0030(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0031(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.AnimNotify_ExpressFace");
		return ptr;
	}

};


// Class BendGame.AnimNotify_ExternallyReceivable
// 0x0000 (0x0030 - 0x0030)
class UAnimNotify_ExternallyReceivable : public UAnimNotify
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.AnimNotify_ExternallyReceivable");
		return ptr;
	}

};


// Class BendGame.AnimNotify_GenericNotify
// 0x0008 (0x0038 - 0x0030)
class UAnimNotify_GenericNotify : public UAnimNotify
{
public:
	struct FName                                       Message;                                                  // 0x0030(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.AnimNotify_GenericNotify");
		return ptr;
	}

};


// Class BendGame.AnimNotify_HumanVocalEvent
// 0x0018 (0x0048 - 0x0030)
class UAnimNotify_HumanVocalEvent : public UAnimNotify
{
public:
	bool                                               bCombatOnly;                                              // 0x0030(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0031(0x0003) MISSED OFFSET
	float                                              Priority;                                                 // 0x0034(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                VocalForceNum;                                            // 0x0038(0x0004) (BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                VocalHumanTypeNum;                                        // 0x003C(0x0004) (BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       FXName;                                                   // 0x0040(0x0008) (BlueprintReadOnly, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.AnimNotify_HumanVocalEvent");
		return ptr;
	}

};


// Class BendGame.AnimNotify_ImpactEvent
// 0x0030 (0x0060 - 0x0030)
class UAnimNotify_ImpactEvent : public UAnimNotify
{
public:
	int                                                ImpactTypeNum;                                            // 0x0030(0x0004) (BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                BodyPartImpactedNum;                                      // 0x0034(0x0004) (BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                BodyPartSideNum;                                          // 0x0038(0x0004) (BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                ForceOfImpactNum;                                         // 0x003C(0x0004) (BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       BoneName;                                                 // 0x0040(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	struct FName                                       BlueprintName_Human;                                      // 0x0048(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	struct FName                                       BlueprintName_All;                                        // 0x0050(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	struct FName                                       BlueprintName_Med;                                        // 0x0058(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.AnimNotify_ImpactEvent");
		return ptr;
	}

};


// Class BendGame.AnimNotify_VocalEvent
// 0x0070 (0x00A0 - 0x0030)
class UAnimNotify_VocalEvent : public UAnimNotify
{
public:
	struct FName                                       SoundName;                                                // 0x0030(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              Priority;                                                 // 0x0038(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               PlayFaceAnimation;                                        // 0x003C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               PlayWhenDead;                                             // 0x003D(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x003E(0x0002) MISSED OFFSET
	class UAnimSequenceBase*                           AttackShort;                                              // 0x0040(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAnimSequenceBase*                           AttackMed;                                                // 0x0048(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAnimSequenceBase*                           AttackLong;                                               // 0x0050(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAnimSequenceBase*                           PainShort;                                                // 0x0058(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAnimSequenceBase*                           PainMed;                                                  // 0x0060(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAnimSequenceBase*                           PainLong;                                                 // 0x0068(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAnimSequenceBase*                           ScreamShort;                                              // 0x0070(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAnimSequenceBase*                           ScreamMed;                                                // 0x0078(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAnimSequenceBase*                           ScreamLong;                                               // 0x0080(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAnimSequenceBase*                           Death;                                                    // 0x0088(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                VocalTypeNum;                                             // 0x0090(0x0004) (BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                VocalForceNum;                                            // 0x0094(0x0004) (BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       FXName;                                                   // 0x0098(0x0008) (BlueprintReadOnly, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.AnimNotify_VocalEvent");
		return ptr;
	}

};


// Class BendGame.AnimNotifyState_AttachActor
// 0x00B0 (0x00E0 - 0x0030)
class UAnimNotifyState_AttachActor : public UAnimNotifyState
{
public:
	TAssetPtr<class UClass>                            ActorClass;                                               // 0x0030(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly)
	TAssetPtr<class USkeletalMesh>                     SkeletalMeshClass;                                        // 0x0050(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FName                                       Socket;                                                   // 0x0070(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EAttachLocation>                       AttachLocationType;                                       // 0x0078(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0079(0x0007) MISSED OFFSET
	class USkeletalMesh*                               LoadedSkeletalMeshClass;                                  // 0x0080(0x0008) (BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UClass*                                      LoadedActorClass;                                         // 0x0088(0x0008) (BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TMap<class AActor*, class AActor*>                 OwnerToProp;                                              // 0x0090(0x0050) (BlueprintReadOnly, ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.AnimNotifyState_AttachActor");
		return ptr;
	}


	void OnParentDestroyedHandler(class AActor* OwningActor);
};


// Class BendGame.AnimNotifyState_ExpressFaceMood
// 0x0008 (0x0038 - 0x0030)
class UAnimNotifyState_ExpressFaceMood : public UAnimNotifyState
{
public:
	TEnumAsByte<EBendAnimFaceExpressionMood>           Expression;                                               // 0x0030(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0031(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.AnimNotifyState_ExpressFaceMood");
		return ptr;
	}

};


// Class BendGame.AnimNotifyState_ExternallyReceivable
// 0x0000 (0x0030 - 0x0030)
class UAnimNotifyState_ExternallyReceivable : public UAnimNotifyState
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.AnimNotifyState_ExternallyReceivable");
		return ptr;
	}

};


// Class BendGame.AnimNotifyState_SuppressFaceOverlay
// 0x0000 (0x0030 - 0x0030)
class UAnimNotifyState_SuppressFaceOverlay : public UAnimNotifyState
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.AnimNotifyState_SuppressFaceOverlay");
		return ptr;
	}

};


// Class BendGame.AnimNotifyState_SuppressPropGrip
// 0x0008 (0x0038 - 0x0030)
class UAnimNotifyState_SuppressPropGrip : public UAnimNotifyState
{
public:
	unsigned char                                      bKeepPrimaryHandGrip : 1;                                 // 0x0030(0x0001) (Edit, BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0031(0x0003) MISSED OFFSET
	float                                              BlendInTime;                                              // 0x0034(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.AnimNotifyState_SuppressPropGrip");
		return ptr;
	}

};


// Class BendGame.AsyncTaskLoadTexture
// 0x0048 (0x0070 - 0x0028)
class UAsyncTaskLoadTexture : public UBlueprintAsyncActionBase
{
public:
	struct FScriptMulticastDelegate                    OnSuccess;                                                // 0x0028(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnFail;                                                   // 0x0038(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData00[0x28];                                      // 0x0048(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.AsyncTaskLoadTexture");
		return ptr;
	}


	class UAsyncTaskLoadTexture* STATIC_AsyncLoadTexure(TAssetPtr<class UTexture2D> TextureAsset);
};


// Class BendGame.UIBlueprintLibrary
// 0x0000 (0x0028 - 0x0028)
class UUIBlueprintLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.UIBlueprintLibrary");
		return ptr;
	}


	bool STATIC_StopShareVideoRecording(class UObject* WorldContextObject);
	class ABendInventoryPickup* STATIC_SpawnTagPickup(class UObject* WorldContextObject, const struct FVector& Position, const struct FRotator& Rotation, const struct FGameplayTag& Tag, int Count, class UBlueprint* BlueprintClass);
	class ABendInventoryPickup* STATIC_SpawnPickup(class UWorld* pWorld, const struct FVector& Position, const struct FRotator& Rotation, const struct FInventoryIDDetails& ItemDetails, class UBlueprint* BlueprintClass);
	void STATIC_SetGameHudEnabled(class UObject* WorldContextObject, bool Enabled, float Duration);
	void STATIC_ReleaseSlateInputInteract(class USlateInputInteract* InputInteract);
	bool STATIC_IsShareVideoRecording(class UObject* WorldContextObject);
	bool STATIC_IsHDRSupported(class UObject* WorldContextObject);
	void STATIC_GetSystemResolution(class UObject* WorldContextObject, int* ResX, int* ResY, int* DeviceIndex, int* RefreshRateFraction0, int* RefreshRateFraction1, bool* IsFullscreen, bool* IsWindowed, bool* UseHDR);
	struct FName STATIC_GetInteractButtonActionName(TEnumAsByte<EInteractButton> InteractButton);
	TArray<struct FDisplayMetricsInfo> STATIC_GetDisplayInfo(class UObject* WorldContextObject);
	void STATIC_GetDisplayCapabilitiy(class UObject* WorldContextObject, int InIndex, struct FDisplayMetricsCapabilility* outCapability);
	class ABendHUD* STATIC_GetBendHUD(class UObject* WorldContextObject);
	class UInventoryDropTableManager* STATIC_DropTableManager();
	class USlateInputInteract* STATIC_CreateSlateInputInteract(class UObject* WorldContextObject);
};


// Class BendGame.UISoundManager
// 0x00C0 (0x00E8 - 0x0028)
class UUISoundManager : public UObject
{
public:
	TArray<TAssetPtr<class USoundClass>>               UISoundClass;                                             // 0x0028(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FName>                               SoundIDNames;                                             // 0x0038(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TMap<struct FName, class USoundCue*>               SoundCueMap;                                              // 0x0048(0x0050) (ZeroConstructor, Transient)
	TMap<struct FName, TAssetPtr<class USoundCue>>     SoundCueAssetMap;                                         // 0x0098(0x0050) (ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.UISoundManager");
		return ptr;
	}

};


// Class BendGame.BaseMenu
// 0x0058 (0x0080 - 0x0028)
class UBaseMenu : public UObject
{
public:
	unsigned char                                      UnknownData00[0x58];                                      // 0x0028(0x0058) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BaseMenu");
		return ptr;
	}

};


// Class BendGame.SlateMenu
// 0x0010 (0x0090 - 0x0080)
class USlateMenu : public UBaseMenu
{
public:
	class UBaseMenuWidget*                             Widget;                                                   // 0x0080(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0088(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.SlateMenu");
		return ptr;
	}

};


// Class BendGame.BendUserWidget
// 0x0060 (0x02A8 - 0x0248)
class UBendUserWidget : public UUserWidget
{
public:
	TArray<struct FName>                               BlockAllInputActionsExceptList;                           // 0x0248(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0258(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnMouseCaptured;                                          // 0x0260(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnMouseReleased;                                          // 0x0270(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               bSupportsMouseCapture;                                    // 0x0280(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0xF];                                       // 0x0281(0x000F) MISSED OFFSET
	TArray<struct FUserInputAction>                    UserInputActions;                                         // 0x0290(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData02[0x8];                                       // 0x02A0(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendUserWidget");
		return ptr;
	}


	void PushBendInputComponent();
	void PopBendInputComponent();
	void OnUpReleased();
	void OnUpPressed();
	void OnTutorialClosedReleased();
	void OnTutorialClosedPressed();
	void OnTabPreviousReleased();
	void OnTabPreviousPressed();
	void OnTabNextReleased();
	void OnTabNextPressed();
	void OnSelect2Released();
	void OnSelect2Pressed();
	void OnSelect1Released();
	void OnSelect1Pressed();
	void OnRightReleased();
	void OnRightPressed();
	void OnPagePreviousReleased();
	void OnPagePreviousPressed();
	void OnPageNextReleased();
	void OnPageNextPressed();
	void OnLeftReleased();
	void OnLeftPressed();
	void OnDownReleased();
	void OnDownPressed();
	void OnConfirmReleased();
	void OnConfirmPressed();
	void OnCancelReleased();
	void OnCancelPressed();
	void ListenForInputActionAxis(const struct FName& ActionName, bool bConsume, const struct FScriptDelegate& Callback, bool bExecuteWhenPaused);
	class ABendPlayerPawn* GetPlayerPawn();
	class ABendPlayerController* GetPlayerController();
	class ABendHUD* GetHud();
	void EndMouseCapture();
	void BeginMouseCapture();
};


// Class BendGame.BaseMenuWidget
// 0x00A8 (0x0350 - 0x02A8)
class UBaseMenuWidget : public UBendUserWidget
{
public:
	struct FScriptMulticastDelegate                    OnCloseDelegate;                                          // 0x02A8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData00[0x78];                                      // 0x02B8(0x0078) MISSED OFFSET
	unsigned char                                      bMenuInputDisabled : 1;                                   // 0x0330(0x0001) (BlueprintVisible, Transient)
	unsigned char                                      bClosePending : 1;                                        // 0x0330(0x0001) (BlueprintVisible, Transient)
	unsigned char                                      bHudVisibleOnEnter : 1;                                   // 0x0330(0x0001) (BlueprintVisible, Transient)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0331(0x0007) MISSED OFFSET
	class UPopupMenuWidget*                            PopupMenu;                                                // 0x0338(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class USlateMenu*                                  OwningMenu;                                               // 0x0340(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	int                                                ViewportZOrder;                                           // 0x0348(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x034C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BaseMenuWidget");
		return ptr;
	}


	class UPopupMenuWidget* SpawnPopup();
	void SetPlayerControlEnabled(bool Enabled);
	void SetMenuVisible(bool IsVisible);
	void SetLatentTimer(float Time, bool Looping, const struct FLatentActionInfo& LatentInfo);
	void SetInputDisabled(bool IsDisabled);
	void SetHudVisible(bool Visible);
	void SetGamePaused(bool Paused);
	void RequestClose(bool ClosedByPhotoMode);
	void RemoveLatentTimers();
	void ReadyToClose();
	void PlaySoundName(const struct FName& SoundName);
	void PlaySFX(TEnumAsByte<EUISoundID> Sound);
	void OnWidgetClosed();
	void OnSynchronizePropertiesEvent();
	void OnSynchronizeProperties();
	bool IsPopupActive();
	bool IsInputDisabled();
	int GetNewIndex(int Direction, int CurrentValue, int MinValue, int MaxValue, bool bWrap);
	class UPlayerInventoryComponent* GetInventoryComponent();
	void ClearPopup();
};


// Class BendGame.HudMissionTimerWidget
// 0x0038 (0x0280 - 0x0248)
class UHudMissionTimerWidget : public UUserWidget
{
public:
	float                                              CurrentTime;                                              // 0x0248(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              CurrentPercent;                                           // 0x024C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      bPaused : 1;                                              // 0x0250(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0251(0x0007) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnTimerExpireDelegate;                                    // 0x0258(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FHudMissionTimerDetails                     TimerDetails;                                             // 0x0268(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.HudMissionTimerWidget");
		return ptr;
	}


	void SetTimerPaused(bool IsPaused);
	void SetPercentNew(float Percent);
	void SetPercent(float Percent);
	void ClearTimer();
	void ActivateTimer(const struct FHudMissionTimerDetails& Details);
};


// Class BendGame.PlayerExperienceLevel
// 0x0058 (0x0080 - 0x0028)
class UPlayerExperienceLevel : public UObject
{
public:
	struct FScriptMulticastDelegate                    OnCategoryExperienceChanged;                              // 0x0028(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnLevelChanged;                                           // 0x0038(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	int                                                Level;                                                    // 0x0048(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, SaveGame, IsPlainOldData)
	int                                                MaxLevel;                                                 // 0x004C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, SaveGame, IsPlainOldData)
	int                                                CurrentXP;                                                // 0x0050(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, SaveGame, IsPlainOldData)
	int                                                NextLevelXP;                                              // 0x0054(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, SaveGame, IsPlainOldData)
	int                                                BaseXPForLevel;                                           // 0x0058(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, SaveGame, IsPlainOldData)
	int                                                RequiredXPForLevel;                                       // 0x005C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, SaveGame, IsPlainOldData)
	int                                                LastLevelBeforeXPGiven;                                   // 0x0060(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0064(0x0004) MISSED OFFSET
	struct FCurveTableRowHandle                        XPCurveTable;                                             // 0x0068(0x0010) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0078(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.PlayerExperienceLevel");
		return ptr;
	}


	int GetReqExperienceForLevel(int LevelToCheck);
	int GetNextLevelExperience();
	int GetMaxLevel();
	int GetLevel();
	float GetCurrentPercentage();
	int GetCurrentExperience();
	void DebugSetLevel(int InLevel);
	int AdjustXPRewardForDifficulty(int InXP);
	bool AddXP(int XPToAdd);
	bool AddCategoryXP(TEnumAsByte<EPlayerExperience> Type, int XPToAdd, bool IgnoreXPDifficultyScaling);
};


// Class BendGame.HudWidget
// 0x00D0 (0x0420 - 0x0350)
class UHudWidget : public UBaseMenuWidget
{
public:
	struct FHudMiniMapStyle                            MiniMapStyle;                                             // 0x0350(0x0030) (Edit, BlueprintVisible)
	TArray<class UWidget*>                             BikeWidgets;                                              // 0x0380(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst)
	class UHudMissionTimerWidget*                      MissionTimer;                                             // 0x0390(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	float                                              MaxDistForPlayerStealth;                                  // 0x0398(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x039C(0x0004) MISSED OFFSET
	class UImage*                                      WeaponBackground_CODE;                                    // 0x03A0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UImage*                                      WeaponBackground2_CODE;                                   // 0x03A8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FHudWidgetPlayerState                       PlayerState;                                              // 0x03B0(0x0038) (Edit, BlueprintVisible)
	struct FHudWidgetBikeState                         BikeState;                                                // 0x03E8(0x001C) (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst)
	unsigned char                                      bHudVisible : 1;                                          // 0x0404(0x0001) (Edit, BlueprintVisible, Transient, EditConst)
	unsigned char                                      bCutSceneActive : 1;                                      // 0x0404(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst)
	unsigned char                                      UnknownData01[0x1B];                                      // 0x0405(0x001B) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.HudWidget");
		return ptr;
	}


	void UpdateHealthItemCount(int Count);
	void UpdateGetOffBikeInteractProgress(float Percent);
	void SyncFlashlight(bool FlashlightOn);
	void SyncBikeLight(bool HighBeamsOn);
	void SyncBikeFuel(float Percent);
	void SyncBikeDamage(float Percent);
	void SyncBikeBoost(float Percent);
	void SyncAmmoCount(class ABendWeapon* Weapon, int Clip, int Spare);
	void SetUnderArmorVisible(bool Visible);
	void SetUnderArmorUILength(int BarLength);
	void SetUnderArmorPercent(float Percent);
	void SetHudVisible(bool Visible);
	void SetCutSceneActive(bool Active);
	void SetBikeHudVisible(bool Visible);
	void SetBikeHudInteractVisible(bool IsVisible);
	void SetBikeGetOffInteractVisible(bool IsVisible, bool Force);
	void ResetHudVisibilityExclusions();
	void PostWidgetInitialize();
	void OnWeaponRepairedInternal(class UInventoryWeaponItem* Weapon, int Cost);
	void OnWeaponRepaired(class ABendWeapon* Weapon, float Health);
	void OnWeaponHolstered(class ABendEquippableItem* Weapon);
	void OnWeaponAimStop(TEnumAsByte<EInventoryWeaponID> WeaponID, TEnumAsByte<EWeaponType> WeaponType, const struct FVector& Location, bool HasBinocularsEquipped);
	void OnWeaponAimStart(TEnumAsByte<EInventoryWeaponID> WeaponID, TEnumAsByte<EWeaponType> WeaponType, const struct FVector& Location, bool HasBinocularsEquipped);
	void OnStaminaModifed(class UBendAttribute* Attribute, float Value);
	void OnQuickSwap(int InSlotIndex);
	void OnQuicksaveHold(float HoldPercentage, bool Released);
	void OnPlayerVisibility(float PSVisibility);
	void OnPlayerStealth(bool IsStealthed);
	void OnPlayerScope(class ABendWeapon* EquippedWeapon, bool IsScoping);
	void OnPlayerRespawnEvent(class ABendPlayerController* PlayerController);
	void OnPlayerRespawn(class ABendPlayerController* PlayerController);
	void OnPlayerFire(class ABendWeapon* Weapon);
	void OnPlayerEarnedCategoryXP(class UPlayerExperienceLevel* PlayerXP, TEnumAsByte<EPlayerExperience> Type, int XPEarned);
	void OnPlayerAudibility(float PSAudibility);
	void OnPlayerAim(class ABendWeapon* EquippedWeapon, bool IsAiming);
	void OnNewPlayerStealth(bool DisplayMeter, bool Alerted);
	void OnHealthModified(class UBendAttribute* Attribute, float Value);
	void OnFocusModifed(class UBendAttribute* Attribute, float Value);
	void OnEquipWeapon(class ABendWeapon* EquippedWeapon);
	void OnDPadPressed(const struct FVector2D& Direction);
	void OnConsumableHold(float HoldPercentage, bool Released);
	void OnBinocularStart();
	void OnBinocularEnd();
	bool IsCompletionScreenActive();
	void EnableMissionFailMessage(const struct FText& NewtText, bool IsFullFailure);
	void DisplayWeaponBackground(bool State);
	void DisableMissionFailMessage();
	void ClearMissionTimer();
	bool AreTutorialsDisabled();
	void AddNotification(const struct FNotificationDetails& Details);
	void ActivateNewPlayerStealthHUD(bool Activate);
	void ActivateMissionTimer(const struct FHudMissionTimerDetails& Details);
};


// Class BendGame.BendSphereComponent
// 0x0050 (0x0260 - 0x0210)
class UBendSphereComponent : public USceneComponent
{
public:
	float                                              SphereRadius;                                             // 0x0210(0x0004) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                DebugSphereSegments;                                      // 0x0214(0x0004) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ExtraExitRadius;                                          // 0x0218(0x0004) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               m_bDebugDrawSphere;                                       // 0x021C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x021D(0x0003) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnBeginOverlap;                                           // 0x0220(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnEndOverlap;                                             // 0x0230(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData01[0x20];                                      // 0x0240(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendSphereComponent");
		return ptr;
	}


	void SetSphereRadius(float Radius);
	void SetExtraExitRadius(float Radius);
	void PlayerTeleported(const struct FVector& NewLocation);
	void PlayerStoppedZenMode(bool InZenMode);
	void PlayerRespawned(class ABendPlayerController* Controller);
	void PlayerDied(float ActualDamage, class AController* Killer, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, const struct FName& BoneName, const struct FVector& Momentum, class UDamageType* DamageType, class AActor* DamageCauser);
	bool IsOverlapping();
};


// Class BendGame.MapMarker
// 0x0028 (0x0370 - 0x0348)
class AMapMarker : public AActor
{
public:
	class UMiniMapLocationComponent*                   MiniMapLocationComponent;                                 // 0x0348(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	TEnumAsByte<EObjectiveCategories>                  ObjectiveCategory;                                        // 0x0350(0x0001) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	TEnumAsByte<EObjectiveVisualType>                  ObjectiveVisualCategory;                                  // 0x0351(0x0001) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x0352(0x0006) MISSED OFFSET
	class UChildActorComponent*                        DesignWaypointWidget;                                     // 0x0358(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UBendSphereComponent*                        SphereComponent;                                          // 0x0360(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	float                                              MarkerPlayerZOffset;                                      // 0x0368(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x036C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.MapMarker");
		return ptr;
	}


	void SetVisible(bool IsVisible);
	void SetMarkerTexture(class UTexture2D* Texture);
	void SetDesignWaypointWidget(class UChildActorComponent* InWidget);
};


// Class BendGame.MapWaypointMarker
// 0x00B8 (0x0428 - 0x0370)
class AMapWaypointMarker : public AMapMarker
{
public:
	class UClass*                                      NavQueryFilter;                                           // 0x0370(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CloseDistance;                                            // 0x0378(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                MaxPartialPathRetrys;                                     // 0x037C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EMapWaypointMarker>                    WaypointMarkerType;                                       // 0x0380(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0381(0x0007) MISSED OFFSET
	TArray<struct FLinearColor>                        WaypointNavPathColors;                                    // 0x0388(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	struct FLinearColor                                BlockedWaypointNavPathColor;                              // 0x0398(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TWeakObjectPtr<class AActor>                       FollowActor;                                              // 0x03A8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<struct FVector>                             PathList;                                                 // 0x03B0(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	unsigned char                                      UnknownData01[0x38];                                      // 0x03C0(0x0038) MISSED OFFSET
	class UBendWidgetComponent*                        BendWidget;                                               // 0x03F8(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, Transient, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData02[0x20];                                      // 0x0400(0x0020) MISSED OFFSET
	bool                                               bRequiresUpdate;                                          // 0x0420(0x0001) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData03[0x7];                                       // 0x0421(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.MapWaypointMarker");
		return ptr;
	}


	void SetWaypointType(TEnumAsByte<EObjectiveCategories> Category, TEnumAsByte<EObjectiveVisualType> VisualCategory);
	void SetWaypointMarkerType(TEnumAsByte<EMapWaypointMarker> Type);
	void SetPathVisible(bool Visible);
	void SetPathAutoResetAtEnd(bool bAutoResetAtPathEnd);
	void SetNavPathColor(const struct FLinearColor& Color);
	void SetAllowPathReRoute(bool bAllowReRoute);
	void SetAllowNavMeshRouting(bool bAllow);
	bool PathToLocation(const struct FVector& StartPosition, class UMiniMapLocationComponent* EndLocation);
	void OnVisibilityChanged(bool IsVisible);
	void OnTimerEvent();
	void OnSphereBeginOverlap();
	void OnMissionBegin(TEnumAsByte<EMissionIDs> MissionID);
	bool IsNavMeshRoutingAllowed();
	bool InitPathList(TArray<struct FVector> PositionList);
	bool InitPath(const struct FVector& StartPosition, const struct FVector& EndPosition);
	bool HasValidNavPath();
	struct FVector GetPointOnPath(const struct FVector& StartLocation, float distanceFrom, int lane);
	struct FVector GetPathDirection(const struct FVector& StartLocation);
	struct FLinearColor GetNavPathColor();
	struct FVector GetEndLocation();
	float GetDistanceToClosestSplineLocation(const struct FVector& StartLocation);
	float GetDistanceAlongPath(const struct FVector& StartLocation, const struct FVector& EndLocation);
	void ClearPath();
};


// Class BendGame.BendHUDInterface
// 0x0000 (0x0028 - 0x0028)
class UBendHUDInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendHUDInterface");
		return ptr;
	}


	void SetVisible(bool IsVisible);
	void SetGameHudEnabled(bool Enabled, float Duration);
	void SetFlashlightOnOff(bool IsOn);
	void SetBikeHeadlightOnOff(bool IsOn);
	class AMapWaypointMarker* GetMissionWaypointMarker();
	void ClearMissionTimer();
	void ActivateMissionTimer(const struct FHudMissionTimerDetails& Details);
};


// Class BendGame.WorldMapSectors
// 0x00A0 (0x00C8 - 0x0028)
class UWorldMapSectors : public UObject
{
public:
	struct FIntPoint                                   MaxSectorIndex;                                           // 0x0028(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   SectorSize;                                               // 0x0030(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FBox                                        SectorBounds;                                             // 0x0038(0x001C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0054(0x0004) MISSED OFFSET
	TArray<struct FWorldMapSector>                     MapSectors;                                               // 0x0058(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	struct FWorldMapSector                             EmptySector;                                              // 0x0068(0x0058) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	int                                                GenerateSectorsOnSave;                                    // 0x00C0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00C4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.WorldMapSectors");
		return ptr;
	}

};


// Class BendGame.SlateHUD
// 0x0030 (0x00C0 - 0x0090)
class USlateHUD : public USlateMenu
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0090(0x0020) MISSED OFFSET
	class UHudWidget*                                  HudWidget;                                                // 0x00B0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FWorldMapSectorTextureSetManager            MiniMapSectorTextureManager;                              // 0x00B8(0x0001)
	unsigned char                                      UnknownData01[0x7];                                       // 0x00B9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.SlateHUD");
		return ptr;
	}


	void SetMiniMapZoomLevel(TEnumAsByte<EHudMiniMapZoomLevel> Level);
};


// Class BendGame.SlateInputInteract
// 0x0120 (0x01B0 - 0x0090)
class USlateInputInteract : public USlateMenu
{
public:
	float                                              MinHoldTimeForInteract;                                   // 0x0090(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              InputKeyTimePressed;                                      // 0x0094(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              CurrentPercent;                                           // 0x0098(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PreviousPercent;                                          // 0x009C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	int                                                UserData0;                                                // 0x00A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                UserData1;                                                // 0x00A4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bPaused : 1;                                              // 0x00A8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)
	unsigned char                                      bDebugOutputEnabled : 1;                                  // 0x00A8(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00A9(0x0007) MISSED OFFSET
	struct FScriptDelegate                             OnInputEndDelegate;                                       // 0x00B0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, InstancedReference)
	unsigned char                                      UnknownData01[0x40];                                      // 0x00C0(0x0040) MISSED OFFSET
	struct FActorInteractDetails                       InteractDetails;                                          // 0x0100(0x0070) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)
	class UInputInteractWidget*                        InteractWidget;                                           // 0x0170(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	class UUserWidget*                                 SavedInteractWidget;                                      // 0x0178(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	class UBendWidgetComponent*                        InteractWidget3D;                                         // 0x0180(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData02[0x28];                                      // 0x0188(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.SlateInputInteract");
		return ptr;
	}


	void SetVisible(bool Visible);
	void SetProgressPercent(float Progress);
	void SetPaused(bool IsPaused);
	void SetInteractWidget3D(class UBendWidgetComponent* BendWidget3D);
	void SetInteractDetails(const struct FActorInteractDetails& Details);
	void ReleaseInteractWidget3D();
	bool InteractInProgress();
	class UInputInteractWidget* EnableInputInteract(float InteractTime);
	void DisableInputInteract();
	bool CompletedInteract();
	bool AbortedInteract();
};


// Class BendGame.BendFocusModeAdvertise
// 0x0000 (0x0250 - 0x0250)
class UBendFocusModeAdvertise : public UBaseUserWidget
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendFocusModeAdvertise");
		return ptr;
	}


	void TurnOffCompletely();
	void SetInRangeOfAdvertise(bool InRange, bool InstantState);
	void SetDangerAdvertise(bool IsDanger);
	void FadeTheAdvertise(bool FadeIn);
};


// Class BendGame.BendUIObjectiveCalloutWidget
// 0x0058 (0x02A8 - 0x0250)
class UBendUIObjectiveCalloutWidget : public UBaseUserWidget
{
public:
	class UTextBlock*                                  DistanceText_CODE;                                        // 0x0250(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UImage*                                      Icon_CODE;                                                // 0x0258(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FSlateColor                                 ObjectiveIconColor;                                       // 0x0260(0x0028) (Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                               CloseRange;                                               // 0x0288(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0289(0x0003) MISSED OFFSET
	float                                              ObjectiveDistanceAway;                                    // 0x028C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ObjectiveDistanceIconChangeLimit;                         // 0x0290(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<EObjectiveCategories>                  ObjectiveCategory;                                        // 0x0294(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0295(0x0003) MISSED OFFSET
	class UTexture2D*                                  ObjectiveIcon;                                            // 0x0298(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UTexture2D*                                  DefaultIcon;                                              // 0x02A0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendUIObjectiveCalloutWidget");
		return ptr;
	}


	void StoreIconsInBlueprint();
	void SetIconVisibility(bool Visible);
	void SetIconColor(const struct FSlateColor& Color, class UImage* Icon);
	void SetIcon(class UTexture2D* Texture);
	void SetDistanceText_Code(const struct FText& NewText, float DistanceAway);
};


// Class BendGame.HudCollectibleClue
// 0x0010 (0x0260 - 0x0250)
class UHudCollectibleClue : public UBaseUserWidget
{
public:
	TEnumAsByte<EHudCollectibleClueState>              State;                                                    // 0x0250(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0251(0x0007) MISSED OFFSET
	class UInventoryItemCollectible*                   Collectible;                                              // 0x0258(0x0008) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.HudCollectibleClue");
		return ptr;
	}


	bool SetState(TEnumAsByte<EHudCollectibleClueState> InState);
	bool IsActive();
	void DeactivateClueNotification();
};


// Class BendGame.InteractAdvertiseWidgetBase
// 0x0068 (0x02B8 - 0x0250)
class UInteractAdvertiseWidgetBase : public UBaseUserWidget
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0250(0x0018) MISSED OFFSET
	bool                                               IsCurrentlyShowing;                                       // 0x0268(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0269(0x0007) MISSED OFFSET
	class UInteractComponent*                          InteractComponentRef;                                     // 0x0270(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UBendWidgetComponent*                        BendWidgetComponentRef;                                   // 0x0278(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	bool                                               IsTweening;                                               // 0x0280(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0281(0x0003) MISSED OFFSET
	float                                              TweenFrame;                                               // 0x0284(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TweenTo;                                                  // 0x0288(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TweenSpeed;                                               // 0x028C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               LastLOSCheck;                                             // 0x0290(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0291(0x0003) MISSED OFFSET
	struct FVector                                     PlayerLastPosition;                                       // 0x0294(0x000C) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     OverrideLocation;                                         // 0x02A0(0x000C) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               IsNotActive;                                              // 0x02AC(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x3];                                       // 0x02AD(0x0003) MISSED OFFSET
	float                                              WeaponBackgroundRotation;                                 // 0x02B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData05[0x4];                                       // 0x02B4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.InteractAdvertiseWidgetBase");
		return ptr;
	}


	void TweenVisibility();
	bool SetTheAdvertiseVisible(bool UseWideLayout, class UInventoryItem* InventoryItem, bool IsAmmoPickup, TEnumAsByte<EIconTypes> IconType, float Durability);
	bool SetTheAdvertiseHidden();
	void SetParentRef(class AActor* Parent);
	bool SetDisabledState(bool State, bool Friendly, bool DisplayMaxIfDisabled);
	void ResetAdvertiseForPool();
	class UBendWidgetComponent* GetWidgetComponentRef();
	class AActor* GetParentRef();
};


// Class BendGame.Bend_RegionPoolActor
// 0x0018 (0x0360 - 0x0348)
class ABend_RegionPoolActor : public AActor
{
public:
	TArray<struct FBendRegionType>                     RegionSpecificSpawnTypes;                                 // 0x0348(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0358(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.Bend_RegionPoolActor");
		return ptr;
	}

};


// Class BendGame.BendAttribute
// 0x00C0 (0x00E8 - 0x0028)
class UBendAttribute : public UObject
{
public:
	struct FBendPlayerAttribute                        PlayerAttribute;                                          // 0x0028(0x0078) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, SaveGame)
	int                                                AttributeLevel;                                           // 0x00A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                MaxAttributeLevel;                                        // 0x00A4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxAttributeValue;                                        // 0x00A8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              EffectLevel;                                              // 0x00AC(0x0004) (ZeroConstructor, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnAttributeChanged;                                       // 0x00B0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	TArray<class UGameplayEffect*>                     UseEffects;                                               // 0x00C0(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      bIsActive : 1;                                            // 0x00D0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst)
	unsigned char                                      bDisableTagChangeCallback : 1;                            // 0x00D0(0x0001) (Edit, BlueprintVisible, Transient)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00D1(0x0007) MISSED OFFSET
	class UBendAbilitySystemComponent*                 AbilitySystemComponent;                                   // 0x00D8(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, Transient, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x00E0(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAttribute");
		return ptr;
	}


	void SetValue(float Value);
	void SetUseEffectLevel(TEnumAsByte<EAttributeUseEffect> Type, float Level);
	void SetMaxValue(float Value);
	bool IsCooldownActive();
	bool IsActivated();
	float GetValue();
	float GetUseEffectLevel(TEnumAsByte<EAttributeUseEffect> Type);
	float GetPercentage();
	float GetMaxValue();
	bool Deactivate();
	bool CanActivate();
	float AdjustMaxValue(float Value);
	void AdjustAttributeLevel(int Value);
	bool ActivateRecharge();
	bool ActivateCooldown();
	bool Activate();
};


// Class BendGame.BendAbilitySystemComponent
// 0x00A0 (0x1260 - 0x11C0)
class UBendAbilitySystemComponent : public UAbilitySystemComponent
{
public:
	struct FName                                       GroupName;                                                // 0x11C0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                PlayerLevel;                                              // 0x11C8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, EditConst, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x11CC(0x0004) MISSED OFFSET
	TArray<class UBendAttribute*>                      Attributes;                                               // 0x11D0(0x0010) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance)
	struct FCurveTableRowHandle                        SkillPointCurveTable;                                     // 0x11E0(0x0010) (Edit, DisableEditOnInstance)
	struct FCurveTableRowHandle                        AbilityPointCurveTable;                                   // 0x11F0(0x0010) (Edit, DisableEditOnInstance)
	int                                                AbilityPoints;                                            // 0x1200(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x1204(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnAttributePointAwarded;                                  // 0x1208(0x0010) (BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnAttributePointUsed;                                     // 0x1218(0x0010) (BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      bAttributesInitialized : 1;                               // 0x1228(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst)
	unsigned char                                      UnknownData02[0x37];                                      // 0x1229(0x0037) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAbilitySystemComponent");
		return ptr;
	}


	void SetUseEffectLevel(const struct FName& Name, TEnumAsByte<EAttributeUseEffect> Type, float Level);
	void RemoveGameplayTag(const struct FGameplayTag& GameplayTag);
	void OnTagModified(const struct FGameplayTag& Tag, int Count);
	void OnPlayerLevelChange(class UPlayerExperienceLevel* PlayerXP, int Level);
	void Initialize(bool SetAttributesToMax);
	void InitAttributesForLevel(int Level, bool SetCurrentToMaxValues);
	int GetSkillPointsForLevel(int Level);
	float GetEffectLevel(const struct FName& Name, TEnumAsByte<EAttributeUseEffect> Type);
	int GetAttributePointsForLevel(int Level);
	float GetAttributePercentage(const struct FName& Name);
	class UBendAttribute* GetAttribute(const struct FName& Name);
	void DebugDumpEffects();
	void AddGameplayTag(const struct FGameplayTag& GameplayTag);
};


// Class BendGame.BendAIConfidenceSettings
// 0x0200 (0x0238 - 0x0038)
class UBendAIConfidenceSettings : public UDeveloperSettings
{
public:
	float                                              HeroicConfidenceThreshold;                                // 0x0038(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              ConfidentConfidenceThreshold;                             // 0x003C(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              NeutralConfidenceThreshold;                               // 0x0040(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              WorriedConfidenceThreshold;                               // 0x0044(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              PanickedConfidenceThreshold;                              // 0x0048(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              LowHealthThreshold;                                       // 0x004C(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              LowHealthPowerModifier;                                   // 0x0050(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              StatusEffectPowerModifier;                                // 0x0054(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              HeroicPowerModifier;                                      // 0x0058(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              ConfidentPowerModifier;                                   // 0x005C(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              NeutralPowerModifier;                                     // 0x0060(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              WorriedPowerModifier;                                     // 0x0064(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              PanickedPowerModifier;                                    // 0x0068(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              MinTimeToWaitForIncreaseAfterDrop;                        // 0x006C(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              MinTimeToWaitForDropAfterIncrease;                        // 0x0070(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              TimeBeforeFriendSemiAwareThreshold;                       // 0x0074(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              TimeBeforeEnemySemiAwareThreshold;                        // 0x0078(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              FriendDiminishingReturnsFactor;                           // 0x007C(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              EnemyDiminishingReturnsFactor;                            // 0x0080(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              FriendlySemiAwareStrengthModifier;                        // 0x0084(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              FriendlySemiAwareKillsModifier;                           // 0x0088(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              EnemySemiAwareStrengthModifier;                           // 0x008C(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              KillStrengthModifier;                                     // 0x0090(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              BloodRageKillCountModifier;                               // 0x0094(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              FriendOutsideDefendZoneModifier;                          // 0x0098(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              FriendDefendZonePenaltyModifier;                          // 0x009C(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              OutsideDZAllowedTimeLoose;                                // 0x00A0(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              OutsideDZAllowedTimeNormal;                               // 0x00A4(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              OutsideDZAllowedTimeTight;                                // 0x00A8(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              OutsideDZAllowedTimeVeryTight;                            // 0x00AC(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              OutsideDZAllowedTimeHard;                                 // 0x00B0(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              OutsideDZRecoverTimeLoose;                                // 0x00B4(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              OutsideDZRecoverTimeNormal;                               // 0x00B8(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              OutsideDZRecoverTimeTight;                                // 0x00BC(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              OutsideDZRecoverTimeVeryTight;                            // 0x00C0(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              OutsideDZRecoverTimeHard;                                 // 0x00C4(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              ScreamHitImpact;                                          // 0x00C8(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              HaflArmorBonus;                                           // 0x00CC(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              FullArmorBonus;                                           // 0x00D0(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              NearFriendDistance;                                       // 0x00D4(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              FarFriendDistance;                                        // 0x00D8(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              SelfBias;                                                 // 0x00DC(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              CasualtyModifier;                                         // 0x00E0(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              IsTargetedModifier;                                       // 0x00E4(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              IsTargetedExpirationTime;                                 // 0x00E8(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              ThreateningSoundThreshold;                                // 0x00EC(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              ThreateningSoundModifier;                                 // 0x00F0(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              ThreateningSoundExpirationTime;                           // 0x00F4(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              EnemyPanickedModifier;                                    // 0x00F8(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              InFortificationModifier;                                  // 0x00FC(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              PlayerDamageDealtDecay;                                   // 0x0100(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              PlayerAttackingOtherModifier;                             // 0x0104(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              PlayerDamagingDecayRate;                                  // 0x0108(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              PlayerMeleeDecayRate;                                     // 0x010C(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              PlayerSuppressMinAmount;                                  // 0x0110(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              PlayerSuppressMaxAmount;                                  // 0x0114(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              PlayerSuppressExpireAmount;                               // 0x0118(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              PlayerSuppressDecay;                                      // 0x011C(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              PlayerSuppressDecayBlackOutTime;                          // 0x0120(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              PlayerSuppressShotRecoveryRate;                           // 0x0124(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              PlayerSuppressWeaponNotScaryModifier;                     // 0x0128(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              PlayerSuppressWeaponKindaScaryModifier;                   // 0x012C(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              PlayerSuppressWeaponScaryModifier;                        // 0x0130(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              PlayerSuppressWeaponReallyScaryModifier;                  // 0x0134(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              PlayerSuppressWeaponUltraScaryModifier;                   // 0x0138(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              PlayerSuppressWeaponPleaseDontKillMeModifier;             // 0x013C(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              FullAmorSuppressWeaponModifier;                           // 0x0140(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              PlayerSuppressFactor;                                     // 0x0144(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              BuddySuppressFactor;                                      // 0x0148(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              NPCSuppressFactor;                                        // 0x014C(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              FriendSuppressedStrengthModifier;                         // 0x0150(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              PlayerMovementExpirationRate;                             // 0x0154(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              PlayerMovementExpirationRateUnaware;                      // 0x0158(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              PlayerMovementThreshold;                                  // 0x015C(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              PlayerMovementSprintingRate;                              // 0x0160(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              PlayerMovementRunningRate;                                // 0x0164(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              PlayerMovementWalkingRate;                                // 0x0168(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              PlayerMovementCrouchingRate;                              // 0x016C(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              PlayerMovementStillRate;                                  // 0x0170(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              PlayerMovementMax;                                        // 0x0174(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              PlayerMovementDiscount;                                   // 0x0178(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              PlayerCoveringTimeDecay;                                  // 0x017C(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              PlayerCoveringTimeMax;                                    // 0x0180(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              PlayerCoveringTimeDiscount;                               // 0x0184(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              PlayerSpookMinDeviationFactor;                            // 0x0188(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              PlayerSpookedDecay;                                       // 0x018C(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              PlayerMinSpookinessRadius;                                // 0x0190(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              PlayerAttackingModifier;                                  // 0x0194(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              PlayerCoveringModifier;                                   // 0x0198(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              PlayerDamageDealtModifier;                                // 0x019C(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              PlayerDamageReceivedModifier;                             // 0x01A0(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              PlayerMeleeModifier;                                      // 0x01A4(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              PlayerMovementModifier;                                   // 0x01A8(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              PlayerSpookinessModifier;                                 // 0x01AC(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              PlayerSuppressionModifier;                                // 0x01B0(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              PlayerAdrenalineRushModifier;                             // 0x01B4(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              WeaponNotScaryModifier;                                   // 0x01B8(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              WeaponKindaScaryModifier;                                 // 0x01BC(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              WeaponScaryModifier;                                      // 0x01C0(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              WeaponReallyScaryModifier;                                // 0x01C4(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              WeaponUltraScaryModifier;                                 // 0x01C8(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              WeaponPleaseDontKillMeModifier;                           // 0x01CC(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              AIWeaponNotScaryModifier;                                 // 0x01D0(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              AIWeaponKindaScaryModifier;                               // 0x01D4(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              AIWeaponScaryModifier;                                    // 0x01D8(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              AIWeaponReallyScaryModifier;                              // 0x01DC(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              AIWeaponUltraScaryModifier;                               // 0x01E0(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              AIWeaponPleaseDontKillMeModifier;                         // 0x01E4(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              PlayerInertia;                                            // 0x01E8(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              EnemyInertia;                                             // 0x01EC(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              EnemyKillsInertia;                                        // 0x01F0(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              FriendInertia;                                            // 0x01F4(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              FriendKillsInertia;                                       // 0x01F8(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              UnawareConfidenceDrop;                                    // 0x01FC(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              UnawareConfidenceIncrease;                                // 0x0200(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              AwareFriendlyKillsDecay;                                  // 0x0204(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              UnawareFriendlyKillsDecay;                                // 0x0208(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              UnawareEnemyStrengthDecay;                                // 0x020C(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              AwareEnemyKillsDecay;                                     // 0x0210(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              UnawareEnemyKillsDecay;                                   // 0x0214(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              UnawarePlayerEnemyDecay;                                  // 0x0218(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1C];                                      // 0x021C(0x001C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAIConfidenceSettings");
		return ptr;
	}

};


// Class BendGame.BendBearController
// 0x0070 (0x1050 - 0x0FE0)
class ABendBearController : public ABendAnimalController
{
public:
	struct FScriptMulticastDelegate                    OnHitDestructible;                                        // 0x0FE0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	float                                              ChargeStunDuration;                                       // 0x0FF0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ExplosionStunDuration;                                    // 0x0FF4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxMaulDistance;                                          // 0x0FF8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               m_bCanRush;                                               // 0x0FFC(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_bShouldStartRush;                                       // 0x0FFD(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_bIsRushing;                                             // 0x0FFE(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_bBerserkMode;                                           // 0x0FFF(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_bCanKill;                                               // 0x1000(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_bBlendspaceAttack;                                      // 0x1001(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x1002(0x0002) MISSED OFFSET
	float                                              m_iBlendSpaceAngle;                                       // 0x1004(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnChargePrepareEntered;                                   // 0x1008(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnChargeEntered;                                          // 0x1018(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnChargePrepareExited;                                    // 0x1028(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnChargeExited;                                           // 0x1038(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData01[0x8];                                       // 0x1048(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBearController");
		return ptr;
	}


	bool TryRush();
	void StartMeleeBlendspaceAttack();
	void RushHitStaticMesh(const struct FHitResult& HitResult);
	bool DetermineSuccessOrFailedRush();
	bool CanRush();
};


// Class BendGame.BendPerchingComponent
// 0x0110 (0x01E0 - 0x00D0)
class UBendPerchingComponent : public UActorComponent
{
public:
	bool                                               bCanPerchOnWorldEdges;                                    // 0x00D0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00D1(0x0003) MISSED OFFSET
	float                                              SpawnOnPerchProbability;                                  // 0x00D4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FTraversalEdge                              CurrentCrowEdge;                                          // 0x00D8(0x00F0) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, Transient, EditConst)
	struct FVector                                     CurrentPerchingLocation;                                  // 0x01C8(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	struct FRotator                                    CurrentPerchingRotation;                                  // 0x01D4(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendPerchingComponent");
		return ptr;
	}


	bool SelectFirstAvailableCrowEdge(TArray<struct FTraversalEdge> Perches, float MinDistanceToOtherCrows);
	bool SelectCrowEdge(const struct FTraversalEdge& Perch, float MinDistanceToOtherCrows);
	bool HasValidCrowEdge();
};


// Class BendGame.BendPerchingHelper
// 0x0000 (0x0028 - 0x0028)
class UBendPerchingHelper : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendPerchingHelper");
		return ptr;
	}


	TArray<struct FTraversalEdge> STATIC_SortByDistance(TArray<struct FTraversalEdge> Range, const struct FVector& Position, bool bAscending);
	struct FTraversalEdge STATIC_SelectRandom(TArray<struct FTraversalEdge> Range);
	struct FTraversalEdge STATIC_SelectClosest(TArray<struct FTraversalEdge> Range, const struct FVector& Position);
	TArray<struct FTraversalEdge> STATIC_NotInArea(TArray<struct FTraversalEdge> Range, const struct FVector& Center, float Radius);
	TArray<struct FTraversalEdge> STATIC_InDefendZone(TArray<struct FTraversalEdge> Range, const struct FDefendZoneInfo& Zone);
	TArray<struct FTraversalEdge> STATIC_FindCrowEdgesInDefendZone(const struct FDefendZoneInfo& defendZone);
	TArray<struct FTraversalEdge> STATIC_FindCrowEdgesInArea(const struct FVector& Center, float Radius);
};


// Class BendGame.BendGraphicsBufferQueryComponent
// 0x0040 (0x0250 - 0x0210)
class UBendGraphicsBufferQueryComponent : public USceneComponent
{
public:
	unsigned char                                      UnknownData00[0x40];                                      // 0x0210(0x0040) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendGraphicsBufferQueryComponent");
		return ptr;
	}


	float GetHeight(int Index, const struct FVector& Location);
};


// Class BendGame.BendTrackingManager
// 0x0340 (0x0688 - 0x0348)
class ABendTrackingManager : public AActor
{
public:
	class ABendPawn*                                   TrackedPawnRef;                                           // 0x0348(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DistanceBetweenTrackingPointsOnPath;                      // 0x0350(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                StencildIndexNotInvestigated;                             // 0x0354(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                StencildIndexInvestigatedGood;                            // 0x0358(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                StencildIndexInvestigatedBad;                             // 0x035C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                StencildIndexInvestigatedAfterImage;                      // 0x0360(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0364(0x0004) MISSED OFFSET
	struct FName                                       TagToHideThingsWhenLeavingFocusMode;                      // 0x0368(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               TrackingOn;                                               // 0x0370(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData)
	bool                                               InRockThrowState;                                         // 0x0371(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               HasToldControllerAfterImagesActive;                       // 0x0372(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               HasToldControllerInRangeOfClue;                           // 0x0373(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               StillHighlightWhenFocusOff;                               // 0x0374(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               ShowAfterImagesOutsideOfFocusMode;                        // 0x0375(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               ShowCluesHighlightOutsideOfFocusMode;                     // 0x0376(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               CanTrackWithoutFocusMode;                                 // 0x0377(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UChildActorComponent*                        Minimap_CODE;                                             // 0x0378(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UChildActorComponent*                        AudioNullCheck_CODE;                                      // 0x0380(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class USoundCue*                                   TrackingRedSoundCue;                                      // 0x0388(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class USoundCue*                                   NullCheckSoundCue;                                        // 0x0390(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UInteractComponent*                          InteractComponentType_CODE;                               // 0x0398(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	float                                              RadiusWhenFollowingPath;                                  // 0x03A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DistanceToObjectNeededToInteract;                         // 0x03A4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       CurrentSectionId;                                         // 0x03A8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData)
	struct FName                                       PreviousSectionId;                                        // 0x03B0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData)
	bool                                               InsideTrackingRange;                                      // 0x03B8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x03B9(0x0007) MISSED OFFSET
	struct FBendActionData                             ActionData;                                               // 0x03C0(0x00A0) (Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                               PlayerInAnimation;                                        // 0x0460(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0461(0x0007) MISSED OFFSET
	class ABendTrackingMinimapMarker_BP*               MiniMapRef;                                               // 0x0468(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<bool>                                       SectionHasBeenEnabled;                                    // 0x0470(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame)
	int                                                CurrentTargetIndex;                                       // 0x0480(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              Animlength;                                               // 0x0484(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<int>                                        CurrentValidIndexes;                                      // 0x0488(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	float                                              CurrentAnimTime;                                          // 0x0498(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x049C(0x0004) MISSED OFFSET
	TArray<class ASkeletalMeshActor*>                  CurrentAfterImageActors;                                  // 0x04A0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	struct FTimerHandle                                TimerHandle_TrackingTimer;                                // 0x04B0(0x0004) (Edit, BlueprintVisible, DisableEditOnInstance)
	float                                              InteractBuffer;                                           // 0x04B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<struct FBendTrackingDataInfo>               TrackingData;                                             // 0x04B8(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	bool                                               TurnOffGenericTrackingVO;                                 // 0x04C8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x3];                                       // 0x04C9(0x0003) MISSED OFFSET
	float                                              DistanceRequiredWhenFollowingPath;                        // 0x04CC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DistanceToHighlightClues;                                 // 0x04D0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DistanceForAdvertising;                                   // 0x04D4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<bool>                                       HasBeenIdentified;                                        // 0x04D8(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame)
	class USoundClass*                                 VO_SoundclassInAnim;                                      // 0x04E8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       VO_ToBePlayedInAnimation;                                 // 0x04F0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       VO_ToBePlayedOutOfAnimation;                              // 0x04F8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       VO_ToBePlayedLeaveInteractRange;                          // 0x0500(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       VO_ToBePlayedEnterInteractRange;                          // 0x0508(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FScriptMulticastDelegate                    CodeTrackingClueInvestigated;                             // 0x0510(0x0010) (Edit, ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    CodeTrackingSectionCompleted;                             // 0x0520(0x0010) (Edit, ZeroConstructor, InstancedReference, BlueprintAssignable)
	TArray<class UBendWidgetComponent*>                BendWidgetComponents;                                     // 0x0530(0x0010) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FVector>                             CurrentLocations;                                         // 0x0540(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame)
	bool                                               StartedRumble;                                            // 0x0550(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData05[0x3];                                       // 0x0551(0x0003) MISSED OFFSET
	float                                              intensity;                                                // 0x0554(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class AActor*                                      SoundLocationActor;                                       // 0x0558(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               WithinSoundRange;                                         // 0x0560(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               IsFocusModeActive;                                        // 0x0561(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData06[0x6];                                       // 0x0562(0x0006) MISSED OFFSET
	TArray<struct FVector>                             TrackingGameplayLocations;                                // 0x0568(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	bool                                               TrackingHasStarted;                                       // 0x0578(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               AudioDuckingACtive;                                       // 0x0579(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData07[0x6];                                       // 0x057A(0x0006) MISSED OFFSET
	class ABendAudioManager*                           SoundManager;                                             // 0x0580(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FailedRumbleChecks;                                       // 0x0588(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                TotalClueActorsPerClueItems;                              // 0x058C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<class AActor*>                              SoundActorLocations;                                      // 0x0590(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	bool                                               IsBreathing;                                              // 0x05A0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData08[0x7];                                       // 0x05A1(0x0007) MISSED OFFSET
	TArray<class AActor*>                              HolderArray;                                              // 0x05A8(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	bool                                               TurnOffSoundDucking;                                      // 0x05B8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               Pause;                                                    // 0x05B9(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData09[0x2];                                       // 0x05BA(0x0002) MISSED OFFSET
	float                                              LerpValue;                                                // 0x05BC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<class ABendTrackingMinimapMarker_BP*>       FootPrintMarkers;                                         // 0x05C0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	int                                                LastMarkerIndexUsed;                                      // 0x05D0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               IsAnimalDynamicTracking;                                  // 0x05D4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               CanFinishPathForAnimals;                                  // 0x05D5(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               CanStartPathForAnimals;                                   // 0x05D6(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               HasPlayedFirstExamineVO;                                  // 0x05D7(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               EnteredTrackingRangeVO;                                   // 0x05D8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               EnteredTrackingRangeAgainVO;                              // 0x05D9(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               PlayedInRangeOfClueVO;                                    // 0x05DA(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               PlayedEnterFocusModeVO;                                   // 0x05DB(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData10[0x4];                                       // 0x05DC(0x0004) MISSED OFFSET
	struct FName                                       LastTestedTrackingSection;                                // 0x05E0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                LastTestedTrackingIndex;                                  // 0x05E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData11[0x1];                                       // 0x05EC(0x0001) MISSED OFFSET
	bool                                               AllowTheSoundCallouts;                                    // 0x05ED(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData12[0x2];                                       // 0x05EE(0x0002) MISSED OFFSET
	float                                              LastDistanceCheck;                                        // 0x05F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData13[0x4];                                       // 0x05F4(0x0004) MISSED OFFSET
	class AActor*                                      AudioActor_Child;                                         // 0x05F8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAudioComponent*                             ChildSoundReference;                                      // 0x0600(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	float                                              AudioLerp;                                                // 0x0608(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               PausedTheVOManager;                                       // 0x060C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData14[0x3];                                       // 0x060D(0x0003) MISSED OFFSET
	int                                                OWVOToggleToken;                                          // 0x0610(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               JustCompleteTrackingSection;                              // 0x0614(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData15[0x3];                                       // 0x0615(0x0003) MISSED OFFSET
	class UMaterialParameterCollection*                MaterialCollection;                                       // 0x0618(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       MaterialInstanceName;                                     // 0x0620(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UTimelineComponent*                          MyTimeline;                                               // 0x0628(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UCurveFloat*                                 FloatCurve;                                               // 0x0630(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData16[0x50];                                      // 0x0638(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendTrackingManager");
		return ptr;
	}


	bool WasTrackingSectionCompleted(const struct FName& SectionName);
	void UpdateButtonProgress(int Index, float Percent);
	void TurnOnTrackingHUD();
	void TurnOffTrackingHUD();
	void TurnOffRumble();
	void TrackingSectionCompleteCallback();
	void TrackingHUDUpdate(float Percent);
	void TimerForRadiusCheck();
	void TimelineCallback(float Val);
	bool TestDistanceFromCurrentTrackingCuesToPlayer();
	void SoundActorDistanceCheck();
	bool ShouldTurnOnHighlightVisuals();
	void SetTrackingState(int Index, bool Visible, bool Advertising, bool bLocked);
	void SetSectionEnabled(const struct FName& SectionID, bool enable, const struct FName& PrevID);
	void SetRenderSettingsOnActors(TArray<class AActor*> TrackingActors, bool On, TEnumAsByte<ECurrentTrackingVisualSetting> NewSetting);
	bool SetNewLocationListFromID(const struct FName& ID_Ref, const struct FVector& FinalLocation);
	void RuntimeUpdateDepthForCorrectActors();
	void RumbleCallback();
	void ResetVOVariables();
	void RadiusTimerCallback();
	void OnEnterActionFail(TEnumAsByte<EPeformActionFailedReason> FailedReason);
	void OnEnterActionComplete();
	void MarkerTickBegin();
	void ListWasFinished();
	void IsPlayerPawnSpeaking(class ABendPlayerPawn* Player, bool* Result);
	bool IsLocationNearbyAnyOfTheseLocations(TArray<struct FVector> LocationsList, const struct FVector& LocationToCheck, float DistanceToCheck, int* Index);
	void InAnimationFail(bool CancelAction);
	int GetSectionIndexFromID(const struct FName& SectionID);
	class ABendTrackingMinimapMarker_BP* GetNextFootprintMarkerToUse();
	void GetClueFromIndex(int TargetIndex, struct FName* VO_Name, class USoundClass** SoundClassRef, class AActor** ClueObject);
	TArray<int> GetBestSuitedOneInRange();
	class UAnimSequenceBase* GetAnimFromIndex(int Index);
	void FinishAnimationOnUpdate();
	void DoDistanceChecksForPath();
	void DoCamLookAt(const struct FVector& OverrideVector);
	void DepthOnAllMeshesControl(bool OnToggle);
	void CompleteTrackingSection(bool DontCallCompleted);
	TArray<struct FVector> CollectLocationListFromItems(const struct FVector& StartLocation, TArray<class AActor*> UnlockedActors, const struct FVector& EndPoint, float EndRadius);
	void CloseTheTutorialAndHideData();
	void AnimationsFinished();
	void AfterImageForwardCallback();
	void AfterImageBackwardCallback();
	void ActionLooping(float TimeLeft);
};


// Class BendGame.BendAudioStatesData
// 0x0010 (0x0038 - 0x0028)
class UBendAudioStatesData : public UDataAsset
{
public:
	TArray<struct FAudioStateData>                     AudioStates;                                              // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAudioStatesData");
		return ptr;
	}

};


// Class BendGame.BendAIPawn
// 0x0270 (0x29B0 - 0x2740)
class ABendAIPawn : public ABendPawn
{
public:
	class UBendAnimVariationData*                      FemaleLipSyncAnimations;                                  // 0x2740(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               m_bStunned;                                               // 0x2748(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x2749(0x0007) MISSED OFFSET
	struct FScriptMulticastDelegate                    WantsMeleeAttack;                                         // 0x2750(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               MeleeAttacksInterruptable;                                // 0x2760(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x2761(0x0003) MISSED OFFSET
	float                                              MaxHealthBright;                                          // 0x2764(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxHealthDark;                                            // 0x2768(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxHealthMultiplier_Cloudy;                               // 0x276C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxHealthMultiplier_LightRain;                            // 0x2770(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxHealthMultiplier_HeavyRain;                            // 0x2774(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxHealthMultiplier_LightSnow;                            // 0x2778(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxHealthMultiplier_HeavySnow;                            // 0x277C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SpeedMultiplier_Cloudy;                                   // 0x2780(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SpeedMultiplier_LightRain;                                // 0x2784(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SpeedMultiplier_HeavyRain;                                // 0x2788(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SpeedMultiplier_LightSnow;                                // 0x278C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SpeedMultiplier_HeavySnow;                                // 0x2790(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x2794(0x0004) MISSED OFFSET
	class UPhysicalMaterial*                           CriticalHitMaterial;                                      // 0x2798(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CriticalHitDamageMultiplier;                              // 0x27A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CriticalHitDamageMultiplier_OutsideCritRange;             // 0x27A4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CriticalHitDamageMultiplierFocusMode;                     // 0x27A8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HeadshotXPMultiplier;                                     // 0x27AC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              StealthXPMultiplier;                                      // 0x27B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x27B4(0x0004) MISSED OFFSET
	class UBendAimAssistTargetComponent*               AimAssistTarget;                                          // 0x27B8(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	float                                              PersonalBubbleRadius;                                     // 0x27C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x27C4(0x0004) MISSED OFFSET
	struct FRuntimeFloatCurve                          HitChanceByLosTime;                                       // 0x27C8(0x0080) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData05[0x88];                                      // 0x2848(0x0088) MISSED OFFSET
	float                                              HitChanceCooldownTime;                                    // 0x28D0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HitChanceLossTime;                                        // 0x28D4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData06[0x4];                                       // 0x28D8(0x0004) MISSED OFFSET
	float                                              FemaleScaleFactor;                                        // 0x28DC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData07[0x28];                                      // 0x28E0(0x0028) MISSED OFFSET
	bool                                               bAudioStatesEnabled;                                      // 0x2908(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData08[0x7];                                       // 0x2909(0x0007) MISSED OFFSET
	class UBendAudioStatesData*                        AudioStateData;                                           // 0x2910(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData09[0x80];                                      // 0x2918(0x0080) MISSED OFFSET
	float                                              CalloutFarRange;                                          // 0x2998(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      NPCCalloutFarRange : 1;                                   // 0x299C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      NPCCalloutCloseRange : 1;                                 // 0x299C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData10[0x13];                                      // 0x299D(0x0013) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAIPawn");
		return ptr;
	}


	void Stun(float Duration);
	void SetTargetPreference(TEnumAsByte<EAITargetPreference> newPreference);
	void SetArchetype(class UBendArchetypeDataBase* Archetype);
	void RequestMeshScale(float desiredScale, float TransitionTime);
	void RemoveMeshScale(float TransitionTime);
	bool IsNavLinkNextPathPoint(class ABendTraversalNavLink* NavLink);
	bool IsNavLinkInPath(class ABendTraversalNavLink* NavLink);
	bool IsInjured();
	void HandleOnDied(float ActualDamage, class AController* Killer, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, const struct FName& BoneName, const struct FVector& Momentum, class UDamageType* DamageType, class AActor* DamageCauser);
	TEnumAsByte<EAITargetPreference> GetTargetPreference();
	void AutomaticallySetVariationDataBasedOnGender();
};


// Class BendGame.BendAnimalPawn
// 0x0290 (0x2C40 - 0x29B0)
class ABendAnimalPawn : public ABendAIPawn
{
public:
	bool                                               bDelaySearchBodyOrLootSpawnUntilRIP;                      // 0x29B0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bDisableSupplementalCapsuleOnSlopes;                      // 0x29B1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x29B2(0x0002) MISSED OFFSET
	float                                              SlopeAngleToDisableSupplementalCapsule;                   // 0x29B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SlopeLookAheadTimeToDisableSupplementalCapsule;           // 0x29B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bDidMeleeAttackHit;                                       // 0x29BC(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x29BD(0x0003) MISSED OFFSET
	float                                              MinDistanceToEnableCollisionWithTargetAfterAttack;        // 0x29C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x29C4(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    WantsFailedAttack;                                        // 0x29C8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    MeleeAttackEnded;                                         // 0x29D8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    WantsDodge;                                               // 0x29E8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    DodgeEnded;                                               // 0x29F8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    WantsAlert;                                               // 0x2A08(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    AlertEnded;                                               // 0x2A18(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    WantsStartled;                                            // 0x2A28(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    StartledEnded;                                            // 0x2A38(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    WantsSleep;                                               // 0x2A48(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    SleepEnded;                                               // 0x2A58(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    WantsRetreat;                                             // 0x2A68(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    WantsSit;                                                 // 0x2A78(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    SitEnded;                                                 // 0x2A88(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    WantsRest;                                                // 0x2A98(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    RestEnded;                                                // 0x2AA8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    RetreatEnded;                                             // 0x2AB8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    WantsScent;                                               // 0x2AC8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ScentEnded;                                               // 0x2AD8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               bIsRunningBack;                                           // 0x2AE8(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bHasBackoffBlendSpace;                                    // 0x2AE9(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x2];                                       // 0x2AEA(0x0002) MISSED OFFSET
	float                                              AlertNoiseLoudness;                                       // 0x2AEC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bMakeAlertNoiseDuringTaunts;                              // 0x2AF0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x7];                                       // 0x2AF1(0x0007) MISSED OFFSET
	struct FScriptMulticastDelegate                    WantsTaunt;                                               // 0x2AF8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    TauntEnded;                                               // 0x2B08(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               bOccasionalIdlePlaying;                                   // 0x2B18(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData05[0x7];                                       // 0x2B19(0x0007) MISSED OFFSET
	struct FString                                     initStateName;                                            // 0x2B20(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	bool                                               bWantsBasicClimb;                                         // 0x2B30(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData06[0xF];                                       // 0x2B31(0x000F) MISSED OFFSET
	struct FTransform                                  BasicClimbEdgeAnchor;                                     // 0x2B40(0x0030) (BlueprintVisible, BlueprintReadOnly, Transient, IsPlainOldData)
	struct FVector                                     BasicClimbEndingPoint;                                    // 0x2B70(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bIsJumping;                                               // 0x2B7C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData07[0x3];                                       // 0x2B7D(0x0003) MISSED OFFSET
	struct FName                                       BasicJumpAnimPlaceholderName;                             // 0x2B80(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAnimSequenceBase*                           BasicJumpAnimPlaceholder;                                 // 0x2B88(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              BasicJumpAddPercentToHigherJump;                          // 0x2B90(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              BasicJumpAddPercentToLowerJump;                           // 0x2B94(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              BasicJumpAddZToFlatJump;                                  // 0x2B98(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     JumpingStartPoint;                                        // 0x2B9C(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	struct FVector                                     JumpingEndPoint;                                          // 0x2BA8(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	float                                              JumpingFallingProgression;                                // 0x2BB4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	float                                              BasicJumpRequiredYaw;                                     // 0x2BB8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	struct FVector                                     BasicJumpStartVelocity;                                   // 0x2BBC(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	float                                              MinFallingVelocityForPainAnimation;                       // 0x2BC8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinHealthForJogOrRun;                                     // 0x2BCC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               CanBeTrackedWhenInjured;                                  // 0x2BD0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               HasDroppedTrackingClue;                                   // 0x2BD1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData08[0x6];                                       // 0x2BD2(0x0006) MISSED OFFSET
	TAssetPtr<class UClass>                            TrackingBPAssetPtr;                                       // 0x2BD8(0x0020) (Edit, BlueprintVisible, DisableEditOnInstance)
	class UClass*                                      TrackingBPClassRef;                                       // 0x2BF8(0x0008) (ZeroConstructor, IsPlainOldData)
	class AActor*                                      TrackingSpawnedReference;                                 // 0x2C00(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnSpawnedInTrackingBP;                                    // 0x2C08(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData09[0x10];                                      // 0x2C18(0x0010) MISSED OFFSET
	class UBendAnimalAnimInstance*                     AnimInstance;                                             // 0x2C28(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	int                                                LastValidPawnLevel;                                       // 0x2C30(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	int                                                LastValidXPAwarded;                                       // 0x2C34(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	TEnumAsByte<EAIFactionType>                        LastValidFactionType;                                     // 0x2C38(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bHasForcedInjury;                                         // 0x2C39(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData10[0x6];                                       // 0x2C3A(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAnimalPawn");
		return ptr;
	}


	struct FBendAttackData StartMeleeAttack(class AActor* AttackTarget, const struct FName& AttackName, bool IgnoreDistance);
	class AActor* SpawnAndSetupSearchBodyActor(class UAnimSequenceBase* AnimSequence, class UAnimSequenceBase* AnimSequenceCrouched, const struct FName& SubClass);
	void SetupAnimalLootBinds();
	void SetSupplementalCapsuleEnabled(bool bEnabled);
	void SetInjured(bool bValue);
	void ResetJumping();
	void OnTauntAnimEnded();
	void OnStartledAnimEnded();
	void OnSleepAnimEnded();
	void OnSitAnimEnded();
	void OnScentAnimEnded();
	void OnRetreatAnimEnded();
	void OnRestAnimEnded();
	void OnOccasionalIdleAnimStarted();
	void OnOccasionalIdleAnimEnded();
	void OnMeleeAttackStarted(const struct FBendAttackData& AttackData);
	void OnMeleeAttackHit();
	void OnMeleeAttackAnimEnded();
	void OnDodgeAnimStarted();
	void OnDodgeAnimEnded();
	void OnDiedHandler(float ActualDamage, class AController* Killer, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, const struct FName& BoneName, const struct FVector& Momentum, class UDamageType* DamageType, class AActor* DamageCauser);
	void OnDamageAnimStarted();
	void OnDamageAnimEnded();
	void OnAnimalClimbStarting(const struct FBendActionData& fClimbActionData, bool bShouldFallAfterClimb, const struct FBendClimbContext& fClimbContext, bool QueuedClimb);
	void OnAlertAnimEnded();
	void MissMeleeAttack();
	bool IsInjured();
	struct FVector GetFutureVelocity();
	struct FVector GetActorFeetLocation();
	void FinishedStreamingTrackingBP();
	void EQSTeleport(class UEnvQuery* QueryTemplate);
	void AttemptTaunt();
	void AttemptStartled();
	void AttemptSleep(float Duration);
	void AttemptSit(float Duration);
	void AttemptScent();
	void AttemptRetreat();
	void AttemptRest(float Duration);
	bool AttemptDodge(float angle);
	void AttemptAlertWithoutNoise();
	void AttemptAlert();
};


// Class BendGame.BendFlyingAnimalPawn
// 0x00B0 (0x2CF0 - 0x2C40)
class ABendFlyingAnimalPawn : public ABendAnimalPawn
{
public:
	class USphereComponent*                            SupplementalSphere;                                       // 0x2C40(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	struct FScriptMulticastDelegate                    WantsFlying;                                              // 0x2C48(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    TakeOffStarted;                                           // 0x2C58(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    TakeOffEnded;                                             // 0x2C68(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    WantsLanding;                                             // 0x2C78(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    LandingStarted;                                           // 0x2C88(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    LandingEnded;                                             // 0x2C98(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FName                                       LandingStartAnchor;                                       // 0x2CA8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       LandingEndAnchor;                                         // 0x2CB0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x2CB8(0x0008) MISSED OFFSET
	struct FTransform                                  LandingDestination;                                       // 0x2CC0(0x0030) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendFlyingAnimalPawn");
		return ptr;
	}


	void StopFlying();
	void StartLanding(const struct FTransform& Destination);
	void StartFlying();
	void OnTakeOffAnimStarted();
	void OnTakeOffAnimEnded();
	void OnSupplementalSphereOverlap(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool FromSweep, const struct FHitResult& SweepResult);
	void OnPerchingAnimStarted();
	void OnPerchingAnimEnded();
	void OnLandingAnimStarted();
	void OnLandingAnimEnded();
	void OnFlyingMovementStarted();
	void OnFlyingMovementEnded();
};


// Class BendGame.BendFlyingAnimalController
// 0x00A0 (0x1080 - 0x0FE0)
class ABendFlyingAnimalController : public ABendAnimalController
{
public:
	class UBendPerchingComponent*                      PerchingComponent;                                        // 0x0FE0(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0FE8(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    FlyToTargetComplete;                                      // 0x0FF0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class ABendFlyingAnimalPawn*                       FlyingAnimalPawn;                                         // 0x1000(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxDeltaDistance;                                         // 0x1008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxDeltaPitch;                                            // 0x100C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxDeltaYaw;                                              // 0x1010(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DefaultAcceptanceRadius;                                  // 0x1014(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MinGroundClearance;                                       // 0x1018(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PreferredAltitude;                                        // 0x101C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxAltitude;                                              // 0x1020(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxPitchForGroundLanding;                                 // 0x1024(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BeginApproachRange;                                       // 0x1028(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MinDistanceToTargetForFlying;                             // 0x102C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PerchSearchRadius;                                        // 0x1030(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x1034(0x0004) MISSED OFFSET
	class UAnimSequenceBase*                           TakeoffSequence;                                          // 0x1038(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           LandingSequence;                                          // 0x1040(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bUseBufferQueryComponent;                                 // 0x1048(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x1049(0x0003) MISSED OFFSET
	struct FVector                                     FlyingTarget;                                             // 0x104C(0x000C) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	float                                              FlyingAltitude;                                           // 0x1058(0x0004) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	TEnumAsByte<EFlyingNavType>                        FlyingNavType;                                            // 0x105C(0x0001) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x105D(0x0003) MISSED OFFSET
	float                                              FlyingAcceptanceRadius;                                   // 0x1060(0x0004) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	TEnumAsByte<EFlyingNavigationState>                FlyingNavState;                                           // 0x1064(0x0001) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData04[0x1B];                                      // 0x1065(0x001B) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendFlyingAnimalController");
		return ptr;
	}


	void RequestFlight(const struct FVector& Location, TEnumAsByte<EFlyingNavType> NavType, TEnumAsByte<EAIMoveSpeed> Speed, float Radius, bool SkipDefendZoneCheck, bool ForceDirectFlight);
	void OnPawnStartTakeOff();
	void OnPawnEndTakeOff();
	void OnPawnEndLanding();
	void OnMeleeAttackEnded();
	bool IsReadyForApproach();
	float GetPreferredAltitude();
	float GetMinGroundClearance();
	float GetMaxDeltaPitch();
	float GetMaxDeltaDistance();
	TEnumAsByte<EFlyingNavigationState> GetFlyingNavState();
	struct FVector GetClampedWaypointDirection(const struct FVector& DesiredDirection);
	void FlyUpAtMaxPitch();
	bool FlyToPerch(TEnumAsByte<EPerchType> PerchType);
};


// Class BendGame.BendWolfController
// 0x0000 (0x0FE0 - 0x0FE0)
class ABendWolfController : public ABendAnimalController
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendWolfController");
		return ptr;
	}

};


// Class BendGame.BendFreakerController
// 0x04A0 (0x1340 - 0x0EA0)
class ABendFreakerController : public ABendAIController
{
public:
	class UBendCrowdFlowSoundEmitter*                  ScreamSoundEmitter;                                       // 0x0EA0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	float                                              WalkSpeedNight;                                           // 0x0EA8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FastWalkSpeedNight;                                       // 0x0EAC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              JogSpeedNight;                                            // 0x0EB0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              RunSpeedNight;                                            // 0x0EB4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SprintSpeedNight;                                         // 0x0EB8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BlindedMoveSpeedMult;                                     // 0x0EBC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_WanderPct;                                              // 0x0EC0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_WanderRange;                                            // 0x0EC4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_EatingOneShotPct;                                       // 0x0EC8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_NeutralOneShotPct;                                      // 0x0ECC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_HuntOneShotPct;                                         // 0x0ED0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_FrenzyOneShotPct;                                       // 0x0ED4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_bEating;                                                // 0x0ED8(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_bShouldNest;                                            // 0x0ED9(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_bNesting;                                               // 0x0EDA(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_bNestingRage;                                           // 0x0EDB(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_bTryScream;                                             // 0x0EDC(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               m_bIsScreaming;                                           // 0x0EDD(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0EDE(0x0002) MISSED OFFSET
	float                                              m_fScreamVolume;                                          // 0x0EE0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_bScreamAttracts;                                        // 0x0EE4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_bScreamSpawns;                                          // 0x0EE5(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x0EE6(0x0002) MISSED OFFSET
	struct FBendAmbientSpawnType                       m_ScreamSpawnType;                                        // 0x0EE8(0x0418) (Edit, BlueprintVisible)
	int                                                m_ScreamSpawnCount;                                       // 0x1300(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_fScreamCooldown;                                        // 0x1304(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x1308(0x0004) MISSED OFFSET
	float                                              m_fNestingRageDuration;                                   // 0x130C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_NestingRageMeleeMult;                                   // 0x1310(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_fTargetBeingGrappledMeleeMult;                          // 0x1314(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_fHunger;                                                // 0x1318(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_fDodgeMinTime;                                          // 0x131C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MinDodgeDistance;                                         // 0x1320(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DodgePercent;                                             // 0x1324(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DodgePercentBlinded;                                      // 0x1328(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_fMaxStrafeDistance;                                     // 0x132C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x10];                                      // 0x1330(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendFreakerController");
		return ptr;
	}


	bool TryScream();
	void ScreamStarted();
	void ScreamFinished();
	void Scream();
	void OnStatusEffectStarted(class UStatusEffect* StatusEffect);
	void ForceEnrage();
};


// Class BendGame.BendNewtController
// 0x00A0 (0x13E0 - 0x1340)
class ABendNewtController : public ABendFreakerController
{
public:
	bool                                               FindPOIsWhenAware;                                        // 0x1340(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x1341(0x0003) MISSED OFFSET
	TWeakObjectPtr<class ABendPawn>                    ThreateningPawn;                                          // 0x1344(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ThreatenedCooldown;                                       // 0x134C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<struct FThreateningPawnData>                CurrentThreats;                                           // 0x1350(0x0010) (BlueprintVisible, ZeroConstructor)
	struct FScriptMulticastDelegate                    BeginHanging;                                             // 0x1360(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               m_bPerformDistraction;                                    // 0x1370(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x1371(0x0003) MISSED OFFSET
	float                                              DistractionDistance;                                      // 0x1374(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CancelDistractionDistance;                                // 0x1378(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SafeDistance;                                             // 0x137C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxAdvantageDistance;                                     // 0x1380(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AdvantageHealthThreshold;                                 // 0x1384(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DefendZoneAdvantageDistance;                              // 0x1388(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DefendZoneThreatDistance;                                 // 0x138C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IsPerformingAntic;                                        // 0x1390(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x1391(0x0003) MISSED OFFSET
	float                                              GrappleAcceptanceRadius;                                  // 0x1394(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AcceptableCoverAngle;                                     // 0x1398(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x139C(0x0004) MISSED OFFSET
	class UClass*                                      RoofNavArea;                                              // 0x13A0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UClass*                                      DefaultNavFilter;                                         // 0x13A8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UClass*                                      StaySafeNavFilter;                                        // 0x13B0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x28];                                      // 0x13B8(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendNewtController");
		return ptr;
	}


	void Threatened(class ABendPawn* threatener);
	bool TargetHasNonNewtAttacker();
	bool ShouldPerformAntic();
	void SetAmbushMode(bool newAmbushMode);
	float PerformAntic(bool anchorToEdge);
	void NotifyItemStolen(const struct FInventoryIDDetails& InventoryID);
	void NewtTookDamage(float Damage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	bool LocateRoofCover(const struct FVector& targetPos);
	bool IsThreatening(class ABendPawn* targetPawn);
	bool IsInAmbushMode();
	bool IsEnemyInSafeZoneForPoint(const struct FVector& Point);
	bool HasAdvantage(class ABendPawn* targetPawn);
	struct FVector GetDistractionLocation();
	bool FindNearbyCover(const struct FVector& QueryPos, float QueryRange);
	void AnticAnimFailed(TEnumAsByte<EPeformActionFailedReason> ReasonForFailure);
	void AnticAnimComplete();
};


// Class BendGame.BendRagerController
// 0x0090 (0x13D0 - 0x1340)
class ABendRagerController : public ABendFreakerController
{
public:
	bool                                               m_bShouldStartRush;                                       // 0x1340(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_bIsRushing;                                             // 0x1341(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x1342(0x0006) MISSED OFFSET
	struct FBendAttackData                             poundAction;                                              // 0x1348(0x0060) (BlueprintVisible, BlueprintReadOnly)
	bool                                               m_bShouldPound;                                           // 0x13A8(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_bBerserkMode;                                           // 0x13A9(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_bCanKill;                                               // 0x13AA(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_bBerserkKilled;                                         // 0x13AB(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                m_iCombatPhase;                                           // 0x13AC(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_bBlendspaceAttack;                                      // 0x13B0(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x13B1(0x0003) MISSED OFFSET
	float                                              m_iBlendSpaceAngle;                                       // 0x13B4(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_bPerformAntic;                                          // 0x13B8(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x13B9(0x0007) MISSED OFFSET
	class UAnimSequenceBase*                           m_PerformAnticSeq;                                        // 0x13C0(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x8];                                       // 0x13C8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendRagerController");
		return ptr;
	}


	bool TryRush();
	bool TryPound();
	bool TryPerformAntic(const struct FName& AnticCategory);
	void RagerTookDamage(float Damage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void RagerHitStaticMesh(const struct FHitResult& HitResult);
	void PlayKill();
	bool DetermineSuccessOrFailedRush();
	bool CanRush();
	bool CanPound();
};


// Class BendGame.BendSwarmerController
// 0x0030 (0x1370 - 0x1340)
class ABendSwarmerController : public ABendFreakerController
{
public:
	bool                                               UsePostAttackAnimation;                                   // 0x1340(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               TryToBlockHeadshots;                                      // 0x1341(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x1342(0x0002) MISSED OFFSET
	float                                              MaxMoveSpeedReductionFromHit;                             // 0x1344(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	class UClass*                                      RoofNavArea;                                              // 0x1348(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UClass*                                      NavFilterDefault;                                         // 0x1350(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      NavFilterExcludeRoof;                                     // 0x1358(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinBikeSpeedForAttack;                                    // 0x1360(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxBikeSpeedForAttack;                                    // 0x1364(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinAngleToSwarmerForAttack;                               // 0x1368(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x136C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendSwarmerController");
		return ptr;
	}

};


// Class BendGame.BendBreakerController
// 0x0010 (0x1380 - 0x1370)
class ABendBreakerController : public ABendSwarmerController
{
public:
	float                                              GrappleInRangeTime;                                       // 0x1370(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xC];                                       // 0x1374(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBreakerController");
		return ptr;
	}

};


// Class BendGame.BendScreamerController
// 0x0060 (0x13D0 - 0x1370)
class ABendScreamerController : public ABendSwarmerController
{
public:
	class UBendCrowdAwarenessZoneComponent*            CrowdAwarenessZoneComponent;                              // 0x1370(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UEnvQuery*                                   ScreamSpawnLocationQuery;                                 // 0x1378(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                MaxActiveHordeSpawns;                                     // 0x1380(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               m_bScreamerHiding;                                        // 0x1384(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x1385(0x0003) MISSED OFFSET
	struct FBendLocationHandle                         ScreamHordeSpawnLocationOverride;                         // 0x1388(0x0010) (BlueprintVisible)
	struct FScriptMulticastDelegate                    OnScreamerScreamed;                                       // 0x1398(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class USoundBase*                                  HordeSpawnSound;                                          // 0x13A8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x20];                                      // 0x13B0(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendScreamerController");
		return ptr;
	}


	class ABendCrowdController* GetHordeController();
};


// Class BendGame.BendCharacterLookComponent
// 0x00A0 (0x0170 - 0x00D0)
class UBendCharacterLookComponent : public UActorComponent
{
public:
	TArray<struct FBendCharacterLookAngleLimits>       AngleLimits;                                              // 0x00D0(0x0010) (Edit, EditFixedSize, ZeroConstructor)
	float                                              LeftRightYawOffset;                                       // 0x00E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              UpDownPitchOffset;                                        // 0x00E4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x88];                                      // 0x00E8(0x0088) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendCharacterLookComponent");
		return ptr;
	}


	void RemoveLookRequest(const struct FBendCharacterLookRequestId& Id);
	void ModifyLookRequestAtComponent(const struct FBendCharacterLookRequestId& RequestID, class USceneComponent* TargetComponent, const struct FName& TargetSocketOrBoneName, bool bOverrideAngleLimits, const struct FRotator& AngleLimitOverride, TEnumAsByte<EBendCharacterLookPartialSet> PartialSet, float InterpolationRate);
	void ModifyLookRequestAtCharacterHead(const struct FBendCharacterLookRequestId& RequestID, class ABendPawn* TargetCharacter, bool bOverrideAngleLimits, const struct FRotator& AngleLimitOverride, TEnumAsByte<EBendCharacterLookPartialSet> PartialSet, float InterpolationRate);
	void ModifyLookRequestAtActor(const struct FBendCharacterLookRequestId& RequestID, class AActor* TargetActor, bool bOverrideAngleLimits, const struct FRotator& AngleLimitOverride, TEnumAsByte<EBendCharacterLookPartialSet> PartialSet, float InterpolationRate);
	void ModifyLookRequestAlongLocation(const struct FBendCharacterLookRequestId& RequestID, const struct FVector& LookAtLocation, bool bOverrideAngleLimits, const struct FRotator& AngleLimitOverride, TEnumAsByte<EBendCharacterLookPartialSet> PartialSet, float InterpolationRate);
	void ModifyLookRequestAlongAngle(const struct FBendCharacterLookRequestId& RequestID, const struct FRotator& LookAngle, bool bIsLocalSpaceAngle, bool bOverrideAngleLimits, const struct FRotator& AngleLimitOverride, TEnumAsByte<EBendCharacterLookPartialSet> PartialSet, float InterpolationRate);
	void GetLookAngle(TEnumAsByte<EBendCharacterLookPartialSet> PartialSet, bool bGetTargetAngleValues, float* Yaw, float* Pitch, float* Alpha);
	void AddLookRequestAtLocation(const struct FBendCharacterLookRequestId& InputRequestId, const struct FVector& LookAtLocation, bool bOverrideAngleLimits, const struct FRotator& AngleLimitOverride, TEnumAsByte<EBendCharacterLookPartialSet> PartialSet, float InterpolationRate, float Duration, struct FBendCharacterLookRequestId* OutputRequestId);
	void AddLookRequestAtComponent(const struct FBendCharacterLookRequestId& InputRequestId, class USceneComponent* TargetComponent, const struct FName& TargetSocketOrBoneName, bool bOverrideAngleLimits, const struct FRotator& AngleLimitOverride, TEnumAsByte<EBendCharacterLookPartialSet> PartialSet, float InterpolationRate, float Duration, struct FBendCharacterLookRequestId* OutputRequestId);
	void AddLookRequestAtCharacterHead(const struct FBendCharacterLookRequestId& InputRequestId, class ABendPawn* TargetCharacter, bool bOverrideAngleLimits, const struct FRotator& AngleLimitOverride, TEnumAsByte<EBendCharacterLookPartialSet> PartialSet, float InterpolationRate, float Duration, struct FBendCharacterLookRequestId* OutputRequestId);
	void AddLookRequestAtActor(const struct FBendCharacterLookRequestId& InputRequestId, class AActor* TargetActor, bool bOverrideAngleLimits, const struct FRotator& AngleLimitOverride, TEnumAsByte<EBendCharacterLookPartialSet> PartialSet, float InterpolationRate, float Duration, struct FBendCharacterLookRequestId* OutputRequestId);
	void AddLookRequestAlongAngle(const struct FBendCharacterLookRequestId& InputRequestId, const struct FRotator& LookAngle, bool bIsLocalSpaceAngle, bool bOverrideAngleLimits, const struct FRotator& AngleLimitOverride, TEnumAsByte<EBendCharacterLookPartialSet> PartialSet, float InterpolationRate, float Duration, struct FBendCharacterLookRequestId* OutputRequestId);
};


// Class BendGame.BendEquippableItem
// 0x0268 (0x05B0 - 0x0348)
class ABendEquippableItem : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0348(0x0008) MISSED OFFSET
	class UClass*                                      ManualAimOverrideCamera;                                  // 0x0350(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bAllowUseOnBikeInMotion;                                  // 0x0358(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0359(0x0007) MISSED OFFSET
	class UBendAnimMoveSet*                            OverrideMoveSet;                                          // 0x0360(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0368(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnBeginItemOverrideForCinematics;                         // 0x0370(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnEndItemOverrideForCinematics;                           // 0x0380(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               ShouldOverrideMontageDuration;                            // 0x0390(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               OverrideBlending;                                         // 0x0391(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x2];                                       // 0x0392(0x0002) MISSED OFFSET
	float                                              OverrideMontageDuration;                                  // 0x0394(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BlendInOverride;                                          // 0x0398(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BlendOutOverride;                                         // 0x039C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x8];                                       // 0x03A0(0x0008) MISSED OFFSET
	bool                                               m_bOwnerIsPlayer;                                         // 0x03A8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData05[0x1F];                                      // 0x03A9(0x001F) MISSED OFFSET
	class USceneComponent*                             BaseSceneComponent;                                       // 0x03C8(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class USkeletalMeshComponent*                      Mesh;                                                     // 0x03D0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UStaticMeshComponent*                        StaticMesh;                                               // 0x03D8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class USkeletalMeshComponent*                      BrokenMesh;                                               // 0x03E0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	struct FVector                                     HolsterRelativePosition;                                  // 0x03E8(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FRotator                                    HolsterRelativeRotation;                                  // 0x03F4(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FWeaponAnim                                 EquipAnim;                                                // 0x0400(0x0030) (Edit, DisableEditOnInstance)
	struct FWeaponAnim                                 UnEquipAnim;                                              // 0x0430(0x0030) (Edit, DisableEditOnInstance)
	struct FWeaponAnim                                 BikeEquipAnim;                                            // 0x0460(0x0030) (Edit, DisableEditOnInstance)
	struct FWeaponAnim                                 BikeUnEquipAnim;                                          // 0x0490(0x0030) (Edit, DisableEditOnInstance)
	bool                                               SkipNextMontageIfPlaying;                                 // 0x04C0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0xF];                                       // 0x04C1(0x000F) MISSED OFFSET
	TEnumAsByte<EUnaimedAnimMoveStyle>                 UnaimedMoveStyle;                                         // 0x04D0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EAimedAnimMoveStyle>                   AimedMoveStyle;                                           // 0x04D1(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EBlindFireAnimMoveStyle>               BlindFireMoveStyle;                                       // 0x04D2(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EBendPropGripStyle>                    PropGripStyle;                                            // 0x04D3(0x0001) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData07[0x4];                                       // 0x04D4(0x0004) MISSED OFFSET
	struct FWeaponAnimPlaybackData                     PawnBlueprintAnimPlaybackData;                            // 0x04D8(0x0010) (BlueprintVisible, BlueprintReadOnly)
	class UInventoryWeaponItem*                        WeaponItem;                                               // 0x04E8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData08[0x8];                                       // 0x04F0(0x0008) MISSED OFFSET
	class UBendAnimVariationData*                      UserAnimationSet;                                         // 0x04F8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UBendAnimVariationData*                      UserAnimationSet_Npc;                                     // 0x0500(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UBendEquippableItemUserAnimParams*           UserAnimParams;                                           // 0x0508(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              UserAnimStandCrouchBlendWeight_Standing;                  // 0x0510(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              UserAnimStandCrouchBlendWeight_Crouching;                 // 0x0514(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                WeaponDownAnimFrameNumber;                                // 0x0518(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData09[0x94];                                      // 0x051C(0x0094) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendEquippableItem");
		return ptr;
	}


	void SetPawnOwner(class ABendPawn* pOwnerPawn);
	void SetEquipLocation(TEnumAsByte<EEquippableSlot> targetHand);
	void SetBloodOnItem(float AmountOfBlood);
	void OverrideNextMontageDuration(float InDuration);
	void OverrideNextMontageBlending(float InBlend, float OutBlend);
	void OnUnEquipMontageBlendingOut(class UAnimMontage* Montage, bool bInterrupted);
	void OnHolsterStarted();
	void OnHolsterFinished();
	void OnEquipMontageBlendingOut(class UAnimMontage* Montage, bool bInterrupted);
	void OnDrawStarted();
	void OnDrawFinished();
	bool IsPendingUnEquip();
	bool IsPendingEquip();
	bool IsEquipped();
	void HideInGame(bool bHide);
	class UStaticMeshComponent* GetStaticItemMesh();
	class ABendPawn* GetPawnOwner();
	class USkeletalMeshComponent* GetItemMesh();
	TEnumAsByte<EEquippableSlot> GetEquipLocation();
	class USkeletalMeshComponent* GetBrokenItemMesh();
};


// Class BendGame.BendWeaponPart
// 0x0960 (0x0CA8 - 0x0348)
class ABendWeaponPart : public AActor
{
public:
	TEnumAsByte<EWeaponHardPoint>                      TypeOfPart;                                               // 0x0348(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<ESpecificWpnPartType>                  SpecificTypeOfPart;                                       // 0x0349(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<EWeaponPartID>                         WeaponPartID;                                             // 0x034A(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x5];                                       // 0x034B(0x0005) MISSED OFFSET
	struct FGameplayTagContainer                       UseableWeaponsTagContainer;                               // 0x0350(0x0020) (Edit, DisableEditOnInstance)
	struct FName                                       SocketNameAttachPointOnWeapon;                            // 0x0370(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                NumberOfUses;                                             // 0x0378(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x037C(0x0004) MISSED OFFSET
	struct FWeaponDataOverride                         WeaponConfigOverride;                                     // 0x0380(0x08E0) (Edit, DisableEditOnInstance)
	class USceneComponent*                             BaseSceneComponent;                                       // 0x0C60(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class USkeletalMeshComponent*                      Mesh;                                                     // 0x0C68(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class USkeletalMeshComponent*                      BrokenMesh;                                               // 0x0C70(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	int                                                MaterialIndex;                                            // 0x0C78(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                UpgradeLevel;                                             // 0x0C7C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      ScopeZoomCamera;                                          // 0x0C80(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FInventoryGuid                              PartGuid;                                                 // 0x0C88(0x0010) (Edit, BlueprintVisible, Transient, EditConst)
	unsigned char                                      UnknownData02[0x10];                                      // 0x0C98(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendWeaponPart");
		return ptr;
	}


	void OnWeaponFired();
	void OnNumberOfUsesSet(int UseCount, int MaxUseCount);
	void OnExitScopeMode();
	void OnExitNoScopeZoomMode();
	void OnEnterScopeMode();
	void OnEnterNoScopeZoomMode();
	void OnBroken();
	bool IsBroken();
	class USkeletalMeshComponent* GetWeaponPartMesh();
	class ABendWeapon* GetWeaponOwner();
	TEnumAsByte<EWeaponHardPoint> GetTypeOfPart();
	float GetSuppressorHealthPer();
	int GetNumOfUses();
	int GetMaxNumOfUses();
	int GetMaterialIndex();
};


// Class BendGame.CharacterAttributeManager
// 0x0008 (0x0030 - 0x0028)
class UCharacterAttributeManager : public UObject
{
public:
	class UPlayerExperienceLevel*                      PlayerExperienceLevel;                                    // 0x0028(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.CharacterAttributeManager");
		return ptr;
	}


	int GetLevel();
	int Debug_SetLevel(int NewLevel);
	void AddXP(int xp);
	void AddCategoryXP(TEnumAsByte<EPlayerExperience> Type, int XPToAdd);
};


// Class BendGame.BendHUD
// 0x0040 (0x04C0 - 0x0480)
class ABendHUD : public AHUD
{
public:
	class USlateHUD*                                   SlateHUD;                                                 // 0x0480(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	TScriptInterface<class UBendHUDInterface>          HUDInterface;                                             // 0x0488(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      bDisablePauseMenuSubMenus : 1;                            // 0x0498(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x27];                                      // 0x0499(0x0027) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendHUD");
		return ptr;
	}


	void SetHudVisible(bool IsVisible);
	void SetGameHudEnabled(bool Enabled, float Duration);
	void PrintDebugString(const struct FString& PrintString);
	bool IsHudVisible();
	class UHudWidget* GetHudWidget();
};


// Class BendGame.BendTraversalComponent
// 0x0058 (0x0128 - 0x00D0)
class UBendTraversalComponent : public UActorComponent
{
public:
	class UBendClimbStateData*                         ClimbDownAnimData;                                        // 0x00D0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               ClimbDownEnabled;                                         // 0x00D8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00D9(0x0007) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnApproachedLadder;                                       // 0x00E0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnLeftLadderRange;                                        // 0x00F0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData01[0x18];                                      // 0x0100(0x0018) MISSED OFFSET
	TArray<struct FTraversalEdge>                      m_visibleEdges;                                           // 0x0118(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendTraversalComponent");
		return ptr;
	}


	bool HasEdges();
	void DebugEnableDrawOnlySectorEdges(bool Toggle);
	void DebugEnableDrawEdges(bool Toggle);
	void DebugEnableDrawCrowEdges(bool Toggle);
	void DebugEnableDrawAllEdges(bool Toggle);
	bool ClimbDown();
	bool Climb();
};


// Class BendGame.BendCamBase
// 0x0098 (0x00C0 - 0x0028)
class UBendCamBase : public UObject
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0028(0x0018) MISSED OFFSET
	unsigned char                                      m_bAllowInput : 1;                                        // 0x0040(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      m_bAllowManAim : 1;                                       // 0x0040(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      m_bUseRightShoulder : 1;                                  // 0x0040(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0041(0x0003) MISSED OFFSET
	float                                              m_fNearClip;                                              // 0x0044(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              m_fFarClip;                                               // 0x0048(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              m_fFOV;                                                   // 0x004C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EePriority>                            m_ePriority;                                              // 0x0050(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0051(0x0003) MISSED OFFSET
	struct FsCamTransitionData                         m_transData;                                              // 0x0054(0x000C) (Edit, BlueprintVisible)
	class UClass*                                      m_FocusModifierClass;                                     // 0x0060(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBendCamModifier_Post*                       m_pFocusModifier;                                         // 0x0068(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	struct FName                                       m_socketName;                                             // 0x0070(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x48];                                      // 0x0078(0x0048) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendCamBase");
		return ptr;
	}


	void SetTarget(class AActor* Target);
	void SetFOV(float FOV);
	void OnUpdate(float DeltaTime);
	void OnDeactivate();
	void OnActivate();
	bool IsInputAllowed();
	void InstantUpdate();
	float GetWaterDepth();
	float GetTargetDist();
	float GetFocusDepth();
	class AActor* GetCamTargetActor();
};


// Class BendGame.BendSkillManager
// 0x0078 (0x00A0 - 0x0028)
class UBendSkillManager : public UObject
{
public:
	int                                                SkillPoints;                                              // 0x0028(0x0004) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x002C(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnSkillModified_Unlocked;                                 // 0x0030(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnSkillModified_Acquired;                                 // 0x0040(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnSkillPointAwarded;                                      // 0x0050(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	TArray<struct FBendSkillTierData>                  SkillTierData;                                            // 0x0060(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FBendSkill>                          Skills;                                                   // 0x0070(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<TEnumAsByte<EInventorySkillID>>             UnlockedSkills;                                           // 0x0080(0x0010) (ZeroConstructor, SaveGame)
	TArray<TEnumAsByte<EInventorySkillID>>             AcquiredSkills;                                           // 0x0090(0x0010) (ZeroConstructor, SaveGame)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendSkillManager");
		return ptr;
	}


	bool UnlockSkill(TEnumAsByte<EInventorySkillID> SkillID);
	void UnlockAllSkillsInTier(TEnumAsByte<ESkillClass> SkillClass, TEnumAsByte<ESkillTier> Tier);
	void UnlockAllSkills();
	TEnumAsByte<ESkillStatus> SkillStatus(TEnumAsByte<EInventorySkillID> SkillID);
	void ResetAllSkills();
	bool PurchaseSkillByTag(const struct FGameplayTag& SkillTag);
	bool PurchaseSkill(TEnumAsByte<EInventorySkillID> SkillID);
	void OnSkillUnlocked(TEnumAsByte<EInventorySkillID> SkillID, class UInventoryItemSkill* Skill);
	void OnSkillsModified();
	void OnSkillAcquired(TEnumAsByte<EInventorySkillID> SkillID, class UInventoryItemSkill* Skill);
	bool IsSkillTierUnlocked(TEnumAsByte<ESkillTier> Tier, TEnumAsByte<ESkillClass> SkillClass);
	bool HasUnlockedSkill(TEnumAsByte<EInventorySkillID> SkillID);
	bool HasAcquiredSkillByTag(const struct FGameplayTag& SkillTag);
	bool HasAcquiredSkill(TEnumAsByte<EInventorySkillID> SkillID);
	TArray<struct FBendSkill> GetSkillsByClass_BP(TEnumAsByte<ESkillClass> SkillClass);
	TEnumAsByte<EInventorySkillID> GetSkillIDFromTag(const struct FGameplayTag& SkillTag);
	struct FBendSkill GetSkill(TEnumAsByte<EInventorySkillID> SkillID);
	float GetPercentageOfSkillsAcquiredByClass(TEnumAsByte<ESkillClass> SkillClass);
	int GetHowManySkillsAquiredByPreviousTiers(TEnumAsByte<ESkillTier> CurrentTier, TEnumAsByte<ESkillClass> SkillClass);
	int GetHowManySkillsAcquiredByTier(TEnumAsByte<ESkillTier> Tier, TEnumAsByte<ESkillClass> SkillClass, int* TotalSkillsOfType);
	TArray<struct FBendSkill> GetAllSkillsByTier(TEnumAsByte<ESkillClass> SkillClass, TEnumAsByte<ESkillTier> Tier);
	void CheckForNewUnlockedSkills();
	bool CanAffordSkillByTag(const struct FGameplayTag& SkillTag);
	bool CanAffordSkill(TEnumAsByte<EInventorySkillID> SkillID);
	void AwardSkillPoints(int NumPoints);
	void AwardSkill(TEnumAsByte<EInventorySkillID> SkillID);
	bool AcquireSkill(TEnumAsByte<EInventorySkillID> SkillID);
	void AcquireAllSkills();
};


// Class BendGame.BendPlayerPawn
// 0x0AE0 (0x3220 - 0x2740)
class ABendPlayerPawn : public ABendPawn
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x2740(0x0018) MISSED OFFSET
	float                                              VehicleManualAimHoldTime;                                 // 0x2758(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               NoOutlineWhenHiding;                                      // 0x275C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x275D(0x0003) MISSED OFFSET
	struct FBendInputFilter                            InputFilter;                                              // 0x2760(0x000C) (Edit)
	struct FBendInputFilter                            InputFilterManualAim;                                     // 0x276C(0x000C) (Edit)
	TArray<struct FActiveGameplayEffectHandle>         ActiveCocktailEffects;                                    // 0x2778(0x0010) (BlueprintVisible, ZeroConstructor)
	float                                              DriftingRingHealthRepairPerScrap;                         // 0x2788(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DriftingRingTimeToWaitBeforeRepairStarts;                 // 0x278C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x14];                                      // 0x2790(0x0014) MISSED OFFSET
	float                                              DodgeStaminaCost;                                         // 0x27A4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DodgeCostReductionPer;                                    // 0x27A8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x27AC(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnAimingStarted;                                          // 0x27B0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnAimingEnded;                                            // 0x27C0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnWeaponDropped;                                          // 0x27D0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	float                                              BikeReloadFromBagsDist;                                   // 0x27E0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x27E4(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnDriftStarted;                                           // 0x27E8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDriftEnded;                                             // 0x27F8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class UCharacterAttributeManager*                  CharacterAttributeManager;                                // 0x2808(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UBendAbilitySystemComponent*                 AbilitySystemComponent;                                   // 0x2810(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UBendSkillManager*                           SkillManager;                                             // 0x2818(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<struct FBendSkillTierData>                  SkillTierData;                                            // 0x2820(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FGameplayTag                                IncreasedHealthConsumableEffectsSkill;                    // 0x2830(0x0008) (Edit, BlueprintVisible)
	struct FGameplayTag                                IncreasedStaminaConsumableEffectsSkill;                   // 0x2838(0x0008) (Edit, BlueprintVisible)
	struct FGameplayTag                                IncreasedFocusConsumableEffectsSkill;                     // 0x2840(0x0008) (Edit, BlueprintVisible)
	int                                                HealthIncreaseOnHeadshot;                                 // 0x2848(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x4];                                       // 0x284C(0x0004) MISSED OFFSET
	struct FGameplayTag                                ActNaturalSkill;                                          // 0x2850(0x0008) (Edit, BlueprintVisible)
	struct FGameplayTag                                DeadEyeSkill;                                             // 0x2858(0x0008) (Edit, BlueprintVisible)
	struct FGameplayTag                                BrickWallDeaconSkill;                                     // 0x2860(0x0008) (Edit, BlueprintVisible)
	struct FGameplayTag                                IncreasedMeleeDurabilitySkill;                            // 0x2868(0x0008) (Edit, BlueprintVisible)
	struct FGameplayTag                                IncreasedMeleeDurabilityTwoSkill;                         // 0x2870(0x0008) (Edit, BlueprintVisible)
	struct FGameplayTag                                IncreasedCraftedDamageSkill;                              // 0x2878(0x0008) (Edit, BlueprintVisible)
	struct FGameplayTag                                MeleeCriticalHitChanceSkill;                              // 0x2880(0x0008) (Edit, BlueprintVisible)
	struct FGameplayTag                                MeleeCriticalHitMultiplierSkill;                          // 0x2888(0x0008) (Edit, BlueprintVisible)
	struct FGameplayTag                                MeleeComboEnderHitIncreaseSkill;                          // 0x2890(0x0008) (Edit, BlueprintVisible)
	struct FGameplayTag                                FastAndDeadly;                                            // 0x2898(0x0008) (Edit, BlueprintVisible)
	struct FGameplayTag                                HittingTheSweetSpotSkill;                                 // 0x28A0(0x0008) (Edit, BlueprintVisible)
	struct FGameplayTag                                LightningReflexSkill;                                     // 0x28A8(0x0008) (Edit, BlueprintVisible)
	struct FGameplayTag                                MeleeKnifeComboSkill;                                     // 0x28B0(0x0008) (Edit, BlueprintVisible)
	struct FGameplayTag                                MeleeComboSkill;                                          // 0x28B8(0x0008) (Edit, BlueprintVisible)
	struct FGameplayTag                                MeleeMultiHitSkill;                                       // 0x28C0(0x0008) (Edit, BlueprintVisible)
	struct FGameplayTag                                MeleeHeavyHitSkill;                                       // 0x28C8(0x0008) (Edit, BlueprintVisible)
	struct FGameplayTag                                ItsATrapSkill;                                            // 0x28D0(0x0008) (Edit, BlueprintVisible)
	struct FGameplayTag                                EyeForDetailSkill;                                        // 0x28D8(0x0008) (Edit, BlueprintVisible)
	struct FGameplayTag                                AdrenalineSkill;                                          // 0x28E0(0x0008) (Edit, BlueprintVisible)
	struct FGameplayTag                                ChainReactionSkill;                                       // 0x28E8(0x0008) (Edit, BlueprintVisible)
	struct FGameplayTag                                TrackQuarrySkill;                                         // 0x28F0(0x0008) (Edit, BlueprintVisible)
	struct FGameplayTag                                KneeShotSkill;                                            // 0x28F8(0x0008) (Edit, BlueprintVisible)
	struct FGameplayTag                                SixFeetOverSkill;                                         // 0x2900(0x0008) (Edit, BlueprintVisible)
	struct FGameplayTag                                OnTheMoveSkill;                                           // 0x2908(0x0008) (Edit, BlueprintVisible)
	struct FGameplayTag                                DesperateStrengthSkill;                                   // 0x2910(0x0008) (Edit, BlueprintVisible)
	struct FGameplayTag                                ShootAndFriskSkill;                                       // 0x2918(0x0008) (Edit, BlueprintVisible)
	struct FName                                       LowAmmoVOEventName;                                       // 0x2920(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       OutOfAmmoVOEventName;                                     // 0x2928(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       CrashVOSmall;                                             // 0x2930(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       CrashVOMedium;                                            // 0x2938(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       CrashVOLarge;                                             // 0x2940(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                SmallCrashVOImpulseThreshold;                             // 0x2948(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                MediumCrashVOImpulseThreshold;                            // 0x294C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                LargeCrashVOImpulseThreshold;                             // 0x2950(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x4];                                       // 0x2954(0x0004) MISSED OFFSET
	struct FName                                       DamageVOSmall;                                            // 0x2958(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       DamageVOMedium;                                           // 0x2960(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       DamageVOLarge;                                            // 0x2968(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                SmallDamageVOImpulseThreshold;                            // 0x2970(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                MediumDamageVOImpulseThreshold;                           // 0x2974(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                LargeDamageVOImpulseThreshold;                            // 0x2978(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IsInHealthRedZone;                                        // 0x297C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0x3];                                       // 0x297D(0x0003) MISSED OFFSET
	float                                              BlindfireAccuracySkillModifier;                           // 0x2980(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              CraftedWeaponDamageSkillMultiplier;                       // 0x2984(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                ShotgunReloadSkillCount;                                  // 0x2988(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              SlocusForceMinAimCooldown;                                // 0x298C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData08[0x8];                                       // 0x2990(0x0008) MISSED OFFSET
	class UBendDifficultyData*                         DifficultyDataAsset;                                      // 0x2998(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData09[0x148];                                     // 0x29A0(0x0148) MISSED OFFSET
	TArray<bool>                                       BND150TrophyArray;                                        // 0x2AE8(0x0010) (ZeroConstructor, SaveGame)
	struct FGameplayTag                                VarietySpiceOfLifeTrophy;                                 // 0x2AF8(0x0008) (Edit, BlueprintVisible)
	struct FGameplayTag                                BND150DartKillTrophy;                                     // 0x2B00(0x0008) (Edit, BlueprintVisible)
	struct FGameplayTag                                IdBuyThatForADollar;                                      // 0x2B08(0x0008) (Edit, BlueprintVisible)
	struct FGameplayTag                                TheDrifter;                                               // 0x2B10(0x0008) (Edit, BlueprintVisible)
	struct FGameplayTag                                SlipSlideAndAway;                                         // 0x2B18(0x0008) (Edit, BlueprintVisible)
	float                                              MinDriftAngleForTrophy;                                   // 0x2B20(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MinDriftAngleForChallenge;                                // 0x2B24(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MinDriftAngleForVibration;                                // 0x2B28(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MinForwardSpeedForChallenge;                              // 0x2B2C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BufferForDriftAngleExit;                                  // 0x2B30(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BufferForDriftSpeedExit;                                  // 0x2B34(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData10[0x4];                                       // 0x2B38(0x0004) MISSED OFFSET
	float                                              TheDrifterCounter;                                        // 0x2B3C(0x0004) (ZeroConstructor, SaveGame, IsPlainOldData)
	int                                                TotalDriftMins;                                           // 0x2B40(0x0004) (ZeroConstructor, SaveGame, IsPlainOldData)
	float                                              TheDrifterTimeRequired;                                   // 0x2B44(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData11[0x4];                                       // 0x2B48(0x0004) MISSED OFFSET
	float                                              SlipSlideAndAwayTimeRequired;                             // 0x2B4C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                RepairBikeTrophyScrapCount;                               // 0x2B50(0x0004) (BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	int                                                RepairBikeTrophyScrapCountNeeded;                         // 0x2B54(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                CollectScrapTrophyCount;                                  // 0x2B58(0x0004) (BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	int                                                CollectScrapTrophyCountNeeded;                            // 0x2B5C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      PurchasedPerformancePart : 1;                             // 0x2B60(0x0001) (BlueprintVisible, SaveGame)
	unsigned char                                      PurchasedVisualPart : 1;                                  // 0x2B60(0x0001) (BlueprintVisible, SaveGame)
	unsigned char                                      PurchasedPaintPart : 1;                                   // 0x2B60(0x0001) (BlueprintVisible, SaveGame)
	unsigned char                                      PurchasedFirstBikePart : 1;                               // 0x2B60(0x0001) (BlueprintVisible, SaveGame)
	bool                                               DisplayedBrokenNPCBikeTutorial;                           // 0x2B61(0x0001) (BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	bool                                               DisplayedLostBikeTutorial;                                // 0x2B62(0x0001) (BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	bool                                               bAllowManualAimRideAssist;                                // 0x2B63(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData12[0x1];                                       // 0x2B64(0x0001) MISSED OFFSET
	bool                                               ShouldCrouchForItemPickup;                                // 0x2B65(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData13[0x2];                                       // 0x2B66(0x0002) MISSED OFFSET
	float                                              PCWalkModeInputLimit;                                     // 0x2B68(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData14[0x4];                                       // 0x2B6C(0x0004) MISSED OFFSET
	class UBendTraversalComponent*                     TraversalComponent;                                       // 0x2B70(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnItemCraftedDelegate;                                    // 0x2B78(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnInventoryItemPickupDelegate;                            // 0x2B88(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPlayerReloadStarted;                                    // 0x2B98(0x0010) (Edit, ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPlayerReloadFinished;                                   // 0x2BA8(0x0010) (Edit, ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnWeaponPartAttachedDetached;                             // 0x2BB8(0x0010) (Edit, ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnAmmoCapacityChanged;                                    // 0x2BC8(0x0010) (Edit, ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnWeaponBeganOverheating;                                 // 0x2BD8(0x0010) (Edit, ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnWeaponStoppedOverheating;                               // 0x2BE8(0x0010) (Edit, ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnHealthRegainedFromHeadshot;                             // 0x2BF8(0x0010) (Edit, ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnRockDistractionHeard;                                   // 0x2C08(0x0010) (Edit, ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               bLookInAimDir;                                            // 0x2C18(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IsSearchingBody;                                          // 0x2C19(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData15[0x6];                                       // 0x2C1A(0x0006) MISSED OFFSET
	class UMaterialInterface*                          ThrowCursorMaterial;                                      // 0x2C20(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UStaticMesh*                                 LandingReticleStaticMesh;                                 // 0x2C28(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                ThrowCursorColor;                                         // 0x2C30(0x0010) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ThrowCursorFadeInDistance;                                // 0x2C40(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ThrowCursorWidth;                                         // 0x2C44(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                ThrowCursorSegmentCount;                                  // 0x2C48(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               WillDieFromGrapple;                                       // 0x2C4C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData16[0x3];                                       // 0x2C4D(0x0003) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnWeaponThrownAt;                                         // 0x2C50(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData17[0x40];                                      // 0x2C60(0x0040) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnPlayerTeleported;                                       // 0x2CA0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDebugZenChanged;                                        // 0x2CB0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               CanDoMelee;                                               // 0x2CC0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData18[0x7];                                       // 0x2CC1(0x0007) MISSED OFFSET
	TArray<class UMaterialInstanceDynamic*>            Materials;                                                // 0x2CC8(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FVector                                     Position;                                                 // 0x2CD8(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                MeleeOnBikeSpeedThreshold;                                // 0x2CE4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               UseStaminaDuringMelee;                                    // 0x2CE8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData19[0x3];                                       // 0x2CE9(0x0003) MISSED OFFSET
	int                                                MeleeTierLevel;                                           // 0x2CEC(0x0004) (ZeroConstructor, SaveGame, IsPlainOldData)
	TArray<TEnumAsByte<EInventoryAmmoID>>              ExcludedAmmoIDs;                                          // 0x2CF0(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FScriptMulticastDelegate                    OnGrenadeBeginOverlap;                                    // 0x2D00(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnGrenadeEndOverlap;                                      // 0x2D10(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnTrapBeginOverlap;                                       // 0x2D20(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnTrapEndOverlap;                                         // 0x2D30(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	float                                              RockHitNearTrapRadius;                                    // 0x2D40(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData20[0x4];                                       // 0x2D44(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnHitEnemyWithMelee;                                      // 0x2D48(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	TWeakObjectPtr<class ABendPawn>                    CarriedPawn;                                              // 0x2D58(0x0008) (ZeroConstructor, IsPlainOldData)
	class UBendAnimVariationData*                      BodyCarryAnimSet;                                         // 0x2D60(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData21[0x4];                                       // 0x2D68(0x0004) MISSED OFFSET
	bool                                               CanUseAdrenalineMeter;                                    // 0x2D6C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData22[0x3];                                       // 0x2D6D(0x0003) MISSED OFFSET
	float                                              MaxAdrenalineMeterValue;                                  // 0x2D70(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NumSecondsToStayInAdrenalineMode;                         // 0x2D74(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NumSecondsToStayInAdrenalinMode;                          // 0x2D78(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData23[0x4];                                       // 0x2D7C(0x0004) MISSED OFFSET
	bool                                               AdrenalineModeActive;                                     // 0x2D80(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData24[0x7];                                       // 0x2D81(0x0007) MISSED OFFSET
	struct FScriptMulticastDelegate                    AdrenalineActivated;                                      // 0x2D88(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    AdrenalineDeactivated;                                    // 0x2D98(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    AdrenalineMeterFull;                                      // 0x2DA8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	float                                              MaxAdrenalinMeterValue;                                   // 0x2DB8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               CanUseAdrenalinMeter;                                     // 0x2DBC(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               AdrenalinModeActive;                                      // 0x2DBD(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData25[0x2];                                       // 0x2DBE(0x0002) MISSED OFFSET
	class UBendEncampmentData*                         CurrentEncampment;                                        // 0x2DC0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnEnteredEncampment;                                      // 0x2DC8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnLeftEncampment;                                         // 0x2DD8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnEnteredEncampmentRange;                                 // 0x2DE8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnLeftEncampmentRange;                                    // 0x2DF8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnEnteredInfestation;                                     // 0x2E08(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnLeftInfestation;                                        // 0x2E18(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               ForceTensePose;                                           // 0x2E28(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData26[0x3];                                       // 0x2E29(0x0003) MISSED OFFSET
	TWeakObjectPtr<class ABendPawn>                    BuddySpeedScalingPawn;                                    // 0x2E2C(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData27[0x4];                                       // 0x2E34(0x0004) MISSED OFFSET
	int                                                OverlappedFireEffectsCount;                               // 0x2E38(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData28[0x4];                                       // 0x2E3C(0x0004) MISSED OFFSET
	struct FName                                       RingSocketName1;                                          // 0x2E40(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       RingSocketName2;                                          // 0x2E48(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UStaticMeshComponent*                        RingMeshComp1;                                            // 0x2E50(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UStaticMeshComponent*                        RingMeshComp2;                                            // 0x2E58(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UStaticMesh*                                 RingMesh1;                                                // 0x2E60(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UStaticMesh*                                 RingMesh2;                                                // 0x2E68(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData29[0x40];                                      // 0x2E70(0x0040) MISSED OFFSET
	class USoundCue*                                   FoleyMovementSound;                                       // 0x2EB0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TWeakObjectPtr<class UAudioComponent>              m_pMovementFoleyAudioComp;                                // 0x2EB8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData30[0x40];                                      // 0x2EC0(0x0040) MISSED OFFSET
	float                                              HealthRegenDelay;                                         // 0x2F00(0x0004) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              HealthRegenRate;                                          // 0x2F04(0x0004) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              BurningTime;                                              // 0x2F08(0x0004) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              LightHitReactShakeMag;                                    // 0x2F0C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              LightHitReactShakeDur;                                    // 0x2F10(0x0004) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              HeavyHitReactShakeMag;                                    // 0x2F14(0x0004) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              HeavyHitReactShakeDur;                                    // 0x2F18(0x0004) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              SixFeetOverSkillIncrease;                                 // 0x2F1C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	class ABendPawn*                                   StealthKillVictim;                                        // 0x2F20(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAudioComponent*                             PlayerHealthAudioComp;                                    // 0x2F28(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UAudioComponent*                             RainSoundsComp;                                           // 0x2F30(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UAudioComponent*                             WindSoundsComp;                                           // 0x2F38(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UAudioComponent*                             ClearSoundsComp;                                          // 0x2F40(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UAudioComponent*                             SurrealSoundsComp;                                        // 0x2F48(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UParticleSystem*                             BreathVaporTemplate;                                      // 0x2F50(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UForceFeedbackEffect*                        PlayerDamageFF;                                           // 0x2F58(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData31[0x20];                                      // 0x2F60(0x0020) MISSED OFFSET
	class UInteractManager*                            InteractManager;                                          // 0x2F80(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UInteractManager*                            InteractManager_Secondary;                                // 0x2F88(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UClass*                                      CharacterAttributeMgrClass;                               // 0x2F90(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      AbilitySystemComponentClass;                              // 0x2F98(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TAssetPtr<class UClass>                            SkillManagerClass;                                        // 0x2FA0(0x0020) (Edit, DisableEditOnInstance)
	float                                              DistanceToEnemyTense;                                     // 0x2FC0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DistanceToEnemyStealth;                                   // 0x2FC4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DistanceToStealthKillPreparation;                         // 0x2FC8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DefaultDeathNumSecBeforeFadeToBlack;                      // 0x2FCC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DefaultNumSecWaitBeforeRespawn;                           // 0x2FD0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SkillFastAndDeadlyModifier;                               // 0x2FD4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData32[0x44];                                      // 0x2FD8(0x0044) MISSED OFFSET
	float                                              TargetSwitchInputDeadzone;                                // 0x301C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData33[0x4];                                       // 0x3020(0x0004) MISSED OFFSET
	float                                              TargetSwitchTimeThreshold;                                // 0x3024(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData34[0x118];                                     // 0x3028(0x0118) MISSED OFFSET
	TArray<struct FBendCrumbPathData>                  VehicleRecoveryPathData;                                  // 0x3140(0x0010) (ZeroConstructor, SaveGame)
	int                                                VehicleRecoveryPathIndex;                                 // 0x3150(0x0004) (ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData35[0x4];                                       // 0x3154(0x0004) MISSED OFFSET
	TArray<struct FBendCrumbPathData>                  VehicleNonLimitedRecoveryPathData;                        // 0x3158(0x0010) (ZeroConstructor, SaveGame)
	int                                                VehicleNonLimitedRecoveryPathIndex;                       // 0x3168(0x0004) (ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData36[0x4];                                       // 0x316C(0x0004) MISSED OFFSET
	struct FBendCharacterBreathingSoundHandler         BreathingSoundHandler;                                    // 0x3170(0x0058) (Edit)
	unsigned char                                      UnknownData37[0x8];                                       // 0x31C8(0x0008) MISSED OFFSET
	TArray<struct FBendPlayerLook>                     PlayerLooks;                                              // 0x31D0(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData38[0x40];                                      // 0x31E0(0x0040) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendPlayerPawn");
		return ptr;
	}


	void UpdateTrophyKills(TEnumAsByte<ETrophyKillType> MyTrophyKillType);
	void UpdateTheDrifterTrophyCount();
	void UpdateSpiceOfLifeCounts();
	void UpdateEncampmentDisplay();
	void UpdateBND150TrophyKills(TEnumAsByte<EBND150TrophyKillType> MyTrophyKillType);
	void UpdateBND150TrophyCounts();
	void UnlockGunStatSkill(TEnumAsByte<EWeaponBonusTypes> SkillName, bool bSetActive);
	void UnlockedAcquiredSkill_IncreaseMeleeDurability();
	void UnlockedAcquiredSkill_IncreaseMeleeDamage();
	void TurnDelta(float Val);
	void Turn(float Val);
	void ToggleVehicleRecoveryDebug();
	void ToggleFullscreen();
	void ThrowWeapon(TEnumAsByte<EEquippableSlot> EquippableSlot);
	void SyncPlayerLook();
	void StopFire();
	void StealthRecoveredHandler();
	void StealthBrokenHandler();
	void StartFire();
	void StartBodyCarryBetween(class ABendPawn* Carried);
	void SetVehicleRecoveryDebug(bool bEnable);
	void SetTemporaryDisableAim(bool NewDisableAim);
	void SetSpeedScalingWithBuddy(bool Enabled, class ABendPawn* BuddyPawn, float Radius);
	void SetSkillTierDataDifficultyAdjusted();
	void SetShotgunReloadSkillCount(int ShotgunReloadCount);
	void SetPlayerLook(const struct FName& LookName);
	void SetPlayerInvisible(bool isInvisible);
	void SetPlayerAnimTemplate(const struct FName& PawnBlueprintName);
	void SetMeleeTierLevel(int NewLevel);
	void SetJumpEnabled(bool NewValue);
	void SetForceTensePose(bool NewValue);
	void SetFlashlightRef(class UBendSpotLightComponent* Flashlight);
	void SetBlindFireAccuracySkillModifier(float BlindFireAccuracyModifier);
	void SetAllowFriendlyFire(bool AllowFriendlyFire);
	void SetAdrenalinMeter(float Value);
	void SetAdrenalineMeter(float Value);
	void ServerSpawnTestBox();
	void ServerSpawnEnemy();
	void ServerSpawnDumbEnemy();
	void SaveNetProfile();
	void ResetBikeOnSpline();
	void ReceiveSetWindSoundIntensity(float intensity);
	void ReceiveSetTimeOfDaySound(float Value);
	void ReceiveSetRainSoundIntensity(float intensity);
	void ReceiveSetIndoors(bool IsIndoors);
	void ReceiveReactToHumanDeath(class ABendPawn* DeadPawn);
	void PlayInventoryVO(const struct FName& VOToPlay);
	void PlayerPawn_Climb();
	void PawnDetectedPlayerHandler(class ABendPawn* DetectingPawn, float AwarenessLevel);
	void OnWalkModeTogglePressed();
	void OnWalkModeReleased();
	void OnWalkModePressed();
	void OnStopJump();
	void OnStopAiming();
	void OnStartJump();
	void OnStartAiming();
	void OnReload();
	void OnPrevWeapon();
	void OnPlayerLookChanged();
	void OnNextWeapon();
	void OnNextThrownWeapon();
	void OnMoveRight(float Val);
	void OnMoveLeft(float Val);
	void OnMoveForward(float Val);
	void OnMoveBackward(float Val);
	void OnInventoryConsumableItemUsed(class UInventoryItemConsumable* Item, class UGameplayEffect* Effect, float Duration, const struct FActiveGameplayEffectHandle& GE_Handle);
	void OnGameplayCueEvent(TEnumAsByte<EGameplayCueEvent> eventType, const struct FGameplayCueParameters& Parameters);
	void OnFailedActionBecauseOutOfStamina();
	void OnDriftStartRingCheck();
	void OnDriftEndRingCheck(float TotalDriftTime);
	void OnDodgeRollStartRingCheck();
	void OnCounterAttackSuccessful();
	void OnCoolMeleeAttackSuccessful();
	void OnCoolMeleeAttackFailed();
	void OnCollectibleDiscovered(TEnumAsByte<EInventoryCollectibleID> CollectibleID);
	void OnClimbStartRingCheck();
	void OnCinematicStarted(const struct FName& CinematicName);
	void OnCanDoCoolMeleeAttackStarted();
	void OnCanDoCoolMeleeAttackEnded();
	void OnAdrenalineMeterFull();
	void OnAdrenalineDeactivated();
	void OnAdrenalineActivated();
	void NotifyTrustModified(class UBendEncampmentData* Encampment, float ModificationAmount);
	void MoveRight(float Val);
	void MoveForward(float Val);
	void LookUpDelta(float Val);
	void LookUp(float Val);
	void LeftInfestation(class UBendNestingZone* Zone);
	void LeftCoverHandler();
	void LeavingEncampmentRange(class UBendEncampmentData* Encampment);
	void LeavingEncampment(class UBendEncampmentData* Encampment);
	bool IsWalkModeActivated();
	bool IsAimed(TEnumAsByte<EEquippableSlot> weaponSlot);
	void IncrementFireEffectCount(bool IncrementPositive);
	void IncreaseAdrenalinMeter(float IncAmount);
	void IncreaseAdrenalineMeter(float IncAmount);
	bool HasAcquiredSkillTag(const struct FGameplayTag& SkillTag);
	bool HasAcquiredSkillID(TEnumAsByte<EInventorySkillID> SkillID);
	bool HasAcquiredSkill_OnTheMove();
	bool HasAcquiredSkill_MeleeMultiHit();
	bool HasAcquiredSkill_MeleeKnifeCombo();
	bool HasAcquiredSkill_MeleeHeavyHit();
	bool HasAcquiredSkill_MeleeCriticalHitMultiplier();
	bool HasAcquiredSkill_MeleeCriticalHitChance();
	bool HasAcquiredSkill_MeleeCombos();
	bool HasAcquiredSkill_MeleeComboEnderHitIncrease();
	bool HasAcquiredSkill_LightningReflexes();
	bool HasAcquiredSkill_KneeShot();
	bool HasAcquiredSkill_ItsATrap();
	bool HasAcquiredSkill_IncreaseMeleeDurabilityTwo();
	bool HasAcquiredSkill_IncreaseMeleeDurability();
	bool HasAcquiredSkill_IncreaseMeleeDamage();
	bool HasAcquiredSkill_IncreasedConsumableEffects(TEnumAsByte<EPlayerAttributeType> AttributeType);
	bool HasAcquiredSkill_IncreaseCraftedDamage();
	bool HasAcquiredSkill_HittingTheSweetSpot();
	bool HasAcquiredSkill_FastAndDeadly();
	bool HasAcquiredSkill_EyeForDetail();
	bool HasAcquiredSkill_DesperateStrength();
	bool HasAcquiredSkill_DeadEye();
	bool HasAcquiredSkill_ChainReaction();
	bool HasAcquiredSkill_BrickWallDeacon();
	bool HasAcquiredSkill_Adrenaline();
	bool HasAcquiredSkill_ActNatural();
	struct FBendCrumbPathData GetStuckVehicleRecoveryEntry();
	int GetShotgunReloadSkillCount();
	class UBendSpotLightComponent* GetPlayerFlashlight();
	int GetMeleeTierLevel();
	struct FBendCrumbPathData GetLastVehicleRecoveryDataEntry();
	bool GetJumpEnabled();
	class UPlayerInventoryComponent* GetInventoryComponent();
	class UInteractManager* GetInteractManager_Secondary();
	class UInteractManager* GetInteractManager();
	float GetInsideRatio();
	int GetHealthIncreaseOnHeadshot();
	class UStaticMeshComponent* GetFocusModeSphere();
	float GetFocalDistance(float MinDistance, float MaxDistance);
	float GetCurrentChallengeDriftTime();
	float GetBlindFireAccuracySkillModifier();
	class UCharacterAttributeManager* GetAttributeManager();
	class ABendPawn* GetAimAtPawn();
	float GetAdrenalinMeter();
	float GetAdrenalineMeter();
	void ForceWalkModeOff();
	void EnteredInfestation(class UBendNestingZone* Zone);
	void EnteredEncampmentRange(class UBendEncampmentData* Encampment);
	void EnteredEncampment(class UBendEncampmentData* Encampment);
	void EnteredCoverHandler();
	void EndBodyCarry();
	void DetachBodyCarry();
	void DestroyStealthKillPrompt();
	void DecreaseAdrenalinMeter(float DecAmount);
	void DecreaseAdrenalineMeter(float DecAmount);
	void DeactivateAdrenalinMode();
	void DeactivateAdrenalineMode();
	void CreateStealthKillPrompt();
	bool ConsumeHealthRecoveryItem();
	void ClearVehicleAttachItems();
	void ClearDLCRings();
	void ClearAllVehicleRecoveryPoints();
	void CheckAmmoCounts_Code();
	bool CanAimCheck();
	void BroadcastEventOnWeaponStoppedOverheating();
	void BroadcastEventOnWeaponPartAttachedDetached(class ABendWeapon* Weapon, class ABendWeaponPart* Part);
	void BroadcastEventOnWeaponBeganOverheating();
	void BroadcastEventOnReloadStarted();
	void BroadcastEventOnReloadFinished();
	void BroadcastEventOnHealthRegainedFromHeadshot();
	void BroadcastEventOnAmmoCapacityChanged();
	class ABendButtonPressEventBlueprintSupport* AttachMeleeIconToPawn(class ABendPawn* Target, const struct FName& AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, TEnumAsByte<EAttachLocation> LocationType, bool bAutoDestroy, TEnumAsByte<ECoolMeleeType> MeleeType);
	void AttachBodyCarry();
	void AskToRecoverStuckVehicle();
	void ApplyDLCRings();
	void AnimNotify_StartAnimCam(const struct FsCamTransitionData& transData, bool DisableCollision, class UAnimSequenceBase* AnimSequence, float MinCollisionDist, int numProbes, bool testCollision, int forceCamBone);
	void AnimNotify_EndAnimCam(const struct FsCamTransitionData& transData, class UAnimSequenceBase* AnimSequence);
	void AnimNotify_AnimCamCut(int forceCamBone);
	void AddVehicleAttachItem(class AActor* AttachActor, class USceneComponent* AttachComponent, class AVehiclePawn* AttachVehicle, const struct FName& ItemSocket);
	void ActivateUnderArmorAutoHealthRegeneration(bool enable);
	void ActivateAdrenalinMode();
	void ActivateAdrenalineMode();
};


// Class BendGame.BendCamManager
// 0x05C0 (0x3200 - 0x2C40)
class ABendCamManager : public APlayerCameraManager
{
public:
	unsigned char                                      UnknownData00[0x50];                                      // 0x2C40(0x0050) MISSED OFFSET
	TArray<struct FBoneOverlapData>                    BoneOverlapData;                                          // 0x2C90(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FCamInstanceEntry>                   m_camInstances;                                           // 0x2CA0(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	class UClass*                                      m_DebugCamClass;                                          // 0x2CB0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UClass*                                      m_MenuCamClass;                                           // 0x2CB8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UClass*                                      m_DebugNpcCamClass;                                       // 0x2CC0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UClass*                                      m_DebugAngleCamClass;                                     // 0x2CC8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UClass*                                      m_FollowCamClass;                                         // 0x2CD0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UClass*                                      m_CombatCamClass;                                         // 0x2CD8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UClass*                                      m_SprintCamClass;                                         // 0x2CE0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UClass*                                      m_ManualAimCamClass;                                      // 0x2CE8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UClass*                                      m_ReloadAimCamClass;                                      // 0x2CF0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UClass*                                      m_InteriorCamClass;                                       // 0x2CF8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UClass*                                      m_VehicleFollowCamClass;                                  // 0x2D00(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UClass*                                      m_VehicleCombatCamClass;                                  // 0x2D08(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UClass*                                      m_VehicleBoostCamClass;                                   // 0x2D10(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UClass*                                      m_VehicleAimCamClass;                                     // 0x2D18(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UClass*                                      m_VehicleWaterCamClass;                                   // 0x2D20(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UClass*                                      m_VehicleWaterBoostCamClass;                              // 0x2D28(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UClass*                                      m_CrouchCamClass;                                         // 0x2D30(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UClass*                                      m_CrouchAimCamClass;                                      // 0x2D38(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UClass*                                      m_InteriorCrouchCamClass;                                 // 0x2D40(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UClass*                                      m_InteriorCombatCamClass;                                 // 0x2D48(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UClass*                                      m_InteriorSprintCamClass;                                 // 0x2D50(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UClass*                                      m_ClimbingCamClass;                                       // 0x2D58(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UClass*                                      m_ClimbThroughCamClass;                                   // 0x2D60(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UClass*                                      m_FallingCamClass;                                        // 0x2D68(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UClass*                                      m_MeleeCamClass;                                          // 0x2D70(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UClass*                                      m_GrappleCamClass;                                        // 0x2D78(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UClass*                                      m_DodgeCamClass;                                          // 0x2D80(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UClass*                                      m_ScopeCamClass;                                          // 0x2D88(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UClass*                                      m_DeathCamClass;                                          // 0x2D90(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UClass*                                      m_ThrowAimCamClass;                                       // 0x2D98(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UClass*                                      m_AnimCamClass;                                           // 0x2DA0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UClass*                                      m_CoverCamClass;                                          // 0x2DA8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UClass*                                      m_HighCoverCamClass;                                      // 0x2DB0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UClass*                                      m_LadderCamClass;                                         // 0x2DB8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UClass*                                      m_WindowCamClass;                                         // 0x2DC0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UClass*                                      m_SwimCamClass;                                           // 0x2DC8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UClass*                                      m_BushCamClass;                                           // 0x2DD0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UClass*                                      m_MeleeKillCamClass;                                      // 0x2DD8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UClass*                                      m_CinematiCutCamClass;                                    // 0x2DE0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UClass*                                      m_FocusActorModifierClass;                                // 0x2DE8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x2DF0(0x0008) MISSED OFFSET
	class UClass*                                      m_PhotoModeCamClass;                                      // 0x2DF8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_bDebugCamManager;                                       // 0x2E00(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x27];                                      // 0x2E01(0x0027) MISSED OFFSET
	TArray<class UBendCamTransition*>                  m_camTransitions;                                         // 0x2E28(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData03[0x20];                                      // 0x2E38(0x0020) MISSED OFFSET
	class UCameraModifier_CameraFocusActor*            m_pFocusActorModifier;                                    // 0x2E58(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x8];                                       // 0x2E60(0x0008) MISSED OFFSET
	TArray<class UClass*>                              m_camPopulationClasses;                                   // 0x2E68(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<class UBendCamBase*>                        m_camPopulation;                                          // 0x2E78(0x0010) (ZeroConstructor)
	TArray<class UBendCamBase*>                        m_camTwoWays;                                             // 0x2E88(0x0010) (ZeroConstructor)
	struct FQueuedDeactivate                           m_queuedDeactivate;                                       // 0x2E98(0x0018)
	unsigned char                                      UnknownData05[0x10];                                      // 0x2EB0(0x0010) MISSED OFFSET
	struct FInputCurveData                             AimingInputCurve;                                         // 0x2EC0(0x02D0) (Edit, BlueprintVisible)
	float                                              m_OptionsInputMinScale;                                   // 0x3190(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_OptionsInputDefaultScale;                               // 0x3194(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_OptionsInputMaxScale;                                   // 0x3198(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x64];                                      // 0x319C(0x0064) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendCamManager");
		return ptr;
	}


	void TopFollowCamLookAt(const struct FVector& lookAtPos, float lookTime, bool interruptable, bool aimCamsLookToo);
	void SetInputCurve(TEnumAsByte<EeInputCurveSetting> NewSetting);
	void SetDebugInput(bool B);
	void SetDebugDraw(bool B);
	void SetCameraCutThisFrame();
	void RemoveFocusActor(class USkeletalMeshComponent* SkelMesh);
	void OverrideFOV(float FOV);
	bool IsUsingRightShoulder();
	bool IsShaking();
	bool IsPlayerMovingCamera();
	bool IsDrifting();
	bool IsDebugLog();
	bool IsDebugInput();
	bool IsDebugDraw();
	bool IsDebugCamActive();
	bool IsCamLookAtActive();
	bool IsBouncing();
	bool IsActiveCamTransitionCam();
	void InstantUpdate();
	bool GetZoomRemember();
	class UBendCamBase* GetWindowCam();
	class UBendCamBase* GetVehicleWaterCam();
	class UBendCamBase* GetVehicleWaterBoostCam();
	class UBendCamBase* GetVehicleFollowCam();
	class UBendCamBase* GetVehicleCombatCam();
	class UBendCamBase* GetVehicleBoostCam();
	class UBendCamBase* GetVehicleAimCam();
	bool GetTrackVehicleYaw();
	bool GetTrackVehicleAimYaw();
	bool GetTrackFollowYaw();
	class UBendCamBase* GetThrowAimCam();
	class UBendCamBase* GetSwimCam();
	class UBendCamBase* GetSprintCam();
	class UBendCamBase* GetScopeCam();
	class UBendCamBase* GetReloadAimCam();
	TArray<class UBendCamBase*> GetPopCams();
	class UBendCamBase* GetPopCam(const struct FString& Name);
	class UBendCamBase* GetPhotoModeCam();
	class UBendCamBase* GetMenuCam();
	class UBendCamBase* GetMeleeKillCam();
	class UBendCamBase* GetMeleeCam();
	class UBendCamBase* GetManualAimCam();
	class UBendCamBase* GetLadderCam();
	class UBendCamBase* GetInteriorSprintCam();
	class UBendCamBase* GetInteriorCrouchCam();
	class UBendCamBase* GetInteriorCombatCam();
	class UBendCamBase* GetInteriorCam();
	class UBendCamBase* GetHighCoverCam();
	class UBendCamBase* GetGrappleCam();
	class UBendCamBase* GetFollowCam();
	class UBendCamBase* GetFallingCam();
	class UBendCamBase* GetDodgeCam();
	struct FRotator GetDeltaViewRotation();
	class UBendCamBase* GetDebugNpcCam();
	class UBendCamBase* GetDebugCam();
	class UBendCamBase* GetDebugAngleCam();
	class UBendCamBase* GetDeathCam();
	class UBendCamBase* GetCrouchCam();
	class UBendCamBase* GetCrouchAimCam();
	class UBendCamBase* GetCoverCam();
	class UBendCamBase* GetCombatCam();
	class UBendCamBase* GetClimbThroughCam();
	class UBendCamBase* GetClimbingCam();
	class UBendCamBase* GetCinematicCutCam();
	void GetCameraViewPointNoDebug(struct FVector* OutCamLoc, struct FRotator* OutCamRot);
	class UBendCamBase* GetCamera(class UClass* camClass);
	class UBendCamBase* GetBushCam();
	class UBendCamBase* GetAnimCam();
	class UBendCamBase* GetActiveCamOrDebugCam();
	class UBendCamBase* GetActiveCam();
	void DisableSixAxisAim(bool shouldDisable);
	void DeactivateMenuCam();
	void DeactivateDebugCam();
	void DeactivateCam(class UBendCamBase* cam);
	void CancelShake(float cancelTime);
	void CancelOverrideFOV();
	void CancelDrift(float cancelTime);
	void CancelCamLookAt();
	void CancelBounce(float cancelTime);
	void CamShakeAdvanced(float ShakeMagnitude, float ShakeDuration, float minCycleTime, float maxCycleTime, float initMagMult, float cycleMagMult, float yawMagMult, float pitchMagMult);
	void CamShake(float ShakeMagnitude, float ShakeDuration);
	void CamLookAtActor(class AActor* LookAtActor, float lookTime, bool interruptable, bool aimCamsLookToo, float yawOffset, float pitchOffset, float yawMaxPerSec, float pitchMaxPerSec);
	void CamDrift(float ShakeMagnitude, float cycleTime, float pitchMagMult);
	void CamBounce(float ShakeMagnitude);
	void ApplyUserSettings(class UGameUserSettings* InUserSettings);
	void AddFocusActor(class USkeletalMeshComponent* SkelMesh, const struct FName& BoneName, float FStop);
	void ActivateNpcDebugCam(class AActor* npc);
	void ActivateMenuCam();
	void ActivateDebugCam();
	void ActivateCam(class UBendCamBase* cam);
	void ActivateAngleDebugCam();
};


// Class BendGame.BendAIPlayerController
// 0x00B8 (0x04E0 - 0x0428)
class ABendAIPlayerController : public AAIController
{
public:
	unsigned char                                      UnknownData00[0xB8];                                      // 0x0428(0x00B8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAIPlayerController");
		return ptr;
	}


	bool PlayerAINavigationResult(struct FPlayerAINavRequestInfo* NavRequestInfo);
	void OnPawnTookDamage(float Damage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
};


// Class BendGame.InventorySlot
// 0x0008 (0x0030 - 0x0028)
class UInventorySlot : public UObject
{
public:
	int                                                MaxCount;                                                 // 0x0028(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x002C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.InventorySlot");
		return ptr;
	}


	TEnumAsByte<EInventoryItemStorage> StorageType();
	bool SlotContainsItem(bool IncludeCountCheck);
	bool IsEmpty();
	class UInventoryStorageBase* GetStorage();
	int GetSlotMaxCount();
	class UTexture2D* GetItemTexture();
	class UInventoryItem* GetInventoryItem();
	int GetCount();
	bool DisplayNewItemBadge();
	bool CountValid();
};


// Class BendGame.InventoryStorageBase
// 0x0028 (0x0050 - 0x0028)
class UInventoryStorageBase : public UObject
{
public:
	TEnumAsByte<EInventoryItemStorage>                 StorageType;                                              // 0x0028(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0029(0x0007) MISSED OFFSET
	TArray<class UInventorySlot*>                      Slots;                                                    // 0x0030(0x0010) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	struct FScriptMulticastDelegate                    OnInventoryModifedDelegate;                               // 0x0040(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.InventoryStorageBase");
		return ptr;
	}


	TEnumAsByte<EInventoryItemStorage> GetStorageType();
	class UInventorySlot* GetSlot(int Index);
	int GetNumSlots();
};


// Class BendGame.InventoryStorage
// 0x0000 (0x0050 - 0x0050)
class UInventoryStorage : public UInventoryStorageBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.InventoryStorage");
		return ptr;
	}

};


// Class BendGame.InventoryLootStorage
// 0x00A8 (0x00F8 - 0x0050)
class UInventoryLootStorage : public UInventoryStorage
{
public:
	struct FGameplayTag                                ScrapTag;                                                 // 0x0050(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FGameplayTag                                FreakerEarTag;                                            // 0x0058(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FGameplayTagQuery                           QuickHealItemQuery;                                       // 0x0060(0x0048) (Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagQuery                           RecipeComponentsQuery;                                    // 0x00A8(0x0048) (Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                               bAdjustedCraftComponentCapacity;                          // 0x00F0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00F1(0x0003) MISSED OFFSET
	int                                                MaxSlots;                                                 // 0x00F4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.InventoryLootStorage");
		return ptr;
	}


	void IncreaseCraftingComponentCapacity(int ComponentMultiplier, int WeaponMultiplier);
	int GetScrapCount();
	void GetQuickHealItems(TArray<struct FInventoryStorageConsumableItemDetails>* OutItems);
	void GetConsumableItemDetails(TEnumAsByte<EPlayerAttributeType> Type, TArray<struct FInventoryStorageConsumableItemDetails>* OutItems);
	void AjustMaxCraftingComponentCapacity(int Multiplier);
	int AdjustScrapCount(int Count);
};


// Class BendGame.BendPlayerController
// 0x1928 (0x1FD0 - 0x06A8)
class ABendPlayerController : public APlayerController
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x06A8(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnDifficultyChanged;                                      // 0x06B0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ReceiveAIMoveAndRotateComplete;                           // 0x06C0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               IsAttemptingCounter;                                      // 0x06D0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x06D1(0x0003) MISSED OFFSET
	int                                                NumCurrentSaveZones;                                      // 0x06D4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x06D8(0x0004) MISSED OFFSET
	float                                              MinDotForMarking;                                         // 0x06DC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxMarkDistance;                                          // 0x06E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x06E4(0x0004) MISSED OFFSET
	class USoundCue*                                   QuickhealSoundCue;                                        // 0x06E8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x101];                                     // 0x06F0(0x0101) MISSED OFFSET
	bool                                               IsSleeping;                                               // 0x07F1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               CinematicInvulnerability;                                 // 0x07F2(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x5];                                       // 0x07F3(0x0005) MISSED OFFSET
	TArray<struct FName>                               LoadingTipsContextual;                                    // 0x07F8(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FName>                               DLCLoadingTipsContextual;                                 // 0x0808(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	bool                                               HasQueuedDisconnect;                                      // 0x0818(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               HitMainMenuOnce;                                          // 0x0819(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x6];                                       // 0x081A(0x0006) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnFocusModeToggle;                                        // 0x0820(0x0010) (Edit, BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnSurvivalFocusMode;                                      // 0x0830(0x0010) (Edit, BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnFlashlightToggle;                                       // 0x0840(0x0010) (Edit, BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnFocusFadingFinished;                                    // 0x0850(0x0010) (Edit, BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDisplayLowHealthWarning;                                // 0x0860(0x0010) (Edit, BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDisplayQuicksaveInteract;                               // 0x0870(0x0010) (Edit, BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable)
	class UAudioComponent*                             TutorialAppearSound;                                      // 0x0880(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UAudioComponent*                             DisplayNotificationSound;                                 // 0x0888(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UAudioComponent*                             LockerSound;                                              // 0x0890(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UAudioComponent*                             MechanicSound;                                            // 0x0898(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UAudioComponent*                             SkillUnlockSoundSelect;                                   // 0x08A0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UAudioComponent*                             SkillUnlockSoundPurchase;                                 // 0x08A8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	bool                                               IsCrouchDrift;                                            // 0x08B0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData07[0x7];                                       // 0x08B1(0x0007) MISSED OFFSET
	class UBendAttackManager*                          PlayerAttackManager;                                      // 0x08B8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	class ABendPlayerPawn*                             MyBendPawn;                                               // 0x08C0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData08[0x1C];                                      // 0x08C8(0x001C) MISSED OFFSET
	bool                                               PawnIsCrouching;                                          // 0x08E4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IsCrouching;                                              // 0x08E5(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData09[0x2];                                       // 0x08E6(0x0002) MISSED OFFSET
	float                                              FocusModeSwayMultiplier;                                  // 0x08E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               ReducedSwayActive;                                        // 0x08EC(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               SwayReduced;                                              // 0x08ED(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData10[0x2];                                       // 0x08EE(0x0002) MISSED OFFSET
	float                                              BinocularSway;                                            // 0x08F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BinocSwayCycleTime;                                       // 0x08F4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BinocSwayPitchMagMult;                                    // 0x08F8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BinocularSwayCrouched;                                    // 0x08FC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BinocSwayCycleTimeCrouched;                               // 0x0900(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BinocSwayPitchMagMultCrouched;                            // 0x0904(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                FocusSlowMo_DID;                                          // 0x0908(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData11[0x4];                                       // 0x090C(0x0004) MISSED OFFSET
	class USoundCue*                                   EnterFocusSound;                                          // 0x0910(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class USoundCue*                                   ExitFocusSound;                                           // 0x0918(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FocusTimeDilation;                                        // 0x0920(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FocusModeWeaponPlayRate;                                  // 0x0924(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FocusModeFadeInTime;                                      // 0x0928(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SurvivalVisionBufferFillUpTime;                           // 0x092C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SurvivalVisionViewDistance;                               // 0x0930(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SurvivalVisionViewDistanceUpgraded;                       // 0x0934(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                SurvivalVisionAfterImagesActive;                          // 0x0938(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HealthTimeDownCounter;                                    // 0x093C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              QuickHealHealingTime;                                     // 0x0940(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData12[0x4];                                       // 0x0944(0x0004) MISSED OFFSET
	class UAudioComponent*                             QuickhealSound;                                           // 0x0948(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	float                                              VehicleBlindfireNoAmmoHolsterTimeLimit;                   // 0x0950(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData13[0x4];                                       // 0x0954(0x0004) MISSED OFFSET
	bool                                               BikeExitInteractPressed;                                  // 0x0958(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData14[0x3];                                       // 0x0959(0x0003) MISSED OFFSET
	float                                              TimeRequiredToHoldBikeExitInteract;                       // 0x095C(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              QuicksaveTimeDownCounter;                                 // 0x0960(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              QuicksaveInteractTime;                                    // 0x0964(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               QuicksaveInputActive;                                     // 0x0968(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               SprintToggle;                                             // 0x0969(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               SprintingEnabled;                                         // 0x096A(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IsStealthedInBush;                                        // 0x096B(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bStealthKilledOrCountered;                                // 0x096C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               InRangeOfWeaponLocker;                                    // 0x096D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData15[0x2];                                       // 0x096E(0x0002) MISSED OFFSET
	float                                              CurrentFocusModeDistanceSetting;                          // 0x0970(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CurrentFocusModeMaxTimeLength;                            // 0x0974(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               UseFocusModeContinuosSound;                               // 0x0978(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData16[0x3];                                       // 0x0979(0x0003) MISSED OFFSET
	struct FTimerHandle                                TimerHandle_FocusModetimer;                               // 0x097C(0x0004) (Edit, BlueprintVisible, DisableEditOnInstance)
	float                                              ProximityForIdentifyVO;                                   // 0x0980(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               IsSprinting;                                              // 0x0984(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               BushCameraActivated;                                      // 0x0985(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               DodgeBufferedInputValid;                                  // 0x0986(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               FlashlightTurnedOffAuto;                                  // 0x0987(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               DisplayedAdrenalineAvailable;                             // 0x0988(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bDebugPrintFloorSurfaceType;                              // 0x0989(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData17[0x26];                                      // 0x098A(0x0026) MISSED OFFSET
	class UPostProcessComponent*                       AmbushHitPost;                                            // 0x09B0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData18[0x20];                                      // 0x09B8(0x0020) MISSED OFFSET
	class UBendPlayerAimAssistTargeter*                OnFootAimAssistTargeter;                                  // 0x09D8(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UBendVehicleAimAssistTargeter*               VehicleAimAssistTargeter;                                 // 0x09E0(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UForceFeedbackEffect*                        ForceFeedbackEffect_Boost;                                // 0x09E8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UForceFeedbackEffect*                        ForceFeedbackEffect_Drift;                                // 0x09F0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bLOSflag : 1;                                             // 0x09F8(0x0001)
	unsigned char                                      DontDisableWeaponsInEncampment : 1;                       // 0x09F8(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      DontDropWeaponsIfNoAmmoLeft : 1;                          // 0x09F8(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      DeleteWeaponPickupsWhenNoAmmoLeft : 1;                    // 0x09F8(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bCheatGhost : 1;                                          // 0x09F8(0x0001) (Net, Transient)
	unsigned char                                      bCheatFly : 1;                                            // 0x09F8(0x0001) (Net, Transient)
	unsigned char                                      bWantsToCrouch : 1;                                       // 0x09F8(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bCrouchAimInBush : 1;                                     // 0x09F8(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData19 : 1;                                        // 0x09F9(0x0001)
	unsigned char                                      bSprintIsAToggle : 1;                                     // 0x09F9(0x0001) (BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData20[0x2];                                       // 0x09FA(0x0002) MISSED OFFSET
	int                                                ForcePlayerCrouchCount;                                   // 0x09FC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UBendAttribute*                              Stamina;                                                  // 0x0A00(0x0008) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	class UBendAttribute*                              Focus;                                                    // 0x0A08(0x0008) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	TAssetPtr<class UClass>                            m_AmbientGeneratorClass;                                  // 0x0A10(0x0020) (Edit, BlueprintVisible)
	class ABendAmbientGenerator*                       m_pAmbientGenerator;                                      // 0x0A30(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UBendSensingComponent*                       m_RadarDetector;                                          // 0x0A38(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	float                                              InteractPrematureHoldThreshold;                           // 0x0A40(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              QuickRecoveryStaminaCost;                                 // 0x0A44(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              QuickRecoveryHealthRecoveryPercent;                       // 0x0A48(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_CombatCamDist;                                          // 0x0A4C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_FallingCamTime;                                         // 0x0A50(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ListenPositionOffset;                                     // 0x0A54(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ListenPositionOffsetMax;                                  // 0x0A58(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ListenPositionSpeedMin;                                   // 0x0A5C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ListenPositionSpeedMax;                                   // 0x0A60(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MeleeAttackVolume;                                        // 0x0A64(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              StealthAttackVolume;                                      // 0x0A68(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MeleeAttackShakeMag;                                      // 0x0A6C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MeleeAttackTime;                                          // 0x0A70(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MeleeCamRadiusUnawareEnter;                               // 0x0A74(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MeleeCamRadiusUnawareExit;                                // 0x0A78(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MeleeCamRadiusAwareEnter;                                 // 0x0A7C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MeleeCamRadiusAwareExit;                                  // 0x0A80(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              WaterSprintMaxSpeed;                                      // 0x0A84(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              WaterSprintMinSpeed;                                      // 0x0A88(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              WaterWalkMaxSpeed;                                        // 0x0A8C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              WaterWalkMinSpeed;                                        // 0x0A90(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              InsideSprintMaxSpeed;                                     // 0x0A94(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              InsideSprintMinSpeed;                                     // 0x0A98(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              InsideWalkMaxSpeed;                                       // 0x0A9C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              InsideWalkMinSpeed;                                       // 0x0AA0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              OutsideSprintMaxSpeed;                                    // 0x0AA4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              OutsideSprintMinSpeed;                                    // 0x0AA8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              OutsideWalkMaxSpeed;                                      // 0x0AAC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              OutsideWalkMinSpeed;                                      // 0x0AB0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               ForceSuccessButtonEvents;                                 // 0x0AB4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               FlashlightOn;                                             // 0x0AB5(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               StartPlayerWithRandomWeapon;                              // 0x0AB6(0x0001) (Edit, ZeroConstructor, Config, DisableEditOnInstance, EditConst, IsPlainOldData)
	bool                                               bAllowVehicleManualAimSlowdown;                           // 0x0AB7(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              VehicleManualAimTimeDilation;                             // 0x0AB8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              VehicleManualAimTimeDialationMinSpeed;                    // 0x0ABC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bIsShooting;                                              // 0x0AC0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData21[0x7];                                       // 0x0AC1(0x0007) MISSED OFFSET
	class UBendCoverAnimData*                          CoverAnimData;                                            // 0x0AC8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UBlendSpaceBase*                             EnterCoverBlendSpace;                                     // 0x0AD0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FScriptMulticastDelegate                    EnterCoverDelegate;                                       // 0x0AD8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    LeaveCoverDelegate;                                       // 0x0AE8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    EnteredCoverDelegate;                                     // 0x0AF8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnInputKeyJustPressed;                                    // 0x0B08(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnInputKeyJustTapped;                                     // 0x0B18(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnCurrentInputDeviceChanged;                              // 0x0B28(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    LeftCoverDelegate;                                        // 0x0B38(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ChangedCoverHeightDelegate;                               // 0x0B48(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ChangedCoverAnchorDelegate;                               // 0x0B58(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    AimStepOutOfCoverDelegate;                                // 0x0B68(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      IsNearCover : 1;                                          // 0x0B78(0x0001) (BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      IsInCover : 1;                                            // 0x0B78(0x0001) (BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData22 : 1;                                        // 0x0B78(0x0001)
	unsigned char                                      CoverMovingLeft : 1;                                      // 0x0B78(0x0001) (BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      CoverMovingRight : 1;                                     // 0x0B78(0x0001) (BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData23[0x7];                                       // 0x0B79(0x0007) MISSED OFFSET
	float                                              PushInSpeedDifference;                                    // 0x0B80(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData24[0x4];                                       // 0x0B84(0x0004) MISSED OFFSET
	float                                              CoverSpeedMax;                                            // 0x0B88(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CoverSpeedCombatMax;                                      // 0x0B8C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               CoverAutoTurnToFaceCorners;                               // 0x0B90(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               CoverUseWalkAlongAngle;                                   // 0x0B91(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData25[0x2];                                       // 0x0B92(0x0002) MISSED OFFSET
	float                                              CoverCornerAngle;                                         // 0x0B94(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CoverCornerSlowdownPercentage;                            // 0x0B98(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CoverSpeed;                                               // 0x0B9C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      CoverTurningAround : 1;                                   // 0x0BA0(0x0001) (BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      IsInCornerCoverLeft : 1;                                  // 0x0BA0(0x0001) (BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      IsInCornerCoverRight : 1;                                 // 0x0BA0(0x0001) (BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      CanStepoutLeft : 1;                                       // 0x0BA0(0x0001) (BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      CanStepoutRight : 1;                                      // 0x0BA0(0x0001) (BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      CoverNeedsAimStepout : 1;                                 // 0x0BA0(0x0001) (BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UseCoverEnterAnim : 1;                                    // 0x0BA0(0x0001) (BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      StayInCoverDueToStepOut : 1;                              // 0x0BA0(0x0001) (BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      CoverSteppingOut : 1;                                     // 0x0BA1(0x0001) (BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      CoverSteppingIn : 1;                                      // 0x0BA1(0x0001) (BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      CoverSteppedOut : 1;                                      // 0x0BA1(0x0001) (BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData26 : 5;                                        // 0x0BA1(0x0001)
	unsigned char                                      UnknownData27 : 1;                                        // 0x0BA2(0x0001)
	unsigned char                                      LowCoverShouldAimOverLeftShoulder : 1;                    // 0x0BA2(0x0001) (BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      SuckPlayerBackToCoverWhenIdle : 1;                        // 0x0BA2(0x0001) (BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData28[0x1];                                       // 0x0BA3(0x0001) MISSED OFFSET
	TEnumAsByte<ECoverLeanDirection>                   StepOutDirection;                                         // 0x0BA4(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData29[0x3];                                       // 0x0BA5(0x0003) MISSED OFFSET
	float                                              CoverQuadrantAngle;                                       // 0x0BA8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              CoverWalkAlongAngle;                                      // 0x0BAC(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              CoverTurnInPlaceAngle;                                    // 0x0BB0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              CoverPlayerDistance;                                      // 0x0BB4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              CoverCameraPivotPercent;                                  // 0x0BB8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData30[0x84];                                      // 0x0BBC(0x0084) MISSED OFFSET
	float                                              LeaveCoverTimer;                                          // 0x0C40(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              LeaveHighCornerCoverTimer;                                // 0x0C44(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CornerSlowdownTimer;                                      // 0x0C48(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ColumnDeadZoneCone;                                       // 0x0C4C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CoverWalkAngle;                                           // 0x0C50(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData31[0x4];                                       // 0x0C54(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnPauseMenuOpened;                                        // 0x0C58(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPauseMenuClosed;                                        // 0x0C68(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnThrottleInputPressed;                                   // 0x0C78(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBrakeInputPressed;                                      // 0x0C88(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBrakeInputReleased;                                     // 0x0C98(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBoostInputPressed;                                      // 0x0CA8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    WeaponWheelOpenedDelegate;                                // 0x0CB8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    WeaponWheelClosedDelegate;                                // 0x0CC8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBikeManualAimSlowdownStarted;                           // 0x0CD8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBikeManualAimSlowdownStopped;                           // 0x0CE8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnHideWeaponUIToggle;                                     // 0x0CF8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPlayerShotSomeone;                                      // 0x0D08(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPlayerShotDamageableObject;                             // 0x0D18(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData32[0x8];                                       // 0x0D28(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnEnemyKilled;                                            // 0x0D30(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnCrowdMemberKilled;                                      // 0x0D40(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBlindfireTargetChanged;                                 // 0x0D50(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               UseNewGrappleButtonEvent;                                 // 0x0D60(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData33[0x7];                                       // 0x0D61(0x0007) MISSED OFFSET
	class ABendButtonPressEvent*                       CurrentGrappleButtonEvent;                                // 0x0D68(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnTrustModified;                                          // 0x0D70(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDLCStealthRingCountUpdate;                              // 0x0D80(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnUnderArmorHealthTriggered;                              // 0x0D90(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDLCUnderArmorMeleeBuffCountUpdate;                      // 0x0DA0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDLCBikeFuelEfficiencyUpdated;                           // 0x0DB0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	int                                                StealthSuppressRingCheck;                                 // 0x0DC0(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              UnderArmorMeleeBuffRingTime;                              // 0x0DC4(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              UnderArmorMeleeBuffDamageAmount;                          // 0x0DC8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData34[0x4];                                       // 0x0DCC(0x0004) MISSED OFFSET
	class UClass*                                      CocktailFocusEffectClass;                                 // 0x0DD0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FScriptMulticastDelegate                    ChangedPlayerLocationTypeDelegate;                        // 0x0DD8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      StaminaBoostActive : 1;                                   // 0x0DE8(0x0001) (BlueprintVisible)
	unsigned char                                      IsAbleToSprint : 1;                                       // 0x0DE8(0x0001) (BlueprintVisible)
	unsigned char                                      SlowMoActive : 1;                                         // 0x0DE8(0x0001) (BlueprintVisible)
	unsigned char                                      UnknownData35[0x7];                                       // 0x0DE9(0x0007) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnSlomoFull;                                              // 0x0DF0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnSlomoActivated;                                         // 0x0E00(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnSlomoDeactivated;                                       // 0x0E10(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnRockThrowPostToggled;                                   // 0x0E20(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      FocusActive : 1;                                          // 0x0E30(0x0001) (BlueprintVisible)
	unsigned char                                      InTrackingPerformAction : 1;                              // 0x0E30(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      FocusBoostActive : 1;                                     // 0x0E30(0x0001) (BlueprintVisible)
	unsigned char                                      FocusModeAbilityDisabled : 1;                             // 0x0E30(0x0001) (BlueprintVisible)
	unsigned char                                      ForceWalkCanSprint : 1;                                   // 0x0E30(0x0001) (BlueprintVisible)
	unsigned char                                      OverrideTouchMenuInput : 1;                               // 0x0E30(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData36 : 1;                                        // 0x0E30(0x0001)
	unsigned char                                      FlashlightAbilityDisabled : 1;                            // 0x0E30(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      BinocularsAbilityDisabled : 1;                            // 0x0E31(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      DodgeAbilityDisabled : 1;                                 // 0x0E31(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      ItemPickupAbilityDisabled : 1;                            // 0x0E31(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bCanExitVehicle : 1;                                      // 0x0E31(0x0001) (BlueprintVisible)
	unsigned char                                      CanUseVehicle : 1;                                        // 0x0E31(0x0001) (BlueprintVisible)
	unsigned char                                      PawnIsIndoors : 1;                                        // 0x0E31(0x0001) (BlueprintVisible)
	unsigned char                                      WeaponWheelDisabled : 1;                                  // 0x0E31(0x0001) (BlueprintVisible, Transient)
	unsigned char                                      WeaponWheelCinematicDisabled : 1;                         // 0x0E31(0x0001) (BlueprintVisible, Transient)
	unsigned char                                      WeaponWheelActive : 1;                                    // 0x0E32(0x0001) (BlueprintVisible, Transient)
	unsigned char                                      InsideOfDumpster : 1;                                     // 0x0E32(0x0001) (BlueprintVisible, Transient)
	unsigned char                                      BikeAmmoInteractionDisabled : 1;                          // 0x0E32(0x0001) (BlueprintVisible, Transient)
	unsigned char                                      UnknownData37[0x1];                                       // 0x0E33(0x0001) MISSED OFFSET
	float                                              AccuracyAngleToIgnoreCritical;                            // 0x0E34(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AccuracyAngleToAllowHitting;                              // 0x0E38(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MinDistanceToAllowHitting;                                // 0x0E3C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IsCurrentlyDisplayingHeal;                                // 0x0E40(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               IsCurrentlyDisplayingQuicksave;                           // 0x0E41(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               QuickHealInputActive;                                     // 0x0E42(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData38[0x1];                                       // 0x0E43(0x0001) MISSED OFFSET
	int                                                LastHealthItemCount;                                      // 0x0E44(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData39[0x10];                                      // 0x0E48(0x0010) MISSED OFFSET
	float                                              BushEnterRadiusBuffer;                                    // 0x0E58(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BushExitTimeBuffer;                                       // 0x0E5C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IsInTallBush;                                             // 0x0E60(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData40[0x7];                                       // 0x0E61(0x0007) MISSED OFFSET
	class UBendWidgetComponent*                        BlindfireWidgetComponent;                                 // 0x0E68(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData41[0x8];                                       // 0x0E70(0x0008) MISSED OFFSET
	class USoundCue*                                   PauseMenuEnterSound;                                      // 0x0E78(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class USoundCue*                                   PauseMenuStopMenuSound;                                   // 0x0E80(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class USoundCue*                                   PauseMenuStartMenuSound;                                  // 0x0E88(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class USoundCue*                                   PauseMenuExitSound;                                       // 0x0E90(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData42[0x9A8];                                     // 0x0E98(0x09A8) MISSED OFFSET
	bool                                               IsPhotoModeActive;                                        // 0x1840(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               AllowPhotoMode;                                           // 0x1841(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData43[0x6];                                       // 0x1842(0x0006) MISSED OFFSET
	struct FScriptMulticastDelegate                    PhotoModeStarted;                                         // 0x1848(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    PhotoModeEnded;                                           // 0x1858(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	TEnumAsByte<EGameDifficulty>                       SelectedNGPDifficulty;                                    // 0x1868(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData44[0x7];                                       // 0x1869(0x0007) MISSED OFFSET
	class ABendEquippableItem*                         BinocularsCDO;                                            // 0x1870(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FNewGamePlusCarryOverData                   SeedDataForNewGamePlus;                                   // 0x1878(0x0158) (BlueprintVisible, BlueprintReadOnly, SaveGame)
	int                                                NewGamePLusCompletionCount;                               // 0x19D0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData)
	bool                                               bTutorialBlockingInputActive;                             // 0x19D4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EGameDifficulty>                       Difficulty;                                               // 0x19D5(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData45[0x2];                                       // 0x19D6(0x0002) MISSED OFFSET
	float                                              SprintMaxSpeed;                                           // 0x19D8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SprintMinSpeed;                                           // 0x19DC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              WalkMaxSpeed;                                             // 0x19E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              WalkMinSpeed;                                             // 0x19E4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EPlayerLocationType>                   CurrentPlayerLocation;                                    // 0x19E8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData46[0x7];                                       // 0x19E9(0x0007) MISSED OFFSET
	TArray<struct FGameplayTag>                        SurvivalWheelLockedSlots;                                 // 0x19F0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, EditConst)
	TArray<struct FGameplayTag>                        SurvivalWheelLockedItems;                                 // 0x1A00(0x0010) (Edit, BlueprintVisible, ZeroConstructor, EditConst)
	bool                                               AutoTraverseActive;                                       // 0x1A10(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData47[0xF];                                       // 0x1A11(0x000F) MISSED OFFSET
	struct FBendWeaponAimBlockedCheck                  WeaponAimBlockedCheck;                                    // 0x1A20(0x0490) (Edit)
	unsigned char                                      UnknownData48[0xD8];                                      // 0x1EB0(0x00D8) MISSED OFFSET
	class AVehicleController*                          VehicleController;                                        // 0x1F88(0x0008) (Net, ZeroConstructor, IsPlainOldData)
	class UPlayerInventoryComponent*                   InventoryComponent;                                       // 0x1F90(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData49[0x38];                                      // 0x1F98(0x0038) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendPlayerController");
		return ptr;
	}


	bool WasLastInputKeyFromSteamInput();
	bool WasInputActionJustReleased(const struct FName& ActioName);
	bool WasInputActionJustPressed(const struct FName& ActionName);
	void VibrateController(float intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, TEnumAsByte<EDynamicForceFeedbackAction> Action, const struct FLatentActionInfo& LatentInfo);
	void UpdateUnderArmorOnBuffTick(float DeltaTime);
	void UpdateIfCanExitVehicle(bool ForceturnOff);
	void UpdateAfterImagesCount(int Added);
	void UnSuppressThrottleBrake();
	void TurnPlayerFlashlightOnOff(bool TurnOn);
	void TurnOnRockThrowPostProcess(bool On);
	void TurnOnCinematicPause();
	void TryToCounterAttack();
	void TryForceWeaponSwapTap();
	void TryAutoTraversal();
	void ToggleUseVehicleBlindfire();
	void ToggleUseBikePickupAnim();
	void ToggleSurvivalVisionCodeImpl();
	void TogglePhotoMode();
	void TogglePauseMenu();
	void ToggleFocusModeCodeImpl();
	void ToggleDrawAiSound();
	void ToggleBinoculars();
	void ThrowManualAimThrowable();
	void SwitchCameraDebugMode();
	void SwapWeaponTraps();
	void SwapWeaponThrowables();
	void SwapWeaponDistractions();
	void SwapToSpecialWeapon();
	void SwapToSecondaryWeapon();
	void SwapToPrimaryWeapon();
	void SwapToPreviousWeapon();
	void SwapToNextWeapon();
	void SwapToAlternatePrimaryWeapon();
	void SwapBetweenPrimaryAndPistol();
	void SurvivalVisionDisablePostProcessAndStartTimer();
	void SuppressThrottleBrake();
	void StopUsingBinoculars(bool bForce);
	void StopScopeZoom();
	void StopPrimaryFire();
	void StopManualAimWeapon();
	void StopManualAimThrowable();
	void StopManualAim();
	void StopBlindfireTargetSelect();
	void StopAutoWeaponFireInput();
	void StepOutStarted();
	void StepOutFinished();
	void StepInStarted();
	void StepInFinished();
	void StartUsingBinoculars();
	void StartScopeZoom(bool Increase, bool zoomScroll);
	void StartPrimaryFire();
	void StartManualAimWeapon();
	void StartManualAimThrowable();
	void StartBlindfireTargetSelect();
	void SprintCheck();
	void SpawnWeaponFromMenu(TEnumAsByte<EInventoryWeaponID> WeaponIDToAdd, class UWidget* CallingMenu, bool isWeaponMerchant);
	void STATIC_SpawnPlayerVehicle(int PlayerIndex, class UClass* Class, const struct FTransform& SpawnTransform, bool SpawnEvenIfColliding);
	void STATIC_SpawnFirstPlayerVehicle(class UClass* Class, const struct FTransform& SpawnTransform, bool SpawnEvenIfColliding);
	class AVehiclePawn* SpawnAssignedVehicle(class UClass* Class, bool SpawnEvenIfColliding, struct FTransform* SpawnTransform);
	bool ShouldUseVehicleBlindfire();
	bool ShouldUseBinocularSteamInput();
	void ShouldSkipButtonEventForNextGrapple(bool Skip);
	void SetWolfAttackingBike(class ABendAIPawn* pWolf);
	void SetSurvivalWheelSlotUnlocked(const struct FGameplayTag& Tag);
	void SetSurvivalWheelSlotLocked(const struct FGameplayTag& Tag);
	void SetSurvivalWheelItemUnlocked(const struct FGameplayTag& Tag);
	void SetSurvivalWheelItemLocked(const struct FGameplayTag& Tag);
	void SetStaminaToMax();
	void SetSprinting(bool State);
	void SetShouldStartWithRandomWeapon(bool ShouldStartWithRandomWeapon);
	void SetRightShoulder(bool use);
	void SetPlayerLocationType(TEnumAsByte<EPlayerLocationType> LocationType);
	bool SetPauseWithCameraTick(bool bPause);
	void SetLastQuickSelectedByTag(const struct FName& TagName, class ABendWeapon* WeaponSelected);
	void SetIsEnteringOutOfBounds(bool isEntering);
	void SetFocusToMax();
	void SetAssignedVehicle(class AVehiclePawn* InAssignedVehicle);
	void SetAllowVehicleManualAim(bool bAllow);
	void SetAllowVehicleBlindfire(bool bAllow);
	void ServerCheatAll(const struct FString& Msg);
	void ServerCheat(const struct FString& Msg);
	void SelectNewBlindfireTarget(bool RightOfCurrentTarget);
	void SelectBlindfireTarget_FaceButtonTop();
	void SelectBlindfireTarget_FaceButtonRight();
	void SelectBlindfireTarget_FaceButtonLeft();
	void SelectBlindfireTarget_FaceButtonBottom();
	void ResetSurvivalWheelLockedSlots();
	void ResetSurvivalWheelItemLocks();
	void ResetControllerLightColor();
	bool RequestPlayerAINavigation(const struct FPlayerAINavRequestInfo& PlayerAINavRequest);
	void RemoveLoadingTipFromContextualQueue(const struct FName& LoadingTipRowName);
	void RemoveDLCLoadingTipFromContextualQueue(const struct FName& LoadingTipRowName);
	void ReceiveSetNegateDamage(bool State);
	void PlayUnlockingSkillSoundSelect(class USoundCue* ToBePlayed);
	void PlayUnlockingSkillSoundPurchase(class USoundCue* ToBePlayed);
	void PlayTutorialAppearSound(class USoundCue* ToBePlayed);
	void PlayMechanicSound(class USoundCue* ToBePlayed);
	void PlayLockerSound(class USoundCue* ToBePlayed);
	void PlayDisplayNotificationSound(class USoundBase* ToBePlayed);
	void PauseOnFocusLost();
	void PauseOnFocusGained();
	void OpenPauseMenu();
	void OnTutorialBoostInputPressed();
	void OnSurvivalWheelReleased(bool bFromBike);
	void OnSurvivalWheelPressed(bool bFromBike);
	void OnRep_CheatMovement();
	void OnPlayerInventoryModified(const struct FInventoryOperation& Operation);
	void OnPawnSet(class APawn* InPawn);
	void OnOverlayOpened();
	void OnKeyJustPressed(struct FKey* Key);
	void OnJumpPressed();
	void OnEnemyKilledRingCheckHorde(class USkeletalMeshComponent* VictimPawn, class UDamageType* DamageType, int XPValue, class AActor* DamageCauser, bool WasCriticalHit);
	void OnEnemyKilledRingCheck(class ABendPawn* VictimPawn, class UDamageType* DamageType, int XPValue, class AActor* DamageCauser, bool WasCriticalHit);
	void OnDeactivatedSurvivalVision();
	void OnControllerConnectionChange(bool bConnected);
	void OnAITeamSystemStarted();
	void OnActivatedSurvivalVision();
	void NotifyPauseMenuOpened();
	void NotifyPauseMenuClosed();
	bool NeedCounter();
	void MarkInVislog();
	void LeaveCover(bool Force);
	bool IsVehicleManualAimAllowed();
	bool IsVehicleBlindfireAllowed();
	bool IsThrottleBrakeSuppressed();
	bool IsSwimming();
	bool IsSurvivalWheelSlotLocked(const struct FGameplayTag& Tag);
	bool IsSurvivalWheelItemLocked(const struct FGameplayTag& Tag);
	bool IsPhotoModeAvailable();
	bool IsPawnCenterScreen(class ABendPawn* BendPawn, float degreesFromCenter, float MaxDist);
	bool IsPauseMenuActive();
	bool IsLeavingCover();
	bool IsInVehicle();
	bool IsInsideBush();
	bool IsInScopeMode();
	bool IsInRangeOfSaveInteract();
	bool IsInputActionDown(const struct FName& ActionName);
	bool IsExternalOverlayActive();
	bool IsEnemy(class ABendPawn* BendPawn);
	bool IsBikeLookBehindActive();
	bool IsBeingGrappled();
	bool IsAnyInputKeyDown(TArray<struct FKey>* Keys);
	bool IsAnyInputActionDown(TArray<struct FName>* Actions);
	bool IsAiming();
	bool InTreeCover();
	void HideWeaponUI(bool HideWpnUI);
	bool HeldExitTheVehicle();
	bool HasRecentMouseInput();
	bool HasMouseInputThisTick();
	void HandleManualAimInputPressed();
	void GivePlayerKillEXP(int Experience);
	bool GetUseBikePickupAnim();
	float GetSlomoPercent();
	bool GetShouldStartWithRandomWeapon();
	void GetPausedStatus(bool* IsGamePaused, bool* CameraTickEnabled);
	void GetMovementInput(bool bGetJoystickInputOnly, float* StrafeVal, float* ForwardVal);
	class AVehiclePawn* GetMountedVehicle();
	void GetLookInput(bool bGetJoystickInputOnly, float* TurnVal, float* LookUpVal);
	struct FKey GetLastInputKey();
	void GetKeysFromAction(const struct FName& ActionName, TArray<struct FKey>* keysOut);
	bool GetIsWolfAttackBikeActive();
	bool GetIsAutoTraverseActive();
	class UPlayerInventoryComponent* GetInventoryComponent();
	float GetInputActionKeyTimeDown(const struct FName& ActionName);
	float GetInputActionAnalogKeyState(const struct FName& ActionName);
	class UBendCalloutWidgetComponent* GetEnemyToMark_NEW();
	class ABendPawn* GetEnemyToMark();
	TEnumAsByte<ESaveZoneTypes> GetCurrentSaveZoneType();
	TEnumAsByte<EConsoleForGamepadLabels> GetCurrentInputDevice();
	struct FVector GetCoverTangent();
	struct FVector GetCoverNormal();
	struct FTransform GetCoverAnchorPosition();
	struct FTransform GetClosestCornerHandleForStepOut();
	struct FTransform GetClosestCornerHandleForStepIn();
	class ABendCamManager* GetCamManager();
	class ABendPlayerPawn* GetBendPlayerPawn();
	class ABendHUD* GetBendHUD();
	class UCharacterAttributeManager* GetAttributeManager();
	class AVehiclePawn* GetAssignedVehicle();
	class AAIController* GetAIControllerNoCheck();
	void ForcePlayerUnCrouch();
	void ForcePlayerCrouch();
	void EnterExitSaveZone(bool isEntering, TEnumAsByte<ESaveZoneTypes> SaveZoneType);
	void EnablePlayerInputBlockerCustom(TArray<struct FName> AllowedActions);
	void EnablePlayerInputBlockerAllowCam();
	void EnablePlayerInputBlocker();
	void EnableBikeLookBehind(class UClass* camClass);
	void DoTheActionOnCircleButton();
	void DoneTurningInCover();
	void DoneEnteringCover();
	void DisplayWeaponReturnedToLocker(const struct FGameplayTag& WeaponTag, int AmmoReturned);
	void DisablePlayerInputBlockerCustom();
	void DisablePlayerInputBlockerAllowCam();
	void DisablePlayerInputBlocker();
	void DisableBikeLookBehind();
	void DebugCamUp(bool Pressed);
	void DebugCamDown(bool Pressed);
	void DeactivateSurvivalVisionCodeImpl(bool PlayExitSound);
	void DeactivateGrappleOverlayEffect(bool Instant);
	void DeactivateFocusModeCodeImpl(bool PlayExitSound);
	void DeactivateFocusMode_NEW(bool PlayExitSound);
	void CycleSecondaryBlindfireTarget();
	void CODE_EndSwimming();
	void CODE_BeginSwimming();
	void CloseWeaponWheel_Blueprint();
	void ClosePauseMenu();
	void ClientPawnDied(class APawn* LastPawn, const struct FVector& SpectateLocation);
	void ClearWolfAttackingBike();
	void ClearTouchMenuInputOverrideIfNeeded();
	void ClearBikeDriftInput();
	void CheckSlidingForDLCSkill();
	void CheckForUnderArmorBuffRing();
	bool CheckFlashback_Blueprint();
	void CheatAll(const struct FString& Msg);
	void Cheat(const struct FString& Msg);
	bool CanWeaponBeSwapped();
	void CancelCurrentPlayerNavigation();
	bool CanActivateWeaponWheel();
	void BroadcastEventOnBikeManualAimSlowdownStopped();
	void BroadcastEventOnBikeManualAimSlowdownStarted();
	bool AutoDetectLastInputIsGamepad();
	bool AttemptSelectDebugNPC();
	bool AttemptQuickRecovery();
	void STATIC_AssignVehicleToPlayer(int PlayerIndex, class AVehiclePawn* Vehicle);
	void STATIC_AssignVehicleToFirstPlayer(class AVehiclePawn* Vehicle);
	bool AreBinocularsInUse();
	void ApplyUserSettings(class UGameUserSettings* InUserSettings);
	void AmbushHitReactTick(float DeltaTime);
	void AmbushHitReactForceStop();
	void AmbushHitReactEnd();
	void AmbushHitReactBegin(float TotalDuration);
	void AimStanceChangedHandler(TEnumAsByte<EAimStance> NewAimStance, TEnumAsByte<EAimStance> OldAimStance);
	void AddLoadingTipToContextualQueue(const struct FName& LoadingTipRowName);
	void AddDLCLoadingTipToContextualQueue(const struct FName& LoadingTipRowName);
	bool ActorInPlayerViewWithOffset(class AActor* Actor, const struct FVector& ComponentLocation);
	bool ActorInPlayerView(class AActor* Actor);
	void ActivateSurvivalVisionCodeImpl();
	void ActivateGrappleOverlayEffect();
	void ActivateFocusModeCodeImpl();
};


// Class BendGame.BendAimAssistTargetComponent
// 0x0040 (0x0640 - 0x0600)
class UBendAimAssistTargetComponent : public USphereComponent
{
public:
	struct FName                                       AttachSocket;                                             // 0x0600(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               PrimaryTarget;                                            // 0x0608(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               SecondaryTarget;                                          // 0x0609(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x060A(0x0002) MISSED OFFSET
	float                                              BlindfireMissDistanceOffset;                              // 0x060C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bAutoAccuireBlindfire;                                    // 0x0610(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0611(0x0003) MISSED OFFSET
	float                                              AutoAccuireRange;                                         // 0x0614(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x28];                                      // 0x0618(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAimAssistTargetComponent");
		return ptr;
	}


	void STATIC_EnableActorsAimAssistTargets(class AActor* Actor);
	void STATIC_DisableActorsAimAssistTargets(class AActor* Actor);
	bool STATIC_ActorHasAimAssistTarget(class AActor* Actor);
};


// Class BendGame.BendDamageCauserInterface
// 0x0000 (0x0028 - 0x0028)
class UBendDamageCauserInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendDamageCauserInterface");
		return ptr;
	}

};


// Class BendGame.BendWeapon
// 0x2450 (0x2A00 - 0x05B0)
class ABendWeapon : public ABendEquippableItem
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x05B0(0x0028) MISSED OFFSET
	struct FName                                       ClipMeshCollisionProfile;                                 // 0x05D8(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<struct FMeleeStatusEffectApplication>       MeleeHitStatusEffects;                                    // 0x05E0(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	unsigned char                                      UnknownData01[0x10];                                      // 0x05F0(0x0010) MISSED OFFSET
	struct FWeaponAnim                                 ReloadAnim;                                               // 0x0600(0x0030) (Edit, DisableEditOnInstance)
	struct FWeaponAnim                                 CrouchReloadAnim;                                         // 0x0630(0x0030) (Edit, DisableEditOnInstance)
	struct FWeaponAnim                                 ReloadFinishedAnim;                                       // 0x0660(0x0030) (Edit, DisableEditOnInstance)
	struct FWeaponAnim                                 EquipAnim_Aimed;                                          // 0x0690(0x0030) (Edit, DisableEditOnInstance)
	struct FWeaponAnim                                 EquipUnhideAnim;                                          // 0x06C0(0x0030) (Edit, DisableEditOnInstance)
	struct FWeaponAnim                                 FireAnim;                                                 // 0x06F0(0x0030) (Edit, DisableEditOnInstance)
	struct FWeaponAnim                                 CrouchFireAnim;                                           // 0x0720(0x0030) (Edit, DisableEditOnInstance)
	class UAnimSequence*                               FireAnimSequence;                                         // 0x0750(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FWeaponAnim                                 BikeReloadAnim;                                           // 0x0758(0x0030) (Edit, DisableEditOnInstance)
	struct FWeaponAnim                                 BikeReloadFinishedAnim;                                   // 0x0788(0x0030) (Edit, DisableEditOnInstance)
	struct FWeaponAnim                                 BikeFireAnim;                                             // 0x07B8(0x0030) (Edit, DisableEditOnInstance)
	struct FWeaponAnim                                 BikeFireAnimLastBullet;                                   // 0x07E8(0x0030) (Edit, DisableEditOnInstance)
	struct FWeaponAnim                                 NPCFireAnim;                                              // 0x0818(0x0030) (Edit, DisableEditOnInstance)
	bool                                               CanUseCrouched;                                           // 0x0848(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x27];                                      // 0x0849(0x0027) MISSED OFFSET
	float                                              PlayerAimAdjustPitch;                                     // 0x0870(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PlayerAimAdjustYaw;                                       // 0x0874(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PlayerAimAdjustPitch_Crouching;                           // 0x0878(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PlayerAimAdjustYaw_Crouching;                             // 0x087C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	uint32_t                                           VersionNumber;                                            // 0x0880(0x0004) (ZeroConstructor, IsPlainOldData)
	struct FRotator                                    GripPoseFixupRotator;                                     // 0x0884(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     SupportGripOffset;                                        // 0x0890(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x089C(0x0004) MISSED OFFSET
	class UAnimSequence*                               HandleGripPoses;                                          // 0x08A0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAnimSequence*                               SupportGripPoses;                                         // 0x08A8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAnimSequence*                               IdleAnim;                                                 // 0x08B0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAnimSequence*                               CrouchedIdleAnim;                                         // 0x08B8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               m_bShouldDropAmmo;                                        // 0x08C0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x3];                                       // 0x08C1(0x0003) MISSED OFFSET
	struct FVector                                     DropPositionOffset;                                       // 0x08C4(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     DropImpulse;                                              // 0x08D0(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     DropTorque;                                               // 0x08DC(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x4];                                       // 0x08E8(0x0004) MISSED OFFSET
	struct FWeaponAimBlockedCheckData                  AimBlockData;                                             // 0x08EC(0x002C) (Edit, BlueprintVisible)
	bool                                               ForceManualAim;                                           // 0x0918(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               m_bNeverHolster;                                          // 0x0919(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData06[0x6];                                       // 0x091A(0x0006) MISSED OFFSET
	struct FWeaponData                                 CurWeaponConfig;                                          // 0x0920(0x0EB8) (BlueprintVisible)
	unsigned char                                      UnknownData07[0x1F];                                      // 0x17D8(0x001F) MISSED OFFSET
	bool                                               m_bLowCoverCheckOnce;                                     // 0x17F7(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData08[0x8];                                       // 0x17F8(0x0008) MISSED OFFSET
	class UBendWeaponOverlapComponent*                 MeleeCollisionComp;                                       // 0x1800(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UBendWeaponOverlapComponent*                 MeleeCollisionOnBikeComp;                                 // 0x1808(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	struct FHolsterLocationFlag                        bHolsterLocations[0x6];                                   // 0x1810(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData09[0x2];                                       // 0x1816(0x0002) MISSED OFFSET
	struct FInventoryGuid                              InventoryGuid;                                            // 0x1818(0x0010) (BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData10[0x1C];                                      // 0x1828(0x001C) MISSED OFFSET
	TEnumAsByte<EInventoryAmmoID>                      AmmoID;                                                   // 0x1844(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	TEnumAsByte<EReloadState>                          CurrentReloadState;                                       // 0x1845(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData11[0x62];                                      // 0x1846(0x0062) MISSED OFFSET
	struct FWeaponData                                 WeaponConfig;                                             // 0x18A8(0x0EB8) (Edit, BlueprintVisible, DisableEditOnInstance)
	float                                              OverrideNPCMinDamage;                                     // 0x2760(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              OverrideNPCMaxDamage;                                     // 0x2764(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               DisableTheSoundSystemSettingAmmoInClip;                   // 0x2768(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               UseNewLoopingFireSoundSystem;                             // 0x2769(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               LoopingFireSndSysUpdateRoundsEveryTick;                   // 0x276A(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData12[0x1];                                       // 0x276B(0x0001) MISSED OFFSET
	float                                              LoopingFireSndSysMultiplyValue;                           // 0x276C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              LoopingFireSndSysRoundUpValue;                            // 0x2770(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData13[0xC];                                       // 0x2774(0x000C) MISSED OFFSET
	float                                              NPCPreferredMeleeRange;                                   // 0x2780(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NPCMaxRange;                                              // 0x2784(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData14[0x38];                                      // 0x2788(0x0038) MISSED OFFSET
	TArray<class UClass*>                              WeaponParts;                                              // 0x27C0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData15[0x10];                                      // 0x27D0(0x0010) MISSED OFFSET
	class UClass*                                      NoScopeZoomCamera;                                        // 0x27E0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      bLoopedFireAnim : 1;                                      // 0x27E8(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData16[0x23];                                      // 0x27E9(0x0023) MISSED OFFSET
	float                                              MeleeButtonHoldForHardHitTime;                            // 0x280C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               MeleeAttackCanStunVictim;                                 // 0x2810(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData17[0x157];                                     // 0x2811(0x0157) MISSED OFFSET
	class UBlueprint*                                  m_pCurAmmoBlueprint;                                      // 0x2968(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData18[0x49];                                      // 0x2970(0x0049) MISSED OFFSET
	unsigned char                                      bTestOverlapWithVictimMesh : 1;                           // 0x29B9(0x0001) (Edit)
	unsigned char                                      UnknownData19[0x46];                                      // 0x29BA(0x0046) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendWeapon");
		return ptr;
	}


	void SwitchHands();
	void SpawnShellCasing();
	bool SetWeaponStats(const struct FInventoryItemStats& Stats);
	void SetWeaponInfiniteAmmo(bool InfiniteAmmo);
	void SetWeaponHealthToMax();
	void SetWeaponHealth(int iNewHealth);
	void SetupWeaponsConfigBasedOnAmmoType();
	bool SetMuzzleFlashPFX(class UParticleSystem* MuzzleFX);
	void SetMinAccuracyModifier(float MinAccuracyPercentage, bool SetForOneFrame);
	void SetEquipHand(TEnumAsByte<EEquippableSlot> targetHand);
	void SetCurrentDurability(float Durability);
	void SetCurrentAmmoInClip(int iNewClipAmmoAmt);
	void SetClipMesh();
	void SetAmmoType(TEnumAsByte<EInventoryAmmoID> AmmoID);
	void SetAimAtActor(class AActor* pActor);
	void RemovePartFromWeapon(TEnumAsByte<EWeaponHardPoint> HardPoint);
	void OnWeaponStoppedOverheating();
	void OnWeaponPinRemoved();
	void OnWeaponOverheated();
	void OnWeaponDisarmed();
	void OnWeaponArmed();
	void OnThrowWeapon();
	void OnShellLoaded();
	void OnReloadStarted();
	void OnReloadFinished();
	void OnPartRemoved(class ABendWeaponPart* WeaponPart);
	void OnPartAdded(class ABendWeaponPart* WeaponPart);
	void OnOutOfAmmo();
	void OnFireOnEmpty();
	void OnFired();
	void OnExitScopeMode();
	void OnExitNoScopeZoomMode();
	void OnEnterScopeMode();
	void OnEnterNoScopeZoomMode();
	void OnDropThrowable();
	void OnDamaged(bool OwnerIsPlayer, float WeaponsHealthPercentage);
	void OnCurWeaponConfigRebuilt();
	void OnClipRemoved(int MaterialIndex);
	void OnClipLoaded(int MaterialIndex);
	void OnBaseMaterialSet();
	void OnAmmoTakenFromBike(int AmmoTaken);
	void NotifyPinHasBeenRemoved();
	bool MeleeOnImpact(class AActor* ActorHit, const struct FHitResult& HitResult, const struct FVector& CurrentPosition, const struct FVector& LastPosition, int BodyHitIndex);
	bool IsWeaponPartGuidAttached(const struct FInventoryGuid& Guid);
	bool IsWeaponCollisionEnabled();
	bool IsWeaponBroken();
	bool IsWeaponArmed();
	bool IsTrap();
	bool IsThrown();
	bool IsRocket();
	bool IsProp();
	bool IsPendingReload();
	bool IsMelee();
	bool IsGun();
	bool IsCrossbow();
	bool IsBow();
	void HideInGame(bool bHide);
	bool HasScope();
	bool HasPartAttached(TEnumAsByte<EWeaponHardPoint> HardPoint);
	bool HasInfiniteAmmo();
	bool HasHitAnyone();
	TEnumAsByte<EWeaponType> GetWeaponType();
	bool GetWeaponStats(struct FInventoryItemStats* Stats);
	TEnumAsByte<EWeaponRarity> GetWeaponRarityFromFloat(float WeaponRarityAsFloat);
	float GetWeaponRarityAsFloat();
	TEnumAsByte<EWeaponRarity> GetWeaponRarity();
	int GetWeaponMaxHealth();
	int GetWeaponHealthReductionPerHit();
	float GetWeaponHealthPercentage();
	int GetWeaponHealth();
	float GetTimeDilationValueForMeleeHitOnBike();
	float GetTimeDilationValueForMeleeCriticalHit();
	bool GetSpawnedByNPCOrPickup();
	int GetSpareAmmo();
	float GetReticleAccuracyPercentage();
	int GetRepairCost();
	int GetRandomBurstNum();
	class UBlueprint* GetPickupBlueprint();
	struct FVector2D GetNPCAmmoDropRange();
	struct FVector GetMuzzleLocation();
	struct FVector GetMuzzleDirection();
	float GetMinVelocityForMeleeHitTimeDilationOnBike();
	float GetMinNumSecToLeaveVictimInStunState();
	float GetMinAccuracyRadius();
	TEnumAsByte<EMeleeType> GetMeleeWeaponType();
	float GetMeleeStaminaUsedPerHit();
	class UClass* GetMeleeDamageType();
	class UBendWeaponOverlapComponent* GetMeleeCollisionComponent();
	float GetMeleeChargingAnimPlayRate();
	class UAnimSequenceBase* GetMeleeChargingAnimation();
	bool GetMeleeCanUsePlayRateCurve();
	float GetMeleeButtonHoldForHardHitTime();
	class UAnimSequenceBase* GetMeleeArmAndReadyAnimationOnBike();
	int GetMaxSpareAmmo();
	float GetMaxRange();
	float GetMaxNumSecToLeaveVictimInStunState();
	float GetMaxAccuracyRadius();
	TEnumAsByte<EInventoryWeaponID> GetInventoryWeaponID();
	float GetIdealBlindfireRange();
	class UAnimSequence* GetFireAnimSequence();
	TEnumAsByte<EEquippableSlot> GetEquipHand();
	float GetCurrentDurabilityPercentage();
	float GetCurrentDurability();
	int GetCurrentAmmoInClip();
	float GetCurrentAccuracyPercentage();
	struct FVector GetCameraDamageStartLocation(const struct FVector& AimDir);
	int GetAmmoPerClip();
	struct FVector GetAimAtPoint();
	struct FVector GetAimAtDir();
	class AActor* GetAimAtActor();
	void ForceReduceCurrentAccuracyPercentage(float PercentReduction);
	void ForceRebuildWeaponsConfig();
	void ForceFire(bool PlayAnimations);
	class ABendWeaponPart* FindWeaponPart(TEnumAsByte<EWeaponHardPoint> HardPoint);
	bool DidHitAnyoneLastSwing();
	bool CheckMeleeSwingHit();
	bool CanMeleeAttackStunVictim();
	bool CanBeStoredInInventory();
	bool CanBeHolstered();
	bool AddPartToWeapon(TEnumAsByte<EWeaponPartID> PartID);
};


// Class BendGame.BendFiringPattern
// 0x0018 (0x0040 - 0x0028)
class UBendFiringPattern : public UDataAsset
{
public:
	struct FBendFiringPatternData                      FiringPattern;                                            // 0x0028(0x0018) (Edit, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendFiringPattern");
		return ptr;
	}

};


// Class BendGame.BendConfidenceSettings
// 0x0010 (0x0038 - 0x0028)
class UBendConfidenceSettings : public UDataAsset
{
public:
	TEnumAsByte<EConfidenceType>                       StartingConfidenceLevel;                                  // 0x0028(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EConfidenceType>                       MaxConfidenceLevel;                                       // 0x0029(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EConfidenceType>                       MinConfidenceLevel;                                       // 0x002A(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1];                                       // 0x002B(0x0001) MISSED OFFSET
	float                                              SuppressionMultiplier;                                    // 0x002C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UpdateConfidence : 1;                                     // 0x0030(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      HasBloodRage : 1;                                         // 0x0030(0x0001) (Edit)
	unsigned char                                      IgnoreFriendlyCasualties : 1;                             // 0x0030(0x0001) (Edit)
	unsigned char                                      IgnorePanickedFriends : 1;                                // 0x0030(0x0001) (Edit)
	unsigned char                                      IgnoreOwnInjuries : 1;                                    // 0x0030(0x0001) (Edit)
	unsigned char                                      IgnoreFriendInjuries : 1;                                 // 0x0030(0x0001) (Edit)
	unsigned char                                      IgnoreStatusEffects : 1;                                  // 0x0030(0x0001) (Edit)
	unsigned char                                      IgnoreSounds : 1;                                         // 0x0030(0x0001) (Edit)
	unsigned char                                      IgnoreDefendZone : 1;                                     // 0x0031(0x0001) (Edit)
	unsigned char                                      UseSpecialPlayerTreatment : 1;                            // 0x0031(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData01[0x6];                                       // 0x0032(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendConfidenceSettings");
		return ptr;
	}

};


// Class BendGame.BendHumanMeleeSettingsData
// 0x0020 (0x0048 - 0x0028)
class UBendHumanMeleeSettingsData : public UDataAsset
{
public:
	struct FBendHumanMeleeSettings                     MeleeSettings;                                            // 0x0028(0x001C) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0044(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendHumanMeleeSettingsData");
		return ptr;
	}

};


// Class BendGame.BendHumanOpenCombatSettings
// 0x0008 (0x0030 - 0x0028)
class UBendHumanOpenCombatSettings : public UDataAsset
{
public:
	float                                              MinOpenCombatFireTime;                                    // 0x0028(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxOpenCombatFireTime;                                    // 0x002C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendHumanOpenCombatSettings");
		return ptr;
	}

};


// Class BendGame.BendHumanReactionZoneSettings
// 0x0010 (0x0038 - 0x0028)
class UBendHumanReactionZoneSettings : public UDataAsset
{
public:
	float                                              PreCombatZoneRadius;                                      // 0x0028(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CombatZoneRadius;                                         // 0x002C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              RetreatZoneRadius;                                        // 0x0030(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0034(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendHumanReactionZoneSettings");
		return ptr;
	}

};


// Class BendGame.BendHumanGrenadeReactionSettings
// 0x0010 (0x0038 - 0x0028)
class UBendHumanGrenadeReactionSettings : public UDataAsset
{
public:
	float                                              ChanceToDodgeThrowables;                                  // 0x0028(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HopelessDistance;                                         // 0x002C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinReactionDelay;                                         // 0x0030(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxReactionDelay;                                         // 0x0034(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendHumanGrenadeReactionSettings");
		return ptr;
	}

};


// Class BendGame.BendHumanRangedCombatSettings
// 0x0050 (0x0078 - 0x0028)
class UBendHumanRangedCombatSettings : public UDataAsset
{
public:
	float                                              IdealRangeToEngageMin;                                    // 0x0028(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              IdealRangeToEngageMax;                                    // 0x002C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              EnterMeleeDistance;                                       // 0x0030(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              LeaveMeleeDistance;                                       // 0x0034(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TimeBetweenAttacksFromCoverMin;                           // 0x0038(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TimeBetweenAttacksFromCoverMax;                           // 0x003C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              Heroic_TimeBetweenAttacksFromCoverMin;                    // 0x0040(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              Heroic_TimeBetweenAttacksFromCoverMax;                    // 0x0044(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              Confident_TimeBetweenAttacksFromCoverMin;                 // 0x0048(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              Confident_TimeBetweenAttacksFromCoverMax;                 // 0x004C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              Neutral_TimeBetweenAttacksFromCoverMin;                   // 0x0050(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              Neutral_TimeBetweenAttacksFromCoverMax;                   // 0x0054(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              Worried_TimeBetweenAttacksFromCoverMin;                   // 0x0058(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              Worried_TimeBetweenAttacksFromCoverMax;                   // 0x005C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              Panicked_TimeBetweenAttacksFromCoverMin;                  // 0x0060(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              Panicked_TimeBetweenAttacksFromCoverMax;                  // 0x0064(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SMP_TimeBetweenAttacksFromCoverMin;                       // 0x0068(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SMP_TimeBetweenAttacksFromCoverMax;                       // 0x006C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TimeBetweenAttacksFromCover_SuppressionFactor;            // 0x0070(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0074(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendHumanRangedCombatSettings");
		return ptr;
	}

};


// Class BendGame.BendArchetypeDataBase
// 0x00E8 (0x0110 - 0x0028)
class UBendArchetypeDataBase : public UDataAsset
{
public:
	class UBendPawnArmorData*                          ArmorData;                                                // 0x0028(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TAssetPtr<class UBehaviorTree>                     BehaviorTree;                                             // 0x0030(0x0020) (Edit, DisableEditOnInstance)
	class UBendSkeletalMeshArrayData*                  SkeletalMeshes;                                           // 0x0050(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TAssetPtr<class UClass>                            Controller;                                               // 0x0058(0x0020) (Edit, DisableEditOnInstance)
	TAssetPtr<class UClass>                            Pawn;                                                     // 0x0078(0x0020) (Edit, DisableEditOnInstance)
	struct FBendRVOAvoidanceGroups                     RVOAvoidanceGroups;                                       // 0x0098(0x0030) (Edit, DisableEditOnInstance)
	TAssetPtr<class UBendConfidenceSettings>           Confidence;                                               // 0x00C8(0x0020) (Edit, DisableEditOnInstance)
	TArray<class UBendAnimMoveSet*>                    AnimVariations;                                           // 0x00E8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	float                                              RusherValue;                                              // 0x00F8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               RequiresAvailableRusherSlot;                              // 0x00FC(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00FD(0x0003) MISSED OFFSET
	float                                              OverrideMaxHealth;                                        // 0x0100(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              OverrideMaxHealthBright;                                  // 0x0104(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              OverrideMaxHealthDark;                                    // 0x0108(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x010C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendArchetypeDataBase");
		return ptr;
	}

};


// Class BendGame.BendHumanArchetypeData
// 0x00D0 (0x01E0 - 0x0110)
class UBendHumanArchetypeData : public UBendArchetypeDataBase
{
public:
	class UBehaviorTree*                               CombatBehaviorTree;                                       // 0x0110(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBehaviorTree*                               FindOpenCombatPositionBehaviorTree;                       // 0x0118(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBehaviorTree*                               BeginRangedCombatTree;                                    // 0x0120(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBehaviorTree*                               AmbientBehaviorTree;                                      // 0x0128(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBehaviorTree*                               RetreatBehaviorTree;                                      // 0x0130(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBehaviorTree*                               RetreatFailedBehaviorTree;                                // 0x0138(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBehaviorTree*                               FreakerEngagementBehaviorTree;                            // 0x0140(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBehaviorTree*                               InvestigationBehaviorTree;                                // 0x0148(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBehaviorTree*                               OnDamagedBehaviorTree;                                    // 0x0150(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBehaviorTree*                               FleeBehaviorTree;                                         // 0x0158(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBehaviorTree*                               SMPFleeBehaviorTree;                                      // 0x0160(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBehaviorTree*                               TargetedByFreakerBehaviorTree;                            // 0x0168(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBehaviorTree*                               FriendTargetedByFreakerCombatTree;                        // 0x0170(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBehaviorTree*                               FriendTargetedByFreakerNonCombatTree;                     // 0x0178(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBehaviorTree*                               EnticeFreakerNonCombatTree;                               // 0x0180(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBehaviorTree*                               BerzerkBehavior;                                          // 0x0188(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      AllowedToThrowGrenades : 1;                               // 0x0190(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      OverloadCombatStrafeRange : 1;                            // 0x0190(0x0001)
	unsigned char                                      AllowedToInvestigate : 1;                                 // 0x0190(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      AllowedToDoTeamBehaviors : 1;                             // 0x0190(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      ReactsToThrowables : 1;                                   // 0x0190(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      CanGrapple : 1;                                           // 0x0190(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      SpawnedByNPC : 1;                                         // 0x0190(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      DisableFlashlight : 1;                                    // 0x0190(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0191(0x0003) MISSED OFFSET
	float                                              CombatStrafeRange;                                        // 0x0194(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CombatStrafeBackwardsRange;                               // 0x0198(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              IdealFriendDistanceMin;                                   // 0x019C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              IdealFriendDistanceMax;                                   // 0x01A0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SpawnedGunDurability;                                     // 0x01A4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBendHumanGrenadeReactionSettings*           GrenadeReactionSettings;                                  // 0x01A8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBendHumanReactionZoneSettings*              ReactionZoneSettings;                                     // 0x01B0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<EAIMoveSpeed>                          CoverMoveSpeed;                                           // 0x01B8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EAIMoveSpeed>                          RushMoveSpeed;                                            // 0x01B9(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EAIMoveSpeed>                          EngagementSpeed;                                          // 0x01BA(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x5];                                       // 0x01BB(0x0005) MISSED OFFSET
	class UMotoCombatData*                             MotoCombatDataAsset;                                      // 0x01C0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UMotoRamFalloffData*                         MotoFalloffDataAsset;                                     // 0x01C8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UVehicleDamageInfo*                          MotoVehicleDamageAsset;                                   // 0x01D0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UMotoCombatVOData*                           MotoCombatVODataAsset;                                    // 0x01D8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendHumanArchetypeData");
		return ptr;
	}

};


// Class BendGame.BendHumanRangedArchetypeData
// 0x0118 (0x02F8 - 0x01E0)
class UBendHumanRangedArchetypeData : public UBendHumanArchetypeData
{
public:
	struct FArchetypeFiringOverrides                   FiringSettings;                                           // 0x01E0(0x0038) (Edit, DisableEditOnInstance)
	struct FArchetypeAimingOverrides                   AimingSettings;                                           // 0x0218(0x0088) (Edit, DisableEditOnInstance)
	float                                              ChanceToUseCover;                                         // 0x02A0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x02A4(0x0004) MISSED OFFSET
	class UBendHumanRangedCombatSettings*              RangedSettings;                                           // 0x02A8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              IdealRangeToEngageMin;                                    // 0x02B0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              IdealRangeToEngageMax;                                    // 0x02B4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              EnterMeleeDistance;                                       // 0x02B8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              LeaveMeleeDistance;                                       // 0x02BC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              Heroic_TimeBetweenAttacksFromCoverMin;                    // 0x02C0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              Heroic_TimeBetweenAttacksFromCoverMax;                    // 0x02C4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              Confident_TimeBetweenAttacksFromCoverMin;                 // 0x02C8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              Confident_TimeBetweenAttacksFromCoverMax;                 // 0x02CC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              Neutral_TimeBetweenAttacksFromCoverMin;                   // 0x02D0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              Neutral_TimeBetweenAttacksFromCoverMax;                   // 0x02D4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              Worried_TimeBetweenAttacksFromCoverMin;                   // 0x02D8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              Worried_TimeBetweenAttacksFromCoverMax;                   // 0x02DC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              Panicked_TimeBetweenAttacksFromCoverMin;                  // 0x02E0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              Panicked_TimeBetweenAttacksFromCoverMax;                  // 0x02E4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SMP_TimeBetweenAttacksFromCoverMin;                       // 0x02E8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SMP_TimeBetweenAttacksFromCoverMax;                       // 0x02EC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TimeBetweenAttacksFromCover_SuppressionFactor;            // 0x02F0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UseLaserOnWeapon : 1;                                     // 0x02F4(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      UseAimingSettings : 1;                                    // 0x02F4(0x0001)
	unsigned char                                      UseRangedDataAsset : 1;                                   // 0x02F4(0x0001)
	unsigned char                                      UnknownData01[0x3];                                       // 0x02F5(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendHumanRangedArchetypeData");
		return ptr;
	}

};


// Class BendGame.BendSniperArchetypeData
// 0x0070 (0x0368 - 0x02F8)
class UBendSniperArchetypeData : public UBendHumanRangedArchetypeData
{
public:
	float                                              TargetLeadTime;                                           // 0x02F8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SweepRadius;                                              // 0x02FC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxSearchSweepRadius;                                     // 0x0300(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinSweepAngleSpeed;                                       // 0x0304(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxSweepAngleSpeed;                                       // 0x0308(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SweepHorizontalSpeed;                                     // 0x030C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SweepHorizontalAmplitude;                                 // 0x0310(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SweepVerticalSpeed;                                       // 0x0314(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SweepVerticalAmplitude;                                   // 0x0318(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SweepRandomOffsetFactor;                                  // 0x031C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SweepRandomOffsetRecalculationPeriod;                     // 0x0320(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DamageInteruptionTime;                                    // 0x0324(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              LostAwarenessInteruptionTime;                             // 0x0328(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FireWeaponInteruptionTime;                                // 0x032C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TimeToLostAwarenessInteruption;                           // 0x0330(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TimeToStartLock;                                          // 0x0334(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinTimeAimToLock;                                         // 0x0338(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxTimeAimToLock;                                         // 0x033C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TimeToFire;                                               // 0x0340(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TimeToFireAgainstBike;                                    // 0x0344(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               InstantHitBulletsAgainstBike;                             // 0x0348(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0349(0x0003) MISSED OFFSET
	float                                              TimeToFireWhenLostLOS;                                    // 0x034C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxRemainingTimeToFireWhenLostLOS;                        // 0x0350(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TimeToStartSweepWhenLostLOS;                              // 0x0354(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               IsAllowedToRelocate;                                      // 0x0358(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0359(0x0003) MISSED OFFSET
	float                                              InCoverTime;                                              // 0x035C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               HasPerfectLaserAccuracy;                                  // 0x0360(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0361(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendSniperArchetypeData");
		return ptr;
	}

};


// Class BendGame.BendHumanRangedHeavyArchetypeData
// 0x0008 (0x0300 - 0x02F8)
class UBendHumanRangedHeavyArchetypeData : public UBendHumanRangedArchetypeData
{
public:
	TEnumAsByte<EAIMoveSpeed>                          AdvanceSpeed;                                             // 0x02F8(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               AdvanceThroughIdealRange;                                 // 0x02F9(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               FireDuringAdvance;                                        // 0x02FA(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x5];                                       // 0x02FB(0x0005) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendHumanRangedHeavyArchetypeData");
		return ptr;
	}

};


// Class BendGame.BendHumanMeleeArchetypeData
// 0x0018 (0x01F8 - 0x01E0)
class UBendHumanMeleeArchetypeData : public UBendHumanArchetypeData
{
public:
	class UBendHumanMeleeSettingsData*                 MeleeSettingsData;                                        // 0x01E0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBehaviorTree*                               MeleeCombatBehaviorTree;                                  // 0x01E8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBehaviorTree*                               ChargeBehaviorTree;                                       // 0x01F0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendHumanMeleeArchetypeData");
		return ptr;
	}

};


// Class BendGame.BendHumanRangedRusherArchetypeData
// 0x00D0 (0x02C8 - 0x01F8)
class UBendHumanRangedRusherArchetypeData : public UBendHumanMeleeArchetypeData
{
public:
	bool                                               OverrideIdealRange;                                       // 0x01F8(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x01F9(0x0003) MISSED OFFSET
	float                                              IdealRangeToEngageMin;                                    // 0x01FC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              IdealRangeToEngageMax;                                    // 0x0200(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0204(0x0004) MISSED OFFSET
	struct FArchetypeFiringOverrides                   FiringSettings;                                           // 0x0208(0x0038) (Edit, DisableEditOnInstance)
	struct FArchetypeAimingOverrides                   AimingSettings;                                           // 0x0240(0x0088) (Edit, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendHumanRangedRusherArchetypeData");
		return ptr;
	}

};


// Class BendGame.BendSuicideRipperArchetypeData
// 0x0038 (0x0230 - 0x01F8)
class UBendSuicideRipperArchetypeData : public UBendHumanMeleeArchetypeData
{
public:
	float                                              GrenadeRange;                                             // 0x01F8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinTimeBetweenGrenades;                                   // 0x01FC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FireDuration;                                             // 0x0200(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0204(0x0004) MISSED OFFSET
	class UBendAnimMoveSet*                            FireMoveSet;                                              // 0x0208(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<struct FDamageTypeModifier>                 DamageModifiers;                                          // 0x0210(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	float                                              CriticalHitDamageModifier;                                // 0x0220(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CriticalHitFocusModeDamageModifier;                       // 0x0224(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      FireStatusEffect;                                         // 0x0228(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendSuicideRipperArchetypeData");
		return ptr;
	}

};


// Class BendGame.BendFreakerArchetypeData
// 0x0000 (0x0110 - 0x0110)
class UBendFreakerArchetypeData : public UBendArchetypeDataBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendFreakerArchetypeData");
		return ptr;
	}

};


// Class BendGame.BendGunRetreatAnimData
// 0x0018 (0x0040 - 0x0028)
class UBendGunRetreatAnimData : public UDataAsset
{
public:
	TArray<struct FBendAnimSequenceDistanceGroup>      Groups;                                                   // 0x0028(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0038(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendGunRetreatAnimData");
		return ptr;
	}

};


// Class BendGame.BendHomeArea
// 0x0000 (0x0388 - 0x0388)
class ABendHomeArea : public AVolume
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendHomeArea");
		return ptr;
	}


	class UModel* GetBrush();
	bool ContainsPoint(const struct FVector& Point);
};


// Class BendGame.BendHumanController
// 0x05D0 (0x1470 - 0x0EA0)
class ABendHumanController : public ABendAIController
{
public:
	unsigned char                                      UnknownData00[0x68];                                      // 0x0EA0(0x0068) MISSED OFFSET
	class UClass*                                      NavFilter_Default;                                        // 0x0F08(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      NavFilter_AvoidRoad;                                      // 0x0F10(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      NavFilter_PreferRoad;                                     // 0x0F18(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FBendFiringPatternData                      DefaultFiringPattern;                                     // 0x0F20(0x0018) (Edit, BlueprintVisible)
	struct FBendFiringPatternData                      ChargedFiringPattern;                                     // 0x0F38(0x0018) (Edit, BlueprintVisible)
	struct FBendFiringPatternData                      LastKnownPositionFiringPattern;                           // 0x0F50(0x0018) (Edit, BlueprintVisible)
	struct FBendFiringPatternData                      BikeFiringPattern;                                        // 0x0F68(0x0018) (Edit, BlueprintVisible)
	struct FArchetypeFiringModifierSettings            FiringModifiers;                                          // 0x0F80(0x0010) (Edit, BlueprintVisible)
	float                                              MinFiringTimeInOpen;                                      // 0x0F90(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxFiringTimeInOpen;                                      // 0x0F94(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              RoamingOpenCombatTimer;                                   // 0x0F98(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0F9C(0x0004) MISSED OFFSET
	class UEnvQuery*                                   OpenCombatEQS;                                            // 0x0FA0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CombatStrafeRadius;                                       // 0x0FA8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CombatStrafeBackwardsRange;                               // 0x0FAC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               CanThrowGrenades;                                         // 0x0FB0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               CanThrowGrenadesAtBuddies;                                // 0x0FB1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               CanFireWithoutLoS;                                        // 0x0FB2(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x1];                                       // 0x0FB3(0x0001) MISSED OFFSET
	float                                              EnterMeleeDistance;                                       // 0x0FB4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              LeaveMeleeDistance;                                       // 0x0FB8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FBendHumanMeleeSettings                     MeleeSettings;                                            // 0x0FBC(0x001C) (Edit, BlueprintVisible)
	float                                              PreCombatZoneRadius;                                      // 0x0FD8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CombatZoneRadius;                                         // 0x0FDC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              RetreatZoneRadius;                                        // 0x0FE0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0FE4(0x0004) MISSED OFFSET
	class UBehaviorTree*                               RangedCombatTree;                                         // 0x0FE8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBehaviorTree*                               FindOpenCombatPositionTree;                               // 0x0FF0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBehaviorTree*                               RetreatTree;                                              // 0x0FF8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBehaviorTree*                               RetreatFailedTree;                                        // 0x1000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBehaviorTree*                               BeginRangedCombatTree;                                    // 0x1008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBehaviorTree*                               AmbientTree;                                              // 0x1010(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBehaviorTree*                               CloseCombatTree;                                          // 0x1018(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBehaviorTree*                               ChargeTree;                                               // 0x1020(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBehaviorTree*                               FreakerEngagementTree;                                    // 0x1028(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBehaviorTree*                               InvestigationTree;                                        // 0x1030(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBehaviorTree*                               FleeTree;                                                 // 0x1038(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBehaviorTree*                               SMPFleeTree;                                              // 0x1040(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBehaviorTree*                               TargetedByFreakerTree;                                    // 0x1048(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBehaviorTree*                               FriendTargetedByFreakerCombatTree;                        // 0x1050(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBehaviorTree*                               FriendTargetedByFreakerNonCombatTree;                     // 0x1058(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBehaviorTree*                               EnticeFreakerNonCombatTree;                               // 0x1060(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBehaviorTree*                               BerzerkBehavior;                                          // 0x1068(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBehaviorTree*                               OnDamagedTree;                                            // 0x1070(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               IsAllowedToInvestigate;                                   // 0x1078(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               ShouldFacePlayer;                                         // 0x1079(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x2];                                       // 0x107A(0x0002) MISSED OFFSET
	float                                              FacePlayerStartRadius;                                    // 0x107C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FacePlayerEndRadius;                                      // 0x1080(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FacePlayerAngle;                                          // 0x1084(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FacePlayerMaxTriggerAngle;                                // 0x1088(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MinTimeInSurrender;                                       // 0x108C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxTimeInSurrender;                                       // 0x1090(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinTimeToLeaveCower;                                      // 0x1094(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxTimeToLeaveCower;                                      // 0x1098(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<EAISurrenderState>                     CurrentSurrenderState;                                    // 0x109C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData05[0x3];                                       // 0x109D(0x0003) MISSED OFFSET
	float                                              AllowedCoverRoundAngle;                                   // 0x10A0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AllowedCoverRoundDistance;                                // 0x10A4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AllowedRushExitDistance;                                  // 0x10A8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinimumCoverExitDistance;                                 // 0x10AC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ExitCoverAngle;                                           // 0x10B0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ECoverExitAnim>                        CoverExitAnimType;                                        // 0x10B4(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               PlayCoverExitRunAfterCoverToIdle;                         // 0x10B5(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x2];                                       // 0x10B6(0x0002) MISSED OFFSET
	class UBendHumanCoverQuerySettings*                CoverQuerySettings;                                       // 0x10B8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MoveToCoverValidCoverAccumulationTime;                    // 0x10C0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MoveToCoverValidCoverDecayTime;                           // 0x10C4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              InCoverValidCoverAccumulationTime;                        // 0x10C8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              InCoverValidCoverDecayTime;                               // 0x10CC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              InCoverValidityComparisonScore;                           // 0x10D0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MovingToCoverValidityComparisonScore;                     // 0x10D4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CoverSearchRadius;                                        // 0x10D8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CoverSearchHalfHeight;                                    // 0x10DC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinNewCoverDist;                                          // 0x10E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CoverSearchMinDistanceFromUnavailableCover;               // 0x10E4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinCoverDistToThreat;                                     // 0x10E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CoverInvalidatedFromAboveAngle;                           // 0x10EC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<ECoverState>                           CurrentCoverState;                                        // 0x10F0(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ESemiAwareState>                       CurrentSemiAwareState;                                    // 0x10F1(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ESemiAwareActionType>                  CurrentActionType;                                        // 0x10F2(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               ForcedSemiAwareState;                                     // 0x10F3(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AimAtMovePosDist;                                         // 0x10F4(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FBendSemiAwareTuningValues                  SearchSettings;                                           // 0x10F8(0x001C) (Edit, BlueprintVisible, DisableEditOnInstance)
	unsigned char                                      UnknownData07[0x4];                                       // 0x1114(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    AlertedDelegate;                                          // 0x1118(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    WaypointReachedDelegate;                                  // 0x1128(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    SemiAwareDelegate;                                        // 0x1138(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData08[0x78];                                      // 0x1148(0x0078) MISSED OFFSET
	struct FScriptMulticastDelegate                    FacePlayerStartedDelegate;                                // 0x11C0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    FacePlayerEndedDelegate;                                  // 0x11D0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    CombatHuntStartDelegate;                                  // 0x11E0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    CombatHuntEndDelegate;                                    // 0x11F0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    InvestigateStartDelegate;                                 // 0x1200(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    InvestigateEndDelegate;                                   // 0x1210(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    AreaSearchStartDelegate;                                  // 0x1220(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    AreaSearchEndDelegate;                                    // 0x1230(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    EnterSelfSacrificeStateDelegate;                          // 0x1240(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ExitSelfSacrificeStateDelegate;                           // 0x1250(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    EnterWatchSelfSacrificeStateDelegate;                     // 0x1260(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ExitWatchSelfSacrificeStateDelegate;                      // 0x1270(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData09[0xA8];                                      // 0x1280(0x00A8) MISSED OFFSET
	float                                              ChanceToUseCover;                                         // 0x1328(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData10[0x144];                                     // 0x132C(0x0144) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendHumanController");
		return ptr;
	}


	bool WaypointSequenceCompleted();
	bool WaypointSequenceActive();
	bool TakeScriptedCover(const struct FVector& Location, bool RunNow, const struct FScriptDelegate& OnReachedCover, const struct FScriptDelegate& OnFailed, const struct FScriptDelegate& OnInvalidated, float SearchRadius);
	bool TakeClosestCoverSlot(const struct FVector& QueryPos, float Radius, TEnumAsByte<ECoverLeanDirection> LeanDirection);
	void StopWaypointSequence();
	void StartWaypointSequence(float AcceptableRadius, TEnumAsByte<EAIMoveSpeed> speedType);
	void SetWaypointSequenceSpeed(TEnumAsByte<EAIMoveSpeed> speedType);
	void SetWaypointSequenceAcceptableRadius(float AcceptableRadius);
	void SetWaypointSequence(class ABendAIWaypointSequence* WaypointSequence);
	void SetTargetSequenceIndex(int Index);
	void SetTargetSequence(class ABendAIWaypointSequence* TargetSequence);
	void SetShouldReactToThrowables(bool ShouldReact);
	void SetNavFilterToDefault();
	void SetNavFilterPreferRoads();
	void SetNavFilterOverride(class UClass* newFilter);
	void SetNavFilterAvoidRoads();
	void SetMoveToDZParams(bool bMoveDirectly, bool bRunNow);
	void SetHomePoint(const struct FVector& Point);
	void SetHomeArea(class ABendHomeArea* NewArea);
	void SetFortifications(TArray<class ABendFortificationZone*> Fortifications);
	void SetFireFocus(class AActor* FireFocus);
	void SetCoverState(TEnumAsByte<ECoverState> NewState);
	void SetCanShoot(bool Value);
	void SetCanMelee(bool Value);
	void SetAimAtActor(class AActor* TargetActor);
	bool ScriptedThrowThrowableAtPoint(const struct FVector& TargetPoint, TEnumAsByte<EInventoryWeaponID> throwableID, float OverideThrowSpeed, bool RunNow, const struct FScriptDelegate& OnFinishedThrow, const struct FScriptDelegate& OnFailed);
	bool ScriptedThrowThrowableAtActor(class AActor* TargetActor, TEnumAsByte<EInventoryWeaponID> throwableID, float OverideThrowSpeed, bool RunNow, const struct FScriptDelegate& OnFinishedThrow, const struct FScriptDelegate& OnFailed);
	bool ScriptedEnterVehicle(class AVehiclePawn* Vehicle, TEnumAsByte<EAIMoveSpeed> MoveSpeed, float AcceptableRadius, bool SlowApproach, bool RunNow, const struct FScriptDelegate& OnEnteredVehicle, const struct FScriptDelegate& OnFailed, const struct FName& SeatName);
	bool RunBehaviorTree(class UBehaviorTree* BTAsset);
	void ResumeWaypointSequenceAtIndex(int Index);
	void ResumeWaypointSequence(bool UseClosestWaypoint);
	void ResumeTargetSequence(int Index);
	void RequestAreaSearch(bool search);
	void RemoveFortification(class ABendFortificationZone* Fortification);
	void RemoveAimAtActor();
	void OnStatusEffectStarted(class UStatusEffect* NewStatusEffect);
	void OnPawnTakeDamage(float Damage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	bool IsSurrendering();
	bool IsSuicideArchetype();
	bool IsSniperArchetype();
	bool IsPathingOnWaypointSequence();
	bool IsOnFire();
	bool IsMeleeArchetype();
	bool IsInSelectedFortification();
	bool IsInPostCombat();
	bool IsHeavyArchetype();
	bool HomePointIsValid();
	bool HomeAreaIsValid();
	bool HasWaypointSequence();
	bool HasTargetSequence();
	bool HasSelectedFortification();
	class UClass* GetSuicideFireStatusEffect();
	struct FBendSemiAwareTuningValues GetSearchSettingsBP();
	int GetNumFortifications();
	class ABendAIWaypoint* GetNextWaypoint();
	class ABendAIWaypoint* GetNextNextWaypoint();
	struct FVector GetHomePoint();
	class ABendHomeArea* GetHomeArea();
	class ABendFortificationZone* GetFortification(int I);
	class AActor* GetAimAtActor();
	void FreezeTargetSequence(int Index);
	void ForceSemiAwareStateForTime(const struct FVector& semiAwarePos, float Duration, TEnumAsByte<ESemiAwareState> SemiAwareState, TEnumAsByte<ESemiAwareActionType> ActionType, bool forceAwareness, class ABendPawn* Target);
	void ForceSemiAwareState(const struct FVector& semiAwarePos, TEnumAsByte<ESemiAwareState> SemiAwareState, TEnumAsByte<ESemiAwareActionType> ActionType, bool forceAwareness, class ABendPawn* Target);
	bool CompareWaypointSequence(class ABendAIWaypointSequence* InWaypointSequence);
	void ClearHomePoint();
	void ClearHomeArea();
	void ClearFortifications();
	void AddFortifications(TArray<class ABendFortificationZone*> Fortifications);
	void AddFortification(class ABendFortificationZone* Fortification);
};


// Class BendGame.BendMotorcycleRiderController
// 0x0040 (0x14B0 - 0x1470)
class ABendMotorcycleRiderController : public ABendHumanController
{
public:
	class UBendVehicleAvoidanceComponent*              mVehicleAvoidanceComponent;                               // 0x1470(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	float                                              mMaxDriveSpeed;                                           // 0x1478(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2C];                                      // 0x147C(0x002C) MISSED OFFSET
	class AAIVehicleWaypoint*                          m_StartWaypoint;                                          // 0x14A8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendMotorcycleRiderController");
		return ptr;
	}


	void UpdateRubberbandParams(const struct FRubberbandParams& RubberbandParams);
	void UpdatePaceParameters(const struct FPaceParams& paceParameters);
	void StopRubberbanding();
	void StopPacing();
	void StopDrivingNoPath();
	bool StartRubberbanding(class ABendPawn* DistanceCheckActor, const struct FRubberbandParams& RubberbandParams);
	bool StartPacing(class ABendPawn* followPawn, const struct FPaceParams& paceParameters);
	void StartDrivingNoPath();
	void SetDriveDestinationPath(TArray<class AAIVehicleWaypoint*> WaypointList, TEnumAsByte<EVehicleAILoopType> LoopType);
	void SetDriveDestinationBendSplinePath(class ABendSplinePath* BendSplinePath);
	void SetDriveDestination(class AAIVehicleWaypoint* Destination);
	void SetAllowAutoCornerSpeed(bool bAllow);
	void Reset();
	bool PaceGroupFrontRunner(class UBendMotorcycleRiderGroup* motoGroup, const struct FPaceParams& paceParameters);
	bool PaceBehind(class ABendPawn* followPawn, const struct FPaceParams& paceParameters);
	bool PaceAlongside(class ABendPawn* followPawn, const struct FPaceParams& paceParemeters);
	bool PaceAhead(class ABendPawn* followPawn, const struct FPaceParams& paceParameters);
	bool IsOnBike();
	bool IsInDriverSeat();
	bool IsBendSplinePathOverrideSet();
	bool IsAutoCornerSpeedAllowed();
	struct FPaceParams GetPaceParameters();
	void FollowTargetNoPath(class ABendPawn* followPawn, const struct FPaceParams& PaceParams, bool Debug);
	void DriveToLocationOffSpline(class AAIVehicleWaypoint* Location);
	bool DriveToDestination();
	void ClearOffSplineLocation();
	void ClearBendSplinePath();
	void ChangePaceMode(class ABendPawn* followPawn, TEnumAsByte<EBendPaceType> paceType, const struct FPaceParams& paceParameters);
	void CancelDrive();
};


// Class BendGame.BendMotoCombatController
// 0x0080 (0x1530 - 0x14B0)
class ABendMotoCombatController : public ABendMotorcycleRiderController
{
public:
	struct FMotoCombatInfo                             MotoCombatSettings;                                       // 0x14B0(0x0040) (Edit, BlueprintVisible)
	struct FMotoCombatVOInfo                           MotoCombatVO;                                             // 0x14F0(0x0018) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x28];                                      // 0x1508(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendMotoCombatController");
		return ptr;
	}


	bool StopAttacking();
	bool StartAttacking();
	void OnExitAttackRange();
	void OnEnterAttackRange();
	TEnumAsByte<EeMotorcycleAttackMode> GetMotorcycleAttackMode();
};


// Class BendGame.BendBuddyController
// 0x0470 (0x19A0 - 0x1530)
class ABendBuddyController : public ABendMotoCombatController
{
public:
	class AVehiclePawn*                                Bike;                                                     // 0x1530(0x0008) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	struct FScriptMulticastDelegate                    BuddyTooFarEvent;                                         // 0x1538(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData00[0x10];                                      // 0x1548(0x0010) MISSED OFFSET
	struct FScriptMulticastDelegate                    BuddyStartLeadingEvent;                                   // 0x1558(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    BuddyStartWaitingEvent;                                   // 0x1568(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    BuddyKeepWaitingEvent;                                    // 0x1578(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    BuddyResumeLeadingEvent;                                  // 0x1588(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    BuddyLeadBlockedEvent;                                    // 0x1598(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	float                                              MinLeadWaitingTimer;                                      // 0x15A8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxLeadWaitingTimer;                                      // 0x15AC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              LeadWaitingTimeBeforeTurningToBuddy;                      // 0x15B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              LeadWaitingMaxAngleToBuddy;                               // 0x15B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3E8];                                     // 0x15B8(0x03E8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBuddyController");
		return ptr;
	}


	void VOEventDisable(TEnumAsByte<EBuddyVOEvent> Event);
	void SetUseCrouchLogic(bool enable);
	void SetTargetDummy(class AActor* Actor);
	void SetPreventDamage(bool enable);
	void SetMoveSpeed(float SpeedMin, float SpeedMax);
	void SetLeadZone(float RadiusInner, float RadiusOuter);
	void SetLeadDistance(float LeadDistance, float WaitDistance);
	void SetLeadBehavior(class ABendAIWaypointSequence* WaypointSequence, float LeadDistance, float WaitDistance, float ResumeAfterWaitDelay, bool DisableWaiting, bool MaintainLeadDistance, TEnumAsByte<EAIMoveSpeed> SpeedTypeMin, TEnumAsByte<EAIMoveSpeed> SpeedTypeMax, TEnumAsByte<EBuddyEnemyEngagement> InterruptLevel);
	void SetIdleBehavior(float IdleRadius, TEnumAsByte<EBuddyEnemyEngagement> InterruptLevel);
	void SetForceDetectable(bool Detectable);
	void SetFollowZone(float FollowRadius, float MaxSpeedDistance);
	void SetFollowIdleZone(float Unused, float RadiusOuter);
	void SetFollowEnable(bool enable);
	void SetFollowBehavior(float FollowRadius, float MaxSpeedDistance, TEnumAsByte<EAIMoveSpeed> SpeedTypeMax, float IdleRadius, TEnumAsByte<EBuddyEnemyEngagement> InterruptLevel);
	void SetCrouchWithPlayer(bool enable);
	void SetBuddy(class AActor* buddyActor);
	void SetBehaviorMode(TEnumAsByte<EBuddyBehavior> Mode);
	void SetBehaviorInterruptLevel(TEnumAsByte<EBuddyEnemyEngagement> State);
	void SetBeAggressive(bool NewValue);
	void SetAllowWeaponFire(bool Allow);
	void SetAllowStealth(bool Allow);
	void SetAllowMeleeCombat(bool Allow);
	void SetAllowCombat(bool Allow);
	void OnWeaponThrownAtPlayerHandler(class ABendWeapon* Weapon, class ABendPawn* InstigatorPawn, const struct FVector& LandingLocation);
	void OnPlayerMadeNoiseHandler(float Loudness, class APawn* NoiseInstigator, const struct FVector& NoiseLocation, TEnumAsByte<EBendSoundEventType> SoundEvent);
	void OnPlayerKilledEnemyHandler(class ABendPawn* VictimPawn, class UDamageType* DamageType, int XPValue, class AActor* DamageCauser, bool WasCrit);
	void OnPlayerDiedHandler(float ActualDamage, class AController* Killer, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, const struct FName& BoneName, const struct FVector& Momentum, class UDamageType* DamageType, class AActor* DamageCauser);
	void OnPlayerDamagedHandler(float ActualDamage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void OnPlayerBrutalKillEndedHandler(class ABendPawn* Attacker, class ABendPawn* Victim);
	void OnNestFireStartedHandler(class AActor* Nest, class AActor* FireStarter);
	void OnNestFireEndedHandler(class AActor* Nest);
	void OnGrappledBeginHandler(class ABendPawn* Attacker, bool SkipButtonEvent);
	void NotifyBuddyTooFar();
	void LookAtBuddyWhileInConverstion(bool enable, float DistanceLimit, float AngleLimit, float AngleTolerance);
	void LookAtActorWithinDistance(class AActor* Actor, float DistanceLimit, float AngleLimit, float AngleTolerance);
	void LookAtActorForTime(class AActor* Actor, float Time, float AngleLimit, float AngleTolerance);
	bool IsHidingCoverInRange();
	float GetMoveSpeedMin();
	float GetMoveSpeedMax();
	bool GetFollowMovementSucceeded();
	bool GetFollowEnabled();
	float GetCombatDistanceLimit();
	class AActor* GetBuddy();
	TEnumAsByte<EBuddyBehavior> GetBehaviorMode();
	float GetAngleToMyBuddy();
};


// Class BendGame.BendSniperController
// 0x0060 (0x14D0 - 0x1470)
class ABendSniperController : public ABendHumanController
{
public:
	float                                              AimTime;                                                  // 0x1470(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x5C];                                      // 0x1474(0x005C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendSniperController");
		return ptr;
	}


	void SetAimTime(float Time);
};


// Class BendGame.XpecEventPawnAIController
// 0x0050 (0x0EF0 - 0x0EA0)
class AXpecEventPawnAIController : public ABendAIController
{
public:
	unsigned char                                      UnknownData00[0x50];                                      // 0x0EA0(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.XpecEventPawnAIController");
		return ptr;
	}


	void FleeToLocation(const struct FVector& targetLoc);
	void CancelFlee();
};


// Class BendGame.VehicleMovementComponentNoDriveLegacy
// 0x0008 (0x0450 - 0x0448)
class UVehicleMovementComponentNoDriveLegacy : public UWheeledVehicleMovementComponent4W
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0448(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.VehicleMovementComponentNoDriveLegacy");
		return ptr;
	}

};


// Class BendGame.BendMovementComp_VehicleNoDrive
// 0x0E90 (0x12E0 - 0x0450)
class UBendMovementComp_VehicleNoDrive : public UVehicleMovementComponentNoDriveLegacy
{
public:
	class UBendVehicleDriveData*                       DefaultDriveParams;                                       // 0x0450(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBendVehicleDriveData*                       AutoDriveParams;                                          // 0x0458(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBendVehicleDriveData*                       BeingRammedDriveParams;                                   // 0x0460(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBendVehicleDriveData*                       LaneRestrictionDriveParams;                               // 0x0468(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AIMinBrakeLightThreshold;                                 // 0x0470(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AIPacingMinBrakeLightThreshold;                           // 0x0474(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AIMinBrakeLightThresholdTime;                             // 0x0478(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AIBrakeLightCooldown;                                     // 0x047C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0480(0x0010) MISSED OFFSET
	float                                              RearWheelLongSlipThreshold;                               // 0x0490(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              RearWheelLatSlipThreshold;                                // 0x0494(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ManualDriftFadeInTime;                                    // 0x0498(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ManaulDriftFadeOutTime;                                   // 0x049C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ManualDriftMinimumTime;                                   // 0x04A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ManualDriftCounterSteerScale;                             // 0x04A4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<struct FBendVehicleMovementComponentSkillInfo> SkillInfo;                                                // 0x04A8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditFixedSize, ZeroConstructor)
	float                                              MaxSpeed;                                                 // 0x04B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x04BC(0x0008) MISSED OFFSET
	float                                              MaxSpeedBoosted;                                          // 0x04C4(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              MaxSpeedBoostedScale;                                     // 0x04C8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxSpeedOutOfFuel;                                        // 0x04CC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxSpeedReverse;                                          // 0x04D0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              VehicleMoveSlowlySpeed;                                   // 0x04D4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              SpeedMatchTime_Reverse;                                   // 0x04D8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SpeedMatchTime_Boosted;                                   // 0x04DC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SpeedMatchTime_DecelDefault;                              // 0x04E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SpeedMatchTime_AccelDefault;                              // 0x04E4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SpeedMatchTime_AccelTryingToSlipTires;                    // 0x04E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SpeedMatch_DeltaThrottlePerDeltaAccel;                    // 0x04EC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxAcceleration;                                          // 0x04F0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bEnforceMaxAccelerationDuringDrift : 1;                   // 0x04F4(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x3];                                       // 0x04F5(0x0003) MISSED OFFSET
	float                                              ThrottleFineControlZoneBroadness;                         // 0x04F8(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              SteeringFineControlZoneBroadness;                         // 0x04FC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bUseSoftSteeringRate_InsteadOfSteeringRate;               // 0x0500(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUseNewDriftSystem : 1;                                   // 0x0501(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bAllowGearShiftDuringDrift : 1;                           // 0x0501(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bEaseInThrottleAfterGearShiftDuringDrift : 1;             // 0x0501(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData03[0x2];                                       // 0x0502(0x0002) MISSED OFFSET
	struct FVehicleInputRate                           SoftSteeringRateRegularLegacyUsedByNpcs;                  // 0x0504(0x0008) (Edit)
	struct FVehicleInputRate                           SoftSteeringRateRegular;                                  // 0x050C(0x0008) (Edit)
	struct FVehicleInputRate                           SoftSteeringRateDrifting;                                 // 0x0514(0x0008) (Edit)
	float                                              ThrottleSuppressionForGearShift0To1;                      // 0x051C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              BurnoutLingerTime;                                        // 0x0520(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              BoostReserve0To1;                                         // 0x0524(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              BoostDepletionRate;                                       // 0x0528(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BoostRechargeRate;                                        // 0x052C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BoostMinReserveRequiredForActivation0To1;                 // 0x0530(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BoostMinTimeBetweenActivations;                           // 0x0534(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxAngularSpeedDegrees_Regular;                           // 0x0538(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxAngularSpeedDegrees_Drift;                             // 0x053C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DriftDriverForwardWeightShiftDistance;                    // 0x0540(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DriftAdditionalSteeringScaleAtZeroThrottle;               // 0x0544(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DriftMinThrottleInputForPast90CounterSteer;               // 0x0548(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DriftMinVelocityVsDirectionDeviationForDriftSteering_0To1;// 0x054C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DriftSteeringAlphaNaturalFrequency_Rising;                // 0x0550(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DriftSteeringAlphaNaturalFrequency_Falling;               // 0x0554(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DriftSteeringAlphaNaturalFrequency_WalkingVehicleBackward;// 0x0558(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DriftSpeedThreshold;                                      // 0x055C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DriftAngle;                                               // 0x0560(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x0564(0x0004) MISSED OFFSET
	struct FRuntimeFloatCurve                          WaterDragFactorDepthVsDrag;                               // 0x0568(0x0080) (Edit, DisableEditOnInstance)
	struct FRuntimeFloatCurve                          ManualDriftRearTireFrictionScaleVsSpeed;                  // 0x05E8(0x0080) (Edit, DisableEditOnInstance)
	struct FRuntimeFloatCurve                          SteerAngleCurve;                                          // 0x0668(0x0080) (Edit, DisableEditOnInstance)
	struct FRuntimeFloatCurve                          PhysicsThrottle0To1VsInputThrottle0To1;                   // 0x06E8(0x0080) (Edit)
	struct FRuntimeFloatCurve                          PhysicsBrake0To1VsInputBrake0To1;                         // 0x0768(0x0080) (Edit)
	unsigned char                                      bEnableStationaryBurnoutsAnd180TurnsInNewDriftSystem : 1; // 0x07E8(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData05[0x3];                                       // 0x07E9(0x0003) MISSED OFFSET
	unsigned char                                      bHasReverseGear : 1;                                      // 0x07EC(0x0001) (Edit)
	unsigned char                                      UnknownData06[0x3];                                       // 0x07ED(0x0003) MISSED OFFSET
	struct FRuntimeFloatCurve                          AutoDriveSteerAngleCurve;                                 // 0x07F0(0x0080) (Edit, DisableEditOnInstance)
	struct FVehicleRamInfo                             VehicleRamSettings;                                       // 0x0870(0x0024) (Edit, DisableEditOnInstance)
	bool                                               ApplyTireDragAtWheelCenter;                               // 0x0894(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0x3];                                       // 0x0895(0x0003) MISSED OFFSET
	float                                              WaterSweepDistance;                                       // 0x0898(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              WaterSweepRadius;                                         // 0x089C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     WaterSweepOffset;                                         // 0x08A0(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bAllowAdjustmentForDeepWater;                             // 0x08AC(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData08[0x3];                                       // 0x08AD(0x0003) MISSED OFFSET
	float                                              SpeedLimiter_MaxSpeedFractionThreshold_Low;               // 0x08B0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              SpeedLimiter_MaxSpeedFractionThreshold_High;              // 0x08B4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              SpeedLimiter_EngineDampingMultiplier_Mid;                 // 0x08B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              SpeedLimiter_EngineDampingMultiplier_High;                // 0x08BC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              SpeedLimiter_MaxSpeedInterpolationRate;                   // 0x08C0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              SpeedLimiter_MaxSpeedDeterminedByMaxAccel_InterpolationRate;// 0x08C4(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              SpeedLimiter_MaxSpeedDeterminedByMaxAccel_InterpolationRate_NEW;// 0x08C8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              SpeedLimiter_ManualDriftDragConstant;                     // 0x08CC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FRuntimeFloatCurve                          SpeedLimiterScaleVsMaxSpeedFraction;                      // 0x08D0(0x0080) (Edit, DisableEditOnInstance)
	struct FRuntimeFloatCurve                          SpeedLimiterScaleVsMaxSpeedFraction_DoingWheelie;         // 0x0950(0x0080) (Edit, DisableEditOnInstance)
	float                                              MaxRegularBrakeTorque;                                    // 0x09D0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxRegularHandBrakeTorque;                                // 0x09D4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxDriftBrakeTorque;                                      // 0x09D8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxCriticalBrakeTorque;                                   // 0x09DC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              BrakeModifierExponentForCounteringGearRatioEffects;       // 0x09E0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              BrakeModifierScaleWhenTurning_NoThrottle;                 // 0x09E4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              BrakeModifierScaleWhenTurning_FullThrottle;               // 0x09E8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ClutchStrengthCurveWhenNotThrottling_LowSpeedPoint;       // 0x09EC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ClutchStrengthCurveWhenNotThrottling_HighSpeedPoint;      // 0x09F0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData09[0x9C];                                      // 0x09F4(0x009C) MISSED OFFSET
	struct FBendReplicatedVehicleState                 BendReplicatedState;                                      // 0x0A90(0x0002) (Net, Transient)
	unsigned char                                      UnknownData10[0x16];                                      // 0x0A92(0x0016) MISSED OFFSET
	struct FBendVehicleSoundRpmEvaluator               SoundRpmEvaluator;                                        // 0x0AA8(0x02D8) (Edit)
	struct FBendRVOAvoidanceGroups                     DefaultRVOAvoidanceGroups;                                // 0x0D80(0x0030) (Edit)
	unsigned char                                      UnknownData11[0x288];                                     // 0x0DB0(0x0288) MISSED OFFSET
	struct FBendVehicleDriftInfo                       DriftInfo;                                                // 0x1038(0x00C0) (Edit)
	struct FScriptMulticastDelegate                    OnWheelieStateChange;                                     // 0x10F8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData12[0x124];                                     // 0x1108(0x0124) MISSED OFFSET
	float                                              StopTimeBeforeEnteringPushMode;                           // 0x122C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData13[0x8];                                       // 0x1230(0x0008) MISSED OFFSET
	float                                              MaxStableSteepnessAngle;                                  // 0x1238(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData14[0x4];                                       // 0x123C(0x0004) MISSED OFFSET
	float                                              DesiredSpeedWhenPushedByCharacter;                        // 0x1240(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxForceWhenPushedByCharacter;                            // 0x1244(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData15[0x98];                                      // 0x1248(0x0098) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendMovementComp_VehicleNoDrive");
		return ptr;
	}


	void WaitFinishAsyncPhysicsQueries();
	void TriggerAsyncPhysicsQueries(float DeltaTime);
	bool SwitchLights(bool bSwitchOn);
	bool StopEngine();
	bool StartEngine();
	void SetWheelType(TEnumAsByte<EVehicleBikeWheelIndex> WheelId, class UClass* WheelType);
	void SetTireType(TEnumAsByte<EVehicleBikeWheelIndex> WheelId, class UTireType* TireType);
	void SetTireSlipInput(float TireSlip);
	void SetTiltRightInput(float TiltRight);
	void SetTiltForwardInput(float TiltForward);
	void SetSteerAngleCurve(class UCurveFloat* NewSteerAngleCurve);
	void SetNoLean(bool bInLean);
	void SetMaxSpeedOverride(float overrideSpeed);
	void SetForceVehicleMoveSlowly(bool bMoveSlowly);
	void SetForceStop(bool bStop);
	void ResetRevInPlace();
	void RemoveMaxSpeedOverride();
	void OverrideSteeringInput(bool bOverride, float InSteeringInput);
	void OnMeshHit(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	bool IsWheelEnabled(int WheelIndex);
	bool IsTryingToSlowDownForStationaryBurnout();
	bool IsTryingToSlipRearWheels();
	bool IsTryingToDrift();
	bool IsTryingToDoStationaryBurnout_GivenSpeedThreshold(float SpeedThreshold);
	bool IsTryingToDoStationaryBurnout();
	bool IsTryingToDoRollingBurnout_GivenSpeedThreshold(float SpeedThreshold);
	bool IsTryingToDoRollingBurnout();
	bool IsTryingToDoBurnout_GivenSpeedThreshold(float SpeedThreshold);
	bool IsTryingToDoBurnout();
	bool IsRawThrottleEngaged();
	bool IsOutOfFuel();
	bool IsFullyDamaged();
	bool IsEngineOn();
	bool IsDrifting();
	bool IsBoostEngaged();
	bool IsBoostAvailable();
	bool IsActualThrottleEngaged_BeforeZeroedOutForGearShift();
	bool IsActualThrottleEngaged();
	bool HasTireContact(int WheelIndex);
	bool HasAnyTireContact();
	bool HasAllTiresContact();
	float GetWheelRotationSpeed_Rpm(int WheelIndex);
	float GetWheelRotationSpeed_RadiansPerSecond(int WheelIndex);
	struct FVector GetWheelCenterVelocity(int WheelIndex);
	struct FVector GetWheelCenter(int WheelIndex);
	float GetWheelBase();
	float GetVisualSteeringSpeed();
	float GetVisualSteeringNeg1To1();
	float GetTireSlippageTimesLoadTimesSpeed0To1(int WheelIndex, float NormalizedTireLoadWhenSlippageIs1, float TireSpeedWhenSlippageIs1);
	float GetTireSlippageTimesLoad0To1(int WheelIndex, float NormalizedTireLoadWhenSlippageIs1);
	float GetTireSlippage0To1(int WheelIndex);
	float GetTireNormalizedLoadNEW(const struct FBendVehicleWheelIndex& WheelIndex);
	float GetTireNormalizedLoadAverage();
	float GetTireNormalizedLoad(int WheelIndex);
	float GetTireLongitudinalSlippageNeg1To1(int WheelIndex);
	float GetTireLongitudinalSlippage(const struct FBendVehicleWheelIndex& WheelIndex);
	float GetTireLateralSlippageNeg1To1(int WheelIndex);
	struct FVector GetTireContactVelocity(int WheelIndex);
	struct FVector GetTireContactTangentRelativeVelocity(int WheelIndex);
	class USceneComponent* GetTireContactSurfaceSceneComponent(int WheelIndex);
	float GetTireContactSlopeAngleAverage();
	float GetTireContactSlopeAngle(const struct FBendVehicleWheelIndex& WheelIndex);
	TEnumAsByte<EBendVehicleRoadSurfaceType> GetTireContactRoadSurfaceType(int WheelIndex);
	struct FVector GetTireContactRelativeVelocity(int WheelIndex);
	struct FVector GetTireContactPoint(int WheelIndex);
	class ABendSurfaceType* GetTireContactPhysicsMaterialSurfaceTypeData(int WheelIndex, float WetnessThreshold0To1);
	TEnumAsByte<EPhysicalSurface> GetTireContactPhysicsMaterialSurfaceType(int WheelIndex);
	class UPhysicalMaterial* GetTireContactPhysicsMaterial(int WheelIndex);
	struct FVector GetTireContactNormalRelativeVelocity(int WheelIndex);
	struct FVector GetTireContactNormal(int WheelIndex);
	struct FVector GetTireContactLongitudinalDir(int WheelIndex);
	struct FVector GetTireContactLateralDir(int WheelIndex);
	struct FVector GetTireContactGroundVelocity(int WheelIndex);
	float GetThrottle0To1_BeforeZeroedOutForGearShift_DEPRECATED();
	float GetSteeringNeg1To1();
	bool GetStationaryAutoBrake();
	float GetRpmForSound();
	float GetRawThrottle0To1_WithReleaseOnGearShift();
	float GetRawThrottle0To1();
	int GetNumberOfWheels();
	int GetMaxEnabledWheels();
	float GetFrontWheelCasterAngle_Radians();
	float GetFrontWheelCasterAngle();
	float GetForwardDistanceTraveledLastFrame();
	bool GetForceStop();
	struct FVector GetFloorWaterLocation();
	float GetFloorWaterDepth();
	float GetEngineRotationSpeedRpm();
	int GetDriverSkillLevel(TEnumAsByte<EBendVehicleRoadSurfaceType> RoadSurfaceType);
	class AActor* GetDriver();
	struct FBendVehicleWheelIndex GetCarRearRightWheelIndex();
	struct FBendVehicleWheelIndex GetCarRearLeftWheelIndex();
	struct FBendVehicleWheelIndex GetCarFrontRightWheelIndex();
	struct FBendVehicleWheelIndex GetCarFrontLeftWheelIndex();
	float GetBrakeInput0To1();
	float GetBrake0To1(int WheelIndex);
	struct FBendVehicleWheelIndex GetBikeRearWheelIndex();
	struct FBendVehicleWheelIndex GetBikeFrontWheelIndex();
	float GetActualThrottle0To1_BeforeZeroedOutForGearShift();
	float GetActualThrottle0To1();
	void ForceBoostSound(bool bForceBoostSound);
	void EnableAutoThrottle(bool AutoThrottleEnabled, float AutoThrottleInput);
	void BendServerUpdateState(bool bInIsTryingToSlipRearWheels, bool bInIsBoostEngaged);
	float BendGetForwardSpeed();
	float BendGetEngineRotationSpeed();
	float ApplyDamageModifierToMaxSpeed(float maxSpeedIn);
	void AdjustBoostReserve(float BoostReserveAdjustment);
};


// Class BendGame.BendMovementComp_VehicleDrive4W
// 0x0390 (0x1670 - 0x12E0)
class UBendMovementComp_VehicleDrive4W : public UBendMovementComp_VehicleNoDrive
{
public:
	bool                                               bUseAutoGears;                                            // 0x12E0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bAutoDownShiftOnlyWhenThrottlingOrEngineRpmIsBelowFirstToNeutralAutoShiftThreshold;// 0x12E1(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bGearSwitchEvent : 1;                                     // 0x12E2(0x0001) (BlueprintVisible, BlueprintReadOnly, Transient)
	unsigned char                                      bGearSwitchEventUp : 1;                                   // 0x12E2(0x0001) (BlueprintVisible, BlueprintReadOnly, Transient)
	unsigned char                                      bGearSwitchEventDown : 1;                                 // 0x12E2(0x0001) (BlueprintVisible, BlueprintReadOnly, Transient)
	unsigned char                                      UnknownData00[0x5];                                       // 0x12E3(0x0005) MISSED OFFSET
	float                                              TireLoadFilter_MinNormalisedLoad_New;                     // 0x12E8(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              TireLoadFilter_MaxNormalisedLoad;                         // 0x12EC(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              TireLoadFilter_MaxFilteredNormalisedLoad;                 // 0x12F0(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              MaxShiftRpm;                                              // 0x12F4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              GearReversalSpeedThresholdAtFullBrake;                    // 0x12F8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              GearSwitchTime;                                           // 0x12FC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              GearSwitchThrottleEaseInTime;                             // 0x1300(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x1304(0x0004) MISSED OFFSET
	TArray<struct FFloatPair>                          RearWheelSlip_RearFrictionFactor_CurvePairs;              // 0x1308(0x0010) (Edit, ZeroConstructor)
	TArray<struct FFloatPair>                          RearWheelSlip_FrontFrictionFactor_CurvePairs;             // 0x1318(0x0010) (Edit, ZeroConstructor)
	int                                                MaxForwardGear;                                           // 0x1328(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                DownshiftMaxForwardGear;                                  // 0x132C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TimeInGearScaleAtLowerThrottle;                           // 0x1330(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TimeInGearScaleWhenBoosting;                              // 0x1334(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DownshiftToFirstGearSpeedThreshold;                       // 0x1338(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x133C(0x0004) MISSED OFFSET
	TArray<struct FGearSetup>                          GearSetups;                                               // 0x1340(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	bool                                               bIncludeShiftRpmsForBoostModeWhenCalculatingMaxShiftRpm;  // 0x1350(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x7];                                       // 0x1351(0x0007) MISSED OFFSET
	TArray<struct FThrottleCurvePairs>                 ThrottleCurvePairsList;                                   // 0x1358(0x0010) (Edit, ZeroConstructor)
	TArray<struct FFloatPair>                          WheelSlipThrottleCurvePairs;                              // 0x1368(0x0010) (Edit, ZeroConstructor)
	TArray<struct FFloatPair>                          BoostThrottleCurvePairs;                                  // 0x1378(0x0010) (Edit, ZeroConstructor)
	struct FRichCurve                                  RearWheelSlip_RearFrictionFactor_Curve;                   // 0x1388(0x0078)
	struct FRichCurve                                  RearWheelSlip_FrontFrictionFactor_Curve;                  // 0x1400(0x0078)
	TArray<struct FThrottleCurve>                      ThrottleCurveList;                                        // 0x1478(0x0010) (ZeroConstructor)
	struct FRichCurve                                  WheelSlipThrottleCurve;                                   // 0x1488(0x0078)
	struct FRichCurve                                  BoostThrottleCurve;                                       // 0x1500(0x0078)
	TArray<struct FGearSetup>                          GearSetupsInternal;                                       // 0x1578(0x0010) (ZeroConstructor)
	struct FBendVehicleAutoShifter                     AutoShifter;                                              // 0x1588(0x0010) (Edit)
	float                                              ClutchStrength;                                           // 0x1598(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0xD4];                                      // 0x159C(0x00D4) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendMovementComp_VehicleDrive4W");
		return ptr;
	}


	void SetGearSwitchTime(float Time);
	void SetGearSwitchThrottleEaseInTime(float Time);
	float GetGearSwitchTime();
	float GetGearSwitchThrottleEaseInTime();
};


// Class BendGame.BendMovementComp_Bike
// 0x04A0 (0x1B10 - 0x1670)
class UBendMovementComp_Bike : public UBendMovementComp_VehicleDrive4W
{
public:
	TArray<struct FFloatPair>                          LeanAngleCurvePairs;                                      // 0x1670(0x0010) (ZeroConstructor)
	struct FRichCurve                                  LeanAngleCurve;                                           // 0x1680(0x0078)
	float                                              MaxLeanAngle;                                             // 0x16F8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxLeanAngleManualDrifting;                               // 0x16FC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              SmoothedLeanAngleDeltaToTarget_WhenTargetZero_NaturalFrequency;// 0x1700(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              SmoothedLeanAngleDeltaToTarget_WhenTargetNonZero_NaturalFrequency;// 0x1704(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              SmoothedLeanAngleTarget_WhenTargetZero_NaturalFrequency;  // 0x1708(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              SmoothedLeanAngleTarget_WhenTargetNonZero_NaturalFrequency;// 0x170C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              SmoothedLeanAngleTarget_DampingRatio;                     // 0x1710(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              SmoothedLeanAngleTargetForUpperTorso_WhenTargetZero_NaturalFrequency;// 0x1714(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              SmoothedLeanAngleTargetForUpperTorso_WhenTargetNonZero_NaturalFrequency;// 0x1718(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              SmoothedLeanAngleTargetForUpperTorso_DampingRatio;        // 0x171C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              SmoothedLeanAngleTargetForHead_WhenTargetZero_NaturalFrequency;// 0x1720(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              SmoothedLeanAngleTargetForHead_WhenTargetNonZero_NaturalFrequency;// 0x1724(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              SmoothedLeanAngleSpeed_SpringConstant;                    // 0x1728(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              VehicleInAir_Roll_NaturalFrequency;                       // 0x172C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              VehicleInAir_Pitch_NaturalFrequency;                      // 0x1730(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              VehicleInAir_Pitch_NaturalFrequency_AutoDrive;            // 0x1734(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              VehicleInAir_Yaw_NaturalFrequency;                        // 0x1738(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bEnableLeanAndAutoBalance : 1;                            // 0x173C(0x0001) (Edit)
	unsigned char                                      bAIEnableLeanAndAutoBalance : 1;                          // 0x173C(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x173D(0x0003) MISSED OFFSET
	struct FRuntimeFloatCurve                          FrictionScaleVsSpeed_Regular;                             // 0x1740(0x0080) (Edit, BlueprintVisible, DisableEditOnInstance)
	struct FRuntimeFloatCurve                          FrictionScaleVsSpeed_DriftingFullThrottle;                // 0x17C0(0x0080) (Edit, BlueprintVisible, DisableEditOnInstance)
	struct FRuntimeFloatCurve                          FrictionScaleVsSpeed_DriftingZeroThrottle;                // 0x1840(0x0080) (Edit, BlueprintVisible, DisableEditOnInstance)
	struct FRuntimeFloatCurve                          FrictionModifierVsSlopeAngle;                             // 0x18C0(0x0080) (Edit, BlueprintVisible, DisableEditOnInstance)
	float                                              MaxAngularAcceleration_RadiansPerSec;                     // 0x1940(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      bEnableKickstandLogic : 1;                                // 0x1944(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x1945(0x0003) MISSED OFFSET
	float                                              VehicleRestLeanAngle;                                     // 0x1948(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              VehicleEnterLeanDelay;                                    // 0x194C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              VehicleExitLeanDelay;                                     // 0x1950(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x1BC];                                     // 0x1954(0x01BC) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendMovementComp_Bike");
		return ptr;
	}


	float GetSmoothedLeanAngleTargetNeg1To1();
	float GetSmoothedLeanAngleTargetForUpperTorsoNeg1To1();
	float GetSmoothedLeanAngleTargetForUpperTorso_Radians();
	float GetSmoothedLeanAngleTargetForUpperTorso_Degrees();
	float GetSmoothedLeanAngleTargetForHeadNeg1To1();
	float GetSmoothedLeanAngleTargetForHead_Radians();
	float GetSmoothedLeanAngleTargetForHead_Degrees();
	float GetSmoothedLeanAngleTarget_Radians();
	float GetSmoothedLeanAngleTarget_Degrees();
	float GetSmoothedLeanAngleSpeed();
	float GetSmoothedLeanAngleDeltaToTargetNeg1To1();
	float GetSmoothedLeanAngleDeltaToTarget_Radians();
	float GetSmoothedLeanAngleDeltaToTarget_Degrees();
	float GetLeanAngleNeg1To1();
	float GetLeanAngle();
	bool AreWheelsProperlySetUp();
};


// Class BendGame.BendRoad
// 0x00B0 (0x00D8 - 0x0028)
class UBendRoad : public UObject
{
public:
	unsigned char                                      UnknownData00[0xB0];                                      // 0x0028(0x00B0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendRoad");
		return ptr;
	}

};


// Class BendGame.BendAIDriveComponent
// 0x0540 (0x0610 - 0x00D0)
class UBendAIDriveComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x00D0(0x0008) MISSED OFFSET
	struct FRuntimeFloatCurve                          CornerDetectionSpeedCurve;                                // 0x00D8(0x0080) (Edit, DisableEditOnInstance)
	class UBendRoad*                                   Road;                                                     // 0x0158(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              m_MinThrottleCutTime;                                     // 0x0160(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_MaxThrottleCutTime;                                     // 0x0164(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_lateralSlippingThreshold;                               // 0x0168(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_DisablePhysicsOuterRadius;                              // 0x016C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_ReEnablePhysicsInnerRadius;                             // 0x0170(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bUseHelperForces;                                         // 0x0174(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bAllow180Turn;                                            // 0x0175(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x0176(0x0002) MISSED OFFSET
	float                                              autoDriveLookbackDeadzone;                                // 0x0178(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              StopAtSpringFrequency;                                    // 0x017C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              StopAtSpringDampingRatio;                                 // 0x0180(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0184(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnStoppedAtLocationWaypoint;                              // 0x0188(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnStoppedAtLocationBendSplinePath;                        // 0x0198(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData03[0x468];                                     // 0x01A8(0x0468) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAIDriveComponent");
		return ptr;
	}


	void TeleportVehicle(int PointsAhead);
	void StartPhysicsTest(const struct FAIPhysicsTest& testParameters);
	void SetUserThrottleMaxSpeed(float MaxSpeed);
	void SetBendSplinePathOverride(class ABendSplinePath* BendSplinePath);
	void SetAllowAutoCornerSpeed(bool bAllow);
	void RemoveUserThrottleMaxSpeed();
	void RemoveSteeringWhileStopped();
	void ReleaseStopAt_StartMovingAgain();
	void OnFailsafeNotify(TEnumAsByte<EAIVehicleFailsafe> failsafeReason);
	bool IsPlayerControlled();
	bool IsPerforming180();
	bool IsInFrontOf(class AActor* TargetActor);
	bool IsBendSplinePathOverrideActive();
	bool IsAutoCornerSpeedAllowed();
	bool InitNavigationPath(class AAIVehicleWaypoint* Start, class AAIVehicleWaypoint* End);
	struct FVector GetRoadDirection(const struct FVector& StartLocation);
	struct FVector GetPointOnRoad(float distanceFromMe, int lane);
	float GetDistAlongSpline(class AActor* TargetActor);
	void EnableIntelligentAutoDriveDebugMenu(bool bUseAutoThrottle);
	void EnableIntelligentAutoDriveDebug(bool bEnable);
	void EnableIntelligentAutoDrive(bool bUseAutoThrottle);
	void DisableIntelligentAutoDriveDebugMenu();
	void DisableIntelligentAutoDrive();
	void ClearPath();
	void ClearBendSplinePathOverride();
	void AimSteeringWhileStopped(const struct FVector& TargetLocation);
};


// Class BendGame.BendAIDriveNoPhysicsComponent
// 0x0018 (0x00E8 - 0x00D0)
class UBendAIDriveNoPhysicsComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x00D0(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAIDriveNoPhysicsComponent");
		return ptr;
	}

};


// Class BendGame.BendAIFlowLineRepellerComponent
// 0x0038 (0x0108 - 0x00D0)
class UBendAIFlowLineRepellerComponent : public UActorComponent
{
public:
	float                                              StartTime;                                                // 0x00D0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	float                                              IntermediateTime;                                         // 0x00D4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              EndTime;                                                  // 0x00D8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              IntermediateTimeIntensityScale;                           // 0x00DC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              LineEndpoint0_OuterRadius;                                // 0x00E0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              LineEndpoint1_OuterRadius;                                // 0x00E4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              InnerRadiusFractionOfOuterRadius;                         // 0x00E8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ZeroRadiusIntensity;                                      // 0x00EC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              InnerRadiusIntensity;                                     // 0x00F0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              OuterRadiusIntensity;                                     // 0x00F4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	unsigned char                                      bAffectsIndividuals : 1;                                  // 0x00F8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bAffectsCrowds : 1;                                       // 0x00F8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData00[0xF];                                       // 0x00F9(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAIFlowLineRepellerComponent");
		return ptr;
	}


	void AddLine(const struct FVector& LineEndpoint0, const struct FVector& LineEndpoint1);
};


// Class BendGame.BendAIFlowSphereRepellerComponent
// 0x0020 (0x0230 - 0x0210)
class UBendAIFlowSphereRepellerComponent : public USceneComponent
{
public:
	float                                              InnerRadius;                                              // 0x0210(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              OuterRadius;                                              // 0x0214(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              CenterIntensity;                                          // 0x0218(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              InnerIntensity;                                           // 0x021C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bDrawDebug : 1;                                           // 0x0220(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData00[0xF];                                       // 0x0221(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAIFlowSphereRepellerComponent");
		return ptr;
	}


	class UBendAIFlowSphereRepellerComponent* STATIC_BendCreateAIFlowSphereRepellerComponent_WithParentComponent(class USceneComponent* ParentComponent, const struct FName& InAttachSocketName);
	class UBendAIFlowSphereRepellerComponent* STATIC_BendCreateAIFlowSphereRepellerComponent_WithActor(class AActor* Actor, const struct FName& InAttachSocketName);
};


// Class BendGame.BendAITargetEvaluator
// 0x0000 (0x0028 - 0x0028)
class UBendAITargetEvaluator : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAITargetEvaluator");
		return ptr;
	}

};


// Class BendGame.BendAITargetEvaluatorDefault
// 0x0070 (0x0098 - 0x0028)
class UBendAITargetEvaluatorDefault : public UBendAITargetEvaluator
{
public:
	struct FBendAITargetEvaluatorDefaultWeights        TargetScoringWeights;                                     // 0x0028(0x005C) (Edit, DisableEditOnInstance)
	float                                              InnerTargetingDistance;                                   // 0x0084(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              OuterTargetingDistance;                                   // 0x0088(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinTimeSinceBeingAttacked;                                // 0x008C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxTimeSinceBeingAttacked;                                // 0x0090(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxHealthPercentBeingAttacked;                            // 0x0094(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAITargetEvaluatorDefault");
		return ptr;
	}

};


// Class BendGame.BendAIGDTComponent
// 0x0010 (0x0840 - 0x0830)
class UBendAIGDTComponent : public UGameplayDebuggingComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0830(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAIGDTComponent");
		return ptr;
	}


	void OnCycleDetailsViewBackwards();
	void OnCycleDetailsView();
};


// Class BendGame.BendAIGDTHUDComponent
// 0x0000 (0x0438 - 0x0438)
class ABendAIGDTHUDComponent : public AGameplayDebuggingHUDComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAIGDTHUDComponent");
		return ptr;
	}

};


// Class BendGame.BendAimAssistData
// 0x0150 (0x0178 - 0x0028)
class UBendAimAssistData : public UDataAsset
{
public:
	struct FAimAssistManualAimSettings                 ManualAimSettings;                                        // 0x0028(0x0150) (Edit, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAimAssistData");
		return ptr;
	}

};


// Class BendGame.BendAimAssistTargeter
// 0x0028 (0x00F8 - 0x00D0)
class UBendAimAssistTargeter : public UActorComponent
{
public:
	bool                                               bDebug;                                                   // 0x00D0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x27];                                      // 0x00D1(0x0027) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAimAssistTargeter");
		return ptr;
	}

};


// Class BendGame.BendPlayerAimAssistTargeter
// 0x0010 (0x0108 - 0x00F8)
class UBendPlayerAimAssistTargeter : public UBendAimAssistTargeter
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x00F8(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendPlayerAimAssistTargeter");
		return ptr;
	}

};


// Class BendGame.BendVehicleAimAssistTargeter
// 0x0028 (0x0120 - 0x00F8)
class UBendVehicleAimAssistTargeter : public UBendAimAssistTargeter
{
public:
	float                                              ManualAimTargetSelectionRadius;                           // 0x00F8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bRenderCurrentTarget;                                     // 0x00FC(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x23];                                      // 0x00FD(0x0023) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendVehicleAimAssistTargeter");
		return ptr;
	}

};


// Class BendGame.BendAISetup
// 0x0100 (0x0128 - 0x0028)
class UBendAISetup : public UDataAsset
{
public:
	float                                              MaxLosDist;                                               // 0x0028(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              MaxLosDist_Frenzied;                                      // 0x002C(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              LosDistForImmediateGainAwareness;                         // 0x0030(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              LosDistForMaxTimeTillGainAwareness;                       // 0x0034(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxLosAngle;                                              // 0x0038(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxLosAngle_Frenzied;                                     // 0x003C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              LosHeightOffset;                                          // 0x0040(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NavHeightOffset;                                          // 0x0044(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxLosShareDist;                                          // 0x0048(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxCountdownToFrenzied;                                   // 0x004C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                NumUpdatesPerFrameForUpdatingLosAndNavOfClosestMembersToTarget;// 0x0050(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                MinFramesBetweenUpdatesForUpdatingLosAndNavOfClosestMembersToTarget;// 0x0054(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                NumLosAndNavRoundRobinUpdatesPerFrame;                    // 0x0058(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TimeTillStopPursuingLastSeenPositionAfterTargetStartHiding;// 0x005C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TimeTillLoseInterestAfterLostSight;                       // 0x0060(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxTimeTillGainAwarenessAfterGainSight;                   // 0x0064(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              WanderRadiusNotHunting;                                   // 0x0068(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              WanderRadiusHunting;                                      // 0x006C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      bIgnoreNavMesh : 1;                                       // 0x0070(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      bUseFlowAversionInConjunctionWithNavMeshTraversal : 1;    // 0x0070(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0071(0x0003) MISSED OFFSET
	float                                              WanderFlowIntensity;                                      // 0x0074(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              WaypointFlowIntensity;                                    // 0x0078(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      DeadBodyDebugDraw : 1;                                    // 0x007C(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData01[0x3];                                       // 0x007D(0x0003) MISSED OFFSET
	float                                              DeadBodyNearRadius;                                       // 0x0080(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DeadBodyFarRadius;                                        // 0x0084(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DeadBodyZeroIntensity;                                    // 0x0088(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DeadBodyNearIntensity;                                    // 0x008C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      FireDebugDraw : 1;                                        // 0x0090(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0091(0x0003) MISSED OFFSET
	float                                              FireBufferDistance;                                       // 0x0094(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FireCenterIntensity;                                      // 0x0098(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FireEdgeIntensity;                                        // 0x009C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      FactionDebugDraw : 1;                                     // 0x00A0(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData03[0x3];                                       // 0x00A1(0x0003) MISSED OFFSET
	float                                              FactionBufferDistance;                                    // 0x00A4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FactionCenterIntensity;                                   // 0x00A8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FactionEdgeIntensity;                                     // 0x00AC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      HumanDebugDraw : 1;                                       // 0x00B0(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData04[0x3];                                       // 0x00B1(0x0003) MISSED OFFSET
	float                                              HumanNearRadius;                                          // 0x00B4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HumanFarRadius;                                           // 0x00B8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HumanZeroIntensity;                                       // 0x00BC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HumanNearIntensity;                                       // 0x00C0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HumanUnfrienziedNearRadius;                               // 0x00C4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HumanUnfrienziedFarRadius;                                // 0x00C8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HumanUnfrenziedZeroIntensity;                             // 0x00CC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HumanUnfrenziedNearIntensity;                             // 0x00D0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      FoodDebugDraw : 1;                                        // 0x00D4(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData05[0x3];                                       // 0x00D5(0x0003) MISSED OFFSET
	float                                              FoodNearRadius;                                           // 0x00D8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FoodFarRadius;                                            // 0x00DC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FoodZeroIntensity;                                        // 0x00E0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FoodNearIntensity;                                        // 0x00E4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      BreadcrumbDebugDraw : 1;                                  // 0x00E8(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData06[0x3];                                       // 0x00E9(0x0003) MISSED OFFSET
	float                                              BreadcrumbMaxTime;                                        // 0x00EC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              BreadcrumbStartRadius;                                    // 0x00F0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              BreadcrumbEndRadius;                                      // 0x00F4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              BreadcrumbZeroIntensity;                                  // 0x00F8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              BreadcrumbHalfRadiusIntensity;                            // 0x00FC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      SoundDebugDraw : 1;                                       // 0x0100(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData07[0x3];                                       // 0x0101(0x0003) MISSED OFFSET
	float                                              SoundNearRadius;                                          // 0x0104(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SoundFarRadius;                                           // 0x0108(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SoundZeroIntensity;                                       // 0x010C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SoundNearIntensity;                                       // 0x0110(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SoundMaxTime;                                             // 0x0114(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      LineRepellerDebugDraw : 1;                                // 0x0118(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData08[0x3];                                       // 0x0119(0x0003) MISSED OFFSET
	float                                              ThresholdLosCosAngle;                                     // 0x011C(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              ThresholdLosCosAngle_Frenzied;                            // 0x0120(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData09[0x4];                                       // 0x0124(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAISetup");
		return ptr;
	}

};


// Class BendGame.BendAISquad
// 0x01F8 (0x0220 - 0x0028)
class UBendAISquad : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnCombatBegin;                                            // 0x0030(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnCombatEnd;                                              // 0x0040(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnAddedMember;                                            // 0x0050(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnRemovedMember;                                          // 0x0060(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnKilledMember;                                           // 0x0070(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnMemberKilledEnemy;                                      // 0x0080(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class UBlackboardComponent*                        BlackboardComponent;                                      // 0x0090(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UBehaviorTreeComponent*                      BehaviorTreeComponent;                                    // 0x0098(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData01[0x180];                                     // 0x00A0(0x0180) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAISquad");
		return ptr;
	}


	void OnThreatDiedOrDestroyed(class ABendPawn* Pawn, bool bDied);
};


// Class BendGame.BendAISquadHuman
// 0x0168 (0x0388 - 0x0220)
class UBendAISquadHuman : public UBendAISquad
{
public:
	unsigned char                                      UnknownData00[0x168];                                     // 0x0220(0x0168) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAISquadHuman");
		return ptr;
	}

};


// Class BendGame.BendAISystem
// 0x0008 (0x0110 - 0x0108)
class UBendAISystem : public UAISystem
{
public:
	class UBendAITeamSystem*                           TeamSystem;                                               // 0x0108(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAISystem");
		return ptr;
	}

};


// Class BendGame.BendAITeamSystem
// 0x0188 (0x01B0 - 0x0028)
class UBendAITeamSystem : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnPlayerNotMoving;                                        // 0x0030(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0040(0x0010) MISSED OFFSET
	struct FBendAITeamPawnObserver                     PlayerObserver;                                           // 0x0050(0x0090) (Edit, DisableEditOnInstance)
	float                                              CoverLockoutDuration;                                     // 0x00E0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DamagedLockoutDuration;                                   // 0x00E4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DeathLockoutDuration;                                     // 0x00E8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x00EC(0x0004) MISSED OFFSET
	TArray<class UBendAITeam*>                         Teams;                                                    // 0x00F0(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData03[0xB0];                                      // 0x0100(0x00B0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAITeamSystem");
		return ptr;
	}


	void OnDLCChallengeQuit(TEnumAsByte<EMissionIDs> MissionID);
};


// Class BendGame.BendAITeam
// 0x0180 (0x01A8 - 0x0028)
class UBendAITeam : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnCombatBegin;                                            // 0x0030(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnCombatEnd;                                              // 0x0040(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnAddedMember;                                            // 0x0050(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnRemovedMember;                                          // 0x0060(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnKilledMember;                                           // 0x0070(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnMemberKilledEnemy;                                      // 0x0080(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	TArray<TEnumAsByte<EAIFactionType>>                FactionTypes;                                             // 0x0090(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TAssetPtr<class UClass>                            AwarenessModelClassReference;                             // 0x00A0(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	TAssetPtr<class UClass>                            ThreatEvaluatorClassReference;                            // 0x00C0(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	TAssetPtr<class UClass>                            TargetEvaluatorClassReference;                            // 0x00E0(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	TAssetPtr<class UBehaviorTree>                     BehaviorTreeAsset;                                        // 0x0100(0x0020) (Edit, DisableEditOnInstance)
	class UBendAITeamAwarenessModel*                   AwarenessModel;                                           // 0x0120(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UBendAIThreatEvaluator*                      ThreatEvaluator;                                          // 0x0128(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UBendAITargetEvaluator*                      CurrentTargetEvaluator;                                   // 0x0130(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UBendAITargetEvaluator*                      PreviousTargetEvaluator;                                  // 0x0138(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x20];                                      // 0x0140(0x0020) MISSED OFFSET
	class UBehaviorTree*                               SquadBehaviorTree;                                        // 0x0160(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TArray<class UBendAISquad*>                        Squads;                                                   // 0x0168(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData02[0x30];                                      // 0x0178(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAITeam");
		return ptr;
	}


	void SetTempTargetEvaluator(TAssetPtr<class UClass> InTargetEvaluatorClass);
	void OnMemberDiedOrDestroyed(class ABendPawn* Pawn, bool bDied);
	void OnEnemyKilledByMember(class ABendPawn* MemberPawn, class ABendPawn* EnemyPawn);
	void ClearTempTargetEvaluator();
};


// Class BendGame.BendAITeamAnimal
// 0x0018 (0x01C0 - 0x01A8)
class UBendAITeamAnimal : public UBendAITeam
{
public:
	float                                              EatGorePileDistance;                                      // 0x01A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x01AC(0x0004) MISSED OFFSET
	TArray<TEnumAsByte<EAIFactionType>>                FactionsToEat;                                            // 0x01B0(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAITeamAnimal");
		return ptr;
	}


	class UBendWarningGroup* GetWarningGroup();
};


// Class BendGame.BendAITeamFreakerBase
// 0x0008 (0x01B0 - 0x01A8)
class UBendAITeamFreakerBase : public UBendAITeam
{
public:
	float                                              EatGorePileDistance;                                      // 0x01A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x01AC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAITeamFreakerBase");
		return ptr;
	}

};


// Class BendGame.BendAITeamNewt
// 0x0048 (0x01F8 - 0x01B0)
class UBendAITeamNewt : public UBendAITeamFreakerBase
{
public:
	struct FBendAITeamNewtDistractionSettings          DistractionSettings;                                      // 0x01B0(0x0040) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x8];                                       // 0x01F0(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAITeamNewt");
		return ptr;
	}

};


// Class BendGame.BendAITeamHuman
// 0x0F90 (0x1138 - 0x01A8)
class UBendAITeamHuman : public UBendAITeam
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x01A8(0x0010) MISSED OFFSET
	struct FBendAITeamHumanAdvanceSettings             AdvanceSettings;                                          // 0x01B8(0x0040) (Edit, DisableEditOnInstance)
	struct FBendAITeamHumanCombatSettings              CombatSettings;                                           // 0x01F8(0x0128) (Edit, DisableEditOnInstance)
	struct FBendAITeamHumanCombatHuntSettings          CombatHuntSettings;                                       // 0x0320(0x0150) (Edit, DisableEditOnInstance)
	struct FBendAITeamHumanHideFromSniperSettings      HideFromSniperSettings;                                   // 0x0470(0x0058) (Edit, DisableEditOnInstance)
	struct FBendAITeamHumanShootFromCoverSettings      ShootFromCoverSettings;                                   // 0x04C8(0x000C) (Edit, DisableEditOnInstance)
	struct FBendAITeamHumanSearchSettings              SearchSettings;                                           // 0x04D4(0x0008) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData01[0x4];                                       // 0x04DC(0x0004) MISSED OFFSET
	struct FBendAITeamHumanGrenadeSettings             GrenadeSettings;                                          // 0x04E0(0x0048) (Edit, DisableEditOnInstance)
	struct FBendAITeamHumanRetreatSettings             RetreatSettings;                                          // 0x0528(0x0188) (Edit, DisableEditOnInstance)
	struct FBendAITeamHumanMoveToDZSettings            MoveToDZSettings;                                         // 0x06B0(0x00B8) (Edit, DisableEditOnInstance)
	struct FBendAITeamHumanGetBackToFrontLineSettings  GetBackToFrontLineSettings;                               // 0x0768(0x00B8) (Edit, DisableEditOnInstance)
	struct FBendAITeamHumanPressAttackSettings         PressAttackSettings;                                      // 0x0820(0x0268) (Edit, DisableEditOnInstance)
	struct FBendAITeamHumanGrenadeAttackSettings       GrenadeAttackSettings;                                    // 0x0A88(0x00B0) (Edit, DisableEditOnInstance)
	struct FBendAITeamHumanCoveringSettings            CoveringSettings;                                         // 0x0B38(0x000C) (Edit, DisableEditOnInstance)
	struct FBendAITeamHumanHoldSettings                HoldSettings;                                             // 0x0B44(0x0014) (Edit, DisableEditOnInstance)
	struct FBendAITeamHumanAreaSearchSettings          AreaSearchSettings;                                       // 0x0B58(0x0298) (Edit, DisableEditOnInstance)
	struct FBendAITeamHumanDisentangleFrontLineSettings DisentangleFrontLineSettings;                             // 0x0DF0(0x00E8) (Edit, DisableEditOnInstance)
	struct FBendAITeamHumanNoMansLandSettings          NoMansLandSettings;                                       // 0x0ED8(0x0064) (Edit, DisableEditOnInstance)
	struct FBendAITeamHumanSquadSettings               SquadSettings;                                            // 0x0F3C(0x0014) (Edit, DisableEditOnInstance)
	bool                                               UseSingleSquad;                                           // 0x0F50(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               IgnoreAttractors;                                         // 0x0F51(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x1E6];                                     // 0x0F52(0x01E6) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAITeamHuman");
		return ptr;
	}


	void OnExplosion(class AActor* ExplodingActor);
};


// Class BendGame.BendAITeamAwarenessModel
// 0x0000 (0x0028 - 0x0028)
class UBendAITeamAwarenessModel : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAITeamAwarenessModel");
		return ptr;
	}

};


// Class BendGame.BendAITeamAwarenessModelDefault
// 0x0010 (0x0038 - 0x0028)
class UBendAITeamAwarenessModelDefault : public UBendAITeamAwarenessModel
{
public:
	float                                              MinAwarenessForSharedTarget;                              // 0x0028(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxDistForSharedTarget;                                   // 0x002C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MinTimeSinceFirstHandAwareness;                           // 0x0030(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bShareAwareNoTarget;                                      // 0x0034(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bShareAwareSameTarget;                                    // 0x0035(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bNoMinAwarenessForSquadMates;                             // 0x0036(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0037(0x0001) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAITeamAwarenessModelDefault");
		return ptr;
	}

};


// Class BendGame.BendAITeamAwarenessModelHuman
// 0x0030 (0x0058 - 0x0028)
class UBendAITeamAwarenessModelHuman : public UBendAITeamAwarenessModel
{
public:
	float                                              MinSharedResponseDelay;                                   // 0x0028(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxSharedResponseDelay;                                   // 0x002C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinAwarenessForSharedTarget;                              // 0x0030(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SharedSemiAwarenessRadius;                                // 0x0034(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SharedSemiAwarenessHalfHeight;                            // 0x0038(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SharedFullAwarenessRadius;                                // 0x003C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SharedFullAwarenessHalfHeight;                            // 0x0040(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x14];                                      // 0x0044(0x0014) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAITeamAwarenessModelHuman");
		return ptr;
	}

};


// Class BendGame.BendAITeamBlueprintLibrary
// 0x0000 (0x0028 - 0x0028)
class UBendAITeamBlueprintLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAITeamBlueprintLibrary");
		return ptr;
	}


	class UBendAITeamSystem* STATIC_GetTeamSystemForTeam(class UBendAITeam* Team);
	TArray<class ABendPawn*> STATIC_GetTeamMembers(class UBendAITeam* Team);
	int STATIC_GetTeamMemberNum(class UBendAITeam* Team);
	class UBendAITeam* STATIC_GetTeamForMember(class ABendPawn* Pawn);
};


// Class BendGame.BendAITeamSettings
// 0x0020 (0x0058 - 0x0038)
class UBendAITeamSettings : public UDeveloperSettings
{
public:
	struct FStringClassReference                       TeamSystemClassReference;                                 // 0x0038(0x0010) (Edit, ZeroConstructor, Config, GlobalConfig)
	TArray<struct FStringClassReference>               TeamClassReferences;                                      // 0x0048(0x0010) (Edit, ZeroConstructor, Config, GlobalConfig)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAITeamSettings");
		return ptr;
	}

};


// Class BendGame.BendAIThreatEvaluator
// 0x0000 (0x0028 - 0x0028)
class UBendAIThreatEvaluator : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAIThreatEvaluator");
		return ptr;
	}

};


// Class BendGame.BendAIThreatEvaluatorDefault
// 0x0020 (0x0048 - 0x0028)
class UBendAIThreatEvaluatorDefault : public UBendAIThreatEvaluator
{
public:
	struct FBendAIThreatEvaluatorDefaultWeights        ThreatScoringWeights;                                     // 0x0028(0x0014) (Edit, DisableEditOnInstance)
	float                                              InnerThreatDistance;                                      // 0x003C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              OuterThreatDistance;                                      // 0x0040(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0044(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAIThreatEvaluatorDefault");
		return ptr;
	}

};


// Class BendGame.BendAIVehicleDebugComponent
// 0x0010 (0x00E0 - 0x00D0)
class UBendAIVehicleDebugComponent : public UActorComponent
{
public:
	bool                                               bEnableAll;                                               // 0x00D0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00D1(0x0003) MISSED OFFSET
	int                                                PointsAhead;                                              // 0x00D4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bEnableSplinePathDraw;                                    // 0x00D8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bEnableSteeringDraw;                                      // 0x00D9(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bEnableCornerDraws;                                       // 0x00DA(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bEnableCornerTTY;                                         // 0x00DB(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bEnableBlockedLaneDraws;                                  // 0x00DC(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bEnableNewPathDraw;                                       // 0x00DD(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bEnableDebugSpeed;                                        // 0x00DE(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x00DF(0x0001) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAIVehicleDebugComponent");
		return ptr;
	}


	void TurnOffAll();
};


// Class BendGame.BendAIVehicleFailsafe
// 0x0058 (0x0128 - 0x00D0)
class UBendAIVehicleFailsafe : public UActorComponent
{
public:
	struct FScriptMulticastDelegate                    OnFailsafeNotify;                                         // 0x00D0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               bFailsafeEnabled;                                         // 0x00E0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bLaneTeleportEnabled;                                     // 0x00E1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x00E2(0x0002) MISSED OFFSET
	float                                              CollisionSecondsBack;                                     // 0x00E4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                CollisionGrindLimitCount;                                 // 0x00E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ForwardProgressSpeedMin;                                  // 0x00EC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ForwardProgressTimeWithoutProgress;                       // 0x00F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              InLaneTimeLimit;                                          // 0x00F4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x30];                                      // 0x00F8(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAIVehicleFailsafe");
		return ptr;
	}


	bool IsGridingOnCollision();
	bool InLane();
};


// Class BendGame.BendAIWaypoint
// 0x0010 (0x0358 - 0x0348)
class ABendAIWaypoint : public AActor
{
public:
	TEnumAsByte<EBendAIExcitationLevel>                ExcitationLevel;                                          // 0x0348(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0349(0x0003) MISSED OFFSET
	float                                              AcceptableRadius;                                         // 0x034C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ApproachRadius;                                           // 0x0350(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EAIMoveSpeed>                          MaxApproachSpeed;                                         // 0x0354(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0355(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAIWaypoint");
		return ptr;
	}


	class ABendPOI* GetPOI();
};


// Class BendGame.BendAIWaypointPOI
// 0x0008 (0x0360 - 0x0358)
class ABendAIWaypointPOI : public ABendAIWaypoint
{
public:
	TWeakObjectPtr<class ABendPOI>                     POI;                                                      // 0x0358(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAIWaypointPOI");
		return ptr;
	}

};


// Class BendGame.BendSniperTargetWaypoint
// 0x0008 (0x0360 - 0x0358)
class ABendSniperTargetWaypoint : public ABendAIWaypoint
{
public:
	float                                              SweepRadius;                                              // 0x0358(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              WaitTime;                                                 // 0x035C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendSniperTargetWaypoint");
		return ptr;
	}

};


// Class BendGame.BendAIWaypointSequence
// 0x0020 (0x0368 - 0x0348)
class ABendAIWaypointSequence : public AActor
{
public:
	TArray<class ABendAIWaypoint*>                     Waypoints;                                                // 0x0348(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	unsigned char                                      bIsLooping : 1;                                           // 0x0358(0x0001) (Edit)
	unsigned char                                      bSkipClosestWaypointWhenPickingInitialWaypoint : 1;       // 0x0358(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0359(0x0003) MISSED OFFSET
	float                                              EndSequenceApproachRadius;                                // 0x035C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EAIMoveSpeed>                          EndSequenceMaxApproachSpeed;                              // 0x0360(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0361(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAIWaypointSequence");
		return ptr;
	}

};


// Class BendGame.BendAIWaypointSequenceDrawComponent
// 0x0010 (0x05E0 - 0x05D0)
class UBendAIWaypointSequenceDrawComponent : public UPrimitiveComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x05D0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAIWaypointSequenceDrawComponent");
		return ptr;
	}

};


// Class BendGame.XpecAmbientBlockerBoxComp
// 0x0010 (0x0250 - 0x0240)
class UXpecAmbientBlockerBoxComp : public UBendAmbientBlockerComp
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0240(0x0004) MISSED OFFSET
	bool                                               m_bDebugDrawBox;                                          // 0x0244(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0xB];                                       // 0x0245(0x000B) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.XpecAmbientBlockerBoxComp");
		return ptr;
	}


	void RemoveAmbientBlocker();
	bool IsOverlapping(const struct FVector& testLocation, float testRadius);
	void AddAmbientBlocker();
};


// Class BendGame.BendWorldManagerBase
// 0x3410 (0x3758 - 0x0348)
class ABendWorldManagerBase : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0348(0x0008) MISSED OFFSET
	struct FBendRuntimeFloatCurve                      SunPitch;                                                 // 0x0350(0x0088) (Edit)
	struct FBendRuntimeFloatCurve                      SunYaw;                                                   // 0x03D8(0x0088) (Edit)
	struct FBendRuntimeFloatCurve                      SunIntensity;                                             // 0x0460(0x0088) (Edit)
	struct FBendRuntimeColorCurve                      SunColor;                                                 // 0x04E8(0x0200) (Edit)
	struct FBendRuntimeFloatCurve                      SunLightingTintTemperature;                               // 0x06E8(0x0088) (Edit)
	struct FBendRuntimeColorCurve                      SunLightingTint;                                          // 0x0770(0x0200) (Edit)
	struct FBendRuntimeFloatCurve                      CinematicSunGlobalIntensity;                              // 0x0970(0x0088) (Edit)
	struct FBendRuntimeFloatCurve                      CinematicSunDirectLightIntensity;                         // 0x09F8(0x0088) (Edit)
	struct FBendRuntimeFloatCurve                      MoonPitch;                                                // 0x0A80(0x0088) (Edit)
	struct FBendRuntimeFloatCurve                      MoonYaw;                                                  // 0x0B08(0x0088) (Edit)
	struct FBendRuntimeFloatCurve                      MoonIntensity;                                            // 0x0B90(0x0088) (Edit)
	struct FBendRuntimeColorCurve                      MoonColor;                                                // 0x0C18(0x0200) (Edit)
	struct FBendRuntimeFloatCurve                      AmbientBrightness;                                        // 0x0E18(0x0088) (Edit)
	struct FBendRuntimeColorCurve                      EmissiveIntensityChannels;                                // 0x0EA0(0x0200) (Edit)
	struct FBendRuntimeFloatCurve                      NightPostWeight;                                          // 0x10A0(0x0088) (Edit)
	struct FBendRuntimeFloatCurve                      WorldBrightnessCurve;                                     // 0x1128(0x0088) (Edit)
	struct FBendRuntimeFloatCurve                      FogDensityOffset;                                         // 0x11B0(0x0088) (Edit)
	struct FBendRuntimeFloatCurve                      FogDistanceScale;                                         // 0x1238(0x0088) (Edit)
	struct FBendRuntimeFloatCurve                      FogAltitudeScale;                                         // 0x12C0(0x0088) (Edit)
	struct FBendRuntimeFloatCurve                      FogDistanceLinearity;                                     // 0x1348(0x0088) (Edit)
	struct FBendRuntimeColorCurve                      FogDensityColor;                                          // 0x13D0(0x0200) (Edit)
	struct FBendRuntimeFloatCurve                      MipFogTransitionDistance;                                 // 0x15D0(0x0088) (Edit)
	struct FBendRuntimeFloatCurve                      MieScatterTerm;                                           // 0x1658(0x0088) (Edit)
	struct FBendRuntimeFloatCurve                      MieScaleTerm;                                             // 0x16E0(0x0088) (Edit)
	struct FBendRuntimeFloatCurve                      MieDirectionTerm;                                         // 0x1768(0x0088) (Edit)
	struct FBendRuntimeFloatCurve                      MieDirectionScaleTerrain;                                 // 0x17F0(0x0088) (Edit)
	struct FBendRuntimeFloatCurve                      AltitudeReferenceInMeters;                                // 0x1878(0x0088) (Edit)
	struct FBendRuntimeColorCurve                      TerrainAtmosphereTint;                                    // 0x1900(0x0200) (Edit)
	struct FBendRuntimeColorCurve                      RayleighScatterTerm;                                      // 0x1B00(0x0200) (Edit)
	struct FBendRuntimeFloatCurve                      RayleighScaleTerm;                                        // 0x1D00(0x0088) (Edit)
	struct FBendRuntimeFloatCurve                      RayleighDirectionScaleTerrain;                            // 0x1D88(0x0088) (Edit)
	struct FBendRuntimeFloatCurve                      RayleighScaleTerrain;                                     // 0x1E10(0x0088) (Edit)
	struct FBendRuntimeFloatCurve                      FogHorizonFadeToBlack;                                    // 0x1E98(0x0088) (Edit)
	struct FBendRuntimeFloatCurve                      FogHorizonFadeToBlackFalloff;                             // 0x1F20(0x0088) (Edit)
	struct FBendRuntimeFloatCurve                      VolumetricFogDensity;                                     // 0x1FA8(0x0088) (Edit)
	struct FBendRuntimeFloatCurve                      VolumetricFogHeightFalloff;                               // 0x2030(0x0088) (Edit)
	struct FBendRuntimeFloatCurve                      VolumetricFogTreeDensity;                                 // 0x20B8(0x0088) (Edit)
	struct FBendRuntimeColorCurve                      VolumetricFogColor;                                       // 0x2140(0x0200) (Edit)
	struct FBendRuntimeFloatCurve                      CloudLightingTintTemperature;                             // 0x2340(0x0088) (Edit)
	struct FBendRuntimeColorCurve                      CloudLightingTint;                                        // 0x23C8(0x0200) (Edit)
	struct FBendRuntimeFloatCurve                      BGClouds_CirrusOpacity;                                   // 0x25C8(0x0088) (Edit)
	struct FBendRuntimeFloatCurve                      BGClouds_Density;                                         // 0x2650(0x0088) (Edit)
	struct FBendRuntimeFloatCurve                      BGClouds_FogFalloff;                                      // 0x26D8(0x0088) (Edit)
	struct FBendRuntimeColorCurve                      BGClouds_SunColor;                                        // 0x2760(0x0200) (Edit)
	struct FBendRuntimeColorCurve                      BGClouds_SkyLowerColor;                                   // 0x2960(0x0200) (Edit)
	struct FBendRuntimeColorCurve                      BGClouds_SkyUpperColor;                                   // 0x2B60(0x0200) (Edit)
	struct FBendRuntimeFloatCurve                      AssumedAverageBaseColor;                                  // 0x2D60(0x0088) (Edit)
	struct FBendRuntimeFloatCurve                      AutoExposureMinBrightness;                                // 0x2DE8(0x0088) (Edit)
	struct FBendRuntimeFloatCurve                      AutoExposureMaxBrightness;                                // 0x2E70(0x0088) (Edit)
	struct FBendRuntimeFloatCurve                      AutoExposureBias;                                         // 0x2EF8(0x0088) (Edit)
	struct FBendRuntimeFloatCurve                      BloomThreshold;                                           // 0x2F80(0x0088) (Edit)
	struct FBendRuntimeFloatCurve                      BloomIntensity;                                           // 0x3008(0x0088) (Edit)
	struct FBendRuntimeFloatCurve                      WhiteTemperature;                                         // 0x3090(0x0088) (Edit)
	struct FBendRuntimeFloatCurve                      WhiteTint;                                                // 0x3118(0x0088) (Edit)
	struct FBendRuntimeFloatCurve                      CCHue;                                                    // 0x31A0(0x0088) (Edit)
	struct FBendRuntimeFloatCurve                      CCContrast;                                               // 0x3228(0x0088) (Edit)
	struct FBendRuntimeFloatCurve                      CCSaturation;                                             // 0x32B0(0x0088) (Edit)
	struct FBendRuntimeFloatCurve                      CCBrightness;                                             // 0x3338(0x0088) (Edit)
	struct FBendRuntimeColorCurve                      CCColorBalance;                                           // 0x33C0(0x0200) (Edit)
	struct FBendRuntimeFloatCurve                      CloudSunPhaseLowDensityStrength;                          // 0x35C0(0x0088) (Edit)
	struct FBendRuntimeFloatCurve                      CloudSunPhaseHighDensityStrength;                         // 0x3648(0x0088) (Edit)
	struct FBendRuntimeFloatCurve                      CloudSunPhaseBrightness;                                  // 0x36D0(0x0088) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendWorldManagerBase");
		return ptr;
	}


	float GetWorldBrightnessCurveValue();
	float GetWhiteTint();
	float GetWhiteTemperature();
	float GetVolumetricFogTreeDensity();
	float GetVolumetricFogHeightFalloff();
	float GetVolumetricFogDensity();
	struct FLinearColor GetVolumetricFogColor();
	struct FLinearColor GetTerrainAtmosphereTint();
	float GetSunYaw();
	float GetSunPitch();
	float GetSunLightingTintTemperature();
	struct FLinearColor GetSunLightingTint();
	float GetSunIntensity();
	struct FLinearColor GetSunColor();
	struct FLinearColor GetRayleighScatterTerm();
	float GetRayleighScaleTerrain();
	float GetRayleighScaleTerm();
	float GetRayleighDirectionScaleTerrain();
	float GetNightPostWeight();
	float GetMoonYaw();
	float GetMoonPitch();
	float GetMoonIntensity();
	struct FLinearColor GetMoonColor();
	float GetMipFogTransitionDistance();
	float GetMieScatterTerm();
	float GetMieScaleTerm();
	float GetMieDirectionTerm();
	float GetMieDirectionScaleTerrain();
	float GetFogHorizonFadeToBlackFalloff();
	float GetFogHorizonFadeToBlack();
	float GetFogDistanceScale();
	float GetFogDistanceLinearity();
	float GetFogDensityOffset();
	struct FLinearColor GetFogDensityColor();
	float GetFogAltitudeScale();
	struct FLinearColor GetEmissiveIntensityChannels();
	float GetCloudSunPhaseLowDensityStrength();
	float GetCloudSunPhaseHighDensityStrength();
	float GetCloudSunPhaseBrightness();
	float GetCloudLightingTintTemperature();
	struct FLinearColor GetCloudLightingTint();
	float GetCinematicSunGlobalIntensity();
	float GetCinematicSunDirectLightIntensity();
	float GetCCSaturation();
	float GetCCHue();
	float GetCCContrast();
	struct FLinearColor GetCCColorBalance();
	float GetCCBrightness();
	float GetBloomThreshold();
	float GetBloomIntensity();
	struct FLinearColor GetBGClouds_SunColor();
	struct FLinearColor GetBGClouds_SkyUpperColor();
	struct FLinearColor GetBGClouds_SkyLowerColor();
	float GetBGClouds_FogFalloff();
	float GetBGClouds_Density();
	float GetBGClouds_CirrusOpacity();
	float GetAutoExposureMinBrightness();
	float GetAutoExposureMaxBrightness();
	float GetAutoExposureBias();
	float GetAssumedAverageBaseColor();
	float GetAmbientBrightness();
	float GetAltitudeReferenceInMeters();
};


// Class BendGame.BendWindManager
// 0x0058 (0x03A0 - 0x0348)
class ABendWindManager : public AActor
{
public:
	class AWindDirectionalSource*                      WindDirectionalSource;                                    // 0x0348(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     windDirection;                                            // 0x0350(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              RainSnowContribution;                                     // 0x035C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CloudCoverContribution;                                   // 0x0360(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ColumnFogContribution;                                    // 0x0364(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SineOscillatorContribution;                               // 0x0368(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaterialWindSpeedMin;                                     // 0x036C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaterialWindSpeedMax;                                     // 0x0370(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaximumFrameDelta;                                        // 0x0374(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ActiveWindSpeed;                                          // 0x0378(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ActiveMaterialWindSpeed;                                  // 0x037C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              WindTime;                                                 // 0x0380(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               EnableDebugPrinting;                                      // 0x0384(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               EnableDebugWindSpeed;                                     // 0x0385(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0386(0x0002) MISSED OFFSET
	float                                              DebugWindSpeed;                                           // 0x0388(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              GustTargetIntensity;                                      // 0x038C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UMaterialParameterCollection*                MaterialWindParameterCollection;                          // 0x0390(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UMaterialParameterCollection*                envCommonParameterCollection;                             // 0x0398(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendWindManager");
		return ptr;
	}


	float UpdateWindTime(float WindSpeed, float Mod);
	void UpdateWindTick(class ABendPrecipitationManager* PrecipitationManager, class ABendWorldManager* WorldManager);
	void UpdateMaterialWind();
	void UpdateEnvCommon(float WindTurbUVThreashold);
	void UpdateActiveWind(class ABendPrecipitationManager* PricipitationManager, class ABendWorldManager* WorldManager);
	void GustNow(float intensity);
};


// Class BendGame.BendWorldManager
// 0x0320 (0x3A78 - 0x3758)
class ABendWorldManager : public ABendWorldManagerBase
{
public:
	class ADirectionalLight*                           SunLight;                                                 // 0x3758(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class ADirectionalLight*                           MoonLight;                                                // 0x3760(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class ADirectionalLight*                           LightningLight;                                           // 0x3768(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class AActor*                                      Sky;                                                      // 0x3770(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class AActor*                                      SkyPresetManager;                                         // 0x3778(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class AActor*                                      PostProcessManager;                                       // 0x3780(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class ABendWindManager*                            WindManager;                                              // 0x3788(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class APostProcessVolume*                          PostProcessVolume;                                        // 0x3790(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class AAtmosphericFog*                             AtmosphericFog;                                           // 0x3798(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class AWindDirectionalSource*                      WindDirectionalSource;                                    // 0x37A0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class AVectorFieldVolume*                          WindVectorFieldVolume;                                    // 0x37A8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class AVectorFieldVolume*                          WindGlobalCompositedVectorFieldVolume;                    // 0x37B0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FBendWindParameters                         WindParameters;                                           // 0x37B8(0x0014) (Edit)
	bool                                               WorldHUDEnabled;                                          // 0x37CC(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x37CD(0x0003) MISSED OFFSET
	struct FTimespan                                   WorldTimespan;                                            // 0x37D0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, SaveGame)
	int                                                WorldTime;                                                // 0x37D8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              DefaultWorldTimeRateSetting;                              // 0x37DC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              WorldTimeRate;                                            // 0x37E0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              PreviousWorldTimeRate;                                    // 0x37E4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               TimeLapseActive;                                          // 0x37E8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x37E9(0x0003) MISSED OFFSET
	int                                                TimeLapseEndWorldTime;                                    // 0x37EC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EWeatherType>                          WorldWeather;                                             // 0x37F0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x37F1(0x0007) MISSED OFFSET
	class ABendWorldSpec*                              WorldSpecCurrent;                                         // 0x37F8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	class ABendWorldSpec*                              WorldSpecNext;                                            // 0x3800(0x0008) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	TEnumAsByte<EWeatherTransitionType>                WeatherTransitionType;                                    // 0x3808(0x0001) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData03[0x7];                                       // 0x3809(0x0007) MISSED OFFSET
	class ABendWorldSpec*                              WorldSpecTransition;                                      // 0x3810(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	class ABendWorldSpec*                              WorldSpecBlended;                                         // 0x3818(0x0008) (Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	class ABendWorldSpec*                              WorldSpecClearDefault;                                    // 0x3820(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	class ABendWorldSpec*                              WorldSpecRainDefault;                                     // 0x3828(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	class ABendWorldSpec*                              WorldSpecSnowDefault;                                     // 0x3830(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	TArray<class ABendWorldSpec*>                      WorldSpecsCloudy;                                         // 0x3838(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate)
	TArray<class ABendWorldSpec*>                      WorldSpecsLightRain;                                      // 0x3848(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate)
	TArray<class ABendWorldSpec*>                      WorldSpecsHeavyRain;                                      // 0x3858(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate)
	TArray<class ABendWorldSpec*>                      WorldSpecsLightSnow;                                      // 0x3868(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate)
	TArray<class ABendWorldSpec*>                      WorldSpecsHeavySnow;                                      // 0x3878(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate)
	bool                                               IsWeatherTransitioning;                                   // 0x3888(0x0001) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData04[0x3];                                       // 0x3889(0x0003) MISSED OFFSET
	float                                              CloudIntensity;                                           // 0x388C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              MistIntensity;                                            // 0x3890(0x0004) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              Wetness;                                                  // 0x3894(0x0004) (Edit, BlueprintVisible, ZeroConstructor, EditConst, SaveGame, IsPlainOldData)
	float                                              RainIntensity;                                            // 0x3898(0x0004) (Edit, BlueprintVisible, ZeroConstructor, EditConst, SaveGame, IsPlainOldData)
	struct FFloatInterval                              RainIntensityRange;                                       // 0x389C(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              RainIntensityCloudSimulation;                             // 0x38A4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	float                                              RainIntensityToWorldBrightnessScalar;                     // 0x38A8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              RainIntensityToWorldBrightnessOffset;                     // 0x38AC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CloudWindUVFraction;                                      // 0x38B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     CloudWindUVScale;                                         // 0x38B4(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SnowIntensity;                                            // 0x38C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, EditConst, SaveGame, IsPlainOldData)
	float                                              WindIntensity;                                            // 0x38C4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              LightningProbability;                                     // 0x38C8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	int                                                MaxTimeBetweenLightningStrikes;                           // 0x38CC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                LightningFlashMaxDuration;                                // 0x38D0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                LightningFlashTicksRemaining;                             // 0x38D4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	int                                                TimeOfNextLightningStrike;                                // 0x38D8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              WeatherTransitionRate;                                    // 0x38DC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              WeatherTransitionRateSlow;                                // 0x38E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              WeatherTransitionRateMedium;                              // 0x38E4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              WeatherTransitionRateFast;                                // 0x38E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               EnableWeatherUpdate;                                      // 0x38EC(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               EnableAmbientWeatherChange;                               // 0x38ED(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x2];                                       // 0x38EE(0x0002) MISSED OFFSET
	int                                                MaxTimeBetweenWeatherEvents;                              // 0x38F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                TimeOfNextWeatherEvent;                                   // 0x38F4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	int                                                WindGustMinFrequency;                                     // 0x38F8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                WindGustMaxFrequency;                                     // 0x38FC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                TimeOfNextWindGust;                                       // 0x3900(0x0004) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               EnableWindGusts;                                          // 0x3904(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x3];                                       // 0x3905(0x0003) MISSED OFFSET
	float                                              WorldBrightness;                                          // 0x3908(0x0004) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              WorldBrightnessRaw;                                       // 0x390C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              WorldMinElevation;                                        // 0x3910(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              WorldMaxElevation;                                        // 0x3914(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PlayerElevation;                                          // 0x3918(0x0004) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               PlayerIsIndoors;                                          // 0x391C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData07[0x3];                                       // 0x391D(0x0003) MISSED OFFSET
	float                                              EditorWorldTimeOfDay;                                     // 0x3920(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                EditorWorldTimeHour;                                      // 0x3924(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              EditorWorldTimeMultiplier;                                // 0x3928(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              EditorWorldTimeRate;                                      // 0x392C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EWeatherType>                          EditorWorldWeather;                                       // 0x3930(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EWeatherTransitionRateType>            EditorWorldWeatherTransitionRate;                         // 0x3931(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IsMissionActive;                                          // 0x3932(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData08[0x5];                                       // 0x3933(0x0005) MISSED OFFSET
	struct FTimespan                                   MissionGoalTimespan;                                      // 0x3938(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst)
	float                                              MissionGoalTime;                                          // 0x3940(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              PreMissionWorldTimeMultiplier;                            // 0x3944(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	bool                                               IsCinematicActive;                                        // 0x3948(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData09[0x3];                                       // 0x3949(0x0003) MISSED OFFSET
	float                                              CinematicOffsetTimeMultiplier;                            // 0x394C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	float                                              CinematicOffsetPitch;                                     // 0x3950(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	float                                              CinematicOffsetYaw;                                       // 0x3954(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	float                                              CinematicOffsetRoll;                                      // 0x3958(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	float                                              CinematicGoalOffsetPitch;                                 // 0x395C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	float                                              CinematicGoalOffsetYaw;                                   // 0x3960(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	float                                              CinematicGoalOffsetRoll;                                  // 0x3964(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	class UDirectionalLightComponent*                  SunLightCastedDirectional;                                // 0x3968(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData10[0x8];                                       // 0x3970(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnHourChanged;                                            // 0x3978(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnEveryFiveMinutes;                                       // 0x3988(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnWeatherChangeStarted;                                   // 0x3998(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnWeatherChangeCompleted;                                 // 0x39A8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData11[0xC];                                       // 0x39B8(0x000C) MISSED OFFSET
	float                                              VarianceValue01;                                          // 0x39C4(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              VarianceValue02;                                          // 0x39C8(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              VarianceValue03;                                          // 0x39CC(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              OverrideWindValue;                                        // 0x39D0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               OverrideWindActive;                                       // 0x39D4(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData12[0x7];                                       // 0x39D5(0x0007) MISSED OFFSET
	struct FWorldWeatherTransition                     WeatherTransition;                                        // 0x39DC(0x0010) (BlueprintVisible, BlueprintReadOnly, SaveGame)
	unsigned char                                      UnknownData13[0x8C];                                      // 0x39EC(0x008C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendWorldManager");
		return ptr;
	}


	void WorldWeatherTransitionComplete();
	void UpdateWorldPostFX(class ABendWorldSpec* WorldSpec);
	void UpdateHUDTime();
	void UpdateCinematicOffsets(float DeltaTime);
	void SyncTime(bool bSyncBlueprint);
	void StartWorldTime();
	void SetWorldTimeRate(float Rate);
	void SetWorldTimeOfDay(float TimeOfDay, bool CanAdvanceDay);
	void SetWorldTimeMultiplier(float Multiplier);
	void SetWorldTimeHour(int Hour);
	void SetWorldTime(const struct FTimespan& NewWorldTime);
	void SetWorldSpec(class ABendWorldSpec* NewWeather, TEnumAsByte<EWeatherTransitionRateType> NewWeatherTransitionRate);
	void SetWorldDaysGone(int Days);
	void SetWindVelocityOverride(bool Override, const struct FVector& Velocity);
	void SetWindOverride(bool Override, float Speed);
	void SetMotionBlur(float MotionBlur);
	void SetMissionObjectiveTime(float GoalTimeOfDay, float MissionWallClockDurationInMinutes);
	void SetIsMissionActive(bool NewMissionStatus);
	void SetIsCinematicActive(bool NewCinematicStatus);
	void SetIndoorsOverride(bool IsIndoors);
	void SetIndoors(bool IsIndoors);
	void SetCloudRandomSeed(const struct FLinearColor& CloudRandomSeed);
	void SelectWorldWeatherTransition(TEnumAsByte<EWeatherType> WeatherStart, TEnumAsByte<EWeatherType> WeatherEnd, TEnumAsByte<EWeatherTransitionRateType> TransitionRate, float RelativeTime);
	void SelectWorldWeather(TEnumAsByte<EWeatherType> NewWeather, TEnumAsByte<EWeatherTransitionRateType> NewWeatherTransitionRate, float RelativeTime);
	void ReceiveTickTimeOfDay(float DeltaSeconds, bool bDebug);
	void ReceiveSyncTimeOfDay();
	void ReceiveStartWorldTime();
	void ReceiveSetWorldSpec(class ABendWorldSpec* NextWeather, TEnumAsByte<EWeatherTransitionRateType> TransitionRate);
	void ReceiveSelectWeather(TEnumAsByte<EWeatherType> PreviousWeather, TEnumAsByte<EWeatherType> NextWeather, TEnumAsByte<EWeatherTransitionRateType> TransitionRate, float RelativeTime);
	void ReceiveInitialize();
	void ReceiveChangeWeather(TEnumAsByte<EWeatherType> PreviousWeather, TEnumAsByte<EWeatherType> NextWeather, float TransitionTime, float RelativeTime);
	void ReceiveBendEditorTick(float DeltaSeconds);
	void ReceiveBendEditorStop();
	bool IsWorldTimeAM();
	bool IsWeatherMapActive();
	bool IsBrightnessRising();
	void InterpolateWorldSpec(float WeightDefault, float Weight10Start, float Weight10End, float Weight20Start, float Weight20End, float Weight30Start, float Weight30End, float Weight40Start, float Weight40End, float Weight50Start, float Weight50End, float Weight60Start, float Weight60End, float Weight70Start, float Weight70End, float Weight80Start, float Weight80End, float Weight90Start, float Weight90End);
	void Initialize();
	bool HasTimePassed(const struct FTimespan& WorldTimePassed, const struct FTimespan& SavedWorldTime);
	TEnumAsByte<EWeatherTransitionRateType> GetWorldWeatherTransitionRate(float Duration);
	float GetWorldWeatherTransitionDuration(TEnumAsByte<EWeatherTransitionRateType> WeatherTransitionRateType);
	TEnumAsByte<EWeatherType> GetWorldWeather();
	float GetWorldTimeOfDay();
	float GetWorldTimeMultiplier();
	int GetWorldTimeMinute();
	int GetWorldTimeHour();
	float GetWorldTimeFractional();
	struct FTimespan GetWorldTime();
	class ABendWorldSettings* GetWorldSettings();
	class ABendWorldManager* STATIC_GetWorldManager(class UObject* WorldContext);
	int GetWorldDaysGone();
	void STATIC_GetWorldCameraTransform(class UObject* WorldContext, struct FVector* Location, struct FRotator* Rotation, struct FVector* Scale);
	struct FLinearColor GetWeatherMapColor(const struct FVector& WorldPosition);
	struct FTimespan GetTimeSince(const struct FTimespan& SavedWorldTime);
	float GetMotionBlurDefault();
	float GetMotionBlur();
	struct FLinearColor GetLocalWeatherMapColor();
	bool GetIsMissionActive();
	bool GetIsCinematicActive();
	void GetIndoorsOverride(bool* Override, bool* IsIndoors);
	struct FLinearColor GetCloudRandomSeed();
	void GetCameraTransform(struct FVector* Location, struct FRotator* Rotation, struct FVector* Scale);
	struct FVector GetCameraLocation();
	void ClearIndoorsOverride();
	void ChangeWeatherTransition(TEnumAsByte<EWeatherType> WeatherStart, TEnumAsByte<EWeatherType> WeatherEnd, float TransitionTime, float RelativeTime);
	void ChangeWeather(TEnumAsByte<EWeatherType> NewWeather, float TransitionTime, float RelativeTime);
	void ApplySkyPreset();
	void AdvanceWorldTime(const struct FTimespan& AdvanceTime);
};


// Class BendGame.BendAmbientEventMarker
// 0x0148 (0x0490 - 0x0348)
class ABendAmbientEventMarker : public AActor
{
public:
	struct FString                                     EventName;                                                // 0x0348(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TEnumAsByte<EAmbientEventType>                     AmbientEventEventType;                                    // 0x0358(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               AlwaysLoadAmbientEvent;                                   // 0x0359(0x0001) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x035A(0x0006) MISSED OFFSET
	TAssetPtr<class UClass>                            BlueprintEvent;                                           // 0x0360(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0380(0x0008) MISSED OFFSET
	struct FName                                       UMapFileName;                                             // 0x0388(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class ALevelScriptActor*                           UMapActor;                                                // 0x0390(0x0008) (ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EAmbientEventClass>                    EventClass;                                               // 0x0398(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0399(0x0003) MISSED OFFSET
	int                                                EventPriority;                                            // 0x039C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaximumPriority;                                          // 0x03A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EAmbientEventRepeatMode>               RepeatMode;                                               // 0x03A4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x03A5(0x0003) MISSED OFFSET
	int                                                NumOfTimesRun;                                            // 0x03A8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData)
	float                                              NearDistance;                                             // 0x03AC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FarDistance;                                              // 0x03B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              RemoveDistance;                                           // 0x03B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               DemoReady;                                                // 0x03B8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x7];                                       // 0x03B9(0x0007) MISSED OFFSET
	class UClass*                                      ConditionsObject;                                         // 0x03C0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UBendConditionsObject*                       ConditionsObjectInstance;                                 // 0x03C8(0x0008) (ZeroConstructor, IsPlainOldData)
	class UBendConditionsObject*                       MissionConditionsObjectInstance;                          // 0x03D0(0x0008) (ZeroConstructor, IsPlainOldData)
	class UBendConditionsObject*                       JobConditionsObjectInstance;                              // 0x03D8(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<class UClass*>                              ConditionObjects;                                         // 0x03E0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst)
	TArray<TAssetPtr<class UClass>>                    UseConditions;                                            // 0x03F0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<struct FBendInfluenceCondition>             InfluenceConditions;                                      // 0x0400(0x0010) (Edit, ZeroConstructor)
	class UBendAmbientBlockerComp*                     AmbientBlocker;                                           // 0x0410(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UBillboardComponent*                         AmbientMarkerBillboard;                                   // 0x0418(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, Transient, EditConst, InstancedReference, IsPlainOldData)
	class USphereComponent*                            AmbientMarkerDebugCollision;                              // 0x0420(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, Transient, EditConst, InstancedReference, IsPlainOldData)
	class UTextRenderComponent*                        DebugInfoText;                                            // 0x0428(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	struct FTimespan                                   TimespanToPersist;                                        // 0x0430(0x0008) (Edit, BlueprintVisible, ZeroConstructor)
	struct FTimespan                                   TimespanUntilAvailable;                                   // 0x0438(0x0008) (Edit, BlueprintVisible, ZeroConstructor)
	struct FTimespan                                   TimespanUntilRepeat;                                      // 0x0440(0x0008) (Edit, BlueprintVisible, ZeroConstructor)
	struct FTimespan                                   TimespanBetweenTries;                                     // 0x0448(0x0008) (Edit, BlueprintVisible, ZeroConstructor)
	int                                                NumTriesUntilFail;                                        // 0x0450(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EAmbientEventChooseEventResult>        ChooseEventResult;                                        // 0x0454(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, SaveGame, IsPlainOldData)
	TEnumAsByte<EAmbientEventFailedReason>             ChooseEventFailReason;                                    // 0x0455(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData05[0x2];                                       // 0x0456(0x0002) MISSED OFFSET
	struct FTimespan                                   ChooseEventTime;                                          // 0x0458(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, SaveGame)
	int                                                ChooseEventNumTries;                                      // 0x0460(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, SaveGame, IsPlainOldData)
	bool                                               PreviouslyRunning;                                        // 0x0464(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData06[0x3];                                       // 0x0465(0x0003) MISSED OFFSET
	struct FTimespan                                   UnloadedEventTime;                                        // 0x0468(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, SaveGame)
	float                                              DefaultDistanceToTestEngagement;                          // 0x0470(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData07[0x4];                                       // 0x0474(0x0004) MISSED OFFSET
	bool                                               m_Complete;                                               // 0x0478(0x0001) (ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData08[0x17];                                      // 0x0479(0x0017) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAmbientEventMarker");
		return ptr;
	}


	void SetEventEngaged(bool engaged);
	void SetEventComplete();
	void SetChooseEventTried(TEnumAsByte<EAmbientEventFailedReason> FailReason, bool CountAttempt);
	void SetChooseEventSucceeded();
	void SetChooseEventFailed(TEnumAsByte<EAmbientEventFailedReason> FailReason);
	void SetChooseEventAvailable();
	void SetAmbientEventManager(class ABendAmbientEventManager* Manager);
	void OnUMapLoaded();
	void OnUMapLoad();
	void OnRemoveFromWorld();
	void OnEventUnloaded();
	void OnEventLoaded(bool PreviouslyLoaded);
	void OnEventComplete();
	bool NotBlocked();
	bool MeetsMissionConditions();
	bool MeetsJobConditions();
	bool MeetsConditions();
	bool IsComplete();
	bool IsAvailable();
	bool GetEventEngaged();
	float GetConditionalPriority(float ConditionalPriorityWeight);
	class ABendAmbientEventManager* GetAmbientEventManager();
	bool CheckIfEventEngaged();
	void AllocateConditions();
};


// Class BendGame.BendAmbientEventManager
// 0x0290 (0x05D8 - 0x0348)
class ABendAmbientEventManager : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0348(0x0008) MISSED OFFSET
	bool                                               StartPaused;                                              // 0x0350(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0351(0x0003) MISSED OFFSET
	float                                              m_CheckForNewEventEverySeconds;                           // 0x0354(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_LastEventAtGameTime;                                    // 0x0358(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              m_NextTimeToSearchForValidEvent;                          // 0x035C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                m_MaxNumberMajorEvents;                                   // 0x0360(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                m_MaxNumberMinorEvents;                                   // 0x0364(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                m_MaxNumberEnvironmentEvents;                             // 0x0368(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                m_MaxNumberGlobalEvents;                                  // 0x036C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                m_MaxNumberEvents;                                        // 0x0370(0x0004) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0374(0x0004) MISSED OFFSET
	TArray<class ABendAmbientEventMarker*>             m_ForceAmbientEventQueue;                                 // 0x0378(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	int                                                m_HistoryPositionBeforeValidAgain;                        // 0x0388(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EAmbientEventManagerMode>              m_CurrentMode;                                            // 0x038C(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x038D(0x0003) MISSED OFFSET
	float                                              VelocityScoreMulitplier;                                  // 0x0390(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DistanceScoreMulitplier;                                  // 0x0394(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              HistoryScoreMulitplier;                                   // 0x0398(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              m_TimeInSecondsToMaximumWeight;                           // 0x039C(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                m_MaximumPostLoadQueueThreshold;                          // 0x03A0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              m_CurrentPacingTime;                                      // 0x03A4(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              m_CurrentAmbientEventWeight;                              // 0x03A8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x03AC(0x0004) MISSED OFFSET
	TArray<struct FAmbientEventCategoryTimings>        m_DefaultAmbientEventClassResetTimes;                     // 0x03B0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditFixedSize, ZeroConstructor, DisableEditOnInstance)
	float                                              m_MinimumAvailableMemoryThreshold;                        // 0x03C0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              m_CriticalAvailableMemoryThreshold;                       // 0x03C4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              m_CriticalMemoryMinimumDespawnRadius;                     // 0x03C8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData05[0x4];                                       // 0x03CC(0x0004) MISSED OFFSET
	TArray<bool>                                       m_FPSSamples;                                             // 0x03D0(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData06[0x18];                                      // 0x03E0(0x0018) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnEventDestream;                                          // 0x03F8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnAmbientEventChosen;                                     // 0x0408(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnAmbientEventLoaded;                                     // 0x0418(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnAmbientEventUnloaded;                                   // 0x0428(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnAmbientEventEngaged;                                    // 0x0438(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnAmbientEventConcluded;                                  // 0x0448(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnAmbientEventRejected;                                   // 0x0458(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnAmbientEventStatusUpdate;                               // 0x0468(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnAmbientEventManagerBlocked;                             // 0x0478(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	TArray<TEnumAsByte<EAmbientEventClass>>            m_AmbientEventHistory;                                    // 0x0488(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData07[0x10];                                      // 0x0498(0x0010) MISSED OFFSET
	struct FTimespan                                   m_TimeSinceLastEvent;                                     // 0x04A8(0x0008) (ZeroConstructor)
	TArray<struct FTimespan>                           m_AmbientEventClassTimeHistory;                           // 0x04B0(0x0010) (EditFixedSize, ZeroConstructor, SaveGame)
	unsigned char                                      UnknownData08[0x18];                                      // 0x04C0(0x0018) MISSED OFFSET
	TArray<TWeakObjectPtr<class ABendAmbientEventMarker>> m_AvailableEvents;                                        // 0x04D8(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData09[0xE0];                                      // 0x04E8(0x00E0) MISSED OFFSET
	TArray<struct FDebugInfoPointToEvent>              m_DebugDrawLines;                                         // 0x05C8(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAmbientEventManager");
		return ptr;
	}


	void VerboseDebugging(bool Verbosity);
	float UpdateAmbientEventWeight(float DeltaSeconds);
	void Unpause();
	float TimeUntilCheckingForNewEvent();
	bool TestConditionsForAmbientEvent(class ABendAmbientEventMarker* AmbientEvent);
	void SetNextAmbientEvent(class ABendAmbientEventMarker* AmbientEvent);
	float ScoreRecentlyActiveAmbientEvent(class ABendAmbientEventMarker* AmbientEvent);
	float ScoreBasedOnPlayerVelocity(class ABendAmbientEventMarker* AmbientEvent, float Multiplier);
	float ScoreBasedOnPlayerFacing(class ABendAmbientEventMarker* AmbientEvent);
	float ScoreBasedOnHistory(class ABendAmbientEventMarker* AmbientEvent, float Multiplier);
	float ScoreBasedOnDistance(class ABendAmbientEventMarker* AmbientEvent, float Multiplier);
	float ScoreAmbientEvent_NormalMode(class ABendAmbientEventMarker* AmbientEvent);
	float ScoreAmbientEvent_MissionMode(class ABendAmbientEventMarker* AmbientEvent);
	float ScoreAmbientEvent_JobMode(class ABendAmbientEventMarker* AmbientEvent);
	float ScoreAmbientEvent(class ABendAmbientEventMarker* AmbientEvent);
	bool RollChanceToSpawnAmbientEvent();
	void ResetPacing();
	void ResetBlacklistOfAmbientEvents();
	void RemoveEventsBasedOnHistory(TArray<class ABendAmbientEventMarker*>* EligibleEvents);
	void RemoveAllEventsQueuedToLoad();
	void PostUMapUnload();
	void PostUMapLoad();
	void Pause(bool ForceUnload);
	void OnPlayerRespawned(class ABendPlayerController* PlayerController);
	void OnPlayerDeathFadeToBlack();
	void OnEventUnloaded(class ABendAmbientEventMarker* AmbientEventMarker);
	void OnEventLoaded(class ABendAmbientEventMarker* AmbientEventMarker);
	void ModifyAmbientEventWeight(float modification);
	bool IsWithinDistanceParameters(class ABendAmbientEventMarker* AmbientEvent);
	bool IsTooCloseToPlayer(class ABendAmbientEventMarker* AmbientEvent);
	bool IsPaused();
	bool IsInDebug();
	bool IsEventRunning(class ABendAmbientEventMarker* AmbientEvent);
	bool IsEventLoading(class ABendAmbientEventMarker* AmbientEvent);
	bool IsEventClassTimeframeValid(TEnumAsByte<EAmbientEventClass> AmbientEventClass);
	bool IsAmbientEventBlacklisted(class ABendAmbientEventMarker* AmbientEventMarker);
	bool GetVerboseDebugging();
	float GetTimeToMaximumWeight();
	TArray<class ABendAmbientEventMarker*> GetRunningEvents();
	struct FTimespan GetRemainingTimeToResetForClass(TEnumAsByte<EAmbientEventClass> EventClass);
	struct FVector GetLocationToRunTestsAgainst();
	float GetEventScore(class ABendAmbientEventMarker* AmbientEvent);
	struct FTimespan GetDefaultResetTimeForClass(TEnumAsByte<EAmbientEventClass> EventClass);
	struct FColor GetDebugLineColorForEvent(class ABendAmbientEventMarker* AmbientEventMarker);
	float GetCurrentWeight();
	TArray<class ABendAmbientEventMarker*> GetAvailableEvents();
	TArray<struct FTimespan> GetAmbientEventResetTimes();
	TArray<class ABendAmbientEventMarker*> GetAllEvents();
	void ForceUnloadAllInRadiusExcludingMarker(const struct FVector& Location, float Radius, class ABendAmbientEventMarker* excludeMarker);
	void ForceUnloadAllInRadius(const struct FVector& Location, float Radius);
	void ForceUnloadAllImmediately();
	void ForceUnloadAll();
	void EnableDebug();
	void DisableDebug();
	void DebugTestUnloadEvent(class ABendAmbientEventMarker* AmbientEvent);
	void DebugTestLoadEvent(class ABendAmbientEventMarker* AmbientEvent);
	void DebugRequestInstantiateAmbientEvent(class ABendAmbientEventMarker* AmbientEvent);
	void DebugLoadAllEventsOfClass(TEnumAsByte<EAmbientEventClass> ClassType);
	void DebugLoadAllEvents();
	void DebugEndLoadAllEventsOfClass();
	void DebugEndLoadAllEvents();
	struct FTimespan ConvertTimeSpanToRealTime(const struct FTimespan& GameTime);
	struct FTimespan ConvertTimeSpanToGameTime(const struct FTimespan& RealTime);
	bool CheckCanRunAgain(class ABendAmbientEventMarker* AmbientEvent);
	TArray<class ABendAmbientEventMarker*> BuildListOfEligibleEvents();
	void BlacklistAmbientEvents(TArray<TEnumAsByte<EAmbientEventClass>> Blacklist);
	void AmbientEventComplete(const struct FString& AmbientEventName, TEnumAsByte<EAmbientEventCompletionStatus> CompletionStatus);
	void AddEventToForcedQueue(class ABendAmbientEventMarker* AmbientEventMarker);
};


// Class BendGame.BendAmbientEventBP
// 0x0008 (0x0350 - 0x0348)
class ABendAmbientEventBP : public AActor
{
public:
	class ABendAmbientEventMarker*                     EventMarker;                                              // 0x0348(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAmbientEventBP");
		return ptr;
	}


	void OnEventUnloading();
	void OnEventRunning();
	void OnEventReRunning();
	void OnEventComplete();
};


// Class BendGame.BendAmbientEventLevel
// 0x0008 (0x0360 - 0x0358)
class ABendAmbientEventLevel : public ALevelScriptActor
{
public:
	class ABendAmbientEventMarker*                     EventMarker;                                              // 0x0358(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAmbientEventLevel");
		return ptr;
	}


	void OnEventUnloading();
	void OnEventRunning();
	void OnEventReRunning();
	void OnEventComplete();
};


// Class BendGame.BendAmbientSpawnArea
// 0x0188 (0x04D0 - 0x0348)
class ABendAmbientSpawnArea : public AActor
{
public:
	bool                                               m_bActiveArea;                                            // 0x0348(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0349(0x0003) MISSED OFFSET
	int                                                m_iDestroyedNestSpawns;                                   // 0x034C(0x0004) (ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0350(0x0004) MISSED OFFSET
	float                                              m_fMinLocalSpawnPct;                                      // 0x0354(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              m_fMinRegionSpawnPct;                                     // 0x0358(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              m_fNestSpawnModifier;                                     // 0x035C(0x0004) (ZeroConstructor, SaveGame, IsPlainOldData)
	class UBendNestingZone*                            m_NestingZone;                                            // 0x0360(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_ChanceDaySpawn;                                         // 0x0368(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              m_ChanceTwilightSpawn;                                    // 0x036C(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              m_ChanceNightSpawn;                                       // 0x0370(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                m_MaxActiveSpawnsInArea;                                  // 0x0374(0x0004) (ZeroConstructor, SaveGame, Deprecated, IsPlainOldData)
	int                                                m_MaxActiveSpawns;                                        // 0x0378(0x0004) (ZeroConstructor, SaveGame, IsPlainOldData)
	int                                                m_MinBaseSpawns;                                          // 0x037C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData)
	int                                                m_MaxBaseSpawns;                                          // 0x0380(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData)
	int                                                m_ConditionalSpawns;                                      // 0x0384(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData)
	class UClass*                                      m_ConditionsObject;                                       // 0x0388(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               m_ResetConditionsOnReroll;                                // 0x0390(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0391(0x0007) MISSED OFFSET
	TArray<struct FBendAmbientSpawnType>               m_AreaSpawnTypes;                                         // 0x0398(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	bool                                               m_ImportantZone;                                          // 0x03A8(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData)
	TEnumAsByte<ESpawnImportance>                      m_Importance;                                             // 0x03A9(0x0001) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	bool                                               m_IgnoreScreamSpawn;                                      // 0x03AA(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               m_bAreaInRange;                                           // 0x03AB(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x03AC(0x0004) MISSED OFFSET
	TArray<struct FDefendZoneInfo>                     m_DayDefendZoneInfo;                                      // 0x03B0(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FDefendZoneInfo>                     m_NightDefendZoneInfo;                                    // 0x03C0(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FBendLocationReference                      m_HomePoint;                                              // 0x03D0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly)
	TWeakObjectPtr<class ABendHomeArea>                m_HomeArea;                                               // 0x03E0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TArray<TWeakObjectPtr<class ABendFortificationZone>> m_FortificationZones;                                     // 0x03E8(0x0010) (Edit, ZeroConstructor)
	TArray<TWeakObjectPtr<class ABendAmbientSpawnBox>> m_ContainedBoxes;                                         // 0x03F8(0x0010) (ZeroConstructor)
	int                                                ExpectedBoxCount;                                         // 0x0408(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x040C(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnSpawnedWithVehicle;                                     // 0x0410(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnSpawned;                                                // 0x0420(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnReachedSpawnLimit;                                      // 0x0430(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnKilled;                                                 // 0x0440(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDespawned;                                              // 0x0450(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FTimespan                                   m_iRerollAfterTime;                                       // 0x0460(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	struct FTimespan                                   m_iMaxTimeBetweenRolls;                                   // 0x0468(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	bool                                               m_bEvaluateRollsOnBeginPlay;                              // 0x0470(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x3];                                       // 0x0471(0x0003) MISSED OFFSET
	float                                              m_fSpawnWindowDuration;                                   // 0x0474(0x0004) (ZeroConstructor, IsPlainOldData)
	bool                                               m_OverrideSpawnRadius;                                    // 0x0478(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x3];                                       // 0x0479(0x0003) MISSED OFFSET
	float                                              m_SpawnMinRadius;                                         // 0x047C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_SpawnMaxRadius;                                         // 0x0480(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_CanDespawnRadius;                                       // 0x0484(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_ForceDespawnRadius;                                     // 0x0488(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                m_iKilledCount;                                           // 0x048C(0x0004) (ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData07[0x8];                                       // 0x0490(0x0008) MISSED OFFSET
	int                                                m_iDesiredBaseSpawns;                                     // 0x0498(0x0004) (ZeroConstructor, SaveGame, IsPlainOldData)
	int                                                m_iDesiredSpawnCount;                                     // 0x049C(0x0004) (ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData08[0x4];                                       // 0x04A0(0x0004) MISSED OFFSET
	unsigned char                                      m_bCanSpawnFromRoll : 1;                                  // 0x04A4(0x0001) (SaveGame)
	unsigned char                                      UnknownData09[0x3];                                       // 0x04A5(0x0003) MISSED OFFSET
	struct FTimespan                                   m_iTimeOfLastRoll;                                        // 0x04A8(0x0008) (ZeroConstructor, SaveGame)
	struct FTimespan                                   m_iTimeOfUnload;                                          // 0x04B0(0x0008) (ZeroConstructor, SaveGame)
	unsigned char                                      UnknownData10[0x10];                                      // 0x04B8(0x0010) MISSED OFFSET
	class UBendConditionsObject*                       m_ConditionsObjectInstance;                               // 0x04C8(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAmbientSpawnArea");
		return ptr;
	}


	void SetSpawnLimits(int minBaseSpawns, int MaxBaseSpawns, int conditionalSpawns);
	void SetMaxSpawns(int newMaxSpawns, bool setGoalSpawns);
	void SetAreaActive(bool activeArea);
	void ResetSpawnCount(bool resetToKilled);
	void ResetKillCount();
	void RemoveSpawnLocation(class ABendAmbientSpawnBox* Location);
	int GetSpawnCount();
	int GetKillCount();
	int GetActiveCount();
	void AddSpawnLocation(class ABendAmbientSpawnBox* Location);
};


// Class BendGame.BendSpawnLocationBase
// 0x01F8 (0x0540 - 0x0348)
class ABendSpawnLocationBase : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0348(0x0008) MISSED OFFSET
	TArray<TEnumAsByte<EAIFactionType>>                InvalidFactions;                                          // 0x0350(0x0010) (Edit, BlueprintVisible, ZeroConstructor, EditConst)
	struct FDefendZoneInfo                             m_defendZoneInfo;                                         // 0x0360(0x0030) (Edit, BlueprintVisible)
	struct FBendLocationReference                      m_HomePoint;                                              // 0x0390(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly)
	TWeakObjectPtr<class ABendHomeArea>                m_HomeArea;                                               // 0x03A0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TArray<TWeakObjectPtr<class ABendFortificationZone>> m_FortificationZones;                                     // 0x03A8(0x0010) (Edit, ZeroConstructor)
	struct FString                                     m_forceUsePOIType;                                        // 0x03B8(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	class ABendPOI*                                    m_OverridePOIToUse;                                       // 0x03C8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FBehaviorParams                             m_BehaviorParameters;                                     // 0x03D0(0x0004) (Edit, BlueprintVisible, DisableEditOnTemplate)
	unsigned char                                      UnknownData01[0xC];                                       // 0x03D4(0x000C) MISSED OFFSET
	struct FSpawnLocationData                          LocationData;                                             // 0x03E0(0x00B0)
	float                                              m_SpawnMinRadius;                                         // 0x0490(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_SpawnMaxRadius;                                         // 0x0494(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_CanDespawnRadius;                                       // 0x0498(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_ForceDespawnRadius;                                     // 0x049C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<TAssetPtr<class UClass>>                    m_UseConditionClasses;                                    // 0x04A0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<struct FInventoryIDDetails>                 NonTableDropsForSpawns;                                   // 0x04B0(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	bool                                               m_ignoreInnerRadius;                                      // 0x04C0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_Important;                                              // 0x04C1(0x0001) (ZeroConstructor, SaveGame, Deprecated, IsPlainOldData)
	TEnumAsByte<ESpawnImportance>                      m_Importance;                                             // 0x04C2(0x0001) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	bool                                               m_DebugIgnoreLosCheck;                                    // 0x04C3(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_bPOITypeExclusive;                                      // 0x04C4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_CanSpawnDay;                                            // 0x04C5(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_CanSpawnNight;                                          // 0x04C6(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_bActiveLocation;                                        // 0x04C7(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData)
	bool                                               m_bAutoSpawnOnVehicle;                                    // 0x04C8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_OverrideSpawnRadius;                                    // 0x04C9(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0xE];                                       // 0x04CA(0x000E) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnSpawnedWithVehicle;                                     // 0x04D8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnSpawned;                                                // 0x04E8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnKilled;                                                 // 0x04F8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDespawned;                                              // 0x0508(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnFinishedStreamingAssets;                                // 0x0518(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData03[0x18];                                      // 0x0528(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendSpawnLocationBase");
		return ptr;
	}


	void SetLocationActive(bool activeLocation);
	void SetHomePoint(const struct FBendLocationReference& Point);
	void SetHomeArea(class ABendHomeArea* Area);
	bool IsHomePointValid();
	bool IsHomeAreaValid();
	bool IsFinishedStreaming();
	bool GetHomePoint(struct FVector* Location);
	class ABendHomeArea* GetHomeArea();
	void ClearHomePoint();
	void ClearHomeArea();
	void ClearFortifications();
	void AddFortification(class ABendFortificationZone* Fortification);
};


// Class BendGame.BendAmbientPopulationSpawnArea
// 0x00D8 (0x05A8 - 0x04D0)
class ABendAmbientPopulationSpawnArea : public ABendAmbientSpawnArea
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x04D0(0x0008) MISSED OFFSET
	TArray<struct FBendAmbientSpawnType>               AdditionalHumanVariationTypes;                            // 0x04D8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	unsigned char                                      UnknownData01[0x8];                                       // 0x04E8(0x0008) MISSED OFFSET
	TArray<struct FBendAmbientSpawnType>               SelectedSpawnTypes;                                       // 0x04F0(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0500(0x0008) MISSED OFFSET
	TArray<struct FSpawnLocationData>                  SpawnLocationDatas;                                       // 0x0508(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData03[0x14];                                      // 0x0518(0x0014) MISSED OFFSET
	bool                                               Debug;                                                    // 0x052C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               InCover;                                                  // 0x052D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               OpenArea;                                                 // 0x052E(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               Woodedarea;                                               // 0x052F(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               InBuildings;                                              // 0x0530(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               NearBuildings;                                            // 0x0531(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               InCave;                                                   // 0x0532(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               InCity;                                                   // 0x0533(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               NearCave;                                                 // 0x0534(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               InGraveyard;                                              // 0x0535(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               NearGraveyard;                                            // 0x0536(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               NearPOI;                                                  // 0x0537(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               NearLakeWater;                                            // 0x0538(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               InNero;                                                   // 0x0539(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               NearNero;                                                 // 0x053A(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               NearNest;                                                 // 0x053B(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               NearonRoad;                                               // 0x053C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               InTunnel;                                                 // 0x053D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               NearTunnel;                                               // 0x053E(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               InCrowArea;                                               // 0x053F(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               Off;                                                      // 0x0540(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               BearZone;                                                 // 0x0541(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               CougarZone;                                               // 0x0542(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               WolfZone;                                                 // 0x0543(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               DeerZone;                                                 // 0x0544(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EAIFactionType>                        SingleTypeSpawnFaction;                                   // 0x0545(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               autochangenamebool;                                       // 0x0546(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x11];                                      // 0x0547(0x0011) MISSED OFFSET
	TArray<TEnumAsByte<EAIFactionType>>                SpawnedFactionsArray;                                     // 0x0558(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	int                                                Index1faction;                                            // 0x0568(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                Index2faction;                                            // 0x056C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<EAIFactionType>                        CurrentTestingFaction;                                    // 0x0570(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData05[0x3];                                       // 0x0571(0x0003) MISSED OFFSET
	int                                                ChanceForFreakWolfToForceAware;                           // 0x0574(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      NavFilter;                                                // 0x0578(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData06[0x28];                                      // 0x0580(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAmbientPopulationSpawnArea");
		return ptr;
	}


	void SpawnTimerCD(TEnumAsByte<EAIFactionType> Faction);
	void SingleTypeUnitSpawn(TEnumAsByte<EAIFactionType> Faction);
	void PredatorPauseRate();
	void PossibleAwarenessCheck(class ABendAIController* Controller, TEnumAsByte<EAIAwareState> PreviousAwareness);
	void HandleOnSpawned(class ABendAIController* Controller, class ABendPawn* Pawn, class ABendSpawnLocationBase* SpawnLocation);
	void GlobalSpawnController(TEnumAsByte<EAIFactionType> Faction);
	bool GetOpenArea();
	int GetNumSpawnedOfFaction(TEnumAsByte<EAIFactionType> Faction);
	struct FTimespan STATIC_GetLastSpawnTimeForFaction(TEnumAsByte<EAIFactionType> Faction);
	bool GetIsCover();
	bool STATIC_GetFactionInteracted(TEnumAsByte<EAIFactionType> Faction);
	int STATIC_GetFactionBlockerCount(TEnumAsByte<EAIFactionType> Faction);
	struct FTimespan STATIC_GetFactionAwareTime(TEnumAsByte<EAIFactionType> Faction);
	void STATIC_ClearFactionData(TEnumAsByte<EAIFactionType> Faction);
};


// Class BendGame.BendAmbientWaveManager
// 0x0080 (0x0550 - 0x04D0)
class ABendAmbientWaveManager : public ABendAmbientSpawnArea
{
public:
	struct FScriptMulticastDelegate                    OnAllWavesCompleted;                                      // 0x04D0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPlayerDied;                                             // 0x04E0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPlayerRespawned;                                        // 0x04F0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnWaveCompleted;                                          // 0x0500(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0510(0x0008) MISSED OFFSET
	TArray<class UWaveSpawnerData*>                    mWaveDataTables;                                          // 0x0518(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<struct FSpecificWaveLocations>              SpecificWaveLocationData;                                 // 0x0528(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	unsigned char                                      UnknownData01[0x18];                                      // 0x0538(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAmbientWaveManager");
		return ptr;
	}


	void StopWaveManager();
	void StartWaveManager(int WaveIndex);
	void StartWaveAtIndex(int WaveIndex);
	void SetWavePawnAwareOfPlayer(class ABendAIController* Controller, class ABendPawn* Pawn, class ABendSpawnLocationBase* SpawnLocation);
	void OnPlayerRespawn(class ABendPlayerController* PlayerController);
	void OnPlayerDeath();
	int GetCurrentWaveIndex();
};


// Class BendGame.BendAnimalFoodChainData
// 0x0010 (0x0038 - 0x0028)
class UBendAnimalFoodChainData : public UDataAsset
{
public:
	TArray<struct FBendAnimalPreyPreference>           PreyPreferenceList;                                       // 0x0028(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAnimalFoodChainData");
		return ptr;
	}


	bool IsPrey(class ABendPawn* Pawn);
	float GetPreyInterest(class ABendPawn* Prey);
};


// Class BendGame.BendAnimBlueprintMessengerInternal
// 0x0000 (0x0220 - 0x0220)
class UBendAnimBlueprintMessengerInternal : public UBendAnimBlueprintMessenger
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAnimBlueprintMessengerInternal");
		return ptr;
	}


	void Relay_OnAnimNotifyStateTick(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, float FrameDeltaTime, class UAnimNotifyState* AnimNotifyState);
	void Relay_OnAnimNotifyStateEnd(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, class UAnimNotifyState* AnimNotifyState);
	void Relay_OnAnimNotifyStateBegin(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, float TotalDuration, class UAnimNotifyState* AnimNotifyState);
	void Relay_OnAnimNotify(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, class UAnimNotify* AnimNotify);
	void OnTransition_Start(const struct FName& TransitionId);
	void OnTransition_Interrupt(const struct FName& TransitionId);
	void OnTransition_End(const struct FName& TransitionId);
	void OnState_Left(const struct FName& StateId);
	void OnState_FullyBlended(const struct FName& StateId);
	void OnState_Entered(const struct FName& StateId);
	void OnGeneralNotify(const struct FName& NotifyId);
	bool IsTransitionRequested(const struct FName& TransitionId);
};


// Class BendGame.BendAnimExpressFaceInterface
// 0x0000 (0x0028 - 0x0028)
class UBendAnimExpressFaceInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAnimExpressFaceInterface");
		return ptr;
	}

};


// Class BendGame.BendAnimFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UBendAnimFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAnimFunctionLibrary");
		return ptr;
	}


	bool STATIC_IsAnimValidAdditive(class UAnimSequenceBase* AnimSequence);
	bool STATIC_IsAnimSequenceNavigable(class UAnimSequenceBase* AnimSequence, class ABendPawn* AnimatedPawn);
	float STATIC_GetCurveValue(class UAnimSequenceBase* Sequence, const struct FName& CurveName, TEnumAsByte<EBendAnimSampleTime> SampleTimeType, float SpecifiedTime);
	float STATIC_GetCurveStartValue(class UAnimSequenceBase* Sequence, const struct FName& CurveName);
	float STATIC_GetCurveEndValue(class UAnimSequenceBase* Sequence, const struct FName& CurveName);
	void STATIC_GetBlendSpaceClosestSampleValueY_WithXRange(class UBlendSpaceBase* BlendSpace, float X, float Y, float ThresholdX, float* SampleValue, bool* bWasSampleFound);
	void STATIC_GetBlendSpaceClosestSampleValueY_NEW(class UBlendSpaceBase* BlendSpace, float Y, float* SampleValue, bool* bWasSampleFound);
	void STATIC_GetBlendSpaceClosestSampleValueX_WithYRange(class UBlendSpaceBase* BlendSpace, float X, float Y, float ThresholdY, float* SampleValue, bool* bWasSampleFound);
	void STATIC_GetBlendSpaceClosestSampleValueX_NEW(class UBlendSpaceBase* BlendSpace, float X, float* SampleValue, bool* bWasSampleFound);
	float STATIC_GetAnimSequenceSpeed_NEW(class UAnimSequenceBase* AnimSequence);
	float STATIC_GetAnimSequenceLength_NEW(class UAnimSequenceBase* AnimSequence);
	struct FTransform STATIC_GetAnimSequenceEndTransform_NEW(class UAnimSequenceBase* AnimSequence);
	float STATIC_GetAnimSequenceDistance_NEW(class UAnimSequenceBase* AnimSequence);
	float STATIC_GetAnimAssetLength(class UAnimationAsset* Asset);
	float STATIC_DEPRECATED_GetBlendSpaceClosestSampleValueY(class UBlendSpaceBase* BlendSpace, float X, float Y, float ThresholdX, bool* bOutput_SampleFound);
	float STATIC_DEPRECATED_GetBlendSpaceClosestSampleValueX(class UBlendSpaceBase* BlendSpace, float X, float Y, float ThresholdY, bool* bOutput_SampleFound);
};


// Class BendGame.BendAnimGestureData
// 0x0018 (0x0040 - 0x0028)
class UBendAnimGestureData : public UDataAsset
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	TArray<class UAnimMontage*>                        AnimationList;                                            // 0x0030(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAnimGestureData");
		return ptr;
	}

};


// Class BendGame.BendAnimHelperRigData
// 0x0028 (0x0050 - 0x0028)
class UBendAnimHelperRigData : public UDataAsset
{
public:
	unsigned char                                      bConvertMayaToUnreal : 1;                                 // 0x0028(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0029(0x0007) MISSED OFFSET
	TArray<struct FBendAnimHelperRigAimConstraintData> AimConstraints;                                           // 0x0030(0x0010) (Edit, ZeroConstructor)
	TArray<struct FBendAnimHelperRigMultiplyDivideData> MultiplyDivides;                                          // 0x0040(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAnimHelperRigData");
		return ptr;
	}

};


// Class BendGame.BendAnimIKManager
// 0x0048 (0x0070 - 0x0028)
class UBendAnimIKManager : public UObject
{
public:
	struct FScriptMulticastDelegate                    OnRegistrationChanged;                                    // 0x0028(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	uint32_t                                           CharacterIKPriority;                                      // 0x0038(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x34];                                      // 0x003C(0x0034) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAnimIKManager");
		return ptr;
	}


	void UnregisterIKManager();
	void RegisterIKManager();
	bool IsRegistered();
	void InitWithSettings(const struct FBendAnimIKSettings& IKSettings);
};


// Class BendGame.BendAnimIKRegistrar
// 0x0020 (0x0368 - 0x0348)
class ABendAnimIKRegistrar : public AActor
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0348(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAnimIKRegistrar");
		return ptr;
	}


	class ABendAnimIKRegistrar* STATIC_GetBendIKRegistrar();
};


// Class BendGame.BendAnimStateInstancesHandle
// 0x0008 (0x0030 - 0x0028)
class UBendAnimStateInstancesHandle : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAnimStateInstancesHandle");
		return ptr;
	}


	float GetCurveValue(int StateInstanceIndex, const struct FName& CurveName, bool bNormalize);
	float GetCurrentStateTime();
	int GetCurrentStateIndex();
	float GetCurrentStateCurveValue(const struct FName& CurveName, bool bNormalize);
};


// Class BendGame.BendAnimInstance
// 0x00F8 (0x0598 - 0x04A0)
class UBendAnimInstance : public UAnimInstance
{
public:
	class UBendAnimBlueprintMessenger*                 AnimMessenger;                                            // 0x04A0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	class UBendAnimBlueprintMessengerInternal*         AnimMessengerInternal;                                    // 0x04A8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0xE8];                                      // 0x04B0(0x00E8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAnimInstance");
		return ptr;
	}


	bool IsSlotPossiblyActive(const struct FName& SlotName);
	bool IsPlayingPerformActionInSlot(const struct FName& SlotName);
	bool HasAnimGraphTag(const struct FName& TagName, bool bQueryActiveStatesOnly);
	float GetRandomSequenceTimeRemainingRatio(const struct FName& GroupName);
	float GetRandomSequenceTimeRemaining(const struct FName& GroupName);
	float GetRandomSequenceLength(const struct FName& GroupName);
	bool GetRandomSequenceIsCompleted(const struct FName& GroupName);
	float GetRandomSequenceCurrentTimeRatio(const struct FName& GroupName);
	float GetRandomSequenceCurrentTime(const struct FName& GroupName);
	int GetLocalInt(const struct FName& VariableName);
	float GetLocalFloat(const struct FName& VariableName);
	class UBlendSpaceBase* GetLocalBlendSpace(const struct FName& VariableName);
	class UAnimSequenceBase* GetLocalAnimSequence(const struct FName& VariableName);
	float GetBlendspaceDistance(class UBlendSpaceBase* BlendSpace, float X, float Y);
	float GetBlendSpaceClosestSampleValueY(class UBlendSpaceBase* BlendSpace, float X, float Y, float ThresholdX, bool* bOutput_SampleFound);
	float GetBlendSpaceClosestSampleValueX(class UBlendSpaceBase* BlendSpace, float X, float Y, float ThresholdY, bool* bOutput_SampleFound);
	float GetAnyAnimNotifyTriggerTime(class UAnimSequenceBase* AnimAsset, class UClass* AnimNotifyClass);
	float GetAnimSequenceSpeed(class UAnimSequenceBase* AnimSequence);
	float GetAnimSequenceLength(class UAnimSequenceBase* AnimSequence);
	struct FTransform GetAnimSequenceEndTransform(class UAnimSequenceBase* AnimSequence);
	float GetAnimSequenceDistance(class UAnimSequenceBase* AnimSequence);
	void GetAnimSequenceCurrentTime(class UAnimSequenceBase* AnimSequence, float* PlaybackTime, bool* bWasFound);
	class UBendAnimStateInstancesHandle* CreateAnimStateInstancesHandle();
	bool CanEarlyExitByComparison(TEnumAsByte<EBendAnimNotifyEarlyExitType> EarlyExitType);
	bool CanEarlyExit(TEnumAsByte<EBendAnimNotifyEarlyExitType> EarlyExitType, float* BlendOutTime);
};


// Class BendGame.BendCharacterAnimInstance
// 0x0528 (0x0AC0 - 0x0598)
class UBendCharacterAnimInstance : public UBendAnimInstance
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0598(0x0008) MISSED OFFSET
	bool                                               ShouldFallAfterClimb;                                     // 0x05A0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               ShouldFallAfterClimbQueued;                               // 0x05A1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               CanClimbToEdge;                                           // 0x05A2(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IsInRagdoll;                                              // 0x05A3(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               DamageAnimDone;                                           // 0x05A4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               DamageAnimDone_UpperBody;                                 // 0x05A5(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               DamageAnimDone_Additive;                                  // 0x05A6(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               WasDamaged;                                               // 0x05A7(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               RecoverySlotDifferent;                                    // 0x05A8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               ForceRecoveryAnimToPlay;                                  // 0x05A9(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               CanTakeDamagedAgainTransition_FullBody;                   // 0x05AA(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x05AB(0x0001) MISSED OFFSET
	unsigned char                                      DamageAnimDone_Blendspace_Fullbody : 1;                   // 0x05AC(0x0001) (BlueprintVisible, BlueprintReadOnly, Transient)
	unsigned char                                      DamageAnimDone_Sequence_Fullbody : 1;                     // 0x05AC(0x0001) (BlueprintVisible, BlueprintReadOnly, Transient)
	unsigned char                                      DamageAnimDone_Blendspace_Additive : 1;                   // 0x05AC(0x0001) (BlueprintVisible, BlueprintReadOnly, Transient)
	unsigned char                                      DamageAnimDone_Sequence_Additive : 1;                     // 0x05AC(0x0001) (BlueprintVisible, BlueprintReadOnly, Transient)
	unsigned char                                      DamageAnimDone_Blendspace_UpperBody : 1;                  // 0x05AC(0x0001) (BlueprintVisible, BlueprintReadOnly, Transient)
	unsigned char                                      DamageAnimDone_Sequence_UpperBody : 1;                    // 0x05AC(0x0001) (BlueprintVisible, BlueprintReadOnly, Transient)
	unsigned char                                      UnknownData02[0x3];                                       // 0x05AD(0x0003) MISSED OFFSET
	bool                                               ClimbIsQueued;                                            // 0x05B0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               ClimbToEdge;                                              // 0x05B1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               ClimbCanRotate;                                           // 0x05B2(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               UpdateClimbExit;                                          // 0x05B3(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               EquippedItemAnimsSwitched;                                // 0x05B4(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               HasFaceExpressionOneShot;                                 // 0x05B5(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               HasFaceExpressionLoop;                                    // 0x05B6(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               HasFaceExpression;                                        // 0x05B7(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               SuppressFaceOverlay;                                      // 0x05B8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x05B9(0x0003) MISSED OFFSET
	unsigned char                                      bHasTouchedGroundAfterSpawningOrTeleporting : 1;          // 0x05BC(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      ShouldEnterFall : 1;                                      // 0x05BC(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      ShouldExitFall : 1;                                       // 0x05BC(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      CanAnticipateFall : 1;                                    // 0x05BC(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData04 : 2;                                        // 0x05BC(0x0001)
	unsigned char                                      IsFalling : 1;                                            // 0x05BC(0x0001) (BlueprintVisible, BlueprintReadOnly, Transient)
	unsigned char                                      IsLanding : 1;                                            // 0x05BC(0x0001) (BlueprintVisible, BlueprintReadOnly, Transient)
	unsigned char                                      MomentarilySpeedUpLandingLocomotion : 1;                  // 0x05BD(0x0001) (Edit)
	unsigned char                                      UnknownData05[0x2];                                       // 0x05BE(0x0002) MISSED OFFSET
	bool                                               HasStraightLinePathToMoveFocus;                           // 0x05C0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               HasFireFocus;                                             // 0x05C1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IsSprinting;                                              // 0x05C2(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IsStoppedAtBarrier;                                       // 0x05C3(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               CanEnableMoveToIdleAnchor;                                // 0x05C4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IKManagerRegistered;                                      // 0x05C5(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               EnableGroundFootIK;                                       // 0x05C6(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               ShouldResetGraph;                                         // 0x05C7(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               ShouldForceResetGraph;                                    // 0x05C8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x3];                                       // 0x05C9(0x0003) MISSED OFFSET
	unsigned char                                      DoLipSync : 1;                                            // 0x05CC(0x0001) (BlueprintVisible, BlueprintReadOnly, Transient)
	unsigned char                                      WantsToNavigateToInteractionPoint : 1;                    // 0x05CC(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData07[0x3];                                       // 0x05CD(0x0003) MISSED OFFSET
	bool                                               ShouldResetGraphCauseJustTeleported;                      // 0x05D0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IsInPerformAction;                                        // 0x05D1(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	bool                                               IsInPerformActionPrevFrame;                               // 0x05D2(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData08[0x1];                                       // 0x05D3(0x0001) MISSED OFFSET
	unsigned char                                      IsPerformActionPausedByMovementStopRequest : 1;           // 0x05D4(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst)
	unsigned char                                      UnknownData09[0x3];                                       // 0x05D5(0x0003) MISSED OFFSET
	bool                                               IsRagdollSortOfAtRest;                                    // 0x05D8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               EnableSaggyMesh;                                          // 0x05D9(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      IsSwimming : 1;                                           // 0x05DA(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      WantsToSwim : 1;                                          // 0x05DA(0x0001) (Edit, BlueprintVisible)
	bool                                               WantsToTransitionMoveToIdleOLD;                           // 0x05DB(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               WantsToTransitionMoveToIdleNEW;                           // 0x05DC(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               WantsToTransitionIdleToMove;                              // 0x05DD(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               WantsToTransitionIdleToTurn;                              // 0x05DE(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               WantsToTransitionMoveToTurn;                              // 0x05DF(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               HasTurnInPlaceTapRequest;                                 // 0x05E0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IsTurnInPlaceTapRequestPotentiallyInProgress;             // 0x05E1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IsUnconscious;                                            // 0x05E2(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EBodyCarryState>                       BodyCarryState;                                           // 0x05E3(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EWeaponType>                           DamagedBy;                                                // 0x05E4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EAnimationSlot>                        DamageAnimSlot;                                           // 0x05E5(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EBendAnimFaceExpression>               FaceExpression;                                           // 0x05E6(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EBendAnimFaceExpressionMood>           FaceExpressionMood;                                       // 0x05E7(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EMovementMode>                         MovementMode;                                             // 0x05E8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData10[0x3];                                       // 0x05E9(0x0003) MISSED OFFSET
	float                                              ClimbAnimLength;                                          // 0x05EC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ClimbAnimLengthQueued;                                    // 0x05F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ClimbExitSpeed;                                           // 0x05F4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ClimbExitAngle;                                           // 0x05F8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ClimbRotateTimer;                                         // 0x05FC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FallingTimer;                                             // 0x0600(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              LandingMaxIntensityFallTime;                              // 0x0604(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              LandingSpeedBoostDuration;                                // 0x0608(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              LandingSpeedBoost_Upright;                                // 0x060C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              LandingSpeedBoost_Crouched;                               // 0x0610(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              LandingSpeedBoostThresholdSpeed;                          // 0x0614(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Speed;                                                    // 0x0618(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DesiredSpeedNotSlowedDownForTurn;                         // 0x061C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	float                                              SmoothSpeed;                                              // 0x0620(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SmoothSpeedNotSlowedDownForTurn;                          // 0x0624(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	float                                              MoveStartSpeedThreshold;                                  // 0x0628(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DesiredMoveToStartSpeedThreshold;                         // 0x062C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MoveStopSpeedThreshold;                                   // 0x0630(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MoveFocusDistFromFeet;                                    // 0x0634(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ArrivalEndAngleOffsetFromApproachAngle;                   // 0x0638(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ArrivalEndAngleOffsetFromApproachAngle_RotationOnlyAnchored;// 0x063C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DeltaToDesiredRotationYaw;                                // 0x0640(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              DeltaToDesiredMovementDirectionYaw;                       // 0x0644(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              DesiredVelocityInterpolated_Length;                       // 0x0648(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              DesiredVelocityInterpolated_LocalYaw;                     // 0x064C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              DesiredVelocity_LocalYaw;                                 // 0x0650(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              RedirectRootMotionYaw;                                    // 0x0654(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              RedirectRootMotionYawAlpha;                               // 0x0658(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData11[0x8];                                       // 0x065C(0x0008) MISSED OFFSET
	float                                              GroundMovementPlaybackRate;                               // 0x0664(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              TorsoPitchAngle;                                          // 0x0668(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              FaceOverlayAlpha;                                         // 0x066C(0x0004) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	float                                              GroundFootIKAlpha;                                        // 0x0670(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              RagdollFaceDownOrFaceUp0To1;                              // 0x0674(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              SaggyMeshAlpha;                                           // 0x0678(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TurnInPlaceTurnAngleSnapped;                              // 0x067C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TurnToMoveTurnAngleSnapped;                               // 0x0680(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DesiredTurnAngleAsFloat;                                  // 0x0684(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              RagdollCountdown;                                         // 0x0688(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              RagdollMaxTime;                                           // 0x068C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                DamageAnimInfoIdx;                                        // 0x0690(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                LastDamageAnimInfoIdx;                                    // 0x0694(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                DamageRecoveryIdx;                                        // 0x0698(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                DamageIdxWhenTimerStarted;                                // 0x069C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                SuppressFaceOverlayRefCount;                              // 0x06A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     HeadNeckLookAngle;                                        // 0x06A4(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     UpperBodyLookAngle;                                       // 0x06B0(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData12[0x4];                                       // 0x06BC(0x0004) MISSED OFFSET
	struct FName                                       ExternalAnimStateName;                                    // 0x06C0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       ExternalAnimStateNamePrevFrame;                           // 0x06C8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<struct FDamageAnimInfo>                     DamageAnimInfoArray;                                      // 0x06D0(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FLipSyncVisemeData>                  LipSyncVisemeList;                                        // 0x06E0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient)
	unsigned char                                      UnknownData13[0x8];                                       // 0x06F0(0x0008) MISSED OFFSET
	TWeakObjectPtr<class ABendPawn>                    BendPawn;                                                 // 0x06F8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TWeakObjectPtr<class UBendCharacterMovementComponent> BendCharacterMovement;                                    // 0x0700(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FTimerHandle                                DamageTimerHandle;                                        // 0x0708(0x0004) (Edit, BlueprintVisible)
	struct FVector                                     Velocity;                                                 // 0x070C(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData14[0x8];                                       // 0x0718(0x0008) MISSED OFFSET
	struct FTransform                                  ArrivalStartTransform;                                    // 0x0720(0x0030) (Edit, BlueprintVisible, IsPlainOldData)
	struct FTransform                                  ArrivalEndTransform;                                      // 0x0750(0x0030) (Edit, BlueprintVisible, IsPlainOldData)
	struct FBendClimbContext                           ClimbAnimData;                                            // 0x0780(0x0078) (Edit, BlueprintVisible)
	struct FBendClimbContext                           ClimbAnimDataQueued;                                      // 0x07F8(0x0078) (Edit, BlueprintVisible)
	struct FBendActionData                             ClimbActionData;                                          // 0x0870(0x00A0) (Edit, BlueprintVisible)
	struct FBendActionData                             ClimbActionDataQueued;                                    // 0x0910(0x00A0) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData15[0x110];                                     // 0x09B0(0x0110) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendCharacterAnimInstance");
		return ptr;
	}


	void TimerExpireSetDamageIndex_CODE();
	bool ShouldEarlyExit(TEnumAsByte<EBendAnimNotifyEarlyExitType> EarlyExitDestination, float* BlendOutTime);
	void OnEventHandled_EquippedItemAnimsSwitched();
	void OnClimbStarting(const struct FBendActionData& fClimbActionData, bool bShouldFallAfterClimb, const struct FBendClimbContext& fClimbContext, bool QueuedClimb);
	bool IsInRagdollAtRest();
	void IKRegistrationChanged(bool NewValue);
	class UAnimSequenceBase* GetRandomSequence(const struct FName& AnimSequenceGroupName, class UAnimSequenceBase* LastUsed);
	class UBlendSpaceBase* GetRandomBlendSpace(const struct FName& AnimBlendSpaceGroupName, class UBlendSpaceBase* LastUsed);
	int GetGripPoseIndex();
	class UBlendSpaceBase* GetEquippedItemBlendSpace(const struct FName& AnimGroupName);
	class UAnimSequenceBase* GetEquippedItemAnimSequence(const struct FName& AnimGroupName);
	struct FTransform GetCharacterStartingAnchorTransform();
	struct FTransform GetCharacterDesiredRotationAnchorTransform();
	class UBlendSpaceBase* GetArrivalBlendspace(const struct FName& AnimGroupName);
	class UAnimSequenceBase* GetArrivalAnimSequence(const struct FName& AnimGroupName);
	bool CanPlayArrivalBlendspaceFromGroup(const struct FName& AnimGroupName, float BlendSpaceX, float BlendSpaceY, float MinDistanceDeviation, float MaxDistanceDeviation);
	bool CanPlayArrivalBlendspace(class UBlendSpaceBase* BlendSpace, float BlendSpaceX, float BlendSpaceY, float MinDistanceDeviation, float MaxDistanceDeviation);
	bool CanPlayArrivalAnimSequenceFromGroup(const struct FName& AnimGroupName, float MinDistanceDeviation, float MaxDistanceDeviation);
	bool CanPlayArrivalAnimSequence(class UAnimSequenceBase* AnimSequence, float MinDistanceDeviation, float MaxDistanceDeviation);
	void AnimNotify_OnLandingLeft();
	void AnimNotify_OnLandingEntered();
	void AnimNotify_OnFallingLeft();
	void AnimNotify_OnFallingEntered();
	void AnimNotify_DamageAnimDone_Left_Sequence_UpperBody();
	void AnimNotify_DamageAnimDone_Left_Sequence_Fullbody();
	void AnimNotify_DamageAnimDone_Left_Sequence_Additive();
	void AnimNotify_DamageAnimDone_Left_Blendspace_UpperBody();
	void AnimNotify_DamageAnimDone_Left_Blendspace_Fullbody();
	void AnimNotify_DamageAnimDone_Left_Blendspace_Additive();
	void AnimNotify_DamageAnimDone_Entered_Sequence_UpperBody();
	void AnimNotify_DamageAnimDone_Entered_Sequence_Fullbody();
	void AnimNotify_DamageAnimDone_Entered_Sequence_Additive();
	void AnimNotify_DamageAnimDone_Entered_Blendspace_UpperBody();
	void AnimNotify_DamageAnimDone_Entered_Blendspace_Fullbody();
	void AnimNotify_DamageAnimDone_Entered_Blendspace_Additive();
};


// Class BendGame.BendAIAnimInstance
// 0x0490 (0x0F50 - 0x0AC0)
class UBendAIAnimInstance : public UBendCharacterAnimInstance
{
public:
	bool                                               IsAttemptingToGrapple;                                    // 0x0AC0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IsAttemptingDirectGrapple;                                // 0x0AC1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               WillBeGrappled;                                           // 0x0AC2(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IsBeingGrappled;                                          // 0x0AC3(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IsGrappling;                                              // 0x0AC4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               GrappleFromAttack;                                        // 0x0AC5(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               FailedToGrapple;                                          // 0x0AC6(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               GrappleBroken;                                            // 0x0AC7(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IsAttemptingToBreakGrapple;                               // 0x0AC8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               CanExitGrapple;                                           // 0x0AC9(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               SuccessfulGrappleAttempt;                                 // 0x0ACA(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               GrappleFailSwipe;                                         // 0x0ACB(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               GrapplerValid;                                            // 0x0ACC(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               FailedBreakGrapple;                                       // 0x0ACD(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               WillDieFromExitAnim;                                      // 0x0ACE(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IsAlive;                                                  // 0x0ACF(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               Stunned;                                                  // 0x0AD0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               UseThreePointCurve;                                       // 0x0AD1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               TurnInPlaceToIdle;                                        // 0x0AD2(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               ForceExitHitReaction;                                     // 0x0AD3(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               AttemptBeingMeleedDeathBlow;                              // 0x0AD4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               AttemptMeleeDeathBlow;                                    // 0x0AD5(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               BeingMeleeDeathBlow;                                      // 0x0AD6(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               CanMeleeAttack;                                           // 0x0AD7(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               WantsMeleeAttack;                                         // 0x0AD8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IsInMeleeAttack;                                          // 0x0AD9(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               WantsMeleeAttack_UpperBody;                               // 0x0ADA(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               DoStabKill;                                               // 0x0ADB(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               MeleeSwingBrokenWpnDeathBlow;                             // 0x0ADC(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               CancelMeleeAttack;                                        // 0x0ADD(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IsAttacking;                                              // 0x0ADE(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IsContextualKill;                                         // 0x0ADF(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IsContextualAttack;                                       // 0x0AE0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               MeleeLastUpdateMoveToTarget;                              // 0x0AE1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IsInPairedMeleeAttack;                                    // 0x0AE2(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               HasValidAttackTarget;                                     // 0x0AE3(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               CancelAttackAnchoring;                                    // 0x0AE4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               StartMeleeMissBranch;                                     // 0x0AE5(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               CanDodge;                                                 // 0x0AE6(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               WantsDodge;                                               // 0x0AE7(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               DoDodge;                                                  // 0x0AE8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               StationaryDodge;                                          // 0x0AE9(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               DoDodgeAttack;                                            // 0x0AEA(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               DoBlockAttackAnim;                                        // 0x0AEB(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               DoPostBlockAttackAnim;                                    // 0x0AEC(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               DoPairedDodge;                                            // 0x0AED(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               DoCounterAttackReady;                                     // 0x0AEE(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               UseDirectionalDodge;                                      // 0x0AEF(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               UseMissDodgeRotation;                                     // 0x0AF0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               DodgeIgnoreAnimState;                                     // 0x0AF1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bHasArrivalBlendSpace_Anchored : 1;                       // 0x0AF2(0x0001) (BlueprintVisible, BlueprintReadOnly, Transient)
	unsigned char                                      bHasArrivalBlendSpace_EitherFoot_Anchored : 1;            // 0x0AF2(0x0001) (BlueprintVisible, BlueprintReadOnly, Transient)
	unsigned char                                      bHasArrivalBlendSpace_SingleFoot_Anchored : 1;            // 0x0AF2(0x0001) (BlueprintVisible, BlueprintReadOnly, Transient)
	unsigned char                                      bHasArrivalBlendSpace_TurnAim_Anchored : 1;               // 0x0AF2(0x0001) (BlueprintVisible, BlueprintReadOnly, Transient)
	unsigned char                                      bHasArrivalBlendSpace_SingleFoot_NonAnchored : 1;         // 0x0AF2(0x0001) (BlueprintVisible, BlueprintReadOnly, Transient)
	unsigned char                                      bHasArrivalBlendSpace_TurnAim_NonAnchored : 1;            // 0x0AF2(0x0001) (BlueprintVisible, BlueprintReadOnly, Transient)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0AF3(0x0001) MISSED OFFSET
	unsigned char                                      bMovingPivotValid : 1;                                    // 0x0AF4(0x0001) (BlueprintVisible, BlueprintReadOnly, Transient)
	unsigned char                                      bAbortMovingPivot : 1;                                    // 0x0AF4(0x0001) (BlueprintVisible, BlueprintReadOnly, Transient)
	unsigned char                                      SuppressPropGrip : 1;                                     // 0x0AF4(0x0001) (BlueprintVisible, BlueprintReadOnly, Transient)
	unsigned char                                      SuppressPropGrip_KeepPrimaryHandGrip : 1;                 // 0x0AF4(0x0001) (BlueprintVisible, BlueprintReadOnly, Transient)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0AF5(0x0003) MISSED OFFSET
	bool                                               StartStealthKill;                                         // 0x0AF8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IsStealthKillAttacker;                                    // 0x0AF9(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               StartTrapPlacement;                                       // 0x0AFA(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               ShouldStumble;                                            // 0x0AFB(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               DoVictimsPairedAnim;                                      // 0x0AFC(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               DoVictimsPairedAnim_3;                                    // 0x0AFD(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IsInVictimsPairedAnimState;                               // 0x0AFE(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               DoVictimsLoopingAnim;                                     // 0x0AFF(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               DoVictimsExitLoopingAnim;                                 // 0x0B00(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               ShouldPlaySemiAware;                                      // 0x0B01(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               ShouldAbortSemiAware;                                     // 0x0B02(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               SemiAwareAnimIsBlendSpace;                                // 0x0B03(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               ShouldPlayOneShot;                                        // 0x0B04(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IsInOneShot;                                              // 0x0B05(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               ShouldAbortOneShot;                                       // 0x0B06(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               OneShotIsBlendspace;                                      // 0x0B07(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               AnchoredOneShot;                                          // 0x0B08(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0B09(0x0003) MISSED OFFSET
	unsigned char                                      BlindFireOffsetYawIsNegated : 1;                          // 0x0B0C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      IsCrouching : 1;                                          // 0x0B0C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0B0D(0x0003) MISSED OFFSET
	TEnumAsByte<EFootState>                            ProceduralFootState;                                      // 0x0B10(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EOverlayType>                          OneShotOverlayType;                                       // 0x0B11(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x6];                                       // 0x0B12(0x0006) MISSED OFFSET
	TEnumAsByte<EAIAwareState>                         AwareState;                                               // 0x0B18(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x3];                                       // 0x0B19(0x0003) MISSED OFFSET
	float                                              PairedDodgeBlendspaceAngle;                               // 0x0B1C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PairedDirectionalDodgeAngle;                              // 0x0B20(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ArrivalFootForward;                                       // 0x0B24(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              CurrentGrapplePct;                                        // 0x0B28(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              GrappleOffsetStartTime;                                   // 0x0B2C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              InitDistOfGrapple;                                        // 0x0B30(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ActualForwardSpeed;                                       // 0x0B34(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	float                                              ActualHorizontalSpeed;                                    // 0x0B38(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	float                                              MovingPivotOffsetStartTime;                               // 0x0B3C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              MovingPivotTime;                                          // 0x0B40(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              MovingPivotEndTime;                                       // 0x0B44(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              TurnInPlaceAngle;                                         // 0x0B48(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DeltaToDesiredRotationForPivotTriggerYaw;                 // 0x0B4C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              DeltaToDesiredMovementDirectionForPivotTriggerYaw;        // 0x0B50(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              DesiredSustainedStrafeAngleYaw;                           // 0x0B54(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              StrafeAngleBias;                                          // 0x0B58(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              Health;                                                   // 0x0B5C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MeleeAnimLength;                                          // 0x0B60(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              OneShotBlendspaceAngle;                                   // 0x0B64(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AimUpDownAngle;                                           // 0x0B68(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AimUpDownAngleTarget;                                     // 0x0B6C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AimMoveOffsetAngle;                                       // 0x0B70(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AimMoveOffsetAngleTarget;                                 // 0x0B74(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BlindFireOffsetYaw;                                       // 0x0B78(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BlindFireOffsetYawTarget;                                 // 0x0B7C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BlindFireOffsetYawClamped;                                // 0x0B80(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              StealthKillBlendspaceAngle;                               // 0x0B84(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MoveSpeedMultiplier;                                      // 0x0B88(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TWeakObjectPtr<class AController>                  Controller;                                               // 0x0B8C(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TWeakObjectPtr<class ABendAIController>            BendController;                                           // 0x0B94(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TWeakObjectPtr<class AActor>                       LastValidAttackTarget;                                    // 0x0B9C(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TWeakObjectPtr<class ABendPawn>                    LastGrappleIgnoreTarget;                                  // 0x0BA4(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x4];                                       // 0x0BAC(0x0004) MISSED OFFSET
	class UAnimSequenceBase*                           DodgeAttackAnim;                                          // 0x0BB0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           BlockAttackAnim;                                          // 0x0BB8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           PostBlockAttackAnim;                                      // 0x0BC0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           MissDodgeAnim;                                            // 0x0BC8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           CounterAttackReadyAnim;                                   // 0x0BD0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           PairedDodgeAnim;                                          // 0x0BD8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UBlendSpaceBase*                             PairedDodgeBlendspace;                                    // 0x0BE0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UBlendSpaceBase*                             ArrivalBlendSpace_EitherFoot;                             // 0x0BE8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	class UBlendSpaceBase*                             ArrivalBlendSpace_SingleFoot;                             // 0x0BF0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	class UBlendSpaceBase*                             ArrivalBlendSpace_TurnAim;                                // 0x0BF8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	class UAnimSequenceBase*                           GrappleAnimSeq;                                           // 0x0C00(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           GrappleBreakingOutAnimSeq;                                // 0x0C08(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           GrappleEnterAnimSeq;                                      // 0x0C10(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UBlendSpaceBase*                             GrappleBlendspace;                                        // 0x0C18(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           StealthKillAnim;                                          // 0x0C20(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UBlendSpaceBase*                             StealthKillBlendspace;                                    // 0x0C28(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UBlendSpaceBase*                             TrapPlacementBlendspace;                                  // 0x0C30(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           VictimsExitLoopingAnimation;                              // 0x0C38(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           VictimsPairedAnimation;                                   // 0x0C40(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           VictimsPairedAnimation_3;                                 // 0x0C48(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FPairedAnimationData                        VictimsPairedAnim;                                        // 0x0C50(0x0028) (Edit, BlueprintVisible)
	struct FPairedAnimationData                        VictimsPairedAnim_3;                                      // 0x0C78(0x0028) (Edit, BlueprintVisible)
	class UAnimSequenceBase*                           VictimsLoopingAnimation;                                  // 0x0CA0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           MeleeVictimDeathKillAnimSeq;                              // 0x0CA8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FPairedAnimationData                        MeleeVictimDeathKillAnim;                                 // 0x0CB0(0x0028) (Edit, BlueprintVisible)
	class UAnimSequenceBase*                           MeleeAttackerDeathKillAnimSeq;                            // 0x0CD8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           MeleeAttackedDeathAnim;                                   // 0x0CE0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           MeleeMissAnim;                                            // 0x0CE8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UAnimSequence*                               MovingPivotAnimation;                                     // 0x0CF0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	struct FName                                       SemiAwareGroupName;                                       // 0x0CF8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	struct FName                                       OneShotGroupName;                                         // 0x0D00(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	struct FBendAttackData                             AttackData;                                               // 0x0D08(0x0060) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData07[0x8];                                       // 0x0D68(0x0008) MISSED OFFSET
	struct FTransform                                  ContextualTransform;                                      // 0x0D70(0x0030) (Edit, BlueprintVisible, IsPlainOldData)
	struct FTransform                                  MovingPivotStartTransform;                                // 0x0DA0(0x0030) (BlueprintVisible, BlueprintReadOnly, Transient, IsPlainOldData)
	struct FTransform                                  MovingPivotTransform;                                     // 0x0DD0(0x0030) (BlueprintVisible, BlueprintReadOnly, Transient, IsPlainOldData)
	struct FTransform                                  MovingPivotEndTransform;                                  // 0x0E00(0x0030) (BlueprintVisible, BlueprintReadOnly, Transient, IsPlainOldData)
	struct FTransform                                  OneShotAnchor;                                            // 0x0E30(0x0030) (Edit, BlueprintVisible, IsPlainOldData)
	struct FDyingAnimInfo                              DyingAnimInfo;                                            // 0x0E60(0x0070) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData08[0x8];                                       // 0x0ED0(0x0008) MISSED OFFSET
	struct FRotator                                    MissDodgeRotation;                                        // 0x0ED8(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FRotator                                    CounterAttackReadyRotation;                               // 0x0EE4(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FRotator                                    SavedPairedAnimRotation;                                  // 0x0EF0(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FRotator                                    FloorOrientationComponentSpace;                           // 0x0EFC(0x000C) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData09[0x48];                                      // 0x0F08(0x0048) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAIAnimInstance");
		return ptr;
	}


	void TurnInPlaceHandler(float angle);
	void SemiAwareAnimStarted();
	void SemiAwareAnimFinished();
	void PerformOneShotDelegate(const struct FName& CategoryName);
	void OnTriggerMeleeMissBranch(class UAnimSequenceBase* MissAnim);
	void OnAttackTargetFreeDodgeStartedHandler();
	void Handle_DamageDoneState_Exit();
	void Handle_DamageAnim_Exit_UpperBody();
	void Handle_DamageAnim_Exit();
	void Handle_DamageAnim_Enter_UpperBody();
	void Handle_DamageAnim_Enter();
	void AnimNotify_StartMeleeMissBranch();
	void AnimNotify_OverlayOneShot_End();
	void AnimNotify_OverlayOneShot_Begin();
	void AnimNotify_OneShotAnimStarted();
	void AnimNotify_OneShotAnimFinished();
	void AnimNotify_MeleeDeathBlow_Start();
	void AnimNotify_MeleeDeathBlow_End();
	void AnimNotify_MeleedDeathBlow_Start();
	void AnimNotify_MeleedDeathBlow_End();
	void AnimNotify_GrappleStarted();
	void AnimNotify_GrappleFailedStarted();
	void AnimNotify_GrappleFailedEnded();
	void AnimNotify_GrappleExitStarted();
	void AnimNotify_GrappleExitEnded();
	void AnimNotify_GrappleEnterStarted();
	void AnimNotify_GrappleEnterEnded();
	void AnimNotify_GrappleEnded();
	void AnimNotify_GrappleAttemptStarted();
	void AnimNotify_GrappleAttemptEnded();
	void AnimNotify_EndMeleeMissBranch();
	void AbortOneShotDelegate(const struct FName& CategoryName);
};


// Class BendGame.BendAnimalAnimInstance
// 0x03A0 (0x12F0 - 0x0F50)
class UBendAnimalAnimInstance : public UBendAIAnimInstance
{
public:
	class ABendAnimalPawn*                             AnimalPawn;                                               // 0x0F50(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	class ABendAnimalController*                       AnimalController;                                         // 0x0F58(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              DeltaTime;                                                // 0x0F60(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              MoveSpeed;                                                // 0x0F64(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              MoveSpeedTarget;                                          // 0x0F68(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bEnableSaggyMeshAndGroundFootIK;                          // 0x0F6C(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0F6D(0x0003) MISSED OFFSET
	float                                              SaggyMeshAndGroundFootIKAlpha;                            // 0x0F70(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bThrottleExpensiveOperations;                             // 0x0F74(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0F75(0x0003) MISSED OFFSET
	float                                              ThrottleExpensiveOperationsAlpha;                         // 0x0F78(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              TurnAngle;                                                // 0x0F7C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              TurnAngleTarget;                                          // 0x0F80(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              TurnAngleSnapped;                                         // 0x0F84(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	struct FRotator                                    TurnAngleRatios;                                          // 0x0F88(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              LookYaw;                                                  // 0x0F94(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              NormalizedHealth;                                         // 0x0F98(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bMustWalkBecauseHurt;                                     // 0x0F9C(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0F9D(0x0003) MISSED OFFSET
	float                                              LookPitch;                                                // 0x0FA0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              EffectiveSpeed;                                           // 0x0FA4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	struct FVector                                     EffectiveSpeedVector;                                     // 0x0FA8(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              EffectiveSmoothedSpeed;                                   // 0x0FB4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	struct FVector                                     EffectiveSmoothedSpeedVector;                             // 0x0FB8(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	struct FVector                                     SmoothedAccelerationVector;                               // 0x0FC4(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              TimeBeingEffectivelyIdle;                                 // 0x0FD0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bOverrideToIdleState;                                     // 0x0FD4(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bPawnEffectivelyIdle;                                     // 0x0FD5(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData03[0x2];                                       // 0x0FD6(0x0002) MISSED OFFSET
	struct FVector                                     ActorLocation;                                            // 0x0FD8(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	struct FRotator                                    ActorRotation;                                            // 0x0FE4(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              TimeBeforeTryingMovingAgain;                              // 0x0FF0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bIsWantsMeleeAttack;                                      // 0x0FF4(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bIsWantsFailedAttack;                                     // 0x0FF5(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bIsWantsPostAttackTurn;                                   // 0x0FF6(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bIsWantsDodge;                                            // 0x0FF7(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bIsWantsAlert;                                            // 0x0FF8(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bIsWantsStartled;                                         // 0x0FF9(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bIsWantsSleep;                                            // 0x0FFA(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bIsWantsSit;                                              // 0x0FFB(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bIsWantsRest;                                             // 0x0FFC(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bIsWantsTaunt;                                            // 0x0FFD(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData04[0x2];                                       // 0x0FFE(0x0002) MISSED OFFSET
	float                                              MaxFallingVelocityAttained;                               // 0x1000(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bIsWantsLanding;                                          // 0x1004(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bWantsFlying;                                             // 0x1005(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bInGroundMovement;                                        // 0x1006(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bInFlightMovement;                                        // 0x1007(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bIsPerching;                                              // 0x1008(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bIsWantsRetreat;                                          // 0x1009(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bIsWantsScent;                                            // 0x100A(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bIsRunningBack;                                           // 0x100B(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bFastEnteringAttackStance;                                // 0x100C(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	TEnumAsByte<EAIFactionType>                        FireFocusFaction;                                         // 0x100D(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData05[0x2];                                       // 0x100E(0x0002) MISSED OFFSET
	float                                              ActionDuration;                                           // 0x1010(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              MeleeAttackDuration;                                      // 0x1014(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bLeewayBeforeAdditiveHijacks;                             // 0x1018(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	bool                                               bDamageFullyBlended;                                      // 0x1019(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	bool                                               bIsDead;                                                  // 0x101A(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bGotHit;                                                  // 0x101B(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	struct FVector                                     GotHitFrom;                                               // 0x101C(0x000C) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	struct FVector                                     LandingDestination;                                       // 0x1028(0x000C) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bInCombat;                                                // 0x1034(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData06[0x3];                                       // 0x1035(0x0003) MISSED OFFSET
	float                                              ForwardToFireFocusAngle;                                  // 0x1038(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bCanPlayRunningDeath;                                     // 0x103C(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bCanPlayJumpingDeath;                                     // 0x103D(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData07[0x2];                                       // 0x103E(0x0002) MISSED OFFSET
	struct FVector                                     BasicJumpStartPoint;                                      // 0x1040(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	struct FVector                                     BasicJumpStartVelocity;                                   // 0x104C(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              MinFallingVelocityForPainAnimation;                       // 0x1058(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              BasicJumpRequiredYaw;                                     // 0x105C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              CurrentYaw;                                               // 0x1060(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              BasicJumpYawDiff;                                         // 0x1064(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              JumpingFallingProgression;                                // 0x1068(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bIsJumpingOrFalling;                                      // 0x106C(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bIsInFallingState;                                        // 0x106D(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData08[0x2];                                       // 0x106E(0x0002) MISSED OFFSET
	struct FVector                                     FutureVelocity;                                           // 0x1070(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bWantsBasicClimb;                                         // 0x107C(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bHasScaryAffliction;                                      // 0x107D(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData09[0x2];                                       // 0x107E(0x0002) MISSED OFFSET
	float                                              TimeBeforeRevertingToIdle;                                // 0x1080(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MoveInterpRateRampingUp;                                  // 0x1084(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MoveInterpRateRampingDown;                                // 0x1088(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TurnAngleInterpSpeed;                                     // 0x108C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              LookAngleInterpSpeed;                                     // 0x1090(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              SaggyMeshInterpSpeed;                                     // 0x1094(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ActorSpeedInterpSpeed;                                    // 0x1098(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxLookAngleHorizontal;                                   // 0x109C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxLookAngleUp;                                           // 0x10A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxLookAngleDown;                                         // 0x10A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxSpeedForHeadRotation;                                  // 0x10A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MoveSpeedSlowTurnAngle;                                   // 0x10AC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MoveSpeedSlowTurnPct;                                     // 0x10B0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              SharpTurnSpeedMult;                                       // 0x10B4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bCanRetreat;                                              // 0x10B8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bCanSleep;                                                // 0x10B9(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bCanScent;                                                // 0x10BA(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bCanSit;                                                  // 0x10BB(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bCanBeStartled;                                           // 0x10BC(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bCanRest;                                                 // 0x10BD(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData10[0x2];                                       // 0x10BE(0x0002) MISSED OFFSET
	struct FName                                       DisableIKCurveName;                                       // 0x10C0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TWeakObjectPtr<class UBendAnimalMovementComponent> BendAnimalMovement;                                       // 0x10C8(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FScriptMulticastDelegate                    MeleeAttackAnimEnded;                                     // 0x10D0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    DodgeAnimStarted;                                         // 0x10E0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    DodgeAnimEnded;                                           // 0x10F0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    FlyingMovementStarted;                                    // 0x1100(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    FlyingMovementEnded;                                      // 0x1110(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    PerchingAnimStarted;                                      // 0x1120(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    PerchingAnimEnded;                                        // 0x1130(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    TakeOffAnimStarted;                                       // 0x1140(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    TakeOffAnimEnded;                                         // 0x1150(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    LandingAnimStarted;                                       // 0x1160(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    LandingAnimEnded;                                         // 0x1170(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    DamageAnimStarted;                                        // 0x1180(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    DamageAnimEnded;                                          // 0x1190(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    AlertStarted;                                             // 0x11A0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    AlertEnded;                                               // 0x11B0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    StartledStarted;                                          // 0x11C0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    StartledEnded;                                            // 0x11D0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    SleepStarted;                                             // 0x11E0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    SleepEnded;                                               // 0x11F0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    RetreatStarted;                                           // 0x1200(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    RetreatEnded;                                             // 0x1210(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ScentStarted;                                             // 0x1220(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ScentEnded;                                               // 0x1230(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    SitStarted;                                               // 0x1240(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    SitEnded;                                                 // 0x1250(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    RestStarted;                                              // 0x1260(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    RestEnded;                                                // 0x1270(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    TauntStarted;                                             // 0x1280(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    TauntEnded;                                               // 0x1290(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OccasionalIdleStarted;                                    // 0x12A0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OccasionalIdleEnded;                                      // 0x12B0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData11[0x30];                                      // 0x12C0(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAnimalAnimInstance");
		return ptr;
	}


	void OnWeaponHitEnemyHandler();
	void OnWantsTaunt();
	void OnWantsStartled();
	void OnWantsSleep(float Duration);
	void OnWantsSit(float Duration);
	void OnWantsScent();
	void OnWantsRetreat();
	void OnWantsRest(float Duration);
	void OnWantsMeleeAttack(const struct FBendAttackData& BendAttackData);
	void OnWantsLanding();
	void OnWantsFlying(bool bEnterFlying);
	void OnWantsFailedAttack();
	void OnWantsDodge();
	void OnWantsAlert();
	void OnTakeDamageHandler(float Damage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser, class ABendPawn* PawnDamaged, bool CriticalHit, bool KillingBlow);
	void OnCriticalHitTakenHandler(const struct FHitResult& Hit, class UDamageType* DamageType, class ABendProjectile* Projectile, float DamageAmount);
	bool IsCanceledPOIType(const struct FString& Name);
	bool HasCanceledPOI();
	bool GetIsRelevantDamageAnimDone(int MachineIndex, int StateIndex, int TransitionIndex, int AnimIdx);
	void AnimNotify_Taunt_Start();
	void AnimNotify_Taunt_End();
	void AnimNotify_TakeOff_Start();
	void AnimNotify_TakeOff_End();
	void AnimNotify_Startled_Start();
	void AnimNotify_Startled_End();
	void AnimNotify_Sleep_Start();
	void AnimNotify_Sleep_End();
	void AnimNotify_Sit_Start();
	void AnimNotify_Sit_End();
	void AnimNotify_Scent_Start();
	void AnimNotify_Scent_End();
	void AnimNotify_Scared_Start();
	void AnimNotify_Scared_End();
	void AnimNotify_Rest_Start();
	void AnimNotify_Rest_End();
	void AnimNotify_Reset_Canceled_POI();
	void AnimNotify_Perching_Start();
	void AnimNotify_Perching_End();
	void AnimNotify_OccasionalIdle_Start();
	void AnimNotify_OccasionalIdle_End();
	void AnimNotify_MeleeAttack_Start();
	void AnimNotify_MeleeAttack_End();
	void AnimNotify_Landing_Start();
	void AnimNotify_Landing_End();
	void AnimNotify_FullBodyDamageReaction_Left();
	void AnimNotify_FullBodyDamageReaction_Entered();
	void AnimNotify_FlyingTurnAround_End();
	void AnimNotify_FlyingMovement_Start();
	void AnimNotify_FlyingMovement_End();
	void AnimNotify_Falling_Transition();
	void AnimNotify_Falling_System_Exited();
	void AnimNotify_Falling_Start();
	void AnimNotify_Falling_Fully_Blended();
	void AnimNotify_Falling_Done();
	void AnimNotify_EdgeTraversal_Exit();
	void AnimNotify_EdgeTraversal_Enter();
	void AnimNotify_Dodge_Start();
	void AnimNotify_Dodge_End();
	void AnimNotify_DamageReaction_Fully_Blended();
	void AnimNotify_Climbing_Turn_Transition();
	void AnimNotify_Climbing_To_Falling_Transition();
	void AnimNotify_Climbing_RunToStart_Transition();
	void AnimNotify_Climbing_Jump_Transition();
	void AnimNotify_Climbing_Done();
	void AnimNotify_AttackStance_Start();
	void AnimNotify_Alert_Start();
	void AnimNotify_Alert_End();
	void AnimNotify_AdditiveFullBodyDamageReaction_Left();
	void AnimNotify_AdditiveFullBodyDamageReaction_Hijack();
	void AnimNotify_AdditiveFullBodyDamageReaction_Entered();
	void AnimNotify_AdditiveFullBodyDamageReaction_CancelHijack();
	void AnimNotify_AdditiveDamageReaction_Left();
	void AnimNotify_AdditiveDamageReaction_Entered();
};


// Class BendGame.BendBearAnimInstance
// 0x0030 (0x1320 - 0x12F0)
class UBendBearAnimInstance : public UBendAnimalAnimInstance
{
public:
	int                                                CombatPhase;                                              // 0x12F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                MovementState;                                            // 0x12F4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              RushTimer;                                                // 0x12F8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MissTargetAngle;                                          // 0x12FC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TargetAimAnglePredicted;                                  // 0x1300(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TargetAimAngle;                                           // 0x1304(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               CanUseAttackStance;                                       // 0x1308(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x1309(0x0003) MISSED OFFSET
	TWeakObjectPtr<class ABendBearController>          BearController;                                           // 0x130C(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0xC];                                       // 0x1314(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBearAnimInstance");
		return ptr;
	}


	void HitDestructible();
	void CheckCollision(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& HitResult);
	void AnimNotify_Stun_Exit();
	void AnimNotify_Stun_Enter();
	void AnimNotify_RushLeft();
	void AnimNotify_RushFinishedLeft();
	void AnimNotify_RushFinishedEntered();
	void AnimNotify_RushEntered();
	void AnimNotify_RoarLeft();
	void AnimNotify_RoarEntered();
	void AnimNotify_PrepareRushEntered();
	void AnimNotify_PrepareRushCancelled();
};


// Class BendGame.BendCrowAnimInstance
// 0x0020 (0x1310 - 0x12F0)
class UBendCrowAnimInstance : public UBendAnimalAnimInstance
{
public:
	float                                              DefaultLocomotionSpeedForTakeOff;                         // 0x12F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData)
	float                                              DefaultLocomotionSpeedForLanding;                         // 0x12F4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData)
	bool                                               Initialized;                                              // 0x12F8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x12F9(0x0003) MISSED OFFSET
	float                                              CurrentFlapSpeedRatio;                                    // 0x12FC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData)
	float                                              CurrentMoveSpeedRatio;                                    // 0x1300(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData)
	struct FRotator                                    FlightTurnRatios;                                         // 0x1304(0x000C) (Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendCrowAnimInstance");
		return ptr;
	}

};


// Class BendGame.BendFreakerAnimInstance
// 0x0020 (0x0F70 - 0x0F50)
class UBendFreakerAnimInstance : public UBendAIAnimInstance
{
public:
	float                                              HeadTrackingYaw;                                          // 0x0F50(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              HeadTrackingPitch;                                        // 0x0F54(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           VocalFaceAnimSeq;                                         // 0x0F58(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UAnimationAsset*                             GrappleAttemptAsset;                                      // 0x0F60(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0F68(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendFreakerAnimInstance");
		return ptr;
	}

};


// Class BendGame.BendNewtAnimInstance
// 0x0020 (0x0F90 - 0x0F70)
class UBendNewtAnimInstance : public UBendFreakerAnimInstance
{
public:
	float                                              HangingOverhangDistance;                                  // 0x0F70(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TWeakObjectPtr<class ABendNewtController>          NewtController;                                           // 0x0F74(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0F7C(0x0004) MISSED OFFSET
	TArray<struct FVector>                             HangingHandPositions;                                     // 0x0F80(0x0010) (Edit, BlueprintVisible, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendNewtAnimInstance");
		return ptr;
	}


	void TransitionQueuedClimbToCurrent();
	void LeaveCoverHandler(bool hasPath);
	void BeginRoofHangHandler(const struct FTransform& coverAnchor, float overhangDistance, TArray<struct FVector> HandPositions);
	void AnimNotify_LeftCover();
	void AnimNotify_ExitCoverSM();
	void AnimNotify_EnterCoverFinished();
	void AnimNotify_EnterCover();
	void AnimNotify_ClimbEnding();
	void AnimNotify_ClimbEnded();
};


// Class BendGame.BendSwarmerAnimInstance
// 0x0020 (0x0F90 - 0x0F70)
class UBendSwarmerAnimInstance : public UBendFreakerAnimInstance
{
public:
	float                                              EnragedSpeed;                                             // 0x0F70(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              RecentCritTimer;                                          // 0x0F74(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               KnockedToGround;                                          // 0x0F78(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0F79(0x0003) MISSED OFFSET
	TWeakObjectPtr<class ABendSwarmerController>       SwarmerController;                                        // 0x0F7C(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0xC];                                       // 0x0F84(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendSwarmerAnimInstance");
		return ptr;
	}


	void SetForceRecovery(TEnumAsByte<EAnimationSlot> AnimSlot);
	void OnWeaponHitEnemyHandler();
	void OnTakeDamageHandler(float Damage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser, class ABendPawn* PawnDamaged, bool CriticalHit, bool KillingBlow);
	void OnCriticalHitTakenHandler(const struct FHitResult& Hit, class UDamageType* DamageType, class ABendProjectile* Projectile, float DamageAmount);
};


// Class BendGame.BendHumanBaseAnimInstance
// 0x0900 (0x1850 - 0x0F50)
class UBendHumanBaseAnimInstance : public UBendAIAnimInstance
{
public:
	unsigned char                                      IsInVehiclePrevFrame : 1;                                 // 0x0F50(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      VehicleCollidedCurr : 1;                                  // 0x0F50(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      VehicleCollidedNext : 1;                                  // 0x0F50(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      VehicleIsHandIKOn : 1;                                    // 0x0F50(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      VehicleIsRiderOccupyingOrTryingToOccupyDriverSeat : 1;    // 0x0F50(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      VehicleGearShifted : 1;                                   // 0x0F50(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      VehicleThrottlePlayAnim : 1;                              // 0x0F50(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      IsInVehicleOrEnteringOrExiting : 1;                       // 0x0F50(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      HasAnyTireContact : 1;                                    // 0x0F51(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      VehicleHasDriverNotGettingOff : 1;                        // 0x0F51(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      VehicleExitLeftSide : 1;                                  // 0x0F51(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      IsFinishedExitVehicle : 1;                                // 0x0F51(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      IsFinishedFallOffVehicle : 1;                             // 0x0F51(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      IsFallOffVehicle_FullyBlended : 1;                        // 0x0F51(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      VehicleHasPassengers : 1;                                 // 0x0F51(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      VehicleRiderLeanFromLineOfFire_Fast : 1;                  // 0x0F51(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      VehicleRiderLeanFromLineOfFire_Left : 1;                  // 0x0F52(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      VehicleRiderLeanFromLineOfFire_Right : 1;                 // 0x0F52(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      VehicleShouldRiderHurry : 1;                              // 0x0F52(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      IsRawThrottleEngaged : 1;                                 // 0x0F52(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      ShouldFallOffVehicle : 1;                                 // 0x0F52(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      CanFallOffVehicle : 1;                                    // 0x0F52(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      VehicleExitSwitchedExitDirection : 1;                     // 0x0F52(0x0001) (BlueprintVisible, BlueprintReadOnly, Transient)
	unsigned char                                      VehicleRiderShouldDodge : 1;                              // 0x0F52(0x0001) (BlueprintVisible, BlueprintReadOnly, Transient)
	unsigned char                                      bVehicleRiderHandIk : 1;                                  // 0x0F53(0x0001) (BlueprintVisible, BlueprintReadOnly, Transient)
	unsigned char                                      WaterTooDeep : 1;                                         // 0x0F53(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      LookAimTargetValid : 1;                                   // 0x0F53(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      IsAiming : 1;                                             // 0x0F53(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      WantsToAim : 1;                                           // 0x0F53(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      MeleeWeaponDoneDisarming : 1;                             // 0x0F53(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      WeaponFiring : 1;                                         // 0x0F53(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      EquippedWeaponIsFists : 1;                                // 0x0F53(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      EquippedWeaponIsMelee : 1;                                // 0x0F54(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      EquippedWeaponIsGun : 1;                                  // 0x0F54(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      EquippedWeaponIsThrown : 1;                               // 0x0F54(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      IsFireFocusMeleeAttackingMe : 1;                          // 0x0F54(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      IsAutoHolsterDisabled : 1;                                // 0x0F54(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      HasWeaponEquippedOrIsEquipping : 1;                       // 0x0F54(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      IsWeaponBroken : 1;                                       // 0x0F54(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      TempResponsiveAimingHack : 1;                             // 0x0F54(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      WeaponAimedBehindLowCover : 1;                            // 0x0F55(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      WeaponAimedBehindLowCoverLastFrame : 1;                   // 0x0F55(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      IsAimingAndHasIsAimingCurve : 1;                          // 0x0F55(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      EquippedOrEquippingWeaponIsGun : 1;                       // 0x0F55(0x0001) (BlueprintVisible, BlueprintReadOnly, Transient)
	unsigned char                                      UseWeaponFixup : 1;                                       // 0x0F55(0x0001) (BlueprintVisible, BlueprintReadOnly, Transient)
	unsigned char                                      UseTenseArmLayer : 1;                                     // 0x0F55(0x0001) (BlueprintVisible, BlueprintReadOnly, Transient)
	unsigned char                                      HasAimingTarget : 1;                                      // 0x0F55(0x0001) (BlueprintVisible, BlueprintReadOnly, Transient)
	unsigned char                                      WantsToThrow : 1;                                         // 0x0F55(0x0001) (BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0F56(0x0002) MISSED OFFSET
	TEnumAsByte<EAimedAnimMoveStyle>                   AimedMoveStyle;                                           // 0x0F58(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EAimStance>                            AimStance;                                                // 0x0F59(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ECoverLeanDirection>                   LeanDirection;                                            // 0x0F5A(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ECoverLeanDirection>                   AnchorDirection;                                          // 0x0F5B(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ECoverLeanDirection>                   NewAnchorDirection;                                       // 0x0F5C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ECoverExitAnim>                        CoverExitAnimType;                                        // 0x0F5D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EBendPropGripStyle>                    PropGripStyle;                                            // 0x0F5E(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ETensePose>                            TensePose;                                                // 0x0F5F(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EWeaponType>                           WeaponType;                                               // 0x0F60(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EUnaimedAnimMoveStyle>                 UnaimedMoveStyle;                                         // 0x0F61(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EBendVehicleType>                      VehicleType;                                              // 0x0F62(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EVehicleSeat>                          VehicleSeat;                                              // 0x0F63(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TorsoPitchStartAngle;                                     // 0x0F64(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TorsoPitchEndAngle;                                       // 0x0F68(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              TorsoPitchAlpha;                                          // 0x0F6C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              ApproachAngle;                                            // 0x0F70(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ExitCoverAngle;                                           // 0x0F74(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CrouchAlpha;                                              // 0x0F78(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              HighestFallVel;                                           // 0x0F7C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FallLandAngle;                                            // 0x0F80(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ForceUncrouchWhenLandingDuration;                         // 0x0F84(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FlinchReactionAngle;                                      // 0x0F88(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              GroundJogSpeed;                                           // 0x0F8C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              GroundSprintSpeedThreshold;                               // 0x0F90(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              GroundPivotPlayRateScale;                                 // 0x0F94(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	float                                              Pivot180TriggerThreshold;                                 // 0x0F98(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              RunFastToIdleSpeedThreshold;                              // 0x0F9C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              RunMediumToIdleSpeedThreshold;                            // 0x0FA0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              RunSlowToIdleSpeedThreshold;                              // 0x0FA4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PropPoseAlpha_Default;                                    // 0x0FA8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PropPoseAlpha_TwoHandedLongGun;                           // 0x0FAC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PropPoseAlpha_OneHandedPistol;                            // 0x0FB0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PropPoseAlpha_RightHandedMelee;                           // 0x0FB4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PropPoseAlpha_TwoHandedShotgun;                           // 0x0FB8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PropPoseAlpha_Trap;                                       // 0x0FBC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PropPoseAlpha_OneHandedHeavyObject;                       // 0x0FC0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PropPoseAlpha_TwoHandedMelee;                             // 0x0FC4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PropIkAlpha_LeftHandToRightHand;                          // 0x0FC8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PropIkAlpha_RightHandToLeftHand;                          // 0x0FCC(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              PropPoseAlpha_TwoHandedWeapon;                            // 0x0FD0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CanHoldEquippedItemTwoHandedAlpha;                        // 0x0FD4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SlidingAngle;                                             // 0x0FD8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              VehicleForwardSpeed;                                      // 0x0FDC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              VehicleForwardSpeedPrev;                                  // 0x0FE0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              VehicleLeanAngleNeg1To1;                                  // 0x0FE4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              VehicleSteeringNeg1To1;                                   // 0x0FE8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              VehicleLaggingForwardSpeed0To1ForJacket;                  // 0x0FEC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              VehicleBothLegsUpLaggingValue;                            // 0x0FF0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              VehicleLeanVel;                                           // 0x0FF4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              VehicleLeftLegIKInterp;                                   // 0x0FF8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              VehicleRightLegIKInterp;                                  // 0x0FFC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              VehicleLeftLegIkAlpha;                                    // 0x1000(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              VehicleRightLegIkAlpha;                                   // 0x1004(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              VehicleFallOffCollisionImpulseThreshold;                  // 0x1008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              VehicleHandIKInterp;                                      // 0x100C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              VehicleThrottlePrevTick;                                  // 0x1010(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              VehicleRawThrottle;                                       // 0x1014(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              VehicleCompanionPawnYaw;                                  // 0x1018(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              VehicleLeanAngleTargetForLowerTorsoNeg1To1;               // 0x101C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              VehicleSlowToFastSpeedLeanAlpha;                          // 0x1020(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              VehicleLeanAngleTargetForHeadNeg1To1;                     // 0x1024(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              VehicleLeanANgleTargetForUpperTorsoNeg1To1;               // 0x1028(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              VehicleLeanHeadLookAlpha;                                 // 0x102C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              VehicleBoostAlpha;                                        // 0x1030(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              IsVehicleRiderOverlappingEnvironment;                     // 0x1034(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              VehicleActualLeanAngleNeg1To1;                            // 0x1038(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              VehicleSmoothedLeanAngleDeltaToTargetNeg1To1;             // 0x103C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              VehicleDriftLeftAlpha;                                    // 0x1040(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              VehicleDriftRightAlpha;                                   // 0x1044(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              VehicleDriftAlpha;                                        // 0x1048(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              VehicleDriftOneMinusAlpha;                                // 0x104C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              VehiclePassengerLeanForwardAlpha;                         // 0x1050(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              VehicleDriverLeanBackwardForward;                         // 0x1054(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              VehicleRiderUpwardJoltAlpha;                              // 0x1058(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              FloorWaterDepth;                                          // 0x105C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              LookAimOffsetPitch;                                       // 0x1060(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	float                                              LookAimOffsetYaw;                                         // 0x1064(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	float                                              LookAimMaxPitch;                                          // 0x1068(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	float                                              LookAimMaxYaw;                                            // 0x106C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	float                                              MaxAimAngle;                                              // 0x1070(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	float                                              HasWeaponEquippedOrIsEquippingAlpha;                      // 0x1074(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	float                                              IsAimingAlphaMergedWithIsAimingCurve;                     // 0x1078(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	float                                              EquipLayer_SupportGripArmLocalSpace_Alpha;                // 0x107C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	float                                              EquipLayer_HandleGripArmLocalSpace_Alpha;                 // 0x1080(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	float                                              EquipLayer_SupportGripArmMeshSpace_Alpha;                 // 0x1084(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	float                                              EquipLayer_HandleGripArmMeshSpace_Alpha;                  // 0x1088(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	float                                              EquipLayer_SupportGripHand_Alpha;                         // 0x108C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	float                                              EquipLayer_HandleGripHand_Alpha;                          // 0x1090(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	float                                              EquipLayer_AimOffset_Alpha;                               // 0x1094(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              PropGripTenseAlpha;                                       // 0x1098(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              WeaponAimBlocked_Weight;                                  // 0x109C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              WeaponAimBlocked_ArmLayerBlendTime;                       // 0x10A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PropTensePoseBlendInTime_GunResponsive;                   // 0x10A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PropTensePoseBlendInTime;                                 // 0x10A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PropTensePoseBlendOutTime;                                // 0x10AC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              EquipLayer_StandCrouchBlendWeight;                        // 0x10B0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	int                                                CurrentLadderRungIndex;                                   // 0x10B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                CurrentRef1LadderRungIndex;                               // 0x10B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                CurrentRef2LadderRungIndex;                               // 0x10BC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                RandomNumberMax1000;                                      // 0x10C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                VehicleCurrentGear;                                       // 0x10C4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                VehicleTargetGear;                                        // 0x10C8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                WeaponDownAnimFrameNumber_Minus1;                         // 0x10CC(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	TWeakObjectPtr<class AVehiclePawn>                 VehiclePawn;                                              // 0x10D0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UBlendSpaceBase*                             EnterCoverBlendSpace;                                     // 0x10D8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           EnterCoverSequence;                                       // 0x10E0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UBlendSpaceBase*                             ExitCoverBlendSpace;                                      // 0x10E8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           PeekAnim;                                                 // 0x10F0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           StepInAnim;                                               // 0x10F8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           StepOutAnim;                                              // 0x1100(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           ChangeDirAnim;                                            // 0x1108(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           IdleAnim;                                                 // 0x1110(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UAimOffsetBlendSpace*                        CoverAimSweep;                                            // 0x1118(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           AimAnim;                                                  // 0x1120(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UBlendSpaceBase*                             AimBlendspace;                                            // 0x1128(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UBendAnimStateInstancesHandle*               LipSyncStateInstanceHandle;                               // 0x1130(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UBlendSpaceBase*                             FlinchReactionBlendSpace;                                 // 0x1138(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UBendAnimStateInstancesHandle*               MovePivotMove_StateInstancesHandle;                       // 0x1140(0x0008) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	class UAnimSequence*                               HandleGripPose;                                           // 0x1148(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UAnimSequence*                               SupportGripPose;                                          // 0x1150(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UAnimSequence*                               WeaponIdleAnim;                                           // 0x1158(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UBendAnimStateInstancesHandle*               ShootingAimedStateInstancesHandle;                        // 0x1160(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       PropGripEnable;                                           // 0x1168(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       PropGripDisable;                                          // 0x1170(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FWeaponAnimPlaybackData                     WeaponAnimPlaybackData;                                   // 0x1178(0x0010) (BlueprintVisible, BlueprintReadOnly)
	struct FRotator                                    GripPoseFixupRotator;                                     // 0x1188(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     WeaponSupportGripOffset;                                  // 0x1194(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector                                     VehicleCollidedHipsVelocity;                              // 0x11A0(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     VehicleRiderPhysicsReactionNeg1To1;                       // 0x11AC(0x000C) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	struct FVector                                     DriverHandOffsetLeft;                                     // 0x11B8(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	struct FVector                                     DriverHandOffsetRight;                                    // 0x11C4(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	struct FVector                                     DriverSeatOffset;                                         // 0x11D0(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x88];                                      // 0x11DC(0x0088) MISSED OFFSET
	struct FVector                                     LookAimTarget;                                            // 0x1264(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<int>                                        OurLockedLadderEdges;                                     // 0x1270(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FTransform                                  CoverAnchorTransform;                                     // 0x1280(0x0030) (Edit, BlueprintVisible, IsPlainOldData)
	struct FTransform                                  StartCoverAnimAnchorTransform;                            // 0x12B0(0x0030) (Edit, BlueprintVisible, IsPlainOldData)
	struct FTransform                                  MeshRelativeTransform;                                    // 0x12E0(0x0030) (Edit, BlueprintVisible, IsPlainOldData)
	struct FTransform                                  EquippedItemTransform;                                    // 0x1310(0x0030) (Edit, BlueprintVisible, IsPlainOldData)
	struct FTransform                                  VehicleTransform;                                         // 0x1340(0x0030) (Edit, BlueprintVisible, IsPlainOldData)
	struct FTransform                                  RightFootPegTransform;                                    // 0x1370(0x0030) (Edit, BlueprintVisible, IsPlainOldData)
	struct FTransform                                  LeftFootPegTransform;                                     // 0x13A0(0x0030) (Edit, BlueprintVisible, IsPlainOldData)
	struct FTransform                                  RightHandlebarEndTransform;                               // 0x13D0(0x0030) (Edit, BlueprintVisible, IsPlainOldData)
	struct FTransform                                  LeftHandlebarEndTransform;                                // 0x1400(0x0030) (Edit, BlueprintVisible, IsPlainOldData)
	struct FBendSpringInterpolatedFloat                CrouchAlphaSpringInterpolator;                            // 0x1430(0x0028) (Edit, BlueprintVisible)
	struct FBendSpringInterpolatedFloat                VehicleWeaponHoldInterp;                                  // 0x1458(0x0028) (Edit, BlueprintVisible)
	struct FBendSpringInterpolatedFloat                VehicleInAirAlpha;                                        // 0x1480(0x0028) (Edit, BlueprintVisible)
	struct FBendSpringInterpolatedFloat                VehicleDriverAimOffsetYaw;                                // 0x14A8(0x0028) (Edit, BlueprintVisible)
	struct FBendSpringInterpolatedFloat                IsAimingAlpha;                                            // 0x14D0(0x0028) (Edit, BlueprintVisible)
	struct FFindFloorResult                            CurrentFloor;                                             // 0x14F8(0x0098) (Edit, BlueprintVisible)
	struct FBendVehiclePairedAnimData                  VehiclePairedAnimData;                                    // 0x1590(0x0070) (BlueprintVisible, BlueprintReadOnly, Transient)
	unsigned char                                      UnknownData02[0x228];                                     // 0x1600(0x0228) MISSED OFFSET
	unsigned char                                      UnknownData03 : 1;                                        // 0x1828(0x0001)
	unsigned char                                      IsFemaleSkeleton : 1;                                     // 0x1828(0x0001) (BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData04[0x27];                                      // 0x1829(0x0027) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendHumanBaseAnimInstance");
		return ptr;
	}


	void StepOutDelegate(TEnumAsByte<ECoverLeanDirection> leanDir);
	void StepInDelegate(TEnumAsByte<ECoverLeanDirection> leanDir);
	void PeekDelegate(TEnumAsByte<ECoverLeanDirection> leanDir);
	void OnWeaponAnimStarted();
	void OnWeaponAnimFinished();
	void OnLeaveIdleToMoveState();
	void LeaveCoverDelegate(bool hasPath);
	float GetIsAimingAlpha();
	int GetGripPoseIndex();
	void ExitWatchSelfSacrificeStateDelegate();
	void ExitSelfSacrificeStateDelegate();
	void EnterWatchSelfSacrificeStateDelegate();
	void EnterSelfSacrificeStateDelegate();
	void EnterCoverDelegate(const struct FTransform& coverAnchor, bool highCover, TEnumAsByte<ECoverLeanDirection> AnchorDir, float angle);
	void ChangedCoverAnchorDelegate(TEnumAsByte<ECoverLeanDirection> AnchorDir);
	void CancelStepOutDelegate();
	void CancelStepInDelegate();
	void CancelPeekDelegate();
	void CancelLeaveCoverDelegate();
	void AnimNotify_VehicleSubstate_Left();
	void AnimNotify_VehicleSubstate_Entered();
	void AnimNotify_VehicleRiderFellOff();
	void AnimNotify_VehicleRiderDodge_Left();
	void AnimNotify_LadderFullyExited();
	void AnimNotify_LadderDescendRef02();
	void AnimNotify_LadderDescendRef01();
	void AnimNotify_LadderAscendRef02();
	void AnimNotify_LadderAscendRef01();
	void AnimNotify_ExitVehicleStateInstance_Entered();
};


// Class BendGame.BendHumanAnimInstance
// 0x0150 (0x19A0 - 0x1850)
class UBendHumanAnimInstance : public UBendHumanBaseAnimInstance
{
public:
	bool                                               BuddyWaveFollowerForward;                                 // 0x1850(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               BuddyWaveFollowerForwardRight;                            // 0x1851(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               NPCFallLandSoftValid;                                     // 0x1852(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               NPCFallLandHardValid;                                     // 0x1853(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      CallClimbCompleteAfterFall : 1;                           // 0x1854(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      WeaponWasDropped : 1;                                     // 0x1854(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      EnableSaggyMeshAndGroundFootIk : 1;                       // 0x1854(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x3];                                       // 0x1855(0x0003) MISSED OFFSET
	bool                                               EnableFootlock_L;                                         // 0x1858(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               EnableFootlock_R;                                         // 0x1859(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               TriggerGesture;                                           // 0x185A(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               EnableMoveToIdleAnchor;                                   // 0x185B(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               EnableMoveToIdle;                                         // 0x185C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               CanPlayMoveToIdleTurnAimArrivalBlendspace;                // 0x185D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               DisableMoveToIdle;                                        // 0x185E(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               IsFleeing;                                                // 0x185F(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               WantsToTransitionIdleToFlee;                              // 0x1860(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               WantsToPlayFleeMovement;                                  // 0x1861(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x1862(0x0002) MISSED OFFSET
	unsigned char                                      HasRightHandStumpProsthetic : 1;                          // 0x1864(0x0001) (BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData02[0x3];                                       // 0x1865(0x0003) MISSED OFFSET
	bool                                               IsSurrendering;                                           // 0x1868(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               WantsToDodgeGrenade;                                      // 0x1869(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               OnlyTurnHead;                                             // 0x186A(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               CanTurnInMovement;                                        // 0x186B(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               EnableTurnToIdle;                                         // 0x186C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               WantsToPlayLoopingOneShot;                                // 0x186D(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               WantsToFinishLoopingOneShot;                              // 0x186E(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               FinishedOneShotLooping;                                   // 0x186F(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EFootState>                            CurrentFootState;                                         // 0x1870(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EHumanBaseCharacterType>               CharacterType;                                            // 0x1871(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EAISurrenderState>                     CurrentSurrenderState;                                    // 0x1872(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x1];                                       // 0x1873(0x0001) MISSED OFFSET
	int                                                TurnInPlaceToIdleRequestNumFramesElapsed;                 // 0x1874(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FootStateSnapValue;                                       // 0x1878(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CurrentFootStateValue;                                    // 0x187C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ThrowingAngle;                                            // 0x1880(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              DodgeGrenadeAngle;                                        // 0x1884(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              TurnToIdleLowThreshold;                                   // 0x1888(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TurnToIdleHighThreshold;                                  // 0x188C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TurnToIdleAngle;                                          // 0x1890(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              IdleTurnToIdleAimingClosestXSample;                       // 0x1894(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              IdleTurnToIdleTenseClosestXSample;                        // 0x1898(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AimedTurnInPlaceClosestXSample;                           // 0x189C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TenseTurnInPlaceClosestXSample;                           // 0x18A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CombatTurnInPlaceClosestXSample;                          // 0x18A4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PropPoseAlpha;                                            // 0x18A8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              TempUnarmedPoseLayerAlpha;                                // 0x18AC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MoveAnimPlayRate;                                         // 0x18B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x18B4(0x0004) MISSED OFFSET
	class UBlendSpaceBase*                             RelaxedMovingPivotBlendspace;                             // 0x18B8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UBlendSpaceBase*                             ThrowingBlendspace;                                       // 0x18C0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UBlendSpaceBase*                             DodgeGrenadeBlendspace;                                   // 0x18C8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           LoopingOneShotEnter;                                      // 0x18D0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           LoopingOneShotLoop;                                       // 0x18D8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           LoopingOneShotExit;                                       // 0x18E0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TWeakObjectPtr<class ABendHumanController>         HumanController;                                          // 0x18E8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     GatePos_LeftHand;                                         // 0x18F0(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     GatePos_RightHand;                                        // 0x18FC(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     IKpos_LH;                                                 // 0x1908(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     IKpos_RH;                                                 // 0x1914(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     HipsOffsetLoc;                                            // 0x1920(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x4];                                       // 0x192C(0x0004) MISSED OFFSET
	struct FName                                       PropGripDisableDefault;                                   // 0x1930(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       GestureToTrigger;                                         // 0x1938(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       IKcurve_LH;                                               // 0x1940(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       IKcurve_RH;                                               // 0x1948(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FRotator                                    DesiredRotation;                                          // 0x1950(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x4];                                       // 0x195C(0x0004) MISSED OFFSET
	struct FTransform                                  MeleeAttackLastAnchorTrans;                               // 0x1960(0x0030) (Edit, BlueprintVisible, IsPlainOldData)
	unsigned char                                      UnknownData07[0x10];                                      // 0x1990(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendHumanAnimInstance");
		return ptr;
	}


	void ThrowThrowableDelegate(class UBlendSpaceBase* throwBlendSpace, float angle);
	void StartLoopingOneShot(class UAnimSequenceBase* EnterAnim, class UAnimSequenceBase* LoopAnim, class UAnimSequenceBase* EndAnim);
	bool IsTransitioningFromPerformActionToGroundMovement();
	void HandleFinishedThrow();
	void HandleFinishedFleeMovement();
	void HandleDodgeGrenadeStarted();
	void HandleDodgeGrenadeFinished();
	void HandleDamageToCover();
	void HandleCoverToMoveTransition();
	void HandleCoverToDamage();
	void HandleCoverExitStarted();
	void EnterCoverInterrupted();
	void EndLoopingOneShot();
	void DodgeGrenadeDelegate(class UBlendSpaceBase* DodgeBlendspace, float DodgeAngle);
	void CoverInvalidatedDelegate(class ABendHumanController* CoverController, TEnumAsByte<EBendCoverLeaveReason> CoverLeaveReason);
	void CleanupStepToCover();
	void CleanupStepOutOfCover();
	void CleanupPeekInCover();
	void CleanupPeek();
	void CleanupLeaveCoverFromAim();
	void CleanupLeaveCover();
	void CleanupEnterCover();
	void CleanupChangeDirection();
	void CleanupBuddyWaveFollowerForward();
	void CancelThrowThrowableDelegate();
	void BuddyWaveFollowerForwardDelegate(bool FollowerOnRight);
	void BuddyResumeLeadingDelegate();
	void BeginStepOutOfCover();
	void BeginStepBackToCover();
	void BeginPeek();
	void BeginChangeCoverDirection();
	void AnimNotify_StartedLoopingOneShot();
	void AnimNotify_OnGeneralMovementExit();
	void AnimNotify_OnGeneralMovementEnter();
	void AnimNotify_FinishedLoopingOneShot();
	void AnimNotify_EnterCoverBegan();
	void AnimNotify_ClimbStarted();
	void AnimNotify_ClimbEnding();
	void AnimNotify_ClimbEndedToFall();
	void AnimNotify_ClimbEnded();
	void AnimNotify_ClimbApex();
};


// Class BendGame.BendPlayerAnimInstance
// 0x05E0 (0x1E30 - 0x1850)
class UBendPlayerAnimInstance : public UBendHumanBaseAnimInstance
{
public:
	struct FScriptMulticastDelegate                    OnPlayerWasDamaged;                                       // 0x1850(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               bForceTransitionToRideVehicle;                            // 0x1860(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1];                                       // 0x1861(0x0001) MISSED OFFSET
	bool                                               AimedRightShoulder;                                       // 0x1862(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               ShouldAimStepOut;                                         // 0x1863(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               CameraIsInCollision;                                      // 0x1864(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IsAlert;                                                  // 0x1865(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               HasObjectToCarry;                                         // 0x1866(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               BeginDroppingCarriedObject;                               // 0x1867(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               ControllerHasInput;                                       // 0x1868(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               CoverSteppedOut;                                          // 0x1869(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IsMovingRightInCover;                                     // 0x186A(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IsMovingLeftInCover;                                      // 0x186B(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               CornerCoverRight;                                         // 0x186C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               CornerCoverLeft;                                          // 0x186D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               NeedsAimStepout;                                          // 0x186E(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IsLeavingCover;                                           // 0x186F(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               InFreeDodge;                                              // 0x1870(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               DoDruggedStumble;                                         // 0x1871(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               WantsToEarlyExitTo_MoveStart;                             // 0x1872(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               WantsToEarlyExitTo_RequestedAction;                       // 0x1873(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               WantsToEarlyExitTo_MoveStopOrTurn;                        // 0x1874(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x1875(0x0001) MISSED OFFSET
	bool                                               WantsToEarlyExitTo_QuickRecovery;                         // 0x1876(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IsInGeneralMovement;                                      // 0x1877(0x0001) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               IsInGeneralMovement_PrevFrame;                            // 0x1878(0x0001) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               CanPerformUprightGroundMovementTransitions;               // 0x1879(0x0001) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x2];                                       // 0x187A(0x0002) MISSED OFFSET
	unsigned char                                      bForceStrafe : 1;                                         // 0x187C(0x0001) (BlueprintVisible, Transient)
	unsigned char                                      bIsBeingChasedByHorde : 1;                                // 0x187C(0x0001) (BlueprintVisible, Transient)
	unsigned char                                      UnknownData03[0x3];                                       // 0x187D(0x0003) MISSED OFFSET
	bool                                               IsGroundIdleFullyBlended;                                 // 0x1880(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IsInGroundIdle;                                           // 0x1881(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               SkipLeanOverlay;                                          // 0x1882(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               PlayInjuredAnimations;                                    // 0x1883(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IdleToMoveActivePrevFrame;                                // 0x1884(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IdleToMoveAnchorActivePrevFrame;                          // 0x1885(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IdleToMoveRejected;                                       // 0x1886(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IdleToMoveWantedPrevFrame;                                // 0x1887(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               TurnInPlaceTapPotentiallyInProgress;                      // 0x1888(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               ExitHitReactionAndDoMeleeAttack;                          // 0x1889(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               ExitHitReactionToDoFreeDodge;                             // 0x188A(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IsInMelee;                                                // 0x188B(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               MeleeKillSwing;                                           // 0x188C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               MeleeSwingRightHit;                                       // 0x188D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               MeleeSwingLeftHit;                                        // 0x188E(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               MeleeSwingRightMiss;                                      // 0x188F(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               AttemptMelee;                                             // 0x1890(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               BlockMeleeReEntry;                                        // 0x1891(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               MeleeAttackDone;                                          // 0x1892(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               MeleeForceAttack;                                         // 0x1893(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               MeleeCanSwingAgain;                                       // 0x1894(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               MeleeCanSwingLeft;                                        // 0x1895(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               MeleeNewTargetSelected;                                   // 0x1896(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               ShouldMirrorEntirePose;                                   // 0x1897(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               MoveToIdleActivePrevFrame;                                // 0x1898(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               UseRegularMoveToIdleToStopForTurn;                        // 0x1899(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               MoveToIdleForTurnActivePrevFrame;                         // 0x189A(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IsOutOfBreath;                                            // 0x189B(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               ShouldPlayOutOfBreathAnim;                                // 0x189C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               PairedMovement_ParentWantsToEngage;                       // 0x189D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               EnableNewGripPoseSystem;                                  // 0x189E(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               ApplyVehicleCollisionVelocityToRagdoll;                   // 0x189F(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               WantsToSprintSlide;                                       // 0x18A0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               WantsToMeleeStrafe;                                       // 0x18A1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               WantsToMeleeStrafePrev;                                   // 0x18A2(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               WantsToStrafePrev;                                        // 0x18A3(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               TurnInPlaceEnteredEvent_CurrFrame;                        // 0x18A4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               TurnInPlaceWaitingToExit;                                 // 0x18A5(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               TurnInPlaceEnteredEvent_PrevFrame;                        // 0x18A6(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               TurnInPlaceFreshlyEnteredEvent;                           // 0x18A7(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               TurnInPlaceActivePrevFrame;                               // 0x18A8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               Firing;                                                   // 0x18A9(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IsReloading;                                              // 0x18AA(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               HasLookAimTarget;                                         // 0x18AB(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               WeaponEquipped;                                           // 0x18AC(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ECoverLeanDirection>                   AimStepOutDir;                                            // 0x18AD(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EBendAnimationSetMovement>             AnimationSet_Movement;                                    // 0x18AE(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EBendMoveSpeedEnum>                    MoveSpeedEnumPrevFrame;                                   // 0x18AF(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EBendMoveSpeedEnum>                    MoveSpeedEnumCurrFrame;                                   // 0x18B0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EBendPairedStateMovement>              PairedMovement_ParentState;                               // 0x18B1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EBendPairedStateMovement>              PairedMovement_ChildsParentState;                         // 0x18B2(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x1];                                       // 0x18B3(0x0001) MISSED OFFSET
	float                                              AimMovementPlayRate;                                      // 0x18B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ShouldLeanForwardWhileAimingAlpha;                        // 0x18B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ShouldLeanForwardWhileAimingAlphaOutTimer;                // 0x18BC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ShouldLeanForwardWhileAimingAlphaInTimer;                 // 0x18C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CoverStandTallerWhileAimingAlpha;                         // 0x18C4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              AlertnessSwitchCountdown;                                 // 0x18C8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TimeToNextAmbient;                                        // 0x18CC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ActorForwardControllerDot;                                // 0x18D0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ActorRightControllerDot;                                  // 0x18D4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CoverWalkAlongAngle;                                      // 0x18D8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CoverQuadrantAngle;                                       // 0x18DC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CoverSpeed;                                               // 0x18E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CoverDistance;                                            // 0x18E4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FBendPlayerAnimCoverSearch                  CoverSearch;                                              // 0x18E8(0x00C8) (Edit, DisableEditOnInstance)
	float                                              FreeDodgeTime;                                            // 0x19B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MirrorBlendFalseBlendTime;                                // 0x19B4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              CinematicBlendAlpha;                                      // 0x19B8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              VisemeWeightInterpRate0;                                  // 0x19BC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              VisemeWeightTargetValue0;                                 // 0x19C0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              VisemeBlendWeight;                                        // 0x19C4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              LipSyncAlpha;                                             // 0x19C8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AdditiveLeanInterpRate;                                   // 0x19CC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              LeanTargetValues;                                         // 0x19D0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              LeanUpperBodyOffsetYaw;                                   // 0x19D4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              InjuredAlpha;                                             // 0x19D8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FirstFullChunkInjuredAlpha;                               // 0x19DC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              IdleToMoveWalkThresholdSpeed;                             // 0x19E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              IdleToMoveVsTurnInPlaceAlphaForNextFrame;                 // 0x19E4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              IdleToMoveAndTurnInPlaceTimeInCurrStateInstance;          // 0x19E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              IdleToMoveVsTurnInPlaceAlphaThreshold;                    // 0x19EC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TurnInPlaceTapDetectionTime;                              // 0x19F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              IdleToMove_RunMinSpeedScale;                              // 0x19F4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              IdleToMove_RunMinSpeedScale_AtTurnStart;                  // 0x19F8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              LeanLeftRightFactor;                                      // 0x19FC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MeleeChargingAnimPlayRate;                                // 0x1A00(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MeleeButtonHeldTime;                                      // 0x1A04(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MeleeButtonLastHeldTime;                                  // 0x1A08(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MeleeButtonPressedTime;                                   // 0x1A0C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UObjectFloat*                                MeleeAnimPlaybackTime1_WriteBuffer;                       // 0x1A10(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	class UObjectFloat*                                MeleeAnimPlaybackTime2_WriteBuffer;                       // 0x1A18(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               InFallingOffVehicle;                                      // 0x1A20(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x3];                                       // 0x1A21(0x0003) MISSED OFFSET
	float                                              PrevDesiredSpeed;                                         // 0x1A24(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              LocationBasedSpeedScale;                                  // 0x1A28(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              HackSprintSpeedThreshold;                                 // 0x1A2C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TimeInRunToIdle;                                          // 0x1A30(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              OutOfBreathAnimCountdown;                                 // 0x1A34(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              OutOfBreathIntensity;                                     // 0x1A38(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              WantsToMeleeStrafeLingerCountdown;                        // 0x1A3C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              WantsToMeleeStrafeLingerDuration;                         // 0x1A40(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              StrafeAngleSnapshot;                                      // 0x1A44(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TurnInPlacePlayRateScale;                                 // 0x1A48(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              UpperBodyPartialAlpha_Default;                            // 0x1A4C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              UpperBodyPartialAlpha_ThrownWeapon;                       // 0x1A50(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              UpperBodyPartialAlpha_HeadAndRightArm;                    // 0x1A54(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              UpperBodyPartialAlpha_HeadAndLeftArm;                     // 0x1A58(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              UpperBodyPartialAlpha_InVehicle;                          // 0x1A5C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              WeaponStanceTransitionTime;                               // 0x1A60(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                NextAmbientIndex;                                         // 0x1A64(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                FrenzyLeftRight;                                          // 0x1A68(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                IdleToMoveInstanceIndex;                                  // 0x1A6C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                MeleeSwingIdx;                                            // 0x1A70(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                UpdateMeleeRefPosCount;                                   // 0x1A74(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                NextMeleeAttackerAnimIdx;                                 // 0x1A78(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                MoveToIdleInstanceIndex;                                  // 0x1A7C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                MoveToIdleForTurnInstanceIndex;                           // 0x1A80(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                TurnInPlaceInstanceIndex;                                 // 0x1A84(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UBendAnimStateInstancesHandle*               FallLand_StateInstancesHandle;                            // 0x1A88(0x0008) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	class UBendAnimStateInstancesHandle*               IdleToMoveAndTurnInPlace_StateInstancesHandle;            // 0x1A90(0x0008) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	class UAnimSequenceBase*                           MeleeSwingLeft_AnimSeq;                                   // 0x1A98(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           MeleeSwingMissLeft_AnimSeq;                               // 0x1AA0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           MeleeSwingMissRight_AnimSeq;                              // 0x1AA8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           MeleeSwingMissOverhead_AnimSeq;                           // 0x1AB0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           MeleeCharging_AnimSeq;                                    // 0x1AB8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TWeakObjectPtr<class ABendPawn>                    LastMeleeTarget;                                          // 0x1AC0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TWeakObjectPtr<class ABendPawn>                    LastIgnorePawn;                                           // 0x1AC8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UBendAnimStateInstancesHandle*               MoveToIdle_StateInstancesHandle;                          // 0x1AD0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	class UAnimInstance*                               PairedMovement_ParentsChild;                              // 0x1AD8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UAnimInstance*                               PairedMovement_ChildsParent;                              // 0x1AE0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class ABendPlayerPawn*                             BendPlayerPawn;                                           // 0x1AE8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UBendAnimStateInstancesHandle*               Scramble_StateInstancesHandle;                            // 0x1AF0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	class UAnimSequenceBase*                           WeaponFireAnimSequence;                                   // 0x1AF8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FRotator                                    MeleeMissSwingRotation;                                   // 0x1B00(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x4];                                       // 0x1B0C(0x0004) MISSED OFFSET
	struct FName                                       MeleeAnchorNameStart;                                     // 0x1B10(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       MeleeAnchorName;                                          // 0x1B18(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       MeleeAnchorRotationName;                                  // 0x1B20(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     RootMotionOverride;                                       // 0x1B28(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	struct FVector                                     RootMotionOverrideVelocitySwimming0To1;                   // 0x1B34(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	struct FBendSpringInterpolatedFloat                AlertnessAlpha;                                           // 0x1B40(0x0028) (Edit, BlueprintVisible)
	struct FBendSpringInterpolatedFloat                IdleToMoveSpeedInterpolator;                              // 0x1B68(0x0028) (Edit, BlueprintVisible)
	struct FBendSpringInterpolatedFloat                StealthAlpha;                                             // 0x1B90(0x0028) (Edit, BlueprintVisible)
	struct FBendSpringInterpolatedFloat                CoverStandTallerWhileAimingInterpolator;                  // 0x1BB8(0x0028) (Edit, BlueprintVisible)
	TArray<struct FName>                               IdleToMoveInstanceDataStartAnchorName;                    // 0x1BE0(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FName>                               IdleToMoveInstanceDataEndAnchorName;                      // 0x1BF0(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FName>                               IdleToMoveInstanceDataCurveCollectorName;                 // 0x1C00(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FBendSpringInterpolatedFloat>        IdleToMoveVsTurnInPlaceAlpha;                             // 0x1C10(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<class UAnimSequenceBase*>                   MeleeAttackerAnimSeq;                                     // 0x1C20(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<float>                                      MeleeAnimPlayRate;                                        // 0x1C30(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FMeleeAttackData>                    MeleeAttackData;                                          // 0x1C40(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FName>                               MoveToIdleInstanceData_AnchorName;                        // 0x1C50(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FName>                               MoveToIdleInstanceData_CurveCollectorName;                // 0x1C60(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FName>                               MoveToIdleForTurnInstanceData_AnchorName;                 // 0x1C70(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FName>                               MoveToIdleForTurnInstanceData_CurveCollectorName;         // 0x1C80(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<float>                                      TurnInPlaceInstanceData_TurnAngle;                        // 0x1C90(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FName>                               TurnInPlaceInstanceData_CurveCollectorName;               // 0x1CA0(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FName>                               TurnInPlaceInstanceData_StartAnchorName;                  // 0x1CB0(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FName>                               TurnInPlaceInstanceData_EndAnchorName;                    // 0x1CC0(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FTransform                                  DebugIKTransform;                                         // 0x1CD0(0x0030) (Edit, BlueprintVisible, IsPlainOldData)
	struct FTransform                                  PlayerTransform_WorkerThread;                             // 0x1D00(0x0030) (Edit, BlueprintVisible, IsPlainOldData)
	bool                                               bForceExitMeleeState;                                     // 0x1D30(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData07[0xFF];                                      // 0x1D31(0x00FF) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendPlayerAnimInstance");
		return ptr;
	}


	bool ShouldEarlyExitTo_QuickRecovery();
	bool ShouldEarlyExitTo_MoveStopOrTurn();
	bool ShouldEarlyExitTo_MoveStart();
	bool ShouldEarlyExitTo_MovePivot();
	bool ShouldEarlyExitTo_Crouch();
	void OnMontageStartedCallback(class UAnimMontage* Montage);
	void OnMontageEndedCallback(class UAnimMontage* Montage, bool bInterrupted);
	void OnDamageAnimQuickRecovery();
	bool IsTransitioningFromPerformActionToGroundMovement();
	TEnumAsByte<EFootForward> GetNextForwardLimb();
	void CleanupLeaveCover();
	void CleanupEnterCover();
	void CapsuleHit(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void AnimNotify_Swimming_Entered();
	void AnimNotify_StartedCounter();
	void AnimNotify_PairedDodgeExit();
	void AnimNotify_PairedDodgeEnter();
	void AnimNotify_OnGeneralMovementExit();
	void AnimNotify_OnGeneralMovementEnter();
	void AnimNotify_MeleeSwingHit_Start_2();
	void AnimNotify_MeleeSwingHit_Start();
	void AnimNotify_MeleeSwingHit_End_2();
	void AnimNotify_MeleeSwingHit_End();
	void AnimNotify_FinishCounter();
	void AnimNotify_ClimbStarted();
	void AnimNotify_ClimbLeft();
};


// Class BendGame.BendXPECEventPawnAnimInstance
// 0x0030 (0x0AF0 - 0x0AC0)
class UBendXPECEventPawnAnimInstance : public UBendCharacterAnimInstance
{
public:
	bool                                               bTurnInPlaceToIdle;                                       // 0x0AC0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0AC1(0x0003) MISSED OFFSET
	float                                              TurnInPlaceAngle;                                         // 0x0AC4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               ShouldBind;                                               // 0x0AC8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0AC9(0x0003) MISSED OFFSET
	int                                                TurnInPlaceToIdleRequestNumFramesElapsed;                 // 0x0ACC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CurrentDummyPoseToIdle;                                   // 0x0AD0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EFootState>                            CurrentFootState;                                         // 0x0AD4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0AD5(0x0003) MISSED OFFSET
	float                                              CurrentFootStateValue;                                    // 0x0AD8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0ADC(0x0004) MISSED OFFSET
	class ABendAIController*                           BendAIController;                                         // 0x0AE0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x8];                                       // 0x0AE8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendXPECEventPawnAnimInstance");
		return ptr;
	}


	void TurnInPlaceHandler(float angle);
};


// Class BendGame.XpecDummySkeletalMeshActor
// 0x0048 (0x03D0 - 0x0388)
class AXpecDummySkeletalMeshActor : public ASkeletalMeshActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0388(0x0008) MISSED OFFSET
	class UBendAnimVariationData*                      MaleLipSyncAnimations;                                    // 0x0390(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBendAnimVariationData*                      FemaleLipSyncAnimations;                                  // 0x0398(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UXpecDummyMovementComponent*                 MovementComponent;                                        // 0x03A0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UBendDetourCrowdAvoidanceComponent*          DetourCrowdAvoidanceComponent;                            // 0x03A8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UBendLipSyncComponent*                       LipSyncComponent;                                         // 0x03B0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	bool                                               bShouldApplyRootMotion;                                   // 0x03B8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x17];                                      // 0x03B9(0x0017) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.XpecDummySkeletalMeshActor");
		return ptr;
	}


	void SetLook(class UBendSkeletalMeshLookBase* Look);
	void STATIC_ReplaceDeadPawn(class ABendPawn* DeadPawn);
	bool PlayAnimation(class UAnimationAsset* anim, bool bLoop);
	int GetSn();
	class AXpecPopulation* GetPopulation();
	class UBendLipSyncComponent* GetLipSyncComponent();
	void DebugPrintInfo(struct FString* line);
};


// Class BendGame.BendEncampmentAnimInstance
// 0x0078 (0x0610 - 0x0598)
class UBendEncampmentAnimInstance : public UBendAnimInstance
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0598(0x0008) MISSED OFFSET
	unsigned char                                      DoLipSync : 1;                                            // 0x05A0(0x0001) (BlueprintVisible, BlueprintReadOnly, Transient)
	unsigned char                                      UnknownData01[0x7];                                       // 0x05A1(0x0007) MISSED OFFSET
	int                                                FaceExpressionMood_MaxLod;                                // 0x05A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x05AC(0x0004) MISSED OFFSET
	float                                              FaceExpressionMood_FadeTime;                              // 0x05B0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x05B4(0x0004) MISSED OFFSET
	float                                              FaceExpressionMoodWeight;                                 // 0x05B8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData04[0xC];                                       // 0x05BC(0x000C) MISSED OFFSET
	class UAnimSequenceBase*                           FaceExpressionMood_Anim;                                  // 0x05C8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	class UBendAnimVariationData*                      FemaleAnimSet;                                            // 0x05D0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UBendAnimVariationData*                      MaleAnimSet;                                              // 0x05D8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x8];                                       // 0x05E0(0x0008) MISSED OFFSET
	TWeakObjectPtr<class AXpecDummySkeletalMeshActor>  DummyPawn;                                                // 0x05E8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<struct FLipSyncVisemeData>                  LipSyncVisemeList;                                        // 0x05F0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient)
	TArray<struct FName>                               FaceExpressionMood_GroupNames;                            // 0x0600(0x0010) (Edit, EditFixedSize, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendEncampmentAnimInstance");
		return ptr;
	}

};


// Class BendGame.BendPerformActionAnimInstance
// 0x0020 (0x05B8 - 0x0598)
class UBendPerformActionAnimInstance : public UBendAnimInstance
{
public:
	unsigned char                                      DoLipSync : 1;                                            // 0x0598(0x0001) (BlueprintVisible, BlueprintReadOnly, Transient)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0599(0x0003) MISSED OFFSET
	TWeakObjectPtr<class ABendPawn>                    BendPawn;                                                 // 0x059C(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x05A4(0x0004) MISSED OFFSET
	TArray<struct FLipSyncVisemeData>                  LipSyncVisemeList;                                        // 0x05A8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendPerformActionAnimInstance");
		return ptr;
	}

};


// Class BendGame.BendVehicleAnimInstance
// 0x0118 (0x06B0 - 0x0598)
class UBendVehicleAnimInstance : public UBendAnimInstance
{
public:
	unsigned char                                      EnterLeftSide : 1;                                        // 0x0598(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      ExitLeftSide : 1;                                         // 0x0598(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      VehicleHasPassengers : 1;                                 // 0x0598(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      VehicleHasDriverNotGettingOff : 1;                        // 0x0598(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      ShouldDriverHurry : 1;                                    // 0x0598(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      IsTryingToMoveVehicle : 1;                                // 0x0598(0x0001) (BlueprintVisible, BlueprintReadOnly, Transient)
	unsigned char                                      bHasFallenOver : 1;                                       // 0x0598(0x0001) (BlueprintVisible, BlueprintReadOnly, Transient)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0599(0x0007) MISSED OFFSET
	class UBendMovementComp_Bike*                      VehicleMovement;                                          // 0x05A0(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class AVehiclePawn*                                VehiclePawn;                                              // 0x05A8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ForwardSpeed;                                             // 0x05B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SmoothedLeanAngleDeltaToTargetNeg1To1;                    // 0x05B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BikeDamageValue;                                          // 0x05B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SteeringNeg1To1;                                          // 0x05BC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                FrontWheelIndex;                                          // 0x05C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                RearWheelIndex;                                           // 0x05C4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     FrontWheelOffset;                                         // 0x05C8(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     RearWheelOffset;                                          // 0x05D4(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FRotator                                    FrontWheelRotation;                                       // 0x05E0(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FRotator                                    RearWheelRotation;                                        // 0x05EC(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FBendSpringInterpolatedFloat                SeatBounceInterpolator;                                   // 0x05F8(0x0028) (Edit, BlueprintVisible)
	float                                              KickstandForceUpBlendWeight;                              // 0x0620(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0xC];                                       // 0x0624(0x000C) MISSED OFFSET
	struct FBendVehiclePairedAnimData                  VehiclePairedAnimData;                                    // 0x0630(0x0070) (BlueprintVisible, BlueprintReadOnly, Transient)
	unsigned char                                      UnknownData02[0x10];                                      // 0x06A0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendVehicleAnimInstance");
		return ptr;
	}


	void WhatBikeIsThis_Code();
};


// Class BendGame.BendAnimMotionMatching_Database
// 0x02B8 (0x02E0 - 0x0028)
class UBendAnimMotionMatching_Database : public UDataAsset
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	struct FBendAnimMotionMatching_ExtractionParams    ExtractionParams;                                         // 0x0030(0x0250) (Edit)
	float                                              NextContiguousPoseErrorWeight;                            // 0x0280(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bToggleToExtractPoses : 1;                                // 0x0284(0x0001) (Edit, Transient)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0285(0x0003) MISSED OFFSET
	struct FBendAnimMotionMatching_ErrorWeights        ErrorWeights;                                             // 0x0288(0x0048) (Edit, EditConst)
	TArray<struct FBendAnimMotionMatching_Pose>        PoseList;                                                 // 0x02D0(0x0010) (Edit, ZeroConstructor, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAnimMotionMatching_Database");
		return ptr;
	}

};


// Class BendGame.BendAnimNotify_PostProcess
// 0x0030 (0x0060 - 0x0030)
class UBendAnimNotify_PostProcess : public UAnimNotifyState
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0030(0x0010) MISSED OFFSET
	class UClass*                                      PostProcessActorClass;                                    // 0x0040(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               UseLinearBlend;                                           // 0x0048(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0049(0x0003) MISSED OFFSET
	float                                              BlendInTime;                                              // 0x004C(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              BlendOutTime;                                             // 0x0050(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0054(0x0004) MISSED OFFSET
	class UCurveFloat*                                 BlendCurve;                                               // 0x0058(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAnimNotify_PostProcess");
		return ptr;
	}

};


// Class BendGame.BendAnimNotify_VehicleLowerKickstand
// 0x0000 (0x0030 - 0x0030)
class UBendAnimNotify_VehicleLowerKickstand : public UAnimNotify
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAnimNotify_VehicleLowerKickstand");
		return ptr;
	}

};


// Class BendGame.BendAnimNotify_VehicleRaiseKickstand
// 0x0000 (0x0030 - 0x0030)
class UBendAnimNotify_VehicleRaiseKickstand : public UAnimNotify
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAnimNotify_VehicleRaiseKickstand");
		return ptr;
	}

};


// Class BendGame.BendAnimNotifyState_HoldAimingPose
// 0x0008 (0x0038 - 0x0030)
class UBendAnimNotifyState_HoldAimingPose : public UAnimNotifyState
{
public:
	float                                              BlendOutTime;                                             // 0x0030(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0034(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAnimNotifyState_HoldAimingPose");
		return ptr;
	}

};


// Class BendGame.BendAnimMoveSet
// 0x0028 (0x0098 - 0x0070)
class UBendAnimMoveSet : public UBendAnimVariationData
{
public:
	TArray<struct FString>                             Prefixes;                                                 // 0x0070(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, DisableEditOnInstance)
	TArray<struct FString>                             MoveTypes;                                                // 0x0080(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, DisableEditOnInstance)
	bool                                               bCreateSequences;                                         // 0x0090(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData)
	bool                                               bCreateBlendspaces;                                       // 0x0091(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x0092(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAnimMoveSet");
		return ptr;
	}

};


// Class BendGame.BendVehicleArmorData
// 0x0000 (0x0040 - 0x0040)
class UBendVehicleArmorData : public UBendArmorData
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendVehicleArmorData");
		return ptr;
	}

};


// Class BendGame.BendAttachmentUtilities
// 0x0000 (0x0028 - 0x0028)
class UBendAttachmentUtilities : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAttachmentUtilities");
		return ptr;
	}


	void STATIC_AttachTo(class USceneComponent* InChild, const struct FName& InChildSocketName, class USceneComponent* InParent, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachType, bool bWeldSimulatedBodies);
};


// Class BendGame.BendAttractorPawn
// 0x0000 (0x29B0 - 0x29B0)
class ABendAttractorPawn : public ABendAIPawn
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAttractorPawn");
		return ptr;
	}

};


// Class BendGame.BendAttractor
// 0x0048 (0x0390 - 0x0348)
class ABendAttractor : public AActor
{
public:
	TEnumAsByte<EAIFactionType>                        m_Faction;                                                // 0x0348(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0349(0x0003) MISSED OFFSET
	float                                              m_Volume;                                                 // 0x034C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              m_Interval;                                               // 0x0350(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              m_AttractionDuration;                                     // 0x0354(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                MaxCrowdMembersAttracted;                                 // 0x0358(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x035C(0x0004) MISSED OFFSET
	class UClass*                                      m_AttackManagerClass;                                     // 0x0360(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	TWeakObjectPtr<class ABendAIPawn>                  m_DummyPawn;                                              // 0x0368(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TWeakObjectPtr<class ABendProjectile>              m_ProjectileOwner;                                        // 0x0370(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x18];                                      // 0x0378(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAttractor");
		return ptr;
	}


	void StopAttraction();
	void SetAttractorData(TEnumAsByte<EAIFactionType> Faction, class UClass* attackManagerClass, float Volume, float interval, float attractionDuration);
	void OnProjAtRest();
	void OnImpact(const struct FHitResult& HitResult);
	void OnBounce(const struct FHitResult& HitResult, const struct FVector& ImpactVelocity);
	bool IsOnNavmesh();
	void AttractNow();
};


// Class BendGame.BendAttractorComponent
// 0x0020 (0x0250 - 0x0230)
class UBendAttractorComponent : public UChildActorComponent
{
public:
	TEnumAsByte<EAIFactionType>                        m_Faction;                                                // 0x0230(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0231(0x0003) MISSED OFFSET
	float                                              m_Volume;                                                 // 0x0234(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              m_Interval;                                               // 0x0238(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              m_AttractionDuration;                                     // 0x023C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	class UClass*                                      m_AttackManagerClass;                                     // 0x0240(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	TWeakObjectPtr<class ABendAttractor>               m_Attractor;                                              // 0x0248(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAttractorComponent");
		return ptr;
	}


	void AttractNow();
};


// Class BendGame.BendAttributeSet
// 0x0028 (0x0058 - 0x0030)
class UBendAttributeSet : public UAttributeSet
{
public:
	float                                              Health;                                                   // 0x0030(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxHealth;                                                // 0x0034(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              HealthModifier;                                           // 0x0038(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              Damage;                                                   // 0x003C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ExperienceValue;                                          // 0x0040(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              Stamina;                                                  // 0x0044(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxStamina;                                               // 0x0048(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              Focus;                                                    // 0x004C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxFocus;                                                 // 0x0050(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0054(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAttributeSet");
		return ptr;
	}

};


// Class BendGame.BendAudioEventVOWaitTimeData
// 0x0060 (0x0088 - 0x0028)
class UBendAudioEventVOWaitTimeData : public UDataAsset
{
public:
	TArray<struct FBendEventVOData>                    EventVODataList;                                          // 0x0028(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x50];                                      // 0x0038(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAudioEventVOWaitTimeData");
		return ptr;
	}

};


// Class BendGame.BendAudioRenderingSubmixData
// 0x0150 (0x0178 - 0x0028)
class UBendAudioRenderingSubmixData : public UDataAsset
{
public:
	struct FBendRenderingSubmixData                    RenderingSubmix;                                          // 0x0028(0x0150) (Edit, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAudioRenderingSubmixData");
		return ptr;
	}

};


// Class BendGame.BendAvoidanceComponent
// 0x0060 (0x0270 - 0x0210)
class UBendAvoidanceComponent : public USceneComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0210(0x0008) MISSED OFFSET
	unsigned char                                      bUseRVOAvoidance : 1;                                     // 0x0218(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0219(0x0003) MISSED OFFSET
	int                                                AvoidanceUID;                                             // 0x021C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              AvoidanceWeight;                                          // 0x0220(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              RVOAvoidanceRadius;                                       // 0x0224(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              RVOAvoidanceHeight;                                       // 0x0228(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AvoidanceConsiderationRadius;                             // 0x022C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FNavAvoidanceMask                           AvoidanceGroup;                                           // 0x0230(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FNavAvoidanceMask                           GroupsToAvoid;                                            // 0x0234(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FNavAvoidanceMask                           GroupsToIgnore;                                           // 0x0238(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x023C(0x0004) MISSED OFFSET
	struct FBendRVOAvoidanceGroups                     RVOAvoidanceGroups;                                       // 0x0240(0x0030) (Edit, BlueprintVisible, BlueprintReadOnly)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAvoidanceComponent");
		return ptr;
	}


	void SetGroupsToIgnore(int GroupFlags);
	void SetGroupsToAvoid(int GroupFlags);
	void SetAvoidanceGroup(int GroupFlags);
};


// Class BendGame.BendAvoidanceRoadEdgeComponent
// 0x0020 (0x0290 - 0x0270)
class UBendAvoidanceRoadEdgeComponent : public UBendAvoidanceComponent
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0270(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAvoidanceRoadEdgeComponent");
		return ptr;
	}

};


// Class BendGame.BendAwarenessCommunication
// 0x0028 (0x0050 - 0x0028)
class UBendAwarenessCommunication : public UObject
{
public:
	struct FBendCommunicationParameters                AwarenessParameters;                                      // 0x0028(0x001C) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0xC];                                       // 0x0044(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAwarenessCommunication");
		return ptr;
	}


	bool IsRequester(class UBendCommunicationComponent* CommunicationComponent);
	class UBendCommunicationComponent* GetRequester();
	class UBendAwarenessCommunication* STATIC_CreateAwarenessCommunication(class UBendCommunicationComponent* RequesterComponent, const struct FBendCommunicationParameters& AwarenessParameters);
};


// Class BendGame.BendInvestigationCommunication
// 0x0028 (0x0078 - 0x0050)
class UBendInvestigationCommunication : public UBendAwarenessCommunication
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x0050(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendInvestigationCommunication");
		return ptr;
	}


	void StopInvestigation(class UBendCommunicationComponent* CommunicationComponent);
	void StartInvestigation(class UBendCommunicationComponent* CommunicationComponent, const struct FScriptDelegate& OnStartDelegate, const struct FScriptDelegate& OnStopDelegate);
	void LeaveInvestigation(class UBendCommunicationComponent* CommunicationComponent, bool FoundAnything);
	bool IsInvestigator(class UBendCommunicationComponent* CommunicationComponent);
	bool IsInvestigationPending();
	bool DidFindAnything();
	class UBendInvestigationCommunication* STATIC_CreateInvestigationCommunication(class UBendCommunicationComponent* RequesterComponent, const struct FBendCommunicationParameters& InvestigationParameters, int NumberOfInvestigators);
	void ApplyForInvestigation(class UBendCommunicationComponent* CommunicationComponent, const struct FScriptDelegate& OnStartDelegate, const struct FScriptDelegate& OnStopDelegate);
};


// Class BendGame.BendBaseCoverObject
// 0x0008 (0x0350 - 0x0348)
class ABendBaseCoverObject : public ABendCoverObjectTemplate
{
public:
	class UBendCoverComponent*                         m_CoverComponent;                                         // 0x0348(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBaseCoverObject");
		return ptr;
	}

};


// Class BendGame.BendFoliageCoverObject
// 0x0000 (0x0350 - 0x0350)
class ABendFoliageCoverObject : public ABendBaseCoverObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendFoliageCoverObject");
		return ptr;
	}

};


// Class BendGame.BendBasicInteract
// 0x0258 (0x05A0 - 0x0348)
class ABendBasicInteract : public AActor
{
public:
	class USceneComponent*                             InteractRootComponent;                                    // 0x0348(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UBoxComponent*                               InInteractRangeBoxComponent;                              // 0x0350(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UBendSphereComponent*                        InAdvertiseRangeSphereComponent;                          // 0x0358(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UBendWidgetComponent*                        AdvertisingWidget;                                        // 0x0360(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UClass*                                      AdvertiseWidgetClass;                                     // 0x0368(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UInteractComponent*                          InteractComponentHandler;                                 // 0x0370(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class USlateInputInteractComponent*                SlateInputComponent;                                      // 0x0378(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UBendFocusModeOutlineComponent*              FocusModeOutlineComponent;                                // 0x0380(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	bool                                               ShouldUseNavToInteract;                                   // 0x0388(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               FinishedNavTo;                                            // 0x0389(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x038A(0x0006) MISSED OFFSET
	struct FTransform                                  NavToPoint;                                               // 0x0390(0x0030) (Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData)
	struct FPlayerAINavRequestInfo                     NavRequestInfo;                                           // 0x03C0(0x0090) (Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                               CompletedInteractHold;                                    // 0x0450(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               Interacting;                                              // 0x0451(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               InteractUsed;                                             // 0x0452(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData)
	bool                                               CallInteractFinishedOnlyIfUsed;                           // 0x0453(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               DisableExtraCheckForCanUse;                               // 0x0454(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               IfEnemiesNearbyIncreaseHoldTime;                          // 0x0455(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x0456(0x0002) MISSED OFFSET
	float                                              DefaultHoldTimeStoredFromEnemies;                         // 0x0458(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              IncreaseHoldTimeForEnemies;                               // 0x045C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               InteractCurrentlyEnabled;                                 // 0x0460(0x0001) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	bool                                               OneUseInteract;                                           // 0x0461(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x6];                                       // 0x0462(0x0006) MISSED OFFSET
	struct FString                                     PostSlateText;                                            // 0x0468(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	struct FString                                     PreSlateText;                                             // 0x0478(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	bool                                               SinglePressInteract;                                      // 0x0488(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               NoInteract;                                               // 0x0489(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               EnableTickOnOverlap;                                      // 0x048A(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x5];                                       // 0x048B(0x0005) MISSED OFFSET
	class USceneComponent*                             OverrideFollowComponent;                                  // 0x0490(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	bool                                               InsideInteractRange;                                      // 0x0498(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               InsideAdvertiseRange;                                     // 0x0499(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               NeverDisplayInteract;                                     // 0x049A(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               NeverDisplayAdvertise;                                    // 0x049B(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               NeverOverrideMeshTick;                                    // 0x049C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               TurnOffMeshTickOnBeginPlayOnly;                           // 0x049D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<EIconTypes>                            InteractAdvertiseType;                                    // 0x049E(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x1];                                       // 0x049F(0x0001) MISSED OFFSET
	struct FVector                                     FollowComponentAdvertiseOffset;                           // 0x04A0(0x000C) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData05[0x4];                                       // 0x04AC(0x0004) MISSED OFFSET
	class UInventoryItem*                              AdvertiseItemRef;                                         // 0x04B0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               DisableCodeTick;                                          // 0x04B8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               ClearSaveTags;                                            // 0x04B9(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               ShouldOverrideAdvertiseLocation;                          // 0x04BA(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x5];                                       // 0x04BB(0x0005) MISSED OFFSET
	struct FTransform                                  OverrideAdvertiseLocation;                                // 0x04C0(0x0030) (Edit, BlueprintVisible, IsPlainOldData)
	bool                                               ShouldOverrideInteractBoxLocation;                        // 0x04F0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               OnlyStopHighlightingWhenUsed;                             // 0x04F1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData07[0xE];                                       // 0x04F2(0x000E) MISSED OFFSET
	struct FTransform                                  OverrideInteractBoxLocation;                              // 0x0500(0x0030) (Edit, BlueprintVisible, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnInputSuccesful;                                         // 0x0530(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnInputAborted;                                           // 0x0540(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnInteractFinished;                                       // 0x0550(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	TEnumAsByte<EJobResetTypes>                        ResetTypeIfJobsReset;                                     // 0x0560(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData08[0x7];                                       // 0x0561(0x0007) MISSED OFFSET
	struct FTimespan                                   TimeOnLastReset;                                          // 0x0568(0x0008) (BlueprintVisible, ZeroConstructor, SaveGame)
	bool                                               ShouldResetWithSpecificJobTypes;                          // 0x0570(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData09[0x7];                                       // 0x0571(0x0007) MISSED OFFSET
	TArray<class USkeletalMeshComponent*>              AllSkelMeshComps;                                         // 0x0578(0x0010) (ExportObject, ZeroConstructor)
	TArray<class UMeshComponent*>                      AllMeshComps;                                             // 0x0588(0x0010) (ExportObject, ZeroConstructor)
	unsigned char                                      UnknownData10[0x8];                                       // 0x0598(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBasicInteract");
		return ptr;
	}


	void UpdateInteractToCompleted();
	void UpdateInteractText(const struct FString& PreText, const struct FString& PostText);
	void UnbindMoveComplete();
	bool TryToAutoNav();
	void StartTheInteraction();
	void SetInteractionFinished(bool InteractCompleted, bool TurnOffIfOneUseInteract);
	void SetInteractingCurrently(bool HideTheIcon);
	void ResetTheInteraction();
	void ResetAllSaveGameVariablesForJobReset_Blueprint();
	void ResetAllOverlaps();
	void ReleaseTheSlateInteract();
	void ReceiveMoveCompleted(const struct FAIRequestID& RequestID, TEnumAsByte<EPathFollowingResult> Result);
	void PreInputStartPress();
	void OnInputSucceeded();
	void OnInputFailed();
	void OnInputEnd(class USlateInputInteract* InputInteract);
	void OnBeginPlayCallback();
	void LeftInteractRange_Bind(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex);
	void LeftInteractRange();
	void LeftAdvertiseRange();
	void InteractUsedWhenStreamedIn();
	void InteractPermissionRemoved();
	void InteractGivenPermission();
	void InteractDidNotFinish();
	void InputPressStarted();
	void InputPressReleased();
	void InitInteract();
	void EnteredInteractRange_Bind(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void EnteredInteractRange();
	void EnteredAdvertiseRange();
	void EnableTheVisualAdvertise();
	void EnableOrDisableInteraction(bool Enabled);
	void EnableInteract();
	void DisplayTheSlateInteract();
	void DisableTheVisualAdvertise();
	void DisableInteract();
	void BeginTheInteract();
};


// Class BendGame.BendInteractWithPerformAction
// 0x02D0 (0x0870 - 0x05A0)
class ABendInteractWithPerformAction : public ABendBasicInteract
{
public:
	class UArrowComponent*                             AnchorPointComponent;                                     // 0x05A0(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	struct FBendActionData                             ActionData;                                               // 0x05A8(0x00A0) (Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                               GenericNotifyWasHit;                                      // 0x0648(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData)
	bool                                               ResetIfGenericNotifyWasntHit;                             // 0x0649(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               HitGenericNotifyIfMissedWhenAnimEnds;                     // 0x064A(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1];                                       // 0x064B(0x0001) MISSED OFFSET
	int                                                HowManyGenericNotifyHitsNeeded;                           // 0x064C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                CurrentNotifyHitCount;                                    // 0x0650(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               UseEnterLoopExit;                                         // 0x0654(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0655(0x0003) MISSED OFFSET
	float                                              LoopLength;                                               // 0x0658(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x065C(0x0004) MISSED OFFSET
	struct FBendActionData                             EnterData;                                                // 0x0660(0x00A0) (Edit, BlueprintVisible, DisableEditOnInstance)
	struct FBendActionData                             LoopData;                                                 // 0x0700(0x00A0) (Edit, BlueprintVisible, DisableEditOnInstance)
	struct FBendActionData                             ExitData;                                                 // 0x07A0(0x00A0) (Edit, BlueprintVisible, DisableEditOnInstance)
	struct FTimerHandle                                TimerHandle;                                              // 0x0840(0x0004) (Edit, BlueprintVisible, DisableEditOnInstance)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0844(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    LoopFinished;                                             // 0x0848(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    GenericNotifyHitEvent;                                    // 0x0858(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, BlueprintAssignable)
	bool                                               ManuallyCancelledAction;                                  // 0x0868(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x7];                                       // 0x0869(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendInteractWithPerformAction");
		return ptr;
	}


	void UnbindAnimNotify();
	void OnLoopComplete(TEnumAsByte<EPeformActionFailedReason> ReasonForFailure);
	void OnInputSucceeded();
	void ManuallyCancelTheLoop();
	void LoopTimerUp();
	void GenericNotifyHit(int HitIndex);
	void Failed_Action(TEnumAsByte<EPeformActionFailedReason> ReasonForFailure);
	void ExitFailed(TEnumAsByte<EPeformActionFailedReason> ReasonForFailure);
	void EventAnimPickup(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, class UAnimNotify* AnimNotify);
	void EnteredInteractRange();
	void EnterComplete();
	void Complete_Action();
	void BindAnimNotify();
	void ActionCompleted();
};


// Class BendGame.BendPlantDeviceOnHelicopter
// 0x0080 (0x08F0 - 0x0870)
class ABendPlantDeviceOnHelicopter : public ABendInteractWithPerformAction
{
public:
	class AActor*                                      ActorToAttachTo;                                          // 0x0870(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0878(0x0008) MISSED OFFSET
	struct FTransform                                  HelicopterOffsetLocal;                                    // 0x0880(0x0030) (Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData)
	struct FTransform                                  HelicopterWorldTransform;                                 // 0x08B0(0x0030) (Edit, BlueprintVisible, IsPlainOldData)
	class UBoxComponent*                               Collision1;                                               // 0x08E0(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UBoxComponent*                               Collision2;                                               // 0x08E8(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendPlantDeviceOnHelicopter");
		return ptr;
	}


	void SetupCollisionReferences(class UBoxComponent* CollisionBox1, class UBoxComponent* CollisionBox2);
	void GetCollisionReferences();
};


// Class BendGame.BendRipAltar
// 0x0050 (0x08C0 - 0x0870)
class ABendRipAltar : public ABendInteractWithPerformAction
{
public:
	struct FName                                       SermonName;                                               // 0x0870(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                SermonConversation;                                       // 0x0878(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData)
	TEnumAsByte<ERipAltarSermons>                      RipperSermon;                                             // 0x087C(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x087D(0x0003) MISSED OFFSET
	class USoundClass*                                 VO_Bank;                                                  // 0x0880(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UStaticMeshComponent*                        AltarSpeakerA_Ref;                                        // 0x0888(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UBendAttractorComponent*                     BendAttractor_Ref;                                        // 0x0890(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	bool                                               ConversationActive;                                       // 0x0898(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData)
	bool                                               ManuallyStoppedConvo;                                     // 0x0899(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               PrereqMissionComplete;                                    // 0x089A(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               MustCompletePrereqMission;                                // 0x089B(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x089C(0x0004) MISSED OFFSET
	class UBendMissionData*                            PrereqMission;                                            // 0x08A0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class USoundClass*                                 VO_BankDefault;                                           // 0x08A8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x10];                                      // 0x08B0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendRipAltar");
		return ptr;
	}


	void TryActivateConversation();
	void OnDonePlayingVO(class ABendPawn* PawnSpeaking, const struct FName& SoundName, int ConversationID, TEnumAsByte<EDonePlayVocalReason> SuccessOrFail);
	void OnCinematicEnded(const struct FName& Message);
	void MissionReady(TEnumAsByte<EMissionIDs> MissionID);
	void InitInteract();
	void InitCodeReferences();
	void ActivateConversation();
	void ActionCompleted();
};


// Class BendGame.BendSearchBody
// 0x0040 (0x05E0 - 0x05A0)
class ABendSearchBody : public ABendBasicInteract
{
public:
	TArray<struct FInventoryIDDetails>                 NonTableDrops_Internal;                                   // 0x05A0(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	class ABendPawn*                                   BodyReference;                                            // 0x05B0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                CorpseIDReference;                                        // 0x05B8(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x05BC(0x0008) MISSED OFFSET
	int                                                MeshSwapLookIndex;                                        // 0x05C4(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               BlockInventoryModificationUpdates;                        // 0x05C8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x05C9(0x0003) MISSED OFFSET
	float                                              DefaultDistanceToCheckNearbyBodies;                       // 0x05CC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ActiveDistanceToCheckNearbyBodies;                        // 0x05D0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0xC];                                       // 0x05D4(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendSearchBody");
		return ptr;
	}


	void STATIC_UnBlockInventoryModifiedUpdatesOnList(TArray<class ABendSearchBody*> Bodies);
	void RemoveSearchBodyFromNearbyPlayerList();
	void RemoveFromSectorData();
	void LoadMeshSwapLookAtIndex(int Index);
	bool IsMaxedOnSearchLoot();
	bool HasEverBeenSearched();
	void ForceInventoryModificationUpdate();
	void STATIC_CollectAllSearchBodiesOnListInArea(TArray<class ABendSearchBody*> Bodies, float DistanceToCheck);
	void STATIC_BlockInventoryModifiedUpdatesOnList(TArray<class ABendSearchBody*> Bodies);
	bool AttemptToSearchBodyFromAreaPickup(const struct FVector& PlayerPositions);
	void AddToSectorData();
	void AddSearchBodyToNearbyPlayerList();
};


// Class BendGame.BendTraversalInteract
// 0x0170 (0x0710 - 0x05A0)
class ABendTraversalInteract : public ABendBasicInteract
{
public:
	struct FString                                     BuddyForceUsePoiString;                                   // 0x05A0(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TEnumAsByte<EAIMoveSpeed>                          SpeedToPOI;                                               // 0x05B0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               BuddyUseFastTraversal;                                    // 0x05B1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x05B2(0x0006) MISSED OFFSET
	struct FBendActionData                             TraversalDataSlow;                                        // 0x05B8(0x00A0) (Edit, BlueprintVisible, DisableEditOnInstance)
	struct FBendActionData                             TraversalDataFast;                                        // 0x0658(0x00A0) (Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                               AutoTraverseEnter;                                        // 0x06F8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               OnlyUseSlowTraversal;                                     // 0x06F9(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               OnlyUseFastTraversal;                                     // 0x06FA(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               UseNavRotation;                                           // 0x06FB(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AngleAcceptanceHigh;                                      // 0x06FC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AngleAcceptanceLow;                                       // 0x0700(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0xC];                                       // 0x0704(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendTraversalInteract");
		return ptr;
	}


	TArray<class ABendInventoryPickup*> GetNearbyPickups();
};


// Class BendGame.BendBikeInteractBase
// 0x0118 (0x0460 - 0x0348)
class ABendBikeInteractBase : public AActor
{
public:
	class UBendWidgetComponent*                        BendWidgetRepair_CODE;                                    // 0x0348(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UBendWidgetComponent*                        BendWidgetStart_CODE;                                     // 0x0350(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UBendWidgetComponent*                        BendWidgetFuel_CODE;                                      // 0x0358(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UBendWidgetComponent*                        BikeAdvertise_CODE;                                       // 0x0360(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UInteractComponent*                          InteractComponentHandler_CODE;                            // 0x0368(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class USlateInputInteractComponent*                SlateInputComponent_CODE;                                 // 0x0370(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class AVehiclePawn*                                BikePawn;                                                 // 0x0378(0x0008) (Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	unsigned char                                      bInRepairLoop : 1;                                        // 0x0380(0x0001) (Edit, BlueprintVisible, Transient, EditConst)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0381(0x0003) MISSED OFFSET
	struct FBendBikeRepairInteractDetails              RepairDetails;                                            // 0x0384(0x0018) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData01[0x4];                                       // 0x039C(0x0004) MISSED OFFSET
	class AVehiclePawn*                                TheBike;                                                  // 0x03A0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               Interacting;                                              // 0x03A8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               InRange;                                                  // 0x03A9(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x6];                                       // 0x03AA(0x0006) MISSED OFFSET
	struct FName                                       Type;                                                     // 0x03B0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x8];                                       // 0x03B8(0x0008) MISSED OFFSET
	struct FTransform                                  CurrentAnchor;                                            // 0x03C0(0x0030) (Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData)
	bool                                               StartedCallGetOffBike;                                    // 0x03F0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               InLoop;                                                   // 0x03F1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               DisplayedBikeInteract;                                    // 0x03F2(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               InRangeOfInteract;                                        // 0x03F3(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               InteractBuffer;                                           // 0x03F4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               InCinematic;                                              // 0x03F5(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               InCoolerInteract;                                         // 0x03F6(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<EBikeInteractionTypes>                 InteractionType;                                          // 0x03F7(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               FinishedNavTo;                                            // 0x03F8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               ShouldUseNavToInteract;                                   // 0x03F9(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x6];                                       // 0x03FA(0x0006) MISSED OFFSET
	struct FTransform                                  NavToPoint;                                               // 0x0400(0x0030) (Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData)
	bool                                               CurrentlyNaving;                                          // 0x0430(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               CheckForKickstand;                                        // 0x0431(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData05[0x2];                                       // 0x0432(0x0002) MISSED OFFSET
	struct FTimerHandle                                KickstandTimer;                                           // 0x0434(0x0004) (Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                               ManuallyCancellingAction;                                 // 0x0438(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData06[0x3];                                       // 0x0439(0x0003) MISSED OFFSET
	struct FTimerHandle                                CheckIfcanInteractTimer;                                  // 0x043C(0x0004) (Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                               MissionBlockingActive;                                    // 0x0440(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               CurrentSideLeft;                                          // 0x0441(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               InExitAnim;                                               // 0x0442(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               TryAgainNoNav;                                            // 0x0443(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               TempUsePooledWidget;                                      // 0x0444(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData07[0x3];                                       // 0x0445(0x0003) MISSED OFFSET
	struct FName                                       TutorialSaveDatabaseID;                                   // 0x0448(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               TutorialSaveReadyToDisplay;                               // 0x0450(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               LastCheckForCanRefuel;                                    // 0x0451(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData08[0x2];                                       // 0x0452(0x0002) MISSED OFFSET
	float                                              RefuelingRidePointZOffset;                                // 0x0454(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              RefuelingRidePointForwardOffset;                          // 0x0458(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<EInventoryWeaponID>                    GasCanWeaponID;                                           // 0x045C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               Interact2Bound;                                           // 0x045D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               InRangeOfGasInteraction;                                  // 0x045E(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData09[0x1];                                       // 0x045F(0x0001) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBikeInteractBase");
		return ptr;
	}


	bool ValidWaterDepth();
	void UpdateOverrideLOSLocation(bool CanRefuel);
	void UpdateGascanControl(bool HasControl);
	void UpdateFuelAndHealthStats();
	void SetBikeAdvertiseState(bool IsAvailable);
	void SetAdvertisePosition();
	void Set3DVisibilityState(bool State, bool ForceVisibility);
	void RepairBikeTick(float DeltaTime);
	void OnScrapRemoved(int RemovedCount);
	void OnRepairProgressChanged(float RepairProgress);
	void OnBikeRepairBeginEnd(bool IsRepairing);
	void Interact2Released();
	void Interact2Pressed();
	void EndBikeRepair();
	void ControlInteract2InputBinds(bool TurnOn);
	void CheckRideInteract();
	void CheckQuicksaveInteraction();
	void CheckCanInteractBike(bool* CanInteract, bool* PlayerPermission, bool* HasDriver, bool* HasInteractAvailable, bool* WaterDepthPass, bool* InStateToRefuel, bool* ResettingBike);
	void CheckAmmoInteraction();
	bool CanDoSecondaryInteractCode();
	void BeginBikeRepair(class AVehiclePawn* BikeToRepair);
};


// Class BendGame.BendBlendableActor
// 0x0020 (0x0368 - 0x0348)
class ABendBlendableActor : public AActor
{
public:
	TArray<struct FBlendableScalar>                    BlendableScalars;                                         // 0x0348(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FBlendableVector>                    BlendableVectors;                                         // 0x0358(0x0010) (Edit, BlueprintVisible, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBlendableActor");
		return ptr;
	}


	void SetBlendableVector(const struct FName& Key, const struct FVector4& Value);
	void SetBlendableScalar(const struct FName& Key, float Value);
	void OnLerpComplete();
	void LerpBlendables(class ABendBlendableActor* Curr, class ABendBlendableActor* Next, float Weight);
	struct FVector4 GetBlendableVector(const struct FName& Key);
	float GetBlendableScalar(const struct FName& Key);
};


// Class BendGame.BendWorldSpec
// 0x0328 (0x0690 - 0x0368)
class ABendWorldSpec : public ABendBlendableActor
{
public:
	TEnumAsByte<EWeatherType>                          WeatherType;                                              // 0x0368(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0369(0x0003) MISSED OFFSET
	struct FLinearColor                                Lighting_SunColor;                                        // 0x036C(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	float                                              Lighting_SunTemperature;                                  // 0x037C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	float                                              Lighting_SunPitch;                                        // 0x0380(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	float                                              Lighting_SunYaw;                                          // 0x0384(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               Lighting_SunCastShadow;                                   // 0x0388(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0389(0x0003) MISSED OFFSET
	struct FLinearColor                                Lighting_MoonColor;                                       // 0x038C(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	float                                              Lighting_MoonPitch;                                       // 0x039C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	float                                              Lighting_MoonYaw;                                         // 0x03A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               Lighting_MoonCastShadow;                                  // 0x03A4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	bool                                               Lighting_LocalLightsEnabled;                              // 0x03A5(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData02[0x2];                                       // 0x03A6(0x0002) MISSED OFFSET
	struct FLinearColor                                Lighting_AmbientTint;                                     // 0x03A8(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	float                                              Lighting_AmbientBrightness;                               // 0x03B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	float                                              Lighting_GIBrightness;                                    // 0x03BC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	float                                              Lighting_StarfieldOpacity;                                // 0x03C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData03[0xC];                                       // 0x03C4(0x000C) MISSED OFFSET
	struct FVector4                                    Lighting_EmissiveIntensityChannels;                       // 0x03D0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	float                                              Lighting_CinematicSunGlobalIntensity;                     // 0x03E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	float                                              Lighting_CinematicSunDirectLightIntensity;                // 0x03E4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	bool                                               Lighting_SunColor_UseBase;                                // 0x03E8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               Lighting_SunTemperature_UseBase;                          // 0x03E9(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               Lighting_SunPitch_UseBase;                                // 0x03EA(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               Lighting_SunCastShadow_UseBase;                           // 0x03EB(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               Lighting_MoonColor_UseBase;                               // 0x03EC(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               Lighting_MoonPitch_UseBase;                               // 0x03ED(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               Lighting_MoonCastShadow_UseBase;                          // 0x03EE(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               Lighting_LocalLightsEnabled_UseBase;                      // 0x03EF(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               Lighting_AmbientTint_UseBase;                             // 0x03F0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               Lighting_AmbientBrightness_UseBase;                       // 0x03F1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               Lighting_GIBrightness_UseBase;                            // 0x03F2(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               Lighting_StarfieldOpacity_UseBase;                        // 0x03F3(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               Lighting_EmissiveIntensityChannels_UseBase;               // 0x03F4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               Lighting_CinematicSunGlobalIntensity_UseBase;             // 0x03F5(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               Lighting_CinematicSunDirectLightIntensity_UseBase;        // 0x03F6(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x1];                                       // 0x03F7(0x0001) MISSED OFFSET
	float                                              AtmosphericFog_DensityOffset;                             // 0x03F8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	float                                              AtmosphericFog_DistanceScale;                             // 0x03FC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	float                                              AtmosphericFog_AltitudeScale;                             // 0x0400(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	struct FLinearColor                                AtmosphericFog_FogDensityColor;                           // 0x0404(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	float                                              AtmosphericFog_FogDistanceLinearity;                      // 0x0414(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	bool                                               AtmosphericFog_DensityOffset_UseBase;                     // 0x0418(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               AtmosphericFog_DistanceScale_UseBase;                     // 0x0419(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               AtmosphericFog_AltitudeScale_UseBase;                     // 0x041A(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               AtmosphericFog_FogDensityColor_UseBase;                   // 0x041B(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               AtmosphericFog_FogDistanceLinearity_UseBase;              // 0x041C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData05[0x3];                                       // 0x041D(0x0003) MISSED OFFSET
	float                                              DepthFog_Density;                                         // 0x0420(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	struct FLinearColor                                DepthFog_StartColor;                                      // 0x0424(0x0010) (ZeroConstructor, Deprecated, IsPlainOldData)
	struct FLinearColor                                DepthFog_HorizonColor;                                    // 0x0434(0x0010) (ZeroConstructor, Deprecated, IsPlainOldData)
	struct FLinearColor                                DepthFog_ZenithColor;                                     // 0x0444(0x0010) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              DepthFog_StartColorIntensity;                             // 0x0454(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              DepthFog_HorizonColorIntensity;                           // 0x0458(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              DepthFog_ZenithColorIntensity;                            // 0x045C(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              DepthFog_HorizonFalloff;                                  // 0x0460(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              DepthFog_HorizonFadeToBlack;                              // 0x0464(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	float                                              DepthFog_HorizonFadeToBlackFalloff;                       // 0x0468(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	float                                              DepthFog_ZenithFalloff;                                   // 0x046C(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	struct FLinearColor                                DepthFog_SunGlowColor;                                    // 0x0470(0x0010) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              DepthFog_SunGlowIntensity;                                // 0x0480(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              DepthFog_SunGlowFalloff;                                  // 0x0484(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              DepthFog_SunGlowVerticalFalloff;                          // 0x0488(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	struct FLinearColor                                DepthFog_SunGlow2Color;                                   // 0x048C(0x0010) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              DepthFog_SunGlow2Intensity;                               // 0x049C(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              DepthFog_SunGlow2Falloff;                                 // 0x04A0(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              DepthFog_SunGlow2VerticalFalloff;                         // 0x04A4(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	bool                                               DepthFog_Density_UseBase;                                 // 0x04A8(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData)
	bool                                               DepthFog_StartColor_UseBase;                              // 0x04A9(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData)
	bool                                               DepthFog_HorizonColor_UseBase;                            // 0x04AA(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData)
	bool                                               DepthFog_ZenithColor_UseBase;                             // 0x04AB(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData)
	bool                                               DepthFog_StartColorIntensity_UseBase;                     // 0x04AC(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData)
	bool                                               DepthFog_HorizonColorIntensity_UseBase;                   // 0x04AD(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData)
	bool                                               DepthFog_ZenithColorIntensity_UseBase;                    // 0x04AE(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData)
	bool                                               DepthFog_HorizonFalloff_UseBase;                          // 0x04AF(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData)
	bool                                               DepthFog_HorizonFadeToBlack_UseBase;                      // 0x04B0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               DepthFog_HorizonFadeToBlackFalloff_UseBase;               // 0x04B1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               DepthFog_ZenithFalloff_UseBase;                           // 0x04B2(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData)
	bool                                               DepthFog_SunGlowColor_UseBase;                            // 0x04B3(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData)
	bool                                               DepthFog_SunGlowIntensity_UseBase;                        // 0x04B4(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData)
	bool                                               DepthFog_SunGlowFalloff_UseBase;                          // 0x04B5(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData)
	bool                                               DepthFog_SunGlowVerticalFalloff_UseBase;                  // 0x04B6(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData)
	bool                                               DepthFog_SunGlow2Color_UseBase;                           // 0x04B7(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData)
	bool                                               DepthFog_SunGlow2Intensity_UseBase;                       // 0x04B8(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData)
	bool                                               DepthFog_SunGlow2Falloff_UseBase;                         // 0x04B9(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData)
	bool                                               DepthFog_SunGlow2VerticalFalloff_UseBase;                 // 0x04BA(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData)
	unsigned char                                      UnknownData06[0x1];                                       // 0x04BB(0x0001) MISSED OFFSET
	float                                              VolFog_Density;                                           // 0x04BC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	float                                              VolFog_HeightFalloff;                                     // 0x04C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	struct FLinearColor                                VolFog_AmbientColor;                                      // 0x04C4(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	float                                              VolFog_TreeFog;                                           // 0x04D4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	bool                                               VolFog_Density_UseBase;                                   // 0x04D8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               VolFog_HeightFalloff_UseBase;                             // 0x04D9(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               VolFog_AmbientColor_UseBase;                              // 0x04DA(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               VolFog_TreeFog_UseBase;                                   // 0x04DB(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              WhiteBalance_WhiteTemp;                                   // 0x04DC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               WhiteBalance_WhiteTemp_UseBase;                           // 0x04E0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData07[0x3];                                       // 0x04E1(0x0003) MISSED OFFSET
	float                                              WhiteBalance_WhiteTint;                                   // 0x04E4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               WhiteBalance_WhiteTint_UseBase;                           // 0x04E8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData08[0x3];                                       // 0x04E9(0x0003) MISSED OFFSET
	float                                              Tonemapping_MinBrightness;                                // 0x04EC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              Tonemapping_MaxBrightness;                                // 0x04F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              Tonemapping_ExposureBias;                                 // 0x04F4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	float                                              Tonemapping_BloomThreshold;                               // 0x04F8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              Tonemapping_BloomIntensity;                               // 0x04FC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              Tonemapping_AssumedAverageBaseColor;                      // 0x0500(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               Tonemapping_MinBrightness_UseBase;                        // 0x0504(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               Tonemapping_MaxBrightness_UseBase;                        // 0x0505(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               Tonemapping_ExposureBias_UseBase;                         // 0x0506(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               Tonemapping_BloomThreshold_UseBase;                       // 0x0507(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               Tonemapping_BloomIntensity_UseBase;                       // 0x0508(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               Tonemapping_AssumedAverageBaseColor_UseBase;              // 0x0509(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData09[0x2];                                       // 0x050A(0x0002) MISSED OFFSET
	float                                              ColorCorrection_Hue;                                      // 0x050C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	float                                              ColorCorrection_Contrast;                                 // 0x0510(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	float                                              ColorCorrection_Saturation;                               // 0x0514(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	float                                              ColorCorrection_Brightness;                               // 0x0518(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	struct FLinearColor                                ColorCorrection_ColorBalance;                             // 0x051C(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	bool                                               ColorCorrection_Hue_UseBase;                              // 0x052C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               ColorCorrection_Contrast_UseBase;                         // 0x052D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               ColorCorrection_Saturation_UseBase;                       // 0x052E(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               ColorCorrection_Brightness_UseBase;                       // 0x052F(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               ColorCorrection_ColorBalance_UseBase;                     // 0x0530(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData10[0x3];                                       // 0x0531(0x0003) MISSED OFFSET
	float                                              ForegroundClouds_Density;                                 // 0x0534(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	struct FLinearColor                                ForegroundClouds_SunColor;                                // 0x0538(0x0010) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              ForegroundClouds_SunColorIntensity;                       // 0x0548(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	struct FLinearColor                                ForegroundClouds_DarkColor;                               // 0x054C(0x0010) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              ForegroundClouds_DarkColorIntensity;                      // 0x055C(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              ForegroundClouds_SunDarkColorMix;                         // 0x0560(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	struct FLinearColor                                ForegroundClouds_LowerSkyColor;                           // 0x0564(0x0010) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              ForegroundClouds_LowerSkyColorIntensity;                  // 0x0574(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	struct FLinearColor                                ForegroundClouds_UpperSkyColor;                           // 0x0578(0x0010) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              ForegroundClouds_UpperSkyColorIntensity;                  // 0x0588(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              ForegroundClouds_FogFalloff;                              // 0x058C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	float                                              ForegroundClouds_Scattering;                              // 0x0590(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	float                                              ForegroundClouds_Extinction;                              // 0x0594(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	float                                              ForegroundClouds_HGNegativeLobe;                          // 0x0598(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ForegroundClouds_HGPositiveLobe;                          // 0x059C(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              ForegroundClouds_HGLobeMix;                               // 0x05A0(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	struct FLinearColor                                ForegroundClouds_GroundColor;                             // 0x05A4(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                ForegroundClouds_RGBScattering;                           // 0x05B4(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     ForegroundClouds_MinSize;                                 // 0x05C4(0x000C) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     ForegroundClouds_MaxSize;                                 // 0x05D0(0x000C) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     ForegroundClouds_WindDirection;                           // 0x05DC(0x000C) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ForegroundClouds_WindStrength;                            // 0x05E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ForegroundClouds_ScrollingShadowThickness;                // 0x05EC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ForegroundClouds_ScrollingShadowIntensity;                // 0x05F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               ForegroundClouds_Density_UseBase;                         // 0x05F4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               ForegroundClouds_SunColor_UseBase;                        // 0x05F5(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData)
	bool                                               ForegroundClouds_SunColorIntensity_UseBase;               // 0x05F6(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData)
	bool                                               ForegroundClouds_DarkColor_UseBase;                       // 0x05F7(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData)
	bool                                               ForegroundClouds_DarkColorIntensity_UseBase;              // 0x05F8(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData)
	bool                                               ForegroundClouds_SunDarkColorMix_UseBase;                 // 0x05F9(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData)
	bool                                               ForegroundClouds_LowerSkyColor_UseBase;                   // 0x05FA(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData)
	bool                                               ForegroundClouds_LowerSkyColorIntensity_UseBase;          // 0x05FB(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData)
	bool                                               ForegroundClouds_UpperSkyColor_UseBase;                   // 0x05FC(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData)
	bool                                               ForegroundClouds_UpperSkyColorIntensity_UseBase;          // 0x05FD(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData)
	bool                                               ForegroundClouds_FogFalloff_UseBase;                      // 0x05FE(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               ForegroundClouds_Scattering_UseBase;                      // 0x05FF(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               ForegroundClouds_Extinction_UseBase;                      // 0x0600(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               ForegroundClouds_ScrollingShadowThickness_UseBase;        // 0x0601(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               ForegroundClouds_ScrollingShadowIntensity_UseBase;        // 0x0602(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               ForegroundClouds_RGBScattering_UseBase;                   // 0x0603(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               ForegroundClouds_GroundColor_UseBase;                     // 0x0604(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData11[0x3];                                       // 0x0605(0x0003) MISSED OFFSET
	float                                              BackgroundClouds_Density;                                 // 0x0608(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	struct FLinearColor                                BackgroundClouds_SunColor;                                // 0x060C(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	struct FLinearColor                                BackgroundClouds_LowerSkyColor;                           // 0x061C(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	struct FLinearColor                                BackgroundClouds_UpperSkyColor;                           // 0x062C(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	float                                              BackgroundClouds_FogFalloff;                              // 0x063C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	bool                                               BackgroundClouds_Density_UseBase;                         // 0x0640(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               BackgroundClouds_SunColor_UseBase;                        // 0x0641(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               BackgroundClouds_LowerSkyColor_UseBase;                   // 0x0642(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               BackgroundClouds_UpperSkyColor_UseBase;                   // 0x0643(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               BackgroundClouds_FogFalloff_UseBase;                      // 0x0644(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData12[0x3];                                       // 0x0645(0x0003) MISSED OFFSET
	float                                              Weather_CloudIntensity;                                   // 0x0648(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	float                                              Weather_RainIntensity;                                    // 0x064C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	float                                              Weather_SnowIntensity;                                    // 0x0650(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	float                                              Weather_Wetness;                                          // 0x0654(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	float                                              Weather_Visibility;                                       // 0x0658(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	float                                              Weather_WorldBrightness;                                  // 0x065C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	float                                              Weather_WindIntensity;                                    // 0x0660(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	float                                              Weather_TODSound;                                         // 0x0664(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	float                                              Weather_LightningProbability;                             // 0x0668(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               Weather_CloudIntensity_UseBase;                           // 0x066C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               Weather_RainIntensity_UseBase;                            // 0x066D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               Weather_SnowIntensity_UseBase;                            // 0x066E(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               Weather_Wetness_UseBase;                                  // 0x066F(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               Weather_Visibility_UseBase;                               // 0x0670(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               Weather_WorldBrightness_UseBase;                          // 0x0671(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               Weather_WindIntensity_UseBase;                            // 0x0672(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               Weather_TODSound_UseBase;                                 // 0x0673(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               Weather_LightningProbability_UseBase;                     // 0x0674(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData13[0x3];                                       // 0x0675(0x0003) MISSED OFFSET
	TArray<class UTimelineComponent*>                  BaseTimelines;                                            // 0x0678(0x0010) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst)
	unsigned char                                      UnknownData14[0x8];                                       // 0x0688(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendWorldSpec");
		return ptr;
	}


	void Sync(float TimeOfDay, float Rate);
	void Stop();
	void SetWhiteBalance_WhiteTint(float Value);
	void SetWhiteBalance_WhiteTemp(float Value);
	void SetWeather_WorldBrightness(float Value);
	void SetWeather_WindIntensity(float Value);
	void SetWeather_Wetness(float Value);
	void SetWeather_Visibility(float Value);
	void SetWeather_TODSound(float Value);
	void SetWeather_SnowIntensity(float Value);
	void SetWeather_RainIntensity(float Value);
	void SetWeather_LightningProbability(float Value);
	void SetWeather_CloudIntensity(float Value);
	void SetVolFog_TreeFog(float Value);
	void SetVolFog_HeightFalloff(float Value);
	void SetVolFog_Density(float Value);
	void SetVolFog_AmbientColor(const struct FLinearColor& Value);
	void SetTonemapping_MinBrightness(float Value);
	void SetTonemapping_MaxBrightness(float Value);
	void SetTonemapping_ExposureBias(float Value);
	void SetTonemapping_BloomThreshold(float Value);
	void SetTonemapping_BloomIntensity(float Value);
	void SetTonemapping_AssumedAverageBaseColor(float Value);
	void SetLighting_SunTemperature(float Value);
	void SetLighting_SunPitch(float Value);
	void SetLighting_SunColor(const struct FLinearColor& Value);
	void SetLighting_SunCastShadow(float Value);
	void SetLighting_StarfieldOpacity(float Value);
	void SetLighting_MoonPitch(float Value);
	void SetLighting_MoonColor(const struct FLinearColor& Value);
	void SetLighting_MoonCastShadow(bool Value);
	void SetLighting_LocalLightsEnabled(float Value);
	void SetLighting_GIBrightness(float Value);
	void SetLighting_EmissiveIntensityChannels(const struct FLinearColor& Value);
	void SetLighting_CinematicSunGlobalIntensity(float Value);
	void SetLighting_CinematicSunDirectLightIntensity(float Value);
	void SetLighting_AmbientTint(const struct FLinearColor& Value);
	void SetLighting_AmbientBrightness(float Value);
	void SetForegroundClouds_UpperSkyColorIntensity(float Value);
	void SetForegroundClouds_UpperSkyColor(const struct FLinearColor& Value);
	void SetForegroundClouds_SunDarkColorMix(float Value);
	void SetForegroundClouds_SunColorIntensity(float Value);
	void SetForegroundClouds_SunColor(const struct FLinearColor& Value);
	void SetForegroundClouds_ScrollingShadowThickness(float Value);
	void SetForegroundClouds_ScrollingShadowIntensity(float Value);
	void SetForegroundClouds_Scattering(float Value);
	void SetForegroundClouds_RGBScattering(const struct FLinearColor& Value);
	void SetForegroundClouds_LowerSkyColorIntensity(float Value);
	void SetForegroundClouds_LowerSkyColor(const struct FLinearColor& Value);
	void SetForegroundClouds_GroundColor(const struct FLinearColor& Value);
	void SetForegroundClouds_FogFalloff(float Value);
	void SetForegroundClouds_Extinction(float Value);
	void SetForegroundClouds_Density(float Value);
	void SetForegroundClouds_DarkColorIntensity(float Value);
	void SetForegroundClouds_DarkColor(const struct FLinearColor& Value);
	void SetDepthFog_ZenithFalloff(float Value);
	void SetDepthFog_ZenithColorIntensity(float Value);
	void SetDepthFog_ZenithColor(const struct FLinearColor& Value);
	void SetDepthFog_SunGlowVerticalFalloff(float Value);
	void SetDepthFog_SunGlowIntensity(float Value);
	void SetDepthFog_SunGlowFalloff(float Value);
	void SetDepthFog_SunGlowColor(const struct FLinearColor& Value);
	void SetDepthFog_SunGlow2VerticalFalloff(float Value);
	void SetDepthFog_SunGlow2Intensity(float Value);
	void SetDepthFog_SunGlow2Falloff(float Value);
	void SetDepthFog_SunGlow2Color(const struct FLinearColor& Value);
	void SetDepthFog_StartColorIntensity(float Value);
	void SetDepthFog_StartColor(const struct FLinearColor& Value);
	void SetDepthFog_HorizonFalloff(float Value);
	void SetDepthFog_HorizonFadeToBlackFalloff(float Value);
	void SetDepthFog_HorizonFadeToBlack(float Value);
	void SetDepthFog_HorizonColorIntensity(float Value);
	void SetDepthFog_HorizonColor(const struct FLinearColor& Value);
	void SetDepthFog_Density(float Value);
	void SetColorCorrection_Saturation(float Value);
	void SetColorCorrection_Hue(float Value);
	void SetColorCorrection_Contrast(float Value);
	void SetColorCorrection_ColorBalance(const struct FLinearColor& Value);
	void SetColorCorrection_Brightness(float Value);
	void SetBaseWhiteBalanceValues(float WhiteTemp, float WhiteTint);
	void SetBaseWeatherValues(float CloudIntensity, float RainIntensity, float SnowIntensity, float Wetness, float Visibility, float WorldBrightness, float WindIntensity, float TODSound, float LightningProbability);
	void SetBaseVolFogValues(float Density, float HeightFalloff, const struct FLinearColor& AmbientColor, float TreeFog);
	void SetBaseTonemappingValues2(float AssumedAverageBaseColor, float MinBrightness, float MaxBrightness);
	void SetBaseTonemappingValues(float ExposureBias, float BloomThreshold, float BloomIntensity);
	void SetBaseLightingValues3(float CinematicSunGlobalIntensity, float CinematicSunDirectLightIntensity);
	void SetBaseLightingValues2(float fSunTemperature);
	void SetBaseLightingValues(const struct FLinearColor& SunColor, float SunPitch, float SunCastShadow, const struct FLinearColor& MoonColor, float MoonPitch, float MoonCastShadow, float LocalLightsEnabled, const struct FLinearColor& AmbientTint, float AmbientBrightness, float GIBrightness, float StarfieldOpacity, const struct FLinearColor& EmissiveIntensityChannels);
	void SetBaseHorizonFadeValues(float HorizonFadeToBlack, float HorizonFadeToBlackFalloff);
	void SetBaseForegroundCloudsValues(float Density, const struct FLinearColor& SunColor, float SunColorIntensity, const struct FLinearColor& DarkColor, float DarkColorIntensity, float SunDarkColorMix, const struct FLinearColor& LowerSkyColor, float LowerSkyColorIntensity, const struct FLinearColor& UpperSkyColor, float UpperSkyColorIntensity, float FogFalloff, float Scattering, float Extinction);
	void SetBaseForegroundCloudsRenderValues2(const struct FLinearColor& GroundColor, const struct FLinearColor& RGBScattering);
	void SetBaseForegroundCloudsRenderValues(float Density, float FogFalloff, float Scattering, float Thickness, float ScrollingShadowThickness, float ScrollingShadowIntensity);
	void SetBaseDepthFogValues(float Density, const struct FLinearColor& StartColor, const struct FLinearColor& HorizonColor, const struct FLinearColor& ZenithColor, float StartColorIntensity, float HorizonColorIntensity, float ZenithColorIntensity, float HorizonFalloff, float HorizonFadeToBlack, float HorizonFadeToBlackFalloff, float ZenithFalloff, const struct FLinearColor& SunGlowColor, float SunGlowIntensity, float SunGlowFalloff, float SunGlowVerticalFalloff, const struct FLinearColor& SunGlow2Color, float SunGlow2Intensity, float SunGlow2Falloff, float SunGlow2VerticalFalloff);
	void SetBaseColorCorrectionValues(float Hue, float Contrast, float Saturation, float Brightness, const struct FLinearColor& ColorBalance);
	void SetBaseBackgroundCloudsValues(float Density, const struct FLinearColor& SunColor, const struct FLinearColor& LowerSkyColor, const struct FLinearColor& UpperSkyColor, float FogFalloff);
	void SetBackgroundClouds_UpperSkyColor(const struct FLinearColor& Value);
	void SetBackgroundClouds_SunColor(const struct FLinearColor& Value);
	void SetBackgroundClouds_LowerSkyColor(const struct FLinearColor& Value);
	void SetBackgroundClouds_FogFalloff(float Value);
	void SetBackgroundClouds_Density(float Value);
	void SetAtmosphericFogValues(bool IsBase, float DensityOffset, float DistanceScale, float AltitudeScale, const struct FLinearColor& FogDensityColor, float FogDistanceLinearity);
	void ReceiveSync(float TimeOfDay, float Rate);
	void ReceiveStop();
};


// Class BendGame.BendBloodSplatBase
// 0x0080 (0x03C8 - 0x0348)
class ABendBloodSplatBase : public AActor
{
public:
	TWeakObjectPtr<class UParticleSystemComponent>     BloodImpactSmall_CODE;                                    // 0x0348(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UMaterialInterface*                          ParentMaterialInstance;                                   // 0x0350(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     LocalPosition;                                            // 0x0358(0x000C) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FRotator                                    Rot;                                                      // 0x0364(0x000C) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0370(0x0010) MISSED OFFSET
	TArray<class UTexture*>                            RandomFloorDecals;                                        // 0x0380(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TArray<class UTexture*>                            RandomWallDecals;                                         // 0x0390(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	class USoundCue*                                   FirstSplatSoundCue;                                       // 0x03A0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class USoundCue*                                   SecondSplatSoundCue;                                      // 0x03A8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<class UDecalComponent*>                     OwnedDecals;                                              // 0x03B0(0x0010) (ExportObject, ZeroConstructor)
	unsigned char                                      UnknownData01[0x8];                                       // 0x03C0(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBloodSplatBase");
		return ptr;
	}


	void OnParticleCollideHandler(const struct FName& EventName, float EmitterTime, int ParticleTime, const struct FVector& Location, const struct FVector& Velocity, const struct FVector& Direction, const struct FVector& Normal, const struct FName& BoneName);
};


// Class BendGame.BendBoundaryFailureComponent
// 0x0040 (0x0250 - 0x0210)
class UBendBoundaryFailureComponent : public USceneComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0210(0x0008) MISSED OFFSET
	float                                              DistanceToStartFailure;                                   // 0x0218(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               EventFiredAtZero;                                         // 0x021C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               HasStartedFailing;                                        // 0x021D(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               FailureActive;                                            // 0x021E(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x021F(0x0001) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnHitBoundary;                                            // 0x0220(0x0010) (Edit, BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnFailStart;                                              // 0x0230(0x0010) (Edit, BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnFailEnd;                                                // 0x0240(0x0010) (Edit, BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBoundaryFailureComponent");
		return ptr;
	}


	void DeactivateFailureChecking();
	void ActivateFailureChecking(class ATriggerVolume* TriggerVolume);
};


// Class BendGame.BendBrokenWeaponPart
// 0x0000 (0x0348 - 0x0348)
class ABendBrokenWeaponPart : public AActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBrokenWeaponPart");
		return ptr;
	}


	void CleanupBrokenPart(class ABendPlayerController* AController);
};


// Class BendGame.BendBTDec_FallibleLoop
// 0x0000 (0x0078 - 0x0078)
class UBendBTDec_FallibleLoop : public UBTDecorator_Loop
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_FallibleLoop");
		return ptr;
	}

};


// Class BendGame.BendBTDec_ForceFailure
// 0x0000 (0x0068 - 0x0068)
class UBendBTDec_ForceFailure : public UBTDecorator
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_ForceFailure");
		return ptr;
	}

};


// Class BendGame.BendBTDec_ForceUsePOI
// 0x0008 (0x0070 - 0x0068)
class UBendBTDec_ForceUsePOI : public UBTDecorator
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0068(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_ForceUsePOI");
		return ptr;
	}

};


// Class BendGame.BendBTDec_Time
// 0x0030 (0x0098 - 0x0068)
class UBendBTDec_Time : public UBTDecorator
{
public:
	struct FBlackboardKeySelector                      FloatKey;                                                 // 0x0068(0x0028) (Edit)
	TEnumAsByte<EArithmeticKeyOperation>               Operation;                                                // 0x0090(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0091(0x0003) MISSED OFFSET
	float                                              Difference;                                               // 0x0094(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_Time");
		return ptr;
	}

};


// Class BendGame.BendBTDecoratorBase
// 0x0000 (0x0068 - 0x0068)
class UBendBTDecoratorBase : public UBTDecorator
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDecoratorBase");
		return ptr;
	}

};


// Class BendGame.BendBTDec_AngleToTarget
// 0x0038 (0x00A0 - 0x0068)
class UBendBTDec_AngleToTarget : public UBendBTDecoratorBase
{
public:
	TEnumAsByte<EArithmeticKeyOperation>               CompareType;                                              // 0x0068(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0069(0x0003) MISSED OFFSET
	float                                              CompareAngle;                                             // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ECompareDirection>                     CompareDirection;                                         // 0x0070(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               UseBlackboardKey;                                         // 0x0071(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x6];                                       // 0x0072(0x0006) MISSED OFFSET
	struct FBlackboardKeySelector                      BBKey;                                                    // 0x0078(0x0028) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_AngleToTarget");
		return ptr;
	}

};


// Class BendGame.BendBTDec_Animals_NumAttackers
// 0x0030 (0x0098 - 0x0068)
class UBendBTDec_Animals_NumAttackers : public UBendBTDecoratorBase
{
public:
	struct FBlackboardKeySelector                      IsAttackerKey;                                            // 0x0068(0x0028) (Edit)
	int                                                Attackers;                                                // 0x0090(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EArithmeticKeyOperation>               CompareType;                                              // 0x0094(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0095(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_Animals_NumAttackers");
		return ptr;
	}

};


// Class BendGame.BendBTDec_AwareOfFactionUnits
// 0x0018 (0x0080 - 0x0068)
class UBendBTDec_AwareOfFactionUnits : public UBendBTDecoratorBase
{
public:
	TArray<TEnumAsByte<EAIFactionType>>                Factions;                                                 // 0x0068(0x0010) (Edit, ZeroConstructor)
	float                                              AdditionalRadius;                                         // 0x0078(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x007C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_AwareOfFactionUnits");
		return ptr;
	}

};


// Class BendGame.BendBTDec_Bear_CanStand
// 0x0008 (0x0070 - 0x0068)
class UBendBTDec_Bear_CanStand : public UBendBTDecoratorBase
{
public:
	float                                              StandHeight;                                              // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x006C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_Bear_CanStand");
		return ptr;
	}

};


// Class BendGame.BendBTDec_CanAimWeapon
// 0x0000 (0x0068 - 0x0068)
class UBendBTDec_CanAimWeapon : public UBendBTDecoratorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_CanAimWeapon");
		return ptr;
	}

};


// Class BendGame.BendBTDec_CanAttack
// 0x0008 (0x0070 - 0x0068)
class UBendBTDec_CanAttack : public UBendBTDecoratorBase
{
public:
	bool                                               IsRanged;                                                 // 0x0068(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               AllowMeleeInterruptingAttacker;                           // 0x0069(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x006A(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_CanAttack");
		return ptr;
	}

};


// Class BendGame.BendBTDec_CanAttackMelee
// 0x0010 (0x0078 - 0x0068)
class UBendBTDec_CanAttackMelee : public UBendBTDecoratorBase
{
public:
	bool                                               IgnoreDistance;                                           // 0x0068(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0069(0x0007) MISSED OFFSET
	struct FName                                       AttackName;                                               // 0x0070(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_CanAttackMelee");
		return ptr;
	}

};


// Class BendGame.BendBTDec_CanGrappleAttack
// 0x0000 (0x0068 - 0x0068)
class UBendBTDec_CanGrappleAttack : public UBendBTDecoratorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_CanGrappleAttack");
		return ptr;
	}

};


// Class BendGame.BendBTDec_ChanceToOccur
// 0x0008 (0x0070 - 0x0068)
class UBendBTDec_ChanceToOccur : public UBendBTDecoratorBase
{
public:
	float                                              PctChance;                                                // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x006C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_ChanceToOccur");
		return ptr;
	}

};


// Class BendGame.BendBTDec_ClosestEdgeAngleToFF
// 0x0010 (0x0078 - 0x0068)
class UBendBTDec_ClosestEdgeAngleToFF : public UBendBTDecoratorBase
{
public:
	float                                              Distance;                                                 // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              angle;                                                    // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               LessThan;                                                 // 0x0070(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0071(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_ClosestEdgeAngleToFF");
		return ptr;
	}

};


// Class BendGame.BendBTDec_Squad
// 0x0000 (0x0068 - 0x0068)
class UBendBTDec_Squad : public UBendBTDecoratorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_Squad");
		return ptr;
	}

};


// Class BendGame.BendBTDec_CombatTimer
// 0x0008 (0x0070 - 0x0068)
class UBendBTDec_CombatTimer : public UBendBTDecoratorBase
{
public:
	bool                                               InCombat;                                                 // 0x0068(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               LessThan;                                                 // 0x0069(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x006A(0x0002) MISSED OFFSET
	float                                              CompareTime;                                              // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_CombatTimer");
		return ptr;
	}

};


// Class BendGame.BendBTDec_CurrentReverbChanged
// 0x0008 (0x0070 - 0x0068)
class UBendBTDec_CurrentReverbChanged : public UBendBTDecoratorBase
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0068(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_CurrentReverbChanged");
		return ptr;
	}


	void OnReverbChanged(class ABendAIController* Controller);
};


// Class BendGame.BendBTDec_CurrentTargetReverbChanged
// 0x0008 (0x0070 - 0x0068)
class UBendBTDec_CurrentTargetReverbChanged : public UBendBTDecoratorBase
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0068(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_CurrentTargetReverbChanged");
		return ptr;
	}


	void OnReverbChanged(class ABendAIController* Controller);
};


// Class BendGame.BendBTDec_DistanceTo
// 0x0088 (0x00F0 - 0x0068)
class UBendBTDec_DistanceTo : public UBendBTDecoratorBase
{
public:
	TEnumAsByte<EBendDistanceCheck>                    CheckFromType;                                            // 0x0068(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EBendDistanceCheck>                    CheckType;                                                // 0x0069(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EBendDistanceCalculation>              CheckOperation;                                           // 0x006A(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               UseDistanceKey;                                           // 0x006B(0x0001) (ZeroConstructor, IsPlainOldData)
	float                                              Distance;                                                 // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FBlackboardKeySelector                      DistanceKey;                                              // 0x0070(0x0028) (Edit)
	float                                              Buffer;                                                   // 0x0098(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               LessThan;                                                 // 0x009C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               UseFromLocationKey;                                       // 0x009D(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               UseLocationKey;                                           // 0x009E(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1];                                       // 0x009F(0x0001) MISSED OFFSET
	struct FBlackboardKeySelector                      FromLocationKey;                                          // 0x00A0(0x0028) (Edit)
	struct FBlackboardKeySelector                      LocationKey;                                              // 0x00C8(0x0028) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_DistanceTo");
		return ptr;
	}

};


// Class BendGame.BendBTDec_DotToFireFocus
// 0x0010 (0x0078 - 0x0068)
class UBendBTDec_DotToFireFocus : public UBendBTDecoratorBase
{
public:
	float                                              MinDot;                                                   // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxDot;                                                   // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bCanUseLastSeenPos;                                       // 0x0070(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0071(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_DotToFireFocus");
		return ptr;
	}

};


// Class BendGame.BendBTDec_FireFocusIsFaction
// 0x0018 (0x0080 - 0x0068)
class UBendBTDec_FireFocusIsFaction : public UBendBTDecoratorBase
{
public:
	TArray<TEnumAsByte<EAIFactionType>>                Factions;                                                 // 0x0068(0x0010) (Edit, ZeroConstructor)
	bool                                               AllowCurrentTarget;                                       // 0x0078(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0079(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_FireFocusIsFaction");
		return ptr;
	}

};


// Class BendGame.BendBTDec_FireFocusSpeed
// 0x0008 (0x0070 - 0x0068)
class UBendBTDec_FireFocusSpeed : public UBendBTDecoratorBase
{
public:
	TEnumAsByte<EArithmeticKeyOperation>               CompareType;                                              // 0x0068(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0069(0x0003) MISSED OFFSET
	float                                              Speed;                                                    // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_FireFocusSpeed");
		return ptr;
	}

};


// Class BendGame.BendBTDec_HasAwarenessOf
// 0x0038 (0x00A0 - 0x0068)
class UBendBTDec_HasAwarenessOf : public UBendBTDecoratorBase
{
public:
	TArray<TEnumAsByte<EAIAwareState>>                 AwarenessTypes;                                           // 0x0068(0x0010) (Edit, ZeroConstructor)
	bool                                               AnyFreaker;                                               // 0x0078(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               AnyHuman;                                                 // 0x0079(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               AnyAnimal;                                                // 0x007A(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bUseSpecificFactions;                                     // 0x007B(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x007C(0x0004) MISSED OFFSET
	TArray<TEnumAsByte<EAIFactionType>>                SpecificFactions;                                         // 0x0080(0x0010) (Edit, ZeroConstructor)
	bool                                               bUseMaxDistance;                                          // 0x0090(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0091(0x0003) MISSED OFFSET
	float                                              MaxDistance;                                              // 0x0094(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bRequireFactionLevel;                                     // 0x0098(0x0001) (ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EFactionLevel>                         MaxFactionLevel;                                          // 0x0099(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x6];                                       // 0x009A(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_HasAwarenessOf");
		return ptr;
	}

};


// Class BendGame.BendBTDec_HasBuiltPath
// 0x0000 (0x0068 - 0x0068)
class UBendBTDec_HasBuiltPath : public UBendBTDecoratorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_HasBuiltPath");
		return ptr;
	}

};


// Class BendGame.BendBTDec_HasCover
// 0x0008 (0x0070 - 0x0068)
class UBendBTDec_HasCover : public UBendBTDecoratorBase
{
public:
	bool                                               CheckIntended;                                            // 0x0068(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               CheckCurrent;                                             // 0x0069(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x006A(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_HasCover");
		return ptr;
	}

};


// Class BendGame.BendBTDec_HasDetectedFriends
// 0x0008 (0x0070 - 0x0068)
class UBendBTDec_HasDetectedFriends : public UBendBTDecoratorBase
{
public:
	int                                                MinNumberFriendsNeeded;                                   // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x006C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_HasDetectedFriends");
		return ptr;
	}

};


// Class BendGame.BendBTDec_HasDetectedHorde
// 0x0008 (0x0070 - 0x0068)
class UBendBTDec_HasDetectedHorde : public UBendBTDecoratorBase
{
public:
	bool                                               HordeMustBeFrenzied;                                      // 0x0068(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               RequireLOS;                                               // 0x0069(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EAIAwareState>                         MinAwareness;                                             // 0x006A(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x5];                                       // 0x006B(0x0005) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_HasDetectedHorde");
		return ptr;
	}

};


// Class BendGame.BendBTDec_HasEverBeenAwareOfTarget
// 0x0000 (0x0068 - 0x0068)
class UBendBTDec_HasEverBeenAwareOfTarget : public UBendBTDecoratorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_HasEverBeenAwareOfTarget");
		return ptr;
	}

};


// Class BendGame.BendBTDec_HasFireFocus
// 0x0000 (0x0068 - 0x0068)
class UBendBTDec_HasFireFocus : public UBendBTDecoratorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_HasFireFocus");
		return ptr;
	}

};


// Class BendGame.BendBTDec_HasFireFocusOfType
// 0x0008 (0x0070 - 0x0068)
class UBendBTDec_HasFireFocusOfType : public UBendBTDecoratorBase
{
public:
	TEnumAsByte<EFireFocusOfType>                      FireFocusType;                                            // 0x0068(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0069(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_HasFireFocusOfType");
		return ptr;
	}

};


// Class BendGame.BendBTDec_HasFriendTargetedByFreaker
// 0x0008 (0x0070 - 0x0068)
class UBendBTDec_HasFriendTargetedByFreaker : public UBendBTDecoratorBase
{
public:
	bool                                               IgnoreNewts;                                              // 0x0068(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               OnlyIfInGrapple;                                          // 0x0069(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x006A(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_HasFriendTargetedByFreaker");
		return ptr;
	}

};


// Class BendGame.BendBTDec_HasHardDefendZone
// 0x0000 (0x0068 - 0x0068)
class UBendBTDec_HasHardDefendZone : public UBendBTDecoratorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_HasHardDefendZone");
		return ptr;
	}

};


// Class BendGame.BendBTDec_HasLOSToFireFocus
// 0x0008 (0x0070 - 0x0068)
class UBendBTDec_HasLOSToFireFocus : public UBendBTDecoratorBase
{
public:
	bool                                               CheckLastKnownLocation;                                   // 0x0068(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               UseProjectileCollision;                                   // 0x0069(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               AllowForSemiAware;                                        // 0x006A(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1];                                       // 0x006B(0x0001) MISSED OFFSET
	float                                              TimeSinceLastSeen;                                        // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_HasLOSToFireFocus");
		return ptr;
	}

};


// Class BendGame.BendBTDec_HasMainWeaponEquipped
// 0x0000 (0x0068 - 0x0068)
class UBendBTDec_HasMainWeaponEquipped : public UBendBTDecoratorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_HasMainWeaponEquipped");
		return ptr;
	}

};


// Class BendGame.BendBTDec_HasMeleeWeapon
// 0x0000 (0x0068 - 0x0068)
class UBendBTDec_HasMeleeWeapon : public UBendBTDecoratorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_HasMeleeWeapon");
		return ptr;
	}

};


// Class BendGame.BendBTDec_HasMeleeWeaponEquipped
// 0x0000 (0x0068 - 0x0068)
class UBendBTDec_HasMeleeWeaponEquipped : public UBendBTDecoratorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_HasMeleeWeaponEquipped");
		return ptr;
	}

};


// Class BendGame.BendBTDec_HasNumSquadMates
// 0x0008 (0x0070 - 0x0068)
class UBendBTDec_HasNumSquadMates : public UBendBTDecoratorBase
{
public:
	int                                                NumberSquadMates;                                         // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               EqualOrGreater;                                           // 0x006C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x006D(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_HasNumSquadMates");
		return ptr;
	}

};


// Class BendGame.BendBTDec_HasOverrideBehavior
// 0x0000 (0x0068 - 0x0068)
class UBendBTDec_HasOverrideBehavior : public UBendBTDecoratorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_HasOverrideBehavior");
		return ptr;
	}

};


// Class BendGame.BendBTDec_HasRangedFriend
// 0x0000 (0x0068 - 0x0068)
class UBendBTDec_HasRangedFriend : public UBendBTDecoratorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_HasRangedFriend");
		return ptr;
	}

};


// Class BendGame.BendBTDec_HasRangedWeapon
// 0x0000 (0x0068 - 0x0068)
class UBendBTDec_HasRangedWeapon : public UBendBTDecoratorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_HasRangedWeapon");
		return ptr;
	}

};


// Class BendGame.BendBTDec_HasRangedWeaponEquipped
// 0x0000 (0x0068 - 0x0068)
class UBendBTDec_HasRangedWeaponEquipped : public UBendBTDecoratorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_HasRangedWeaponEquipped");
		return ptr;
	}

};


// Class BendGame.BendBTDec_HasSeenNearbyFreaker
// 0x0008 (0x0070 - 0x0068)
class UBendBTDec_HasSeenNearbyFreaker : public UBendBTDecoratorBase
{
public:
	bool                                               IgnoreNewts;                                              // 0x0068(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               OnlyIfInGrapple;                                          // 0x0069(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x006A(0x0002) MISSED OFFSET
	float                                              MaxDistance;                                              // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_HasSeenNearbyFreaker");
		return ptr;
	}

};


// Class BendGame.BendBTDec_HasSmallDefendZone
// 0x0008 (0x0070 - 0x0068)
class UBendBTDec_HasSmallDefendZone : public UBendBTDecoratorBase
{
public:
	bool                                               bOnlyCheckPrimary;                                        // 0x0068(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0069(0x0003) MISSED OFFSET
	float                                              MinRadius;                                                // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_HasSmallDefendZone");
		return ptr;
	}

};


// Class BendGame.BendBTDec_HasStatusEffect
// 0x0018 (0x0080 - 0x0068)
class UBendBTDec_HasStatusEffect : public UBendBTDecoratorBase
{
public:
	bool                                               AnyEffect;                                                // 0x0068(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               AndValues;                                                // 0x0069(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x006A(0x0006) MISSED OFFSET
	TArray<TEnumAsByte<EStatusEffects>>                EffectTypes;                                              // 0x0070(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_HasStatusEffect");
		return ptr;
	}

};


// Class BendGame.BendBTDec_HasSwitchedFrontLineSide
// 0x0008 (0x0070 - 0x0068)
class UBendBTDec_HasSwitchedFrontLineSide : public UBendBTDecoratorBase
{
public:
	float                                              DeadZone;                                                 // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x006C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_HasSwitchedFrontLineSide");
		return ptr;
	}

};


// Class BendGame.BendBTDec_HasTargetOfFaction
// 0x0010 (0x0078 - 0x0068)
class UBendBTDec_HasTargetOfFaction : public UBendBTDecoratorBase
{
public:
	TArray<TEnumAsByte<EAIFactionType>>                ValidFactions;                                            // 0x0068(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_HasTargetOfFaction");
		return ptr;
	}

};


// Class BendGame.BendBTDec_HasWeaponType
// 0x0020 (0x0088 - 0x0068)
class UBendBTDec_HasWeaponType : public UBendBTDecoratorBase
{
public:
	TArray<TEnumAsByte<EAimedAnimMoveStyle>>           AimedMoveStyles;                                          // 0x0068(0x0010) (Edit, ZeroConstructor)
	TArray<TEnumAsByte<EUnaimedAnimMoveStyle>>         UnaimedMoveStyles;                                        // 0x0078(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_HasWeaponType");
		return ptr;
	}

};


// Class BendGame.BendBTDec_Human_CancelBeingCharged
// 0x0038 (0x00A0 - 0x0068)
class UBendBTDec_Human_CancelBeingCharged : public UBendBTDecoratorBase
{
public:
	float                                              IndoorsAreaLimit;                                         // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DisengageDistancePlayerOutdoors;                          // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxFacingAnglePlayerOutdoors;                             // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MovementDistancePlayerOutdoors;                           // 0x0074(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MovementAnglePlayerOutdoors;                              // 0x0078(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DisengageDistancePlayerFacingOutdoors;                    // 0x007C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MovementDistancePlayerIndoors;                            // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MovementAnglePlayerIndoors;                               // 0x0084(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DisengageDistancePlayerIndoors;                           // 0x0088(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxFacingAnglePlayerIndoors;                              // 0x008C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DisengageDistancePlayerFacingIndoors;                     // 0x0090(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DisengageDistanceAIOutdoors;                              // 0x0094(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DisengageDistanceAIIndoors;                               // 0x0098(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x009C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_Human_CancelBeingCharged");
		return ptr;
	}

};


// Class BendGame.BendBTDec_Human_CanFormFrontLine
// 0x0000 (0x0068 - 0x0068)
class UBendBTDec_Human_CanFormFrontLine : public UBendBTDecoratorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_Human_CanFormFrontLine");
		return ptr;
	}

};


// Class BendGame.BendBTDec_Human_CanPeekInSniperHide
// 0x0000 (0x0068 - 0x0068)
class UBendBTDec_Human_CanPeekInSniperHide : public UBendBTDecoratorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_Human_CanPeekInSniperHide");
		return ptr;
	}

};


// Class BendGame.BendBTDec_Human_CheckGrenadeTimer
// 0x0000 (0x0068 - 0x0068)
class UBendBTDec_Human_CheckGrenadeTimer : public UBendBTDecoratorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_Human_CheckGrenadeTimer");
		return ptr;
	}

};


// Class BendGame.BendBTDec_Human_CheckMelee
// 0x0008 (0x0070 - 0x0068)
class UBendBTDec_Human_CheckMelee : public UBendBTDecoratorBase
{
public:
	bool                                               CheckEnemy;                                               // 0x0068(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0069(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_Human_CheckMelee");
		return ptr;
	}

};


// Class BendGame.BendBTDec_Human_HasAimAtActor
// 0x0000 (0x0068 - 0x0068)
class UBendBTDec_Human_HasAimAtActor : public UBendBTDecoratorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_Human_HasAimAtActor");
		return ptr;
	}

};


// Class BendGame.BendBTDec_Human_HasRecentlyAbandonedCoverDueToAbort
// 0x0008 (0x0070 - 0x0068)
class UBendBTDec_Human_HasRecentlyAbandonedCoverDueToAbort : public UBendBTDecoratorBase
{
public:
	float                                              MaxTimeSinceAbandoned;                                    // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x006C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_Human_HasRecentlyAbandonedCoverDueToAbort");
		return ptr;
	}

};


// Class BendGame.BendBTDec_Human_HasTargetSequence
// 0x0000 (0x0068 - 0x0068)
class UBendBTDec_Human_HasTargetSequence : public UBendBTDecoratorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_Human_HasTargetSequence");
		return ptr;
	}

};


// Class BendGame.BendBTDec_Human_HasValidFortification
// 0x0000 (0x0068 - 0x0068)
class UBendBTDec_Human_HasValidFortification : public UBendBTDecoratorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_Human_HasValidFortification");
		return ptr;
	}

};


// Class BendGame.BendBTDec_Human_InDriversSeat
// 0x0000 (0x0068 - 0x0068)
class UBendBTDec_Human_InDriversSeat : public UBendBTDecoratorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_Human_InDriversSeat");
		return ptr;
	}

};


// Class BendGame.BendBTDec_Human_InvestigateBody
// 0x0000 (0x0068 - 0x0068)
class UBendBTDec_Human_InvestigateBody : public UBendBTDecoratorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_Human_InvestigateBody");
		return ptr;
	}

};


// Class BendGame.BendBTDec_Human_IsABuddy
// 0x0000 (0x0068 - 0x0068)
class UBendBTDec_Human_IsABuddy : public UBendBTDecoratorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_Human_IsABuddy");
		return ptr;
	}

};


// Class BendGame.BendBTDec_Human_IsBeingCharged
// 0x0048 (0x00B0 - 0x0068)
class UBendBTDec_Human_IsBeingCharged : public UBendBTDecoratorBase
{
public:
	float                                              IndoorsAreaLimit;                                         // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxFacingAnglePlayerOutdoors;                             // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              EngangeDistancePlayerNotFacingOutdoors;                   // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              EngageDistancePlayerOutdoors;                             // 0x0074(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              EngageDistancePlayerCoverOutdoors;                        // 0x0078(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MovementDistancePlayerOutdoors;                           // 0x007C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MovementAnglePlayerOutdoors;                              // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MovementSpeedPlayerOutdoors;                              // 0x0084(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxFacingAnglePlayerIndoors;                              // 0x0088(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              EngangeDistancePlayerNotFacingIndoors;                    // 0x008C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              EngageDistancePlayerIndoors;                              // 0x0090(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              EngageDistancePlayerCoverIndoors;                         // 0x0094(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MovementDistancePlayerIndoors;                            // 0x0098(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MovementAnglePlayerIndoors;                               // 0x009C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MovementSpeedPlayerIndoors;                               // 0x00A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              EngageDistanceAIOutdoors;                                 // 0x00A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              EngageDistanceAIIndoors;                                  // 0x00A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00AC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_Human_IsBeingCharged");
		return ptr;
	}

};


// Class BendGame.BendBTDec_Human_IsFollowingWaypoints
// 0x0000 (0x0068 - 0x0068)
class UBendBTDec_Human_IsFollowingWaypoints : public UBendBTDecoratorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_Human_IsFollowingWaypoints");
		return ptr;
	}

};


// Class BendGame.BendBTDec_Human_IsInFortification
// 0x0000 (0x0068 - 0x0068)
class UBendBTDec_Human_IsInFortification : public UBendBTDecoratorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_Human_IsInFortification");
		return ptr;
	}

};


// Class BendGame.BendBTDec_Human_IsInValidOpenPos
// 0x0008 (0x0070 - 0x0068)
class UBendBTDec_Human_IsInValidOpenPos : public UBendBTDecoratorBase
{
public:
	bool                                               IgnoreDefendZone;                                         // 0x0068(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0069(0x0003) MISSED OFFSET
	float                                              IdealRangeMargin;                                         // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_Human_IsInValidOpenPos");
		return ptr;
	}

};


// Class BendGame.BendBTDec_Human_IsOnBike
// 0x0000 (0x0068 - 0x0068)
class UBendBTDec_Human_IsOnBike : public UBendBTDecoratorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_Human_IsOnBike");
		return ptr;
	}

};


// Class BendGame.BendBTDec_Human_IsReloading
// 0x0000 (0x0068 - 0x0068)
class UBendBTDec_Human_IsReloading : public UBendBTDecoratorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_Human_IsReloading");
		return ptr;
	}

};


// Class BendGame.BendBTDec_Human_IsThereANeedForCoveringFire
// 0x0000 (0x0068 - 0x0068)
class UBendBTDec_Human_IsThereANeedForCoveringFire : public UBendBTDecoratorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_Human_IsThereANeedForCoveringFire");
		return ptr;
	}

};


// Class BendGame.BendBTDec_Human_IsWaitingForCoveringFire
// 0x0000 (0x0068 - 0x0068)
class UBendBTDec_Human_IsWaitingForCoveringFire : public UBendBTDecoratorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_Human_IsWaitingForCoveringFire");
		return ptr;
	}

};


// Class BendGame.BendBTDec_Human_MeleeAdvanceAllowed
// 0x0000 (0x0068 - 0x0068)
class UBendBTDec_Human_MeleeAdvanceAllowed : public UBendBTDecoratorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_Human_MeleeAdvanceAllowed");
		return ptr;
	}

};


// Class BendGame.BendBTDec_Human_ShouldAmbush
// 0x0000 (0x0068 - 0x0068)
class UBendBTDec_Human_ShouldAmbush : public UBendBTDecoratorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_Human_ShouldAmbush");
		return ptr;
	}

};


// Class BendGame.BendBTDec_Human_ShouldMoveToSearchLocation
// 0x0008 (0x0070 - 0x0068)
class UBendBTDec_Human_ShouldMoveToSearchLocation : public UBendBTDecoratorBase
{
public:
	float                                              BackupMaxDistFromLeader;                                  // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              BackupMaxTimeSinceSeenLeader;                             // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_Human_ShouldMoveToSearchLocation");
		return ptr;
	}

};


// Class BendGame.BendBTDec_Human_ShouldReload
// 0x0000 (0x0068 - 0x0068)
class UBendBTDec_Human_ShouldReload : public UBendBTDecoratorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_Human_ShouldReload");
		return ptr;
	}

};


// Class BendGame.BendBTDec_Human_ShouldRush
// 0x0028 (0x0090 - 0x0068)
class UBendBTDec_Human_ShouldRush : public UBendBTDecoratorBase
{
public:
	struct FBlackboardKeySelector                      ForceRushKey;                                             // 0x0068(0x0028) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_Human_ShouldRush");
		return ptr;
	}

};


// Class BendGame.BendBTDec_Human_ShouldThrowGrenade
// 0x0008 (0x0070 - 0x0068)
class UBendBTDec_Human_ShouldThrowGrenade : public UBendBTDecoratorBase
{
public:
	bool                                               UseRetreatDistances;                                      // 0x0068(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0069(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_Human_ShouldThrowGrenade");
		return ptr;
	}

};


// Class BendGame.BendBTDec_Human_TestClip
// 0x0008 (0x0070 - 0x0068)
class UBendBTDec_Human_TestClip : public UBendBTDecoratorBase
{
public:
	float                                              TargetFraction;                                           // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x006C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_Human_TestClip");
		return ptr;
	}

};


// Class BendGame.BendBTDec_Human_UseEnclosedSpace
// 0x0000 (0x0068 - 0x0068)
class UBendBTDec_Human_UseEnclosedSpace : public UBendBTDecoratorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_Human_UseEnclosedSpace");
		return ptr;
	}

};


// Class BendGame.BendBTDec_InPersueMode
// 0x0000 (0x0068 - 0x0068)
class UBendBTDec_InPersueMode : public UBendBTDecoratorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_InPersueMode");
		return ptr;
	}

};


// Class BendGame.BendBTDec_InWarningMode
// 0x0000 (0x0068 - 0x0068)
class UBendBTDec_InWarningMode : public UBendBTDecoratorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_InWarningMode");
		return ptr;
	}

};


// Class BendGame.BendBTDec_IsAiming
// 0x0000 (0x0068 - 0x0068)
class UBendBTDec_IsAiming : public UBendBTDecoratorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_IsAiming");
		return ptr;
	}

};


// Class BendGame.BendBTDec_IsAimingAtFireFocus
// 0x0000 (0x0068 - 0x0068)
class UBendBTDec_IsAimingAtFireFocus : public UBendBTDecoratorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_IsAimingAtFireFocus");
		return ptr;
	}

};


// Class BendGame.BendBTDec_IsAllowedToInvestigate
// 0x0000 (0x0068 - 0x0068)
class UBendBTDec_IsAllowedToInvestigate : public UBendBTDecoratorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_IsAllowedToInvestigate");
		return ptr;
	}

};


// Class BendGame.BendBTDec_IsAwareOfFriendInCombat
// 0x0000 (0x0068 - 0x0068)
class UBendBTDec_IsAwareOfFriendInCombat : public UBendBTDecoratorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_IsAwareOfFriendInCombat");
		return ptr;
	}

};


// Class BendGame.BendBTDec_IsCoverValid
// 0x0000 (0x0068 - 0x0068)
class UBendBTDec_IsCoverValid : public UBendBTDecoratorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_IsCoverValid");
		return ptr;
	}

};


// Class BendGame.BendBTDec_IsCrouched
// 0x0000 (0x0068 - 0x0068)
class UBendBTDec_IsCrouched : public UBendBTDecoratorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_IsCrouched");
		return ptr;
	}

};


// Class BendGame.BendBTDec_IsDamageType
// 0x0008 (0x0070 - 0x0068)
class UBendBTDec_IsDamageType : public UBendBTDecoratorBase
{
public:
	TEnumAsByte<ETypeOfBaseDamage>                     DamageType;                                               // 0x0068(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0069(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_IsDamageType");
		return ptr;
	}

};


// Class BendGame.BendBTDec_IsInAGrapple
// 0x0008 (0x0070 - 0x0068)
class UBendBTDec_IsInAGrapple : public UBendBTDecoratorBase
{
public:
	bool                                               CheckIsGrappling;                                         // 0x0068(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0069(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_IsInAGrapple");
		return ptr;
	}

};


// Class BendGame.BendBTDec_IsInAnimState
// 0x0010 (0x0078 - 0x0068)
class UBendBTDec_IsInAnimState : public UBendBTDecoratorBase
{
public:
	bool                                               UseName;                                                  // 0x0068(0x0001) (ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EBendAnimStates>                       AnimState;                                                // 0x0069(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x006A(0x0006) MISSED OFFSET
	struct FName                                       AnimStateName;                                            // 0x0070(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_IsInAnimState");
		return ptr;
	}

};


// Class BendGame.BendBTDec_IsInBush
// 0x0000 (0x0068 - 0x0068)
class UBendBTDec_IsInBush : public UBendBTDecoratorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_IsInBush");
		return ptr;
	}

};


// Class BendGame.BendBTDec_IsInCombatRing
// 0x0008 (0x0070 - 0x0068)
class UBendBTDec_IsInCombatRing : public UBendBTDecoratorBase
{
public:
	TEnumAsByte<EMeleeRingType>                        RingType;                                                 // 0x0068(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0069(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_IsInCombatRing");
		return ptr;
	}

};


// Class BendGame.BendBTDec_IsInDefendZone
// 0x0008 (0x0070 - 0x0068)
class UBendBTDec_IsInDefendZone : public UBendBTDecoratorBase
{
public:
	float                                              Tolerance;                                                // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bOnlyCheckPrimary;                                        // 0x006C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bTestForIgnoreLOS;                                        // 0x006D(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bTestCoverIfInCover;                                      // 0x006E(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1];                                       // 0x006F(0x0001) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_IsInDefendZone");
		return ptr;
	}

};


// Class BendGame.BendBTDec_IsInEnclosedSpace
// 0x0008 (0x0070 - 0x0068)
class UBendBTDec_IsInEnclosedSpace : public UBendBTDecoratorBase
{
public:
	bool                                               UseSmallArea;                                             // 0x0068(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0069(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_IsInEnclosedSpace");
		return ptr;
	}

};


// Class BendGame.BendBTDec_IsInFullBodyReaction
// 0x0000 (0x0068 - 0x0068)
class UBendBTDec_IsInFullBodyReaction : public UBendBTDecoratorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_IsInFullBodyReaction");
		return ptr;
	}

};


// Class BendGame.BendBTDec_IsInHomeEntity
// 0x0000 (0x0068 - 0x0068)
class UBendBTDec_IsInHomeEntity : public UBendBTDecoratorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_IsInHomeEntity");
		return ptr;
	}

};


// Class BendGame.BendBTDec_IsInPreferredMeleeRange
// 0x0000 (0x0068 - 0x0068)
class UBendBTDec_IsInPreferredMeleeRange : public UBendBTDecoratorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_IsInPreferredMeleeRange");
		return ptr;
	}

};


// Class BendGame.BendBTDec_IsMoveFocusInDZ
// 0x0008 (0x0070 - 0x0068)
class UBendBTDec_IsMoveFocusInDZ : public UBendBTDecoratorBase
{
public:
	bool                                               CheckOnlyPrimary;                                         // 0x0068(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0069(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_IsMoveFocusInDZ");
		return ptr;
	}

};


// Class BendGame.BendBTDec_IsMoving
// 0x0000 (0x0068 - 0x0068)
class UBendBTDec_IsMoving : public UBendBTDecoratorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_IsMoving");
		return ptr;
	}

};


// Class BendGame.BendBTDec_IsMySquadInCombat
// 0x0000 (0x0068 - 0x0068)
class UBendBTDec_IsMySquadInCombat : public UBendBTDecoratorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_IsMySquadInCombat");
		return ptr;
	}

};


// Class BendGame.BendBTDec_IsOffFrontLine
// 0x0008 (0x0070 - 0x0068)
class UBendBTDec_IsOffFrontLine : public UBendBTDecoratorBase
{
public:
	float                                              MarginToSide;                                             // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               IgnoreTeamRole;                                           // 0x006C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x006D(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_IsOffFrontLine");
		return ptr;
	}

};


// Class BendGame.BendBTDec_IsOnTargetsLeft
// 0x0000 (0x0068 - 0x0068)
class UBendBTDec_IsOnTargetsLeft : public UBendBTDecoratorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_IsOnTargetsLeft");
		return ptr;
	}

};


// Class BendGame.BendBTDec_IsPerformingMelee
// 0x0000 (0x0068 - 0x0068)
class UBendBTDec_IsPerformingMelee : public UBendBTDecoratorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_IsPerformingMelee");
		return ptr;
	}

};


// Class BendGame.BendBTDec_IsPrimaryAttacker
// 0x0000 (0x0068 - 0x0068)
class UBendBTDec_IsPrimaryAttacker : public UBendBTDecoratorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_IsPrimaryAttacker");
		return ptr;
	}

};


// Class BendGame.BendBTDec_IsRegisteredWithTarget
// 0x0008 (0x0070 - 0x0068)
class UBendBTDec_IsRegisteredWithTarget : public UBendBTDecoratorBase
{
public:
	bool                                               IsRanged;                                                 // 0x0068(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0069(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_IsRegisteredWithTarget");
		return ptr;
	}

};


// Class BendGame.BendBTDec_IsRetreatPointValid
// 0x0008 (0x0070 - 0x0068)
class UBendBTDec_IsRetreatPointValid : public UBendBTDecoratorBase
{
public:
	float                                              MinSafeDistance;                                          // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x006C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_IsRetreatPointValid");
		return ptr;
	}

};


// Class BendGame.BendBTDec_IsSuppressed
// 0x0000 (0x0068 - 0x0068)
class UBendBTDec_IsSuppressed : public UBendBTDecoratorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_IsSuppressed");
		return ptr;
	}

};


// Class BendGame.BendBTDec_IsTargetedByFaction
// 0x0010 (0x0078 - 0x0068)
class UBendBTDec_IsTargetedByFaction : public UBendBTDecoratorBase
{
public:
	TArray<TEnumAsByte<EAIFactionType>>                ValidFactions;                                            // 0x0068(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_IsTargetedByFaction");
		return ptr;
	}

};


// Class BendGame.BendBTDec_IsTargetedByFreaker
// 0x0008 (0x0070 - 0x0068)
class UBendBTDec_IsTargetedByFreaker : public UBendBTDecoratorBase
{
public:
	bool                                               IgnoreNewts;                                              // 0x0068(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0069(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_IsTargetedByFreaker");
		return ptr;
	}

};


// Class BendGame.BendBTDec_IsTargetInEnclosedSpace
// 0x0008 (0x0070 - 0x0068)
class UBendBTDec_IsTargetInEnclosedSpace : public UBendBTDecoratorBase
{
public:
	bool                                               UseSmallArea;                                             // 0x0068(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0069(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_IsTargetInEnclosedSpace");
		return ptr;
	}

};


// Class BendGame.BendBTDec_IsTargetInSameEnclosedSpace
// 0x0000 (0x0068 - 0x0068)
class UBendBTDec_IsTargetInSameEnclosedSpace : public UBendBTDecoratorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_IsTargetInSameEnclosedSpace");
		return ptr;
	}

};


// Class BendGame.BendBTDec_IsTargetOfBodyType
// 0x0008 (0x0070 - 0x0068)
class UBendBTDec_IsTargetOfBodyType : public UBendBTDecoratorBase
{
public:
	TEnumAsByte<EBendPawnBodyType>                     BodyType;                                                 // 0x0068(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0069(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_IsTargetOfBodyType");
		return ptr;
	}

};


// Class BendGame.BendBTDec_IsValidPositionInDefendZone
// 0x0030 (0x0098 - 0x0068)
class UBendBTDec_IsValidPositionInDefendZone : public UBendBTDecoratorBase
{
public:
	struct FBlackboardKeySelector                      PositionProviderKey;                                      // 0x0068(0x0028) (Edit)
	bool                                               CheckCanIgnoreDefendZone;                                 // 0x0090(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               DoWhenHardDefendZone;                                     // 0x0091(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               DontWhenTestOutsideDefendZone;                            // 0x0092(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x5];                                       // 0x0093(0x0005) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_IsValidPositionInDefendZone");
		return ptr;
	}

};


// Class BendGame.BendBTDec_IsValidPositionOnFrontLine
// 0x0068 (0x00D0 - 0x0068)
class UBendBTDec_IsValidPositionOnFrontLine : public UBendBTDecoratorBase
{
public:
	bool                                               UseOwnLocation;                                           // 0x0068(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0069(0x0007) MISSED OFFSET
	struct FBlackboardKeySelector                      PositionProviderKey;                                      // 0x0070(0x0028) (Edit)
	float                                              Distance;                                                 // 0x0098(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               UseDistanceKey;                                           // 0x009C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x009D(0x0003) MISSED OFFSET
	struct FBlackboardKeySelector                      DistanceKey;                                              // 0x00A0(0x0028) (Edit)
	float                                              MarginToSide;                                             // 0x00C8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x00CC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_IsValidPositionOnFrontLine");
		return ptr;
	}

};


// Class BendGame.BendBTDec_IsWorldTime
// 0x0010 (0x0078 - 0x0068)
class UBendBTDec_IsWorldTime : public UBendBTDecoratorBase
{
public:
	int                                                Day;                                                      // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                Hour;                                                     // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                Minute;                                                   // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EArithmeticKeyOperation>               CompareType;                                              // 0x0074(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0075(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_IsWorldTime");
		return ptr;
	}

};


// Class BendGame.BendBTDec_OnTakeDamage
// 0x0028 (0x0090 - 0x0068)
class UBendBTDec_OnTakeDamage : public UBendBTDecoratorBase
{
public:
	TArray<TEnumAsByte<ETypeOfBaseDamage>>             IgnoreBaseType;                                           // 0x0068(0x0010) (Edit, ZeroConstructor)
	TArray<TEnumAsByte<ETypeOfDamage>>                 IgnoreSubType;                                            // 0x0078(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0088(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_OnTakeDamage");
		return ptr;
	}


	void OnPawnDamageCallback(float ActualDamage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser, class ABendPawn* PawnDamaged, bool CriticalHit, bool KillingBlow);
};


// Class BendGame.BendBTDec_OnTargetChanged
// 0x0008 (0x0070 - 0x0068)
class UBendBTDec_OnTargetChanged : public UBendBTDecoratorBase
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0068(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_OnTargetChanged");
		return ptr;
	}


	void OnTargetChangedCallback(class ABendAIController* OwnerController, class ABendPawn* PreviousTarget, class ABendPawn* NewTarget);
};


// Class BendGame.BendBTDec_PathContainsNavLink
// 0x0000 (0x0068 - 0x0068)
class UBendBTDec_PathContainsNavLink : public UBendBTDecoratorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_PathContainsNavLink");
		return ptr;
	}

};


// Class BendGame.BendBTDec_PlayerMovement
// 0x0008 (0x0070 - 0x0068)
class UBendBTDec_PlayerMovement : public UBendBTDecoratorBase
{
public:
	bool                                               LessThan;                                                 // 0x0068(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0069(0x0003) MISSED OFFSET
	float                                              CompareMovement;                                          // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_PlayerMovement");
		return ptr;
	}

};


// Class BendGame.BendBTDec_PlayerMovementDirection
// 0x0008 (0x0070 - 0x0068)
class UBendBTDec_PlayerMovementDirection : public UBendBTDecoratorBase
{
public:
	float                                              MaxDeviationFromStraigthAway;                             // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x006C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_PlayerMovementDirection");
		return ptr;
	}

};


// Class BendGame.BendBTDec_RagerIsRushing
// 0x0000 (0x0068 - 0x0068)
class UBendBTDec_RagerIsRushing : public UBendBTDecoratorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_RagerIsRushing");
		return ptr;
	}

};


// Class BendGame.BendBTDec_RunOnce
// 0x0008 (0x0070 - 0x0068)
class UBendBTDec_RunOnce : public UBendBTDecoratorBase
{
public:
	bool                                               WaitForSuccess;                                           // 0x0068(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0069(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_RunOnce");
		return ptr;
	}

};


// Class BendGame.BendBTDec_ShouldCrouch
// 0x0000 (0x0068 - 0x0068)
class UBendBTDec_ShouldCrouch : public UBendBTDecoratorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_ShouldCrouch");
		return ptr;
	}

};


// Class BendGame.BendBTDec_ShouldPerformAntic
// 0x0000 (0x0068 - 0x0068)
class UBendBTDec_ShouldPerformAntic : public UBendBTDecoratorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_ShouldPerformAntic");
		return ptr;
	}

};


// Class BendGame.BendBTDec_ShouldStrafe
// 0x0008 (0x0070 - 0x0068)
class UBendBTDec_ShouldStrafe : public UBendBTDecoratorBase
{
public:
	bool                                               bAllowStrafeWhenMovingToCover;                            // 0x0068(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0069(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_ShouldStrafe");
		return ptr;
	}

};


// Class BendGame.BendBTDec_SniperCanRelocate
// 0x0000 (0x0068 - 0x0068)
class UBendBTDec_SniperCanRelocate : public UBendBTDecoratorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_SniperCanRelocate");
		return ptr;
	}

};


// Class BendGame.BendBTDec_SniperCanTakeCover
// 0x0000 (0x0068 - 0x0068)
class UBendBTDec_SniperCanTakeCover : public UBendBTDecoratorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_SniperCanTakeCover");
		return ptr;
	}

};


// Class BendGame.BendBTDec_Speed
// 0x0008 (0x0070 - 0x0068)
class UBendBTDec_Speed : public UBendBTDecoratorBase
{
public:
	float                                              ComparisonSpeed;                                          // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EArithmeticKeyOperation>               CompareType;                                              // 0x006C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x006D(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_Speed");
		return ptr;
	}

};


// Class BendGame.BendBTDec_NewtSquadShouldDistract
// 0x0000 (0x0068 - 0x0068)
class UBendBTDec_NewtSquadShouldDistract : public UBendBTDec_Squad
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_NewtSquadShouldDistract");
		return ptr;
	}

};


// Class BendGame.BendBTDec_SquadCombatTimer
// 0x0008 (0x0070 - 0x0068)
class UBendBTDec_SquadCombatTimer : public UBendBTDec_Squad
{
public:
	bool                                               InCombat;                                                 // 0x0068(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               LessThan;                                                 // 0x0069(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x006A(0x0002) MISSED OFFSET
	float                                              CompareTime;                                              // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_SquadCombatTimer");
		return ptr;
	}

};


// Class BendGame.BendBTDec_SquadDZBindingStrength
// 0x0008 (0x0070 - 0x0068)
class UBendBTDec_SquadDZBindingStrength : public UBendBTDec_Squad
{
public:
	TEnumAsByte<EDefendZoneBindingStrength>            MinStrength;                                              // 0x0068(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0069(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_SquadDZBindingStrength");
		return ptr;
	}

};


// Class BendGame.BendBTDec_SquadEngagementTimer
// 0x0008 (0x0070 - 0x0068)
class UBendBTDec_SquadEngagementTimer : public UBendBTDec_Squad
{
public:
	bool                                               IsEngaged;                                                // 0x0068(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               LessThan;                                                 // 0x0069(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x006A(0x0002) MISSED OFFSET
	float                                              CompareTime;                                              // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_SquadEngagementTimer");
		return ptr;
	}

};


// Class BendGame.BendBTDec_SquadHasCollapsedFrontLine
// 0x0008 (0x0070 - 0x0068)
class UBendBTDec_SquadHasCollapsedFrontLine : public UBendBTDec_Squad
{
public:
	float                                              StartDelayTime;                                           // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x006C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_SquadHasCollapsedFrontLine");
		return ptr;
	}

};


// Class BendGame.BendBTDec_SquadIsBeingSniped
// 0x0000 (0x0068 - 0x0068)
class UBendBTDec_SquadIsBeingSniped : public UBendBTDec_Squad
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_SquadIsBeingSniped");
		return ptr;
	}

};


// Class BendGame.BendBTDec_SquadIsEngaged
// 0x0000 (0x0068 - 0x0068)
class UBendBTDec_SquadIsEngaged : public UBendBTDec_Squad
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_SquadIsEngaged");
		return ptr;
	}

};


// Class BendGame.BendBTDec_SquadIsInCombat
// 0x0000 (0x0068 - 0x0068)
class UBendBTDec_SquadIsInCombat : public UBendBTDec_Squad
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_SquadIsInCombat");
		return ptr;
	}

};


// Class BendGame.BendBTDec_SquadIsInPostCombat
// 0x0000 (0x0068 - 0x0068)
class UBendBTDec_SquadIsInPostCombat : public UBendBTDec_Squad
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_SquadIsInPostCombat");
		return ptr;
	}

};


// Class BendGame.BendBTDec_SquadIsOffFrontLine
// 0x0008 (0x0070 - 0x0068)
class UBendBTDec_SquadIsOffFrontLine : public UBendBTDec_Squad
{
public:
	float                                              FractionAllowedOutSide;                                   // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x006C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_SquadIsOffFrontLine");
		return ptr;
	}

};


// Class BendGame.BendBTDec_SquadIsOutsideDZ
// 0x0008 (0x0070 - 0x0068)
class UBendBTDec_SquadIsOutsideDZ : public UBendBTDec_Squad
{
public:
	float                                              FractionAllowedOutSide;                                   // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x006C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_SquadIsOutsideDZ");
		return ptr;
	}

};


// Class BendGame.BendBTDec_SquadMemberHasTargetInsideDZ
// 0x0000 (0x0068 - 0x0068)
class UBendBTDec_SquadMemberHasTargetInsideDZ : public UBendBTDec_Squad
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_SquadMemberHasTargetInsideDZ");
		return ptr;
	}

};


// Class BendGame.BendBTDec_SquadNodeIsFailed
// 0x0008 (0x0070 - 0x0068)
class UBendBTDec_SquadNodeIsFailed : public UBendBTDec_Squad
{
public:
	float                                              FailTime;                                                 // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x006C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_SquadNodeIsFailed");
		return ptr;
	}

};


// Class BendGame.BendBTDec_SquadPerformLastPush
// 0x0000 (0x0068 - 0x0068)
class UBendBTDec_SquadPerformLastPush : public UBendBTDec_Squad
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_SquadPerformLastPush");
		return ptr;
	}

};


// Class BendGame.BendBTDec_SquadPressAttack
// 0x0000 (0x0068 - 0x0068)
class UBendBTDec_SquadPressAttack : public UBendBTDec_Squad
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_SquadPressAttack");
		return ptr;
	}

};


// Class BendGame.BendBTDec_SquadRemainAtHome
// 0x0000 (0x0068 - 0x0068)
class UBendBTDec_SquadRemainAtHome : public UBendBTDec_Squad
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_SquadRemainAtHome");
		return ptr;
	}

};


// Class BendGame.BendBTDec_SquadRetreat
// 0x0000 (0x0068 - 0x0068)
class UBendBTDec_SquadRetreat : public UBendBTDec_Squad
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_SquadRetreat");
		return ptr;
	}

};


// Class BendGame.BendBTDec_SquadSearchArea
// 0x0000 (0x0068 - 0x0068)
class UBendBTDec_SquadSearchArea : public UBendBTDec_Squad
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_SquadSearchArea");
		return ptr;
	}

};


// Class BendGame.BendBTDec_SquadShouldCombatHunt
// 0x0000 (0x0068 - 0x0068)
class UBendBTDec_SquadShouldCombatHunt : public UBendBTDec_Squad
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_SquadShouldCombatHunt");
		return ptr;
	}

};


// Class BendGame.BendBTDec_SquadTargetOnDZIsApproachable
// 0x0000 (0x0068 - 0x0068)
class UBendBTDec_SquadTargetOnDZIsApproachable : public UBendBTDec_Squad
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_SquadTargetOnDZIsApproachable");
		return ptr;
	}

};


// Class BendGame.BendBTDec_SquadMateHasAwareness
// 0x0008 (0x0070 - 0x0068)
class UBendBTDec_SquadMateHasAwareness : public UBendBTDecoratorBase
{
public:
	TEnumAsByte<EAIAwareState>                         Awareness;                                                // 0x0068(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EArithmeticKeyOperation>               CompareType;                                              // 0x0069(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               IgnoreSquadMatesInFortification;                          // 0x006A(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x5];                                       // 0x006B(0x0005) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_SquadMateHasAwareness");
		return ptr;
	}

};


// Class BendGame.BendBTDec_SwarmerCanBikeAttack
// 0x0000 (0x0068 - 0x0068)
class UBendBTDec_SwarmerCanBikeAttack : public UBendBTDecoratorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_SwarmerCanBikeAttack");
		return ptr;
	}

};


// Class BendGame.BendBTDec_TargetAnimState
// 0x0018 (0x0080 - 0x0068)
class UBendBTDec_TargetAnimState : public UBendBTDecoratorBase
{
public:
	TArray<TEnumAsByte<EBendAnimStates>>               States;                                                   // 0x0068(0x0010) (Edit, ZeroConstructor)
	bool                                               CheckFireFocus;                                           // 0x0078(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0079(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_TargetAnimState");
		return ptr;
	}

};


// Class BendGame.BendBTDec_TargetInDefendZone
// 0x0008 (0x0070 - 0x0068)
class UBendBTDec_TargetInDefendZone : public UBendBTDecoratorBase
{
public:
	bool                                               bCheckIfAllowedToLeave;                                   // 0x0068(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bOnlyCheckPrimary;                                        // 0x0069(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x006A(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_TargetInDefendZone");
		return ptr;
	}

};


// Class BendGame.BendBTDec_TeamActionId
// 0x0010 (0x0078 - 0x0068)
class UBendBTDec_TeamActionId : public UBendBTDecoratorBase
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0068(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_TeamActionId");
		return ptr;
	}


	void OnTeamRoleCompleted(class ABendAIController* AIController, const struct FName& RoleName, uint32_t RoleId, bool Success);
	void OnTeamRoleCleared(class ABendAIController* AIController, class UObject* Clearer, const struct FName& RoleName, uint32_t RoleId);
	void OnTeamRoleAssigned(class ABendAIController* AIController, const struct FName& RoleName, uint32_t RoleId);
};


// Class BendGame.BendBTDec_TestIdealRangeVsFireFocus
// 0x0008 (0x0070 - 0x0068)
class UBendBTDec_TestIdealRangeVsFireFocus : public UBendBTDecoratorBase
{
public:
	TEnumAsByte<EIdealRangeTestType>                   TestFor;                                                  // 0x0068(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0069(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_TestIdealRangeVsFireFocus");
		return ptr;
	}

};


// Class BendGame.BendBTDec_TimeOutAfterFailure
// 0x0008 (0x0070 - 0x0068)
class UBendBTDec_TimeOutAfterFailure : public UBendBTDecoratorBase
{
public:
	float                                              CoolDownTime;                                             // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x006C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_TimeOutAfterFailure");
		return ptr;
	}

};


// Class BendGame.BendBTDec_TimeSinceDetectedTarget
// 0x0008 (0x0070 - 0x0068)
class UBendBTDec_TimeSinceDetectedTarget : public UBendBTDecoratorBase
{
public:
	float                                              MaxTime;                                                  // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x006C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_TimeSinceDetectedTarget");
		return ptr;
	}

};


// Class BendGame.BendBTDec_TimeSinceTargetMoved
// 0x0008 (0x0070 - 0x0068)
class UBendBTDec_TimeSinceTargetMoved : public UBendBTDecoratorBase
{
public:
	float                                              CompareTime;                                              // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x006C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTDec_TimeSinceTargetMoved");
		return ptr;
	}

};


// Class BendGame.BendBTFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UBendBTFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTFunctionLibrary");
		return ptr;
	}


	bool STATIC_UpdateBlackboardValueAsVector(class UBTNode* NodeOwner, const struct FBlackboardKeySelector& Key, const struct FVector& Value);
	bool STATIC_UpdateBlackboardValueAsString(class UBTNode* NodeOwner, const struct FBlackboardKeySelector& Key, const struct FString& Value);
	bool STATIC_UpdateBlackboardValueAsObject(class UBTNode* NodeOwner, const struct FBlackboardKeySelector& Key, class UObject* Value);
	bool STATIC_UpdateBlackboardValueAsName(class UBTNode* NodeOwner, const struct FBlackboardKeySelector& Key, const struct FName& Value);
	bool STATIC_UpdateBlackboardValueAsInt(class UBTNode* NodeOwner, const struct FBlackboardKeySelector& Key, int Value);
	bool STATIC_UpdateBlackboardValueAsFloat(class UBTNode* NodeOwner, const struct FBlackboardKeySelector& Key, float Value);
	bool STATIC_UpdateBlackboardValueAsEnum(class UBTNode* NodeOwner, const struct FBlackboardKeySelector& Key, unsigned char Value);
	bool STATIC_UpdateBlackboardValueAsClass(class UBTNode* NodeOwner, const struct FBlackboardKeySelector& Key, class UClass* Value);
	bool STATIC_UpdateBlackboardValueAsBool(class UBTNode* NodeOwner, const struct FBlackboardKeySelector& Key, bool Value);
	bool STATIC_UpdateBlackboardNamedValueAsVector(class UBTNode* NodeOwner, const struct FName& Key, const struct FVector& Value);
	bool STATIC_UpdateBlackboardNamedValueAsString(class UBTNode* NodeOwner, const struct FName& Key, const struct FString& Value);
	bool STATIC_UpdateBlackboardNamedValueAsObject(class UBTNode* NodeOwner, const struct FName& Key, class UObject* Value);
	bool STATIC_UpdateBlackboardNamedValueAsName(class UBTNode* NodeOwner, const struct FName& Key, const struct FName& Value);
	bool STATIC_UpdateBlackboardNamedValueAsInt(class UBTNode* NodeOwner, const struct FName& Key, int Value);
	bool STATIC_UpdateBlackboardNamedValueAsFloat(class UBTNode* NodeOwner, const struct FName& Key, float Value);
	bool STATIC_UpdateBlackboardNamedValueAsEnum(class UBTNode* NodeOwner, const struct FName& Key, unsigned char Value);
	bool STATIC_UpdateBlackboardNamedValueAsClass(class UBTNode* NodeOwner, const struct FName& Key, class UClass* Value);
	bool STATIC_UpdateBlackboardNamedValueAsBool(class UBTNode* NodeOwner, const struct FName& Key, bool Value);
};


// Class BendGame.BendBTServ_Animal_Backoff
// 0x0050 (0x00C0 - 0x0070)
class UBendBTServ_Animal_Backoff : public UBTService
{
public:
	struct FBlackboardKeySelector                      ExitBackoffKey;                                           // 0x0070(0x0028) (Edit)
	float                                              MinDotToTarget;                                           // 0x0098(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MinDistanceToTarget;                                      // 0x009C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxDistanceToTarget;                                      // 0x00A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1C];                                      // 0x00A4(0x001C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTServ_Animal_Backoff");
		return ptr;
	}


	void OnCapsuleHit(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
};


// Class BendGame.BendBTServ_Animal_BikeChase
// 0x0188 (0x01F8 - 0x0070)
class UBendBTServ_Animal_BikeChase : public UBTService
{
public:
	struct FBlackboardKeySelector                      BikeChaseModeKey;                                         // 0x0070(0x0028) (Edit)
	struct FBlackboardKeySelector                      TargetUsingBikeKey;                                       // 0x0098(0x0028) (Edit)
	struct FBlackboardKeySelector                      BikeChaseLocationKey;                                     // 0x00C0(0x0028) (Edit)
	struct FBlackboardKeySelector                      BikeChaseFailedKey;                                       // 0x00E8(0x0028) (Edit)
	struct FBlackboardKeySelector                      IsAttackerKey;                                            // 0x0110(0x0028) (Edit)
	struct FBlackboardKeySelector                      DoAttackKey;                                              // 0x0138(0x0028) (Edit)
	struct FBlackboardKeySelector                      PullAheadKey;                                             // 0x0160(0x0028) (Edit)
	float                                              MaxBikeChaseTime;                                         // 0x0188(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxGroundLostForBikeChase;                                // 0x018C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MinDistanceForFailedBikeChase;                            // 0x0190(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MinBikeSpeedForChase;                                     // 0x0194(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              BikeChaseLocSideOffset;                                   // 0x0198(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              BikeChaseLocSideOffsetForAttacker;                        // 0x019C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              BikeChaseLocLookAheadTime;                                // 0x01A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxOfBikeSpeed;                                           // 0x01A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MinOfBikeSpeed;                                           // 0x01A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              BehindBikeDot;                                            // 0x01AC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AheadOfBikeDot;                                           // 0x01B0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              CloseToTargetDistance;                                    // 0x01B4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              BoostSpeedModifier;                                       // 0x01B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MinPullAheadOfBikeTime;                                   // 0x01BC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxPullAheadOfBikeTime;                                   // 0x01C0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x34];                                      // 0x01C4(0x0034) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTServ_Animal_BikeChase");
		return ptr;
	}


	void OnTakeDamage(float Damage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser, class ABendPawn* PawnDamaged, bool CriticalHit, bool KillingBlow);
};


// Class BendGame.BendBTServ_Animal_UpdateBlackboard
// 0x00B8 (0x0128 - 0x0070)
class UBendBTServ_Animal_UpdateBlackboard : public UBTService
{
public:
	struct FBlackboardKeySelector                      HealthPercentKey;                                         // 0x0070(0x0028) (Edit)
	struct FBlackboardKeySelector                      IsScaredKey;                                              // 0x0098(0x0028) (Edit)
	struct FBlackboardKeySelector                      ShouldBeSleepingKey;                                      // 0x00C0(0x0028) (Edit)
	struct FBlackboardKeySelector                      OccasionalIdlePlayingKey;                                 // 0x00E8(0x0028) (Edit)
	unsigned char                                      UnknownData00[0x18];                                      // 0x0110(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTServ_Animal_UpdateBlackboard");
		return ptr;
	}


	void OnPawnDied(class ABendPawn* Pawn, bool bDied);
};


// Class BendGame.BendBTServ_Animal_UpdateCrow
// 0x0010 (0x0138 - 0x0128)
class UBendBTServ_Animal_UpdateCrow : public UBendBTServ_Animal_UpdateBlackboard
{
public:
	class USoundCue*                                   AlertedSound;                                             // 0x0128(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AlertedSoundVolume;                                       // 0x0130(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0134(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTServ_Animal_UpdateCrow");
		return ptr;
	}


	void OnBecomeAware(class ABendAIController* Controller, TEnumAsByte<EAIAwareState> prevAwareness);
};


// Class BendGame.BendBTServ_Animal_UpdateCombat
// 0x0190 (0x0200 - 0x0070)
class UBendBTServ_Animal_UpdateCombat : public UBTService
{
public:
	struct FBlackboardKeySelector                      DistanceToFireFocus;                                      // 0x0070(0x0028) (Edit)
	struct FBlackboardKeySelector                      CombatRingRadiusKey;                                      // 0x0098(0x0028) (Edit)
	struct FBlackboardKeySelector                      IsFrustratedKey;                                          // 0x00C0(0x0028) (Edit)
	struct FBlackboardKeySelector                      SuccessfulHitKey;                                         // 0x00E8(0x0028) (Edit)
	struct FBlackboardKeySelector                      TargetIsPlayerKey;                                        // 0x0110(0x0028) (Edit)
	struct FBlackboardKeySelector                      IsAttackingKey;                                           // 0x0138(0x0028) (Edit)
	struct FBlackboardKeySelector                      IsInjuredKey;                                             // 0x0160(0x0028) (Edit)
	struct FBlackboardKeySelector                      IsFrenziedKey;                                            // 0x0188(0x0028) (Edit)
	struct FBlackboardKeySelector                      TargetIsInWater;                                          // 0x01B0(0x0028) (Edit)
	float                                              OffScreenAttackTimeMultiplier;                            // 0x01D8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x24];                                      // 0x01DC(0x0024) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTServ_Animal_UpdateCombat");
		return ptr;
	}


	void OnTakeDamage(float Damage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser, class ABendPawn* PawnDamaged, bool CriticalHit, bool KillingBlow);
	void OnSuccessfulAttack();
	void OnFailedAttack();
	void OnAttackStart(const struct FBendAttackData& AttackData);
};


// Class BendGame.BendBTServ_UpdateCougar
// 0x0078 (0x0278 - 0x0200)
class UBendBTServ_UpdateCougar : public UBendBTServ_Animal_UpdateCombat
{
public:
	struct FBlackboardKeySelector                      SneakFailedKey;                                           // 0x0200(0x0028) (Edit)
	struct FBlackboardKeySelector                      WantsRetreatKey;                                          // 0x0228(0x0028) (Edit)
	float                                              MaxSneakTime;                                             // 0x0250(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MinSneakDistance;                                         // 0x0254(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxGroundLostForSneak;                                    // 0x0258(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              RetreatFromHumanoidChance;                                // 0x025C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x18];                                      // 0x0260(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTServ_UpdateCougar");
		return ptr;
	}

};


// Class BendGame.BendBTServ_Animal_UpdateCrowCircling
// 0x00C0 (0x0130 - 0x0070)
class UBendBTServ_Animal_UpdateCrowCircling : public UBTService
{
public:
	struct FBlackboardKeySelector                      IsAttackerKey;                                            // 0x0070(0x0028) (Edit)
	struct FBlackboardKeySelector                      IsFrenziedKey;                                            // 0x0098(0x0028) (Edit)
	float                                              CirclingAltitude;                                         // 0x00C0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              CirclingRadius;                                           // 0x00C4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxDeviationFromCircle;                                   // 0x00C8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxMoveTime;                                              // 0x00CC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               TriggerAttacks;                                           // 0x00D0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00D1(0x0003) MISSED OFFSET
	float                                              MinTimeBetweenAttacks;                                    // 0x00D4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxTimeBetweenAttacks;                                    // 0x00D8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MinTimeBetweenAttacksFrenzied;                            // 0x00DC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxTimeBetweenAttacksFrenzied;                            // 0x00E0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                MaxSimultaneousCrowsAttackingPlayer;                      // 0x00E4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AttackSphereRadius;                                       // 0x00E8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AttackSphereStartBuffer;                                  // 0x00EC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AttackSphereEndBuffer;                                    // 0x00F0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MinDotToTargetToTriggerAttack;                            // 0x00F4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x38];                                      // 0x00F8(0x0038) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTServ_Animal_UpdateCrowCircling");
		return ptr;
	}


	void OnPawnEndTakeOff();
	void FlyToTargetComplete();
};


// Class BendGame.BendBTServ_Animal_UpdateCrowRetreat
// 0x0020 (0x0090 - 0x0070)
class UBendBTServ_Animal_UpdateCrowRetreat : public UBTService
{
public:
	float                                              RetreatStepDistance;                                      // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxAltitudeDeviation;                                     // 0x0074(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x18];                                      // 0x0078(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTServ_Animal_UpdateCrowRetreat");
		return ptr;
	}


	void FlyToTargetComplete();
};


// Class BendGame.BendBTServ_CancelAmbushMode
// 0x0000 (0x0070 - 0x0070)
class UBendBTServ_CancelAmbushMode : public UBTService
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTServ_CancelAmbushMode");
		return ptr;
	}

};


// Class BendGame.BendBTServ_CleanUpSquadAction
// 0x0010 (0x0080 - 0x0070)
class UBendBTServ_CleanUpSquadAction : public UBTService
{
public:
	TArray<struct FName>                               ResourceNames;                                            // 0x0070(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTServ_CleanUpSquadAction");
		return ptr;
	}

};


// Class BendGame.BendBTServ_ClearIntendedCoverOnExit
// 0x0000 (0x0070 - 0x0070)
class UBendBTServ_ClearIntendedCoverOnExit : public UBTService
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTServ_ClearIntendedCoverOnExit");
		return ptr;
	}

};


// Class BendGame.BendBTServ_ClearTeamAssignedThrowAtLocation
// 0x0000 (0x0070 - 0x0070)
class UBendBTServ_ClearTeamAssignedThrowAtLocation : public UBTService
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTServ_ClearTeamAssignedThrowAtLocation");
		return ptr;
	}

};


// Class BendGame.BendBTServ_ComputeEngagementPoint
// 0x0000 (0x0070 - 0x0070)
class UBendBTServ_ComputeEngagementPoint : public UBTService
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTServ_ComputeEngagementPoint");
		return ptr;
	}

};


// Class BendGame.BendBTServ_ComputeFleePoint
// 0x0000 (0x0070 - 0x0070)
class UBendBTServ_ComputeFleePoint : public UBTService
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTServ_ComputeFleePoint");
		return ptr;
	}

};


// Class BendGame.BendBTServ_ComputeFrontLinePoint
// 0x0000 (0x0070 - 0x0070)
class UBendBTServ_ComputeFrontLinePoint : public UBTService
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTServ_ComputeFrontLinePoint");
		return ptr;
	}

};


// Class BendGame.BendBTServ_ComputeRetreatPoint
// 0x0000 (0x0070 - 0x0070)
class UBendBTServ_ComputeRetreatPoint : public UBTService
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTServ_ComputeRetreatPoint");
		return ptr;
	}

};


// Class BendGame.BendBTServ_GrenadeBookSpot
// 0x0000 (0x0070 - 0x0070)
class UBendBTServ_GrenadeBookSpot : public UBTService
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTServ_GrenadeBookSpot");
		return ptr;
	}

};


// Class BendGame.BendBTServ_Human_ClearLookRequestOnExit
// 0x0000 (0x0070 - 0x0070)
class UBendBTServ_Human_ClearLookRequestOnExit : public UBTService
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTServ_Human_ClearLookRequestOnExit");
		return ptr;
	}

};


// Class BendGame.BendBTServ_Human_FindFortification
// 0x0008 (0x0078 - 0x0070)
class UBendBTServ_Human_FindFortification : public UBTService
{
public:
	float                                              TestInterval;                                             // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0074(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTServ_Human_FindFortification");
		return ptr;
	}

};


// Class BendGame.BendBTServ_Human_PostCombatMonitor
// 0x0000 (0x0070 - 0x0070)
class UBendBTServ_Human_PostCombatMonitor : public UBTService
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTServ_Human_PostCombatMonitor");
		return ptr;
	}

};


// Class BendGame.BendBTServ_Human_ReadyToProvideCoveringFire
// 0x0000 (0x0070 - 0x0070)
class UBendBTServ_Human_ReadyToProvideCoveringFire : public UBTService
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTServ_Human_ReadyToProvideCoveringFire");
		return ptr;
	}

};


// Class BendGame.BendBTServ_Human_RequestCoveringFire
// 0x0000 (0x0070 - 0x0070)
class UBendBTServ_Human_RequestCoveringFire : public UBTService
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTServ_Human_RequestCoveringFire");
		return ptr;
	}

};


// Class BendGame.BendBTServ_Human_Search
// 0x0030 (0x00A0 - 0x0070)
class UBendBTServ_Human_Search : public UBTService
{
public:
	struct FBlackboardKeySelector                      SearchSpeedKey;                                           // 0x0070(0x0028) (Edit)
	float                                              TestInterval;                                             // 0x0098(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x009C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTServ_Human_Search");
		return ptr;
	}

};


// Class BendGame.BendBTServ_Human_SemiAware
// 0x0080 (0x00F0 - 0x0070)
class UBendBTServ_Human_SemiAware : public UBTService
{
public:
	struct FBlackboardKeySelector                      CurrentStateKey;                                          // 0x0070(0x0028) (Edit)
	struct FBlackboardKeySelector                      PreviousStateKey;                                         // 0x0098(0x0028) (Edit)
	struct FBlackboardKeySelector                      TargetChangedKey;                                         // 0x00C0(0x0028) (Edit)
	unsigned char                                      UnknownData00[0x8];                                       // 0x00E8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTServ_Human_SemiAware");
		return ptr;
	}


	void OnTargetChanged(class ABendAIController* OwnerController, class ABendPawn* PreviousTarget, class ABendPawn* NewTarget);
	void OnStateChanged(TEnumAsByte<ESemiAwareState> NewState, TEnumAsByte<ESemiAwareState> PrevState);
};


// Class BendGame.BendBTServ_Human_TeamRoleMonitor
// 0x0000 (0x0070 - 0x0070)
class UBendBTServ_Human_TeamRoleMonitor : public UBTService
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTServ_Human_TeamRoleMonitor");
		return ptr;
	}

};


// Class BendGame.BendBTServ_Human_UpdateAmbient
// 0x0068 (0x00D8 - 0x0070)
class UBendBTServ_Human_UpdateAmbient : public UBTService
{
public:
	struct FBlackboardKeySelector                      FacePlayerKey;                                            // 0x0070(0x0028) (Edit)
	float                                              TestInterval;                                             // 0x0098(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3C];                                      // 0x009C(0x003C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTServ_Human_UpdateAmbient");
		return ptr;
	}


	void OnFinishPOIExit(class ABendPOI* CompletedPOI, class ABendAIController* BendAIController);
};


// Class BendGame.BendBTServ_Human_UpdateAttractorInvestigation
// 0x0000 (0x0070 - 0x0070)
class UBendBTServ_Human_UpdateAttractorInvestigation : public UBTService
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTServ_Human_UpdateAttractorInvestigation");
		return ptr;
	}

};


// Class BendGame.BendBTServ_Human_UpdateCombatMove
// 0x0048 (0x00B8 - 0x0070)
class UBendBTServ_Human_UpdateCombatMove : public UBTService
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x0070(0x0028) MISSED OFFSET
	float                                              RetestDistance;                                           // 0x0098(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AllowedChangeOfDirAngle;                                  // 0x009C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               UseMoveFocusAsSearchPosition;                             // 0x00A0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               MovingTowardsThreat;                                      // 0x00A1(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               DoLocalTest;                                              // 0x00A2(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x00A3(0x0001) MISSED OFFSET
	float                                              LocalTestRadius;                                          // 0x00A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x10];                                      // 0x00A8(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTServ_Human_UpdateCombatMove");
		return ptr;
	}

};


// Class BendGame.BendBTServ_Human_UpdateDodgeGrenade
// 0x0000 (0x0070 - 0x0070)
class UBendBTServ_Human_UpdateDodgeGrenade : public UBTService
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTServ_Human_UpdateDodgeGrenade");
		return ptr;
	}

};


// Class BendGame.BendBTServ_Human_UpdateHeavyCombat
// 0x0028 (0x0098 - 0x0070)
class UBendBTServ_Human_UpdateHeavyCombat : public UBTService
{
public:
	struct FBlackboardKeySelector                      DistToTargetKey;                                          // 0x0070(0x0028) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTServ_Human_UpdateHeavyCombat");
		return ptr;
	}

};


// Class BendGame.BendBTServ_Human_UpdateMeleeAdvance
// 0x00C8 (0x0138 - 0x0070)
class UBendBTServ_Human_UpdateMeleeAdvance : public UBTService
{
public:
	struct FBlackboardKeySelector                      FindNewCoverKey;                                          // 0x0070(0x0028) (Edit)
	struct FBlackboardKeySelector                      MinTimeInCoverKey;                                        // 0x0098(0x0028) (Edit)
	struct FBlackboardKeySelector                      MaxTimeInCoverKey;                                        // 0x00C0(0x0028) (Edit)
	struct FBlackboardKeySelector                      CoverSpeedKey;                                            // 0x00E8(0x0028) (Edit)
	struct FBlackboardKeySelector                      RushSpeedKey;                                             // 0x0110(0x0028) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTServ_Human_UpdateMeleeAdvance");
		return ptr;
	}


	void OnCoverInvalidated(class ABendHumanController* Controller, TEnumAsByte<EBendCoverLeaveReason> CoverLeaveReason);
};


// Class BendGame.BendBTServ_Human_UpdateMeleeCombat
// 0x0000 (0x0070 - 0x0070)
class UBendBTServ_Human_UpdateMeleeCombat : public UBTService
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTServ_Human_UpdateMeleeCombat");
		return ptr;
	}

};


// Class BendGame.BendBTServ_Human_UpdateMeleeWait
// 0x0040 (0x00B0 - 0x0070)
class UBendBTServ_Human_UpdateMeleeWait : public UBTService
{
public:
	struct FBlackboardKeySelector                      ForceRushKey;                                             // 0x0070(0x0028) (Edit)
	unsigned char                                      UnknownData00[0x18];                                      // 0x0098(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTServ_Human_UpdateMeleeWait");
		return ptr;
	}


	void OnTargeted();
	void OnTakeDamage(float Damage, class UDamageType* DamageType, class AController* Instigator, class AActor* DamageCauser);
};


// Class BendGame.BendBTServ_Human_UpdateReactionZones
// 0x0028 (0x0098 - 0x0070)
class UBendBTServ_Human_UpdateReactionZones : public UBTService
{
public:
	struct FBlackboardKeySelector                      ReactionZoneKey;                                          // 0x0070(0x0028) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTServ_Human_UpdateReactionZones");
		return ptr;
	}

};


// Class BendGame.BendBTServ_Human_UpdateRoamingOpenCombat
// 0x0000 (0x0070 - 0x0070)
class UBendBTServ_Human_UpdateRoamingOpenCombat : public UBTService
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTServ_Human_UpdateRoamingOpenCombat");
		return ptr;
	}

};


// Class BendGame.BendBTServ_Human_UpdateSelfSacrificeState
// 0x0000 (0x0070 - 0x0070)
class UBendBTServ_Human_UpdateSelfSacrificeState : public UBTService
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTServ_Human_UpdateSelfSacrificeState");
		return ptr;
	}

};


// Class BendGame.BendBTServ_Human_UpdateSuicideCombat
// 0x0058 (0x00C8 - 0x0070)
class UBendBTServ_Human_UpdateSuicideCombat : public UBTService
{
public:
	struct FBlackboardKeySelector                      ShouldRushKey;                                            // 0x0070(0x0028) (Edit)
	struct FBlackboardKeySelector                      ShouldThrowKey;                                           // 0x0098(0x0028) (Edit)
	float                                              TestInterval;                                             // 0x00C0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00C4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTServ_Human_UpdateSuicideCombat");
		return ptr;
	}

};


// Class BendGame.BendBTServ_Human_UpdateWatchSelfSacrificeState
// 0x0000 (0x0070 - 0x0070)
class UBendBTServ_Human_UpdateWatchSelfSacrificeState : public UBTService
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTServ_Human_UpdateWatchSelfSacrificeState");
		return ptr;
	}

};


// Class BendGame.BendBTServ_Human_WillProvideCoveringFire
// 0x0000 (0x0070 - 0x0070)
class UBendBTServ_Human_WillProvideCoveringFire : public UBTService
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTServ_Human_WillProvideCoveringFire");
		return ptr;
	}

};


// Class BendGame.BendBTServ_Human_WillRequestCoveringFire
// 0x0000 (0x0070 - 0x0070)
class UBendBTServ_Human_WillRequestCoveringFire : public UBTService
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTServ_Human_WillRequestCoveringFire");
		return ptr;
	}

};


// Class BendGame.BendBTServ_HumanGroundCombat
// 0x0050 (0x00C0 - 0x0070)
class UBendBTServ_HumanGroundCombat : public UBTService
{
public:
	struct FBlackboardKeySelector                      FindNewCoverKey;                                          // 0x0070(0x0028) (Edit)
	struct FBlackboardKeySelector                      WantsToLeaveCoverKey;                                     // 0x0098(0x0028) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTServ_HumanGroundCombat");
		return ptr;
	}


	void OnCoverInvalidated(class ABendHumanController* Controller, TEnumAsByte<EBendCoverLeaveReason> CoverLeaveReason);
};


// Class BendGame.BendBTServ_HumanOpenCombat
// 0x0050 (0x00C0 - 0x0070)
class UBendBTServ_HumanOpenCombat : public UBTService
{
public:
	struct FBlackboardKeySelector                      EQSKey;                                                   // 0x0070(0x0028) (Edit)
	struct FBlackboardKeySelector                      SearchRadiusKey;                                          // 0x0098(0x0028) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTServ_HumanOpenCombat");
		return ptr;
	}

};


// Class BendGame.BendBTServ_IgnoreAvoidanceObstacle
// 0x0028 (0x0098 - 0x0070)
class UBendBTServ_IgnoreAvoidanceObstacle : public UBTService
{
public:
	struct FBlackboardKeySelector                      ObstacleToIgnore;                                         // 0x0070(0x0028) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTServ_IgnoreAvoidanceObstacle");
		return ptr;
	}

};


// Class BendGame.BendBTServ_IgnoreTargetAsAvoidanceObstacle
// 0x0008 (0x0078 - 0x0070)
class UBendBTServ_IgnoreTargetAsAvoidanceObstacle : public UBTService
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0070(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTServ_IgnoreTargetAsAvoidanceObstacle");
		return ptr;
	}


	void OnTargetChangedCallback(class ABendAIController* OwnerController, class ABendPawn* PreviousTarget, class ABendPawn* NewTarget);
};


// Class BendGame.BendBTServ_RegisterRusher
// 0x0008 (0x0078 - 0x0070)
class UBendBTServ_RegisterRusher : public UBTService
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0070(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTServ_RegisterRusher");
		return ptr;
	}


	void OnTargetChanged(class ABendAIController* OwnerController, class ABendPawn* PreviousTarget, class ABendPawn* NewTarget);
};


// Class BendGame.BendBTServ_RunEQS
// 0x0000 (0x0120 - 0x0120)
class UBendBTServ_RunEQS : public UBTService_RunEQS
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTServ_RunEQS");
		return ptr;
	}

};


// Class BendGame.BendBTServ_SetAcceptingTeamRoles
// 0x0000 (0x0070 - 0x0070)
class UBendBTServ_SetAcceptingTeamRoles : public UBTService
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTServ_SetAcceptingTeamRoles");
		return ptr;
	}

};


// Class BendGame.BendBTServ_SetAllowTeamRoleAbort
// 0x0008 (0x0078 - 0x0070)
class UBendBTServ_SetAllowTeamRoleAbort : public UBTService
{
public:
	bool                                               Allow;                                                    // 0x0070(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0071(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTServ_SetAllowTeamRoleAbort");
		return ptr;
	}

};


// Class BendGame.BendBTServ_SetBBFlagOnExit
// 0x0030 (0x00A0 - 0x0070)
class UBendBTServ_SetBBFlagOnExit : public UBTService
{
public:
	struct FBlackboardKeySelector                      KeyToSet;                                                 // 0x0070(0x0028) (Edit)
	bool                                               Value;                                                    // 0x0098(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0099(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTServ_SetBBFlagOnExit");
		return ptr;
	}

};


// Class BendGame.BendBTServ_SetBool
// 0x0030 (0x00A0 - 0x0070)
class UBendBTServ_SetBool : public UBTService
{
public:
	struct FBlackboardKeySelector                      BlackboardKey;                                            // 0x0070(0x0028) (Edit)
	bool                                               KeyValue;                                                 // 0x0098(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0099(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTServ_SetBool");
		return ptr;
	}

};


// Class BendGame.BendBTServ_SetFacingToClosestFreaker
// 0x0008 (0x0078 - 0x0070)
class UBendBTServ_SetFacingToClosestFreaker : public UBTService
{
public:
	bool                                               IgnoreNewts;                                              // 0x0070(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0071(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTServ_SetFacingToClosestFreaker");
		return ptr;
	}

};


// Class BendGame.BendBTServ_SetFacingToClosestFriendTargetedByFreaker
// 0x0008 (0x0078 - 0x0070)
class UBendBTServ_SetFacingToClosestFriendTargetedByFreaker : public UBTService
{
public:
	bool                                               IgnoreNewts;                                              // 0x0070(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               OnlyIfInGrapple;                                          // 0x0071(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x0072(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTServ_SetFacingToClosestFriendTargetedByFreaker");
		return ptr;
	}

};


// Class BendGame.BendBTServ_SetFacingToClosestTargetingFreaker
// 0x0008 (0x0078 - 0x0070)
class UBendBTServ_SetFacingToClosestTargetingFreaker : public UBTService
{
public:
	bool                                               IgnoreNewts;                                              // 0x0070(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0071(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTServ_SetFacingToClosestTargetingFreaker");
		return ptr;
	}

};


// Class BendGame.BendBTServ_SquadBase
// 0x0018 (0x0088 - 0x0070)
class UBendBTServ_SquadBase : public UBTService
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0070(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTServ_SquadBase");
		return ptr;
	}

};


// Class BendGame.BendBTServ_SquadPostCombat
// 0x0038 (0x00C0 - 0x0088)
class UBendBTServ_SquadPostCombat : public UBendBTServ_SquadBase
{
public:
	float                                              PostCombatDuration;                                       // 0x0088(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x008C(0x0004) MISSED OFFSET
	struct FBlackboardKeySelector                      IsInPostCombatKey;                                        // 0x0090(0x0028) (Edit)
	unsigned char                                      UnknownData01[0x8];                                       // 0x00B8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTServ_SquadPostCombat");
		return ptr;
	}

};


// Class BendGame.BendBTServ_StopMoving
// 0x0008 (0x0078 - 0x0070)
class UBendBTServ_StopMoving : public UBTService
{
public:
	bool                                               BecomeRelevant;                                           // 0x0070(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               CeaseRelevant;                                            // 0x0071(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               UseSkipped;                                               // 0x0072(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x5];                                       // 0x0073(0x0005) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTServ_StopMoving");
		return ptr;
	}

};


// Class BendGame.BendBTServ_UncrouchOnExit
// 0x0000 (0x0070 - 0x0070)
class UBendBTServ_UncrouchOnExit : public UBTService
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTServ_UncrouchOnExit");
		return ptr;
	}

};


// Class BendGame.BendBTServ_UnregisterTargetOnExit
// 0x0008 (0x0078 - 0x0070)
class UBendBTServ_UnregisterTargetOnExit : public UBTService
{
public:
	bool                                               IsRanged;                                                 // 0x0070(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0071(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTServ_UnregisterTargetOnExit");
		return ptr;
	}

};


// Class BendGame.BendBTServ_UpdateBuddyBase
// 0x0128 (0x0198 - 0x0070)
class UBendBTServ_UpdateBuddyBase : public UBTService
{
public:
	struct FBlackboardKeySelector                      EnemyEngagementKey;                                       // 0x0070(0x0028) (Edit)
	struct FBlackboardKeySelector                      ShouldDefendKey;                                          // 0x0098(0x0028) (Edit)
	struct FBlackboardKeySelector                      FollowEnabledKey;                                         // 0x00C0(0x0028) (Edit)
	struct FBlackboardKeySelector                      LeadEnabledKey;                                           // 0x00E8(0x0028) (Edit)
	struct FBlackboardKeySelector                      IdleAllowedKey;                                           // 0x0110(0x0028) (Edit)
	struct FBlackboardKeySelector                      HasPathKey;                                               // 0x0138(0x0028) (Edit)
	struct FBlackboardKeySelector                      ShouldHideKey;                                            // 0x0160(0x0028) (Edit)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0188(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTServ_UpdateBuddyBase");
		return ptr;
	}

};


// Class BendGame.BendBTServ_UpdateBuddyFollow
// 0x0028 (0x0098 - 0x0070)
class UBendBTServ_UpdateBuddyFollow : public UBTService
{
public:
	struct FBlackboardKeySelector                      IdleAllowedKey;                                           // 0x0070(0x0028) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTServ_UpdateBuddyFollow");
		return ptr;
	}

};


// Class BendGame.BendHumanPawn
// 0x00A0 (0x2A50 - 0x29B0)
class ABendHumanPawn : public ABendAIPawn
{
public:
	struct FScriptMulticastDelegate                    OnDamageIgnored;                                          // 0x29B0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	float                                              FlashlightUpdateTickTime;                                 // 0x29C0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FlashlightEmissiveIndex;                                  // 0x29C4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FlashlightBrightnessThreshold;                            // 0x29C8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x29CC(0x0004) MISSED OFFSET
	class UBendSpotLightComponent*                     FlashlightLightComponent;                                 // 0x29D0(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UStaticMeshComponent*                        FlashlightMeshComponent;                                  // 0x29D8(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UStaticMeshComponent*                        FlashlightVolumetricConeComponent;                        // 0x29E0(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FColor                                      FlashlightColor;                                          // 0x29E8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FColor                                      FlashlightOnGunColor;                                     // 0x29EC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              FlashlightConeAngle;                                      // 0x29F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FlashlightOnGunConeAngle;                                 // 0x29F4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              LowHealthThresholdValue;                                  // 0x29F8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              OneItemProbability;                                       // 0x29FC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TwoItemsProbability;                                      // 0x2A00(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ThreeItemsProbability;                                    // 0x2A04(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              NoItemsProbabilityWithSaF;                                // 0x2A08(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              NoItemsProbabilityWithoutSaF;                             // 0x2A0C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MovementAnimPlayRate;                                     // 0x2A10(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x2A14(0x0004) MISSED OFFSET
	TArray<struct FBuddyVOEvent>                       BuddyVOEventNames;                                        // 0x2A18(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData02 : 1;                                        // 0x2A28(0x0001)
	unsigned char                                      FlashlightUseUnaware : 1;                                 // 0x2A28(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      FlashlightUseSemiAware : 1;                               // 0x2A28(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      FlashlightUseAware : 1;                                   // 0x2A28(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      FlashlightOnGunWhenAware : 1;                             // 0x2A28(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      ShouldSpawnWithWeaponOut : 1;                             // 0x2A28(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      AllowedToSpawnWithThrowableOut : 1;                       // 0x2A28(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      IsInHealthRedZone : 1;                                    // 0x2A28(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bHasPlayedLowHealthVO : 1;                                // 0x2A29(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData03[0x26];                                      // 0x2A2A(0x0026) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendHumanPawn");
		return ptr;
	}


	void SpawnActorSearchBody(int NumItemSpawns);
	void ShouldIgnoreLowerBodyDamage(bool Ignore);
	void OnBeginCombatHunt(const struct FVector& PlayerPos, const struct FVector& TargetLastKnownPos, const struct FVector& NPCPosition);
};


// Class BendGame.BendBTServ_UpdateBuddyLead
// 0x0030 (0x00A0 - 0x0070)
class UBendBTServ_UpdateBuddyLead : public UBTService
{
public:
	float                                              ResumeAfterWaitDelay;                                     // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2C];                                      // 0x0074(0x002C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTServ_UpdateBuddyLead");
		return ptr;
	}

};


// Class BendGame.BendBTServ_UpdateCurrentEnclosedSpace
// 0x0000 (0x0070 - 0x0070)
class UBendBTServ_UpdateCurrentEnclosedSpace : public UBTService
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTServ_UpdateCurrentEnclosedSpace");
		return ptr;
	}

};


// Class BendGame.BendBTServ_UpdateFreakerBB
// 0x02D0 (0x0340 - 0x0070)
class UBendBTServ_UpdateFreakerBB : public UBTService
{
public:
	struct FBlackboardKeySelector                      FocusKey;                                                 // 0x0070(0x0028) (Edit)
	struct FBlackboardKeySelector                      HungerKey;                                                // 0x0098(0x0028) (Edit)
	struct FBlackboardKeySelector                      DodgeKey;                                                 // 0x00C0(0x0028) (Edit)
	struct FBlackboardKeySelector                      DodgeTimerKey;                                            // 0x00E8(0x0028) (Edit)
	struct FBlackboardKeySelector                      AwarenessKey;                                             // 0x0110(0x0028) (Edit)
	struct FBlackboardKeySelector                      ScreamKey;                                                // 0x0138(0x0028) (Edit)
	struct FBlackboardKeySelector                      TargetedTimeKey;                                          // 0x0160(0x0028) (Edit)
	struct FBlackboardKeySelector                      ScreamTimerKey;                                           // 0x0188(0x0028) (Edit)
	struct FBlackboardKeySelector                      BlindedKey;                                               // 0x01B0(0x0028) (Edit)
	struct FBlackboardKeySelector                      BlindedStunKey;                                           // 0x01D8(0x0028) (Edit)
	struct FBlackboardKeySelector                      NestingKey;                                               // 0x0200(0x0028) (Edit)
	struct FBlackboardKeySelector                      ShouldNestKey;                                            // 0x0228(0x0028) (Edit)
	struct FBlackboardKeySelector                      FrustratedKey;                                            // 0x0250(0x0028) (Edit)
	struct FBlackboardKeySelector                      CombatRingRadiusKey;                                      // 0x0278(0x0028) (Edit)
	struct FBlackboardKeySelector                      CombatRingRadiusBufferKey;                                // 0x02A0(0x0028) (Edit)
	struct FBlackboardKeySelector                      HasDisablingStatusEffectKey;                              // 0x02C8(0x0028) (Edit)
	struct FBlackboardKeySelector                      TargetHidingInEnclosedSpaceKey;                           // 0x02F0(0x0028) (Edit)
	TArray<TEnumAsByte<EStatusEffects>>                DisablingStatusEffectTypes;                               // 0x0318(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData00[0x18];                                      // 0x0328(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTServ_UpdateFreakerBB");
		return ptr;
	}


	void OnStatusStarted(class UStatusEffect* StatusEffect);
	void OnStatusEnding(class UStatusEffect* StatusEffect);
	void OnBecomeUnaware(class ABendAIController* Controller, TEnumAsByte<EAIAwareState> prevAwareness);
	void OnBecomeSemiAware(class ABendAIController* Controller, TEnumAsByte<EAIAwareState> prevAwareness);
	void OnBecomeAware(class ABendAIController* Controller, TEnumAsByte<EAIAwareState> prevAwareness);
};


// Class BendGame.BendBTServ_UpdateScreamerBB
// 0x0000 (0x0340 - 0x0340)
class UBendBTServ_UpdateScreamerBB : public UBendBTServ_UpdateFreakerBB
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTServ_UpdateScreamerBB");
		return ptr;
	}


	void OnTakePointDamage(float Damage, class AController* InstigatedBy, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, const struct FName& BoneName, const struct FVector& ShotFromDirection, class UDamageType* DamageType, class AActor* DamageCauser);
};


// Class BendGame.BendBTServ_UpdateMoveFocusToTarget
// 0x0000 (0x0070 - 0x0070)
class UBendBTServ_UpdateMoveFocusToTarget : public UBTService
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTServ_UpdateMoveFocusToTarget");
		return ptr;
	}

};


// Class BendGame.BendBTServ_UpdateNewtBlackboard
// 0x00D8 (0x0148 - 0x0070)
class UBendBTServ_UpdateNewtBlackboard : public UBTService
{
public:
	struct FBlackboardKeySelector                      ThreatenedKey;                                            // 0x0070(0x0028) (Edit)
	struct FBlackboardKeySelector                      HasAdvantageKey;                                          // 0x0098(0x0028) (Edit)
	struct FBlackboardKeySelector                      FindPOIsWhenAwareKey;                                     // 0x00C0(0x0028) (Edit)
	struct FBlackboardKeySelector                      TargetInDefendZoneKey;                                    // 0x00E8(0x0028) (Edit)
	struct FBlackboardKeySelector                      InDefendZoneKey;                                          // 0x0110(0x0028) (Edit)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0138(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTServ_UpdateNewtBlackboard");
		return ptr;
	}

};


// Class BendGame.BendBTServ_UpdateReacherCombat
// 0x00F8 (0x0168 - 0x0070)
class UBendBTServ_UpdateReacherCombat : public UBTService
{
public:
	struct FBlackboardKeySelector                      WantsRetreatKey;                                          // 0x0070(0x0028) (Edit)
	struct FBlackboardKeySelector                      InHidingKey;                                              // 0x0098(0x0028) (Edit)
	float                                              LowHealthPercentage;                                      // 0x00C0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              HitAndRunChance;                                          // 0x00C4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MinAttackDistanceForHitAndRun;                            // 0x00C8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MinTimeInHiding;                                          // 0x00CC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxTimeInHiding;                                          // 0x00D0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MinAmbushDistance;                                        // 0x00D4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FBlackboardKeySelector                      TrapDetectedKey;                                          // 0x00D8(0x0028) (Edit)
	bool                                               CanDetectTraps;                                           // 0x0100(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0101(0x0003) MISSED OFFSET
	float                                              TrapDetectionRadius;                                      // 0x0104(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FBlackboardKeySelector                      DodgeKey;                                                 // 0x0108(0x0028) (Edit)
	float                                              InjuredTimeBetweenAttacksMultiplier;                      // 0x0130(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x34];                                      // 0x0134(0x0034) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTServ_UpdateReacherCombat");
		return ptr;
	}


	void OnTakeDamage(float Damage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser, class ABendPawn* PawnDamaged, bool CriticalHit, bool KillingBlow);
	void OnSuccessfulAttack();
	void OnAttackStart(const struct FBendAttackData& AttackData);
};


// Class BendGame.BendBTServ_UpdateRetreat
// 0x0000 (0x0070 - 0x0070)
class UBendBTServ_UpdateRetreat : public UBTService
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTServ_UpdateRetreat");
		return ptr;
	}

};


// Class BendGame.BendBTServ_UpdateScripting
// 0x00A0 (0x0110 - 0x0070)
class UBendBTServ_UpdateScripting : public UBTService
{
public:
	struct FBlackboardKeySelector                      ScriptedMoveBTKey;                                        // 0x0070(0x0028) (Edit)
	struct FBlackboardKeySelector                      ScriptedCoverBTKey;                                       // 0x0098(0x0028) (Edit)
	struct FBlackboardKeySelector                      ScriptedIdleBTKey;                                        // 0x00C0(0x0028) (Edit)
	struct FBlackboardKeySelector                      ScriptedThrowBTKey;                                       // 0x00E8(0x0028) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTServ_UpdateScripting");
		return ptr;
	}

};


// Class BendGame.BendBTServ_UpdateSniperCombat
// 0x0000 (0x0070 - 0x0070)
class UBendBTServ_UpdateSniperCombat : public UBTService
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTServ_UpdateSniperCombat");
		return ptr;
	}

};


// Class BendGame.BendBTServ_UpdateStandAndShoot
// 0x0040 (0x00B0 - 0x0070)
class UBendBTServ_UpdateStandAndShoot : public UBTService
{
public:
	struct FBlackboardKeySelector                      FindCoverKey;                                             // 0x0070(0x0028) (Edit)
	unsigned char                                      UnknownData00[0x18];                                      // 0x0098(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTServ_UpdateStandAndShoot");
		return ptr;
	}

};


// Class BendGame.BendBTServ_UpdateSurrender
// 0x0050 (0x00C0 - 0x0070)
class UBendBTServ_UpdateSurrender : public UBTService
{
public:
	struct FBlackboardKeySelector                      SurrenderStateKey;                                        // 0x0070(0x0028) (Edit)
	unsigned char                                      UnknownData00[0x28];                                      // 0x0098(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTServ_UpdateSurrender");
		return ptr;
	}


	void OnTargeted();
	void OnTakeDamage(float Damage, class UDamageType* DamageType, class AController* EventInstigator, class AActor* DamageCauser);
};


// Class BendGame.BendBTServ_UseLaserBeam
// 0x0000 (0x0070 - 0x0070)
class UBendBTServ_UseLaserBeam : public UBTService
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTServ_UseLaserBeam");
		return ptr;
	}

};


// Class BendGame.BendBTServ_WatchLKP
// 0x0030 (0x00A0 - 0x0070)
class UBendBTServ_WatchLKP : public UBTService
{
public:
	struct FBlackboardKeySelector                      BlackboardKey;                                            // 0x0070(0x0028) (Edit)
	float                                              CheckDistance;                                            // 0x0098(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x009C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTServ_WatchLKP");
		return ptr;
	}

};


// Class BendGame.BendBTTask_AimAtFocus
// 0x0018 (0x0088 - 0x0070)
class UBendBTTask_AimAtFocus : public UBTTaskNode
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0070(0x0010) MISSED OFFSET
	bool                                               NoRangedWeaponResult;                                     // 0x0080(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0081(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_AimAtFocus");
		return ptr;
	}

};


// Class BendGame.BendBTTask_Animal_AttemptAnimSequence
// 0x0038 (0x00A8 - 0x0070)
class UBendBTTask_Animal_AttemptAnimSequence : public UBTTaskNode
{
public:
	TEnumAsByte<EAnimalAnimSequenceType>               AnimSequenceType;                                         // 0x0070(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0071(0x0003) MISSED OFFSET
	float                                              Duration;                                                 // 0x0074(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DurationVariance;                                         // 0x0078(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              Timeout;                                                  // 0x007C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0080(0x0010) MISSED OFFSET
	bool                                               UseDuration;                                              // 0x0090(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x17];                                      // 0x0091(0x0017) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_Animal_AttemptAnimSequence");
		return ptr;
	}


	void OnAnimStarted();
	void OnAnimEnded();
};


// Class BendGame.BendBTTask_Attack
// 0x0040 (0x00B0 - 0x0070)
class UBendBTTask_Attack : public UBTTaskNode
{
public:
	bool                                               UseBBKey;                                                 // 0x0070(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0071(0x0007) MISSED OFFSET
	struct FBlackboardKeySelector                      AttackNameKey;                                            // 0x0078(0x0028) (Edit)
	struct FName                                       AttackName;                                               // 0x00A0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               IgnoreDistance;                                           // 0x00A8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               AllowMeleeInterruptingAttacker;                           // 0x00A9(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x6];                                       // 0x00AA(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_Attack");
		return ptr;
	}

};


// Class BendGame.BendBTTask_BearBlendspaceSwipe
// 0x0010 (0x0080 - 0x0070)
class UBendBTTask_BearBlendspaceSwipe : public UBTTaskNode
{
public:
	unsigned char                                      UnknownData00[0xC];                                       // 0x0070(0x000C) MISSED OFFSET
	bool                                               AllowMeleeInterruptingAttacker;                           // 0x007C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x007D(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_BearBlendspaceSwipe");
		return ptr;
	}

};


// Class BendGame.BendBTTask_BookGrenadeSpot
// 0x0000 (0x0070 - 0x0070)
class UBendBTTask_BookGrenadeSpot : public UBTTaskNode
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_BookGrenadeSpot");
		return ptr;
	}

};


// Class BendGame.BendBTTask_ClearIntendedCover
// 0x0000 (0x0070 - 0x0070)
class UBendBTTask_ClearIntendedCover : public UBTTaskNode
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_ClearIntendedCover");
		return ptr;
	}

};


// Class BendGame.BendBTTask_CompleteTeamRole
// 0x0008 (0x0078 - 0x0070)
class UBendBTTask_CompleteTeamRole : public UBTTaskNode
{
public:
	bool                                               bSuccess;                                                 // 0x0070(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0071(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_CompleteTeamRole");
		return ptr;
	}

};


// Class BendGame.BendBTTask_ComputeFleePoint
// 0x0000 (0x0070 - 0x0070)
class UBendBTTask_ComputeFleePoint : public UBTTaskNode
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_ComputeFleePoint");
		return ptr;
	}

};


// Class BendGame.BendBTTask_ComputeFriendsCenterPoint
// 0x0000 (0x0070 - 0x0070)
class UBendBTTask_ComputeFriendsCenterPoint : public UBTTaskNode
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_ComputeFriendsCenterPoint");
		return ptr;
	}

};


// Class BendGame.BendBTTask_ComputeRetreatPoint
// 0x0000 (0x0070 - 0x0070)
class UBendBTTask_ComputeRetreatPoint : public UBTTaskNode
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_ComputeRetreatPoint");
		return ptr;
	}

};


// Class BendGame.BendBTTask_CoverWait
// 0x0008 (0x0078 - 0x0070)
class UBendBTTask_CoverWait : public UBTTaskNode
{
public:
	bool                                               RecalculateWaitTimeOnStart;                               // 0x0070(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               IsLatentTask;                                             // 0x0071(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x0072(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_CoverWait");
		return ptr;
	}

};


// Class BendGame.BendBTTask_Crouch
// 0x0008 (0x0078 - 0x0070)
class UBendBTTask_Crouch : public UBTTaskNode
{
public:
	bool                                               CrouchValue;                                              // 0x0070(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               AllowToCrouchInBushes;                                    // 0x0071(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x0072(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_Crouch");
		return ptr;
	}

};


// Class BendGame.BendBTTask_DrawMainWeapon
// 0x0008 (0x0078 - 0x0070)
class UBendBTTask_DrawMainWeapon : public UBTTaskNode
{
public:
	bool                                               ForceDraw;                                                // 0x0070(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0071(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_DrawMainWeapon");
		return ptr;
	}

};


// Class BendGame.BendBTTask_DrawMeleeWeapon
// 0x0008 (0x0078 - 0x0070)
class UBendBTTask_DrawMeleeWeapon : public UBTTaskNode
{
public:
	bool                                               Force;                                                    // 0x0070(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0071(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_DrawMeleeWeapon");
		return ptr;
	}

};


// Class BendGame.BendBTTask_DrawRangedWeapon
// 0x0000 (0x0070 - 0x0070)
class UBendBTTask_DrawRangedWeapon : public UBTTaskNode
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_DrawRangedWeapon");
		return ptr;
	}

};


// Class BendGame.BendBTTask_DrawThrowingWeapon
// 0x0008 (0x0078 - 0x0070)
class UBendBTTask_DrawThrowingWeapon : public UBTTaskNode
{
public:
	bool                                               UseRetreatThworable;                                      // 0x0070(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0071(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_DrawThrowingWeapon");
		return ptr;
	}

};


// Class BendGame.BendBTTask_EnterCover
// 0x0018 (0x0088 - 0x0070)
class UBendBTTask_EnterCover : public UBTTaskNode
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0070(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_EnterCover");
		return ptr;
	}


	void OnEnterFinished();
};


// Class BendGame.BendBTTask_FindClosestBush
// 0x0008 (0x0078 - 0x0070)
class UBendBTTask_FindClosestBush : public UBTTaskNode
{
public:
	float                                              SearchRadius;                                             // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0074(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_FindClosestBush");
		return ptr;
	}

};


// Class BendGame.BendBTTask_FindDefendZonePOI
// 0x0000 (0x0070 - 0x0070)
class UBendBTTask_FindDefendZonePOI : public UBTTaskNode
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_FindDefendZonePOI");
		return ptr;
	}

};


// Class BendGame.BendBTTask_FindNearestFriendInCombat
// 0x0000 (0x0070 - 0x0070)
class UBendBTTask_FindNearestFriendInCombat : public UBTTaskNode
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_FindNearestFriendInCombat");
		return ptr;
	}

};


// Class BendGame.BendBTTask_FindNearestRangedFriend
// 0x0008 (0x0078 - 0x0070)
class UBendBTTask_FindNearestRangedFriend : public UBTTaskNode
{
public:
	bool                                               FindOtherFriendIfNoRanged;                                // 0x0070(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0071(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_FindNearestRangedFriend");
		return ptr;
	}

};


// Class BendGame.BendBTTask_FindPOI
// 0x0038 (0x00A8 - 0x0070)
class UBendBTTask_FindPOI : public UBTTaskNode
{
public:
	bool                                               UseBBKey;                                                 // 0x0070(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0071(0x0007) MISSED OFFSET
	struct FBlackboardKeySelector                      RequiredTypeKey;                                          // 0x0078(0x0028) (Edit)
	struct FName                                       RequiredType;                                             // 0x00A0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_FindPOI");
		return ptr;
	}

};


// Class BendGame.BendBTTask_FreakerScream
// 0x0028 (0x0098 - 0x0070)
class UBendBTTask_FreakerScream : public UBTTaskNode
{
public:
	struct FBlackboardKeySelector                      ScreamKey;                                                // 0x0070(0x0028) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_FreakerScream");
		return ptr;
	}

};


// Class BendGame.BendBTTask_GetForcePOI
// 0x0000 (0x0070 - 0x0070)
class UBendBTTask_GetForcePOI : public UBTTaskNode
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_GetForcePOI");
		return ptr;
	}

};


// Class BendGame.BendBTTask_HolsterWeapon
// 0x0000 (0x0070 - 0x0070)
class UBendBTTask_HolsterWeapon : public UBTTaskNode
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_HolsterWeapon");
		return ptr;
	}

};


// Class BendGame.BendBTTask_Human_AddLookRequest
// 0x0030 (0x00A0 - 0x0070)
class UBendBTTask_Human_AddLookRequest : public UBTTaskNode
{
public:
	bool                                               LookAtTarget;                                             // 0x0070(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0071(0x0007) MISSED OFFSET
	struct FBlackboardKeySelector                      LookAtPositionBBKey;                                      // 0x0078(0x0028) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_Human_AddLookRequest");
		return ptr;
	}

};


// Class BendGame.BendBTTask_Human_BaseFindOpenPosition
// 0x0000 (0x0070 - 0x0070)
class UBendBTTask_Human_BaseFindOpenPosition : public UBTTaskNode
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_Human_BaseFindOpenPosition");
		return ptr;
	}

};


// Class BendGame.BendBTTask_Human_ChangeShootingStatus
// 0x0008 (0x0078 - 0x0070)
class UBendBTTask_Human_ChangeShootingStatus : public UBTTaskNode
{
public:
	bool                                               Begin;                                                    // 0x0070(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0071(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_Human_ChangeShootingStatus");
		return ptr;
	}

};


// Class BendGame.BendBTTask_Human_ChooseNextOscillationPoint
// 0x0008 (0x0078 - 0x0070)
class UBendBTTask_Human_ChooseNextOscillationPoint : public UBTTaskNode
{
public:
	bool                                               ConstrictToIdealRange;                                    // 0x0070(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               ConstrictToFrontLine;                                     // 0x0071(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               ConstrictToDefendZone;                                    // 0x0072(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               ConstrictToHomeEntity;                                    // 0x0073(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0074(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_Human_ChooseNextOscillationPoint");
		return ptr;
	}

};


// Class BendGame.BendBTTask_Human_CoverPeek
// 0x0038 (0x00A8 - 0x0070)
class UBendBTTask_Human_CoverPeek : public UBTTaskNode
{
public:
	unsigned char                                      UnknownData00[0x38];                                      // 0x0070(0x0038) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_Human_CoverPeek");
		return ptr;
	}


	void OnPeekStarted();
	void OnPeekFinished();
};


// Class BendGame.BendBTTask_Human_CoverQuery
// 0x0028 (0x0098 - 0x0070)
class UBendBTTask_Human_CoverQuery : public UBTTaskNode
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x0070(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_Human_CoverQuery");
		return ptr;
	}

};


// Class BendGame.BendBTTask_Human_ClearSavedCoverSearch
// 0x0000 (0x0098 - 0x0098)
class UBendBTTask_Human_ClearSavedCoverSearch : public UBendBTTask_Human_CoverQuery
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_Human_ClearSavedCoverSearch");
		return ptr;
	}

};


// Class BendGame.BendBTTask_Human_FindAdvanceMoveFocus
// 0x0008 (0x00A0 - 0x0098)
class UBendBTTask_Human_FindAdvanceMoveFocus : public UBendBTTask_Human_CoverQuery
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0098(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_Human_FindAdvanceMoveFocus");
		return ptr;
	}

};


// Class BendGame.BendBTTask_Human_FindCoverForAdvance
// 0x0000 (0x0098 - 0x0098)
class UBendBTTask_Human_FindCoverForAdvance : public UBendBTTask_Human_CoverQuery
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_Human_FindCoverForAdvance");
		return ptr;
	}

};


// Class BendGame.BendBTTask_Human_FindCoverForAttackingEnclosedSpace
// 0x0008 (0x00A0 - 0x0098)
class UBendBTTask_Human_FindCoverForAttackingEnclosedSpace : public UBendBTTask_Human_CoverQuery
{
public:
	float                                              SurroundDistance;                                         // 0x0098(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x009C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_Human_FindCoverForAttackingEnclosedSpace");
		return ptr;
	}

};


// Class BendGame.BendBTTask_Human_FindCoverForAttackingFromEnclosedSpace
// 0x0008 (0x00A0 - 0x0098)
class UBendBTTask_Human_FindCoverForAttackingFromEnclosedSpace : public UBendBTTask_Human_CoverQuery
{
public:
	float                                              SurroundDistance;                                         // 0x0098(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x009C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_Human_FindCoverForAttackingFromEnclosedSpace");
		return ptr;
	}

};


// Class BendGame.BendBTTask_Human_FindCoverForCombat
// 0x0008 (0x00A0 - 0x0098)
class UBendBTTask_Human_FindCoverForCombat : public UBendBTTask_Human_CoverQuery
{
public:
	bool                                               TestCurrentCover;                                         // 0x0098(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               AlwaysTakeCover;                                          // 0x0099(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x009A(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_Human_FindCoverForCombat");
		return ptr;
	}

};


// Class BendGame.BendBTTask_Human_FindCoverForCombatHuntFlanking
// 0x0000 (0x0098 - 0x0098)
class UBendBTTask_Human_FindCoverForCombatHuntFlanking : public UBendBTTask_Human_CoverQuery
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_Human_FindCoverForCombatHuntFlanking");
		return ptr;
	}

};


// Class BendGame.BendBTTask_Human_FindCoverForCovering
// 0x0020 (0x00B8 - 0x0098)
class UBendBTTask_Human_FindCoverForCovering : public UBendBTTask_Human_CoverQuery
{
public:
	bool                                               UseCoveringRadius;                                        // 0x0098(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               AllowToBeOffFrontLineIfOffFrontLine;                      // 0x0099(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1E];                                      // 0x009A(0x001E) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_Human_FindCoverForCovering");
		return ptr;
	}

};


// Class BendGame.BendBTTask_Human_FindCoverForFlanking
// 0x0008 (0x00A0 - 0x0098)
class UBendBTTask_Human_FindCoverForFlanking : public UBendBTTask_Human_CoverQuery
{
public:
	bool                                               CombatHuntFlanking;                                       // 0x0098(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0099(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_Human_FindCoverForFlanking");
		return ptr;
	}

};


// Class BendGame.BendBTTask_Human_FindCoverForGetBackToFL
// 0x0000 (0x0098 - 0x0098)
class UBendBTTask_Human_FindCoverForGetBackToFL : public UBendBTTask_Human_CoverQuery
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_Human_FindCoverForGetBackToFL");
		return ptr;
	}

};


// Class BendGame.BendBTTask_Human_FindCoverForHiding
// 0x0008 (0x00A0 - 0x0098)
class UBendBTTask_Human_FindCoverForHiding : public UBendBTTask_Human_CoverQuery
{
public:
	bool                                               UseCombatHuntHiding;                                      // 0x0098(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               TestCurrentCover;                                         // 0x0099(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               UseCustomRadius;                                          // 0x009A(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1];                                       // 0x009B(0x0001) MISSED OFFSET
	float                                              CustomRadius;                                             // 0x009C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_Human_FindCoverForHiding");
		return ptr;
	}

};


// Class BendGame.BendBTTask_Human_FindCoverForHidingInDZ
// 0x0008 (0x00A0 - 0x0098)
class UBendBTTask_Human_FindCoverForHidingInDZ : public UBendBTTask_Human_CoverQuery
{
public:
	bool                                               UseCombatHuntHiding;                                      // 0x0098(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0099(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_Human_FindCoverForHidingInDZ");
		return ptr;
	}

};


// Class BendGame.BendBTTask_Human_FindCoverForMelee
// 0x0008 (0x00A0 - 0x0098)
class UBendBTTask_Human_FindCoverForMelee : public UBendBTTask_Human_CoverQuery
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0098(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_Human_FindCoverForMelee");
		return ptr;
	}

};


// Class BendGame.BendBTTask_Human_FindCoverForMovingToDZ
// 0x0000 (0x0098 - 0x0098)
class UBendBTTask_Human_FindCoverForMovingToDZ : public UBendBTTask_Human_CoverQuery
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_Human_FindCoverForMovingToDZ");
		return ptr;
	}

};


// Class BendGame.BendBTTask_Human_FindCoverForPlayerMoving
// 0x0010 (0x00A8 - 0x0098)
class UBendBTTask_Human_FindCoverForPlayerMoving : public UBendBTTask_Human_CoverQuery
{
public:
	float                                              MaxCoverDistance;                                         // 0x0098(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MinDistanceFromTarget;                                    // 0x009C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              SearchWidth;                                              // 0x00A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00A4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_Human_FindCoverForPlayerMoving");
		return ptr;
	}

};


// Class BendGame.BendBTTask_Human_FindCoverForRepositioning
// 0x0008 (0x00A0 - 0x0098)
class UBendBTTask_Human_FindCoverForRepositioning : public UBendBTTask_Human_CoverQuery
{
public:
	bool                                               UseEmergencyRadius;                                       // 0x0098(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0099(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_Human_FindCoverForRepositioning");
		return ptr;
	}

};


// Class BendGame.BendBTTask_Human_FindCoverForRetreat
// 0x0000 (0x0098 - 0x0098)
class UBendBTTask_Human_FindCoverForRetreat : public UBendBTTask_Human_CoverQuery
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_Human_FindCoverForRetreat");
		return ptr;
	}

};


// Class BendGame.BendBTTask_Human_FindCoverForSuppressed
// 0x0010 (0x00A8 - 0x0098)
class UBendBTTask_Human_FindCoverForSuppressed : public UBendBTTask_Human_CoverQuery
{
public:
	float                                              SearchRadius;                                             // 0x0098(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ForwardBias;                                              // 0x009C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxEnclosedArea;                                          // 0x00A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00A4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_Human_FindCoverForSuppressed");
		return ptr;
	}

};


// Class BendGame.BendBTTask_Human_FindCoverInDefendZone
// 0x0000 (0x0098 - 0x0098)
class UBendBTTask_Human_FindCoverInDefendZone : public UBendBTTask_Human_CoverQuery
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_Human_FindCoverInDefendZone");
		return ptr;
	}

};


// Class BendGame.BendBTTask_Human_FindCoverInEnclosedSpace
// 0x0000 (0x0098 - 0x0098)
class UBendBTTask_Human_FindCoverInEnclosedSpace : public UBendBTTask_Human_CoverQuery
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_Human_FindCoverInEnclosedSpace");
		return ptr;
	}

};


// Class BendGame.BendBTTask_Human_FindCoverInFortification
// 0x0000 (0x0098 - 0x0098)
class UBendBTTask_Human_FindCoverInFortification : public UBendBTTask_Human_CoverQuery
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_Human_FindCoverInFortification");
		return ptr;
	}

};


// Class BendGame.BendBTTask_Human_FindCoverInHomeEntity
// 0x0000 (0x0098 - 0x0098)
class UBendBTTask_Human_FindCoverInHomeEntity : public UBendBTTask_Human_CoverQuery
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_Human_FindCoverInHomeEntity");
		return ptr;
	}

};


// Class BendGame.BendBTTask_Human_FindCoverInSquadLane
// 0x0008 (0x00A0 - 0x0098)
class UBendBTTask_Human_FindCoverInSquadLane : public UBendBTTask_Human_CoverQuery
{
public:
	bool                                               DontTestLOS;                                              // 0x0098(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0099(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_Human_FindCoverInSquadLane");
		return ptr;
	}

};


// Class BendGame.BendBTTask_Human_FindCoverToDisentangleFrontline
// 0x0010 (0x00A8 - 0x0098)
class UBendBTTask_Human_FindCoverToDisentangleFrontline : public UBendBTTask_Human_CoverQuery
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0098(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_Human_FindCoverToDisentangleFrontline");
		return ptr;
	}

};


// Class BendGame.BendBTTask_Human_RetestCover
// 0x0008 (0x00A0 - 0x0098)
class UBendBTTask_Human_RetestCover : public UBendBTTask_Human_CoverQuery
{
public:
	bool                                               UseMoveFocusAsSearchPosition;                             // 0x0098(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               MovingTowardsThreat;                                      // 0x0099(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               DoLocalTest;                                              // 0x009A(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1];                                       // 0x009B(0x0001) MISSED OFFSET
	float                                              LocalTestRadius;                                          // 0x009C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_Human_RetestCover");
		return ptr;
	}

};


// Class BendGame.BendBTTask_Human_DodgeGrenade
// 0x0040 (0x00B0 - 0x0070)
class UBendBTTask_Human_DodgeGrenade : public UBTTaskNode
{
public:
	unsigned char                                      UnknownData00[0x40];                                      // 0x0070(0x0040) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_Human_DodgeGrenade");
		return ptr;
	}


	void DodgeAnimStarted();
	void DodgeAnimFinished();
};


// Class BendGame.BendBTTask_Human_FindOpenCombatMoveFocus
// 0x0010 (0x0080 - 0x0070)
class UBendBTTask_Human_FindOpenCombatMoveFocus : public UBTTaskNode
{
public:
	class UEnvQuery*                                   EQSQuery;                                                 // 0x0070(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0078(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_Human_FindOpenCombatMoveFocus");
		return ptr;
	}

};


// Class BendGame.BendBTTask_Human_FindOpenCombatOscillationPoints
// 0x0010 (0x0080 - 0x0070)
class UBendBTTask_Human_FindOpenCombatOscillationPoints : public UBTTaskNode
{
public:
	float                                              MinRadius;                                                // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxRadius;                                                // 0x0074(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                MinNumPoints;                                             // 0x0078(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                MaxNumPoints;                                             // 0x007C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_Human_FindOpenCombatOscillationPoints");
		return ptr;
	}

};


// Class BendGame.BendBTTask_Human_FindOpenPositionForAdvance
// 0x0000 (0x0070 - 0x0070)
class UBendBTTask_Human_FindOpenPositionForAdvance : public UBTTaskNode
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_Human_FindOpenPositionForAdvance");
		return ptr;
	}

};


// Class BendGame.BendBTTask_Human_FindOpenPositionForCombatHuntFlanking
// 0x0000 (0x0070 - 0x0070)
class UBendBTTask_Human_FindOpenPositionForCombatHuntFlanking : public UBTTaskNode
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_Human_FindOpenPositionForCombatHuntFlanking");
		return ptr;
	}

};


// Class BendGame.BendBTTask_Human_FindOpenPositionForFlanking
// 0x0000 (0x0070 - 0x0070)
class UBendBTTask_Human_FindOpenPositionForFlanking : public UBTTaskNode
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_Human_FindOpenPositionForFlanking");
		return ptr;
	}

};


// Class BendGame.BendBTTask_Human_FindOpenPositionForGetBackToFL
// 0x0000 (0x0070 - 0x0070)
class UBendBTTask_Human_FindOpenPositionForGetBackToFL : public UBTTaskNode
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_Human_FindOpenPositionForGetBackToFL");
		return ptr;
	}

};


// Class BendGame.BendBTTask_Human_FindOpenPositionForMovingToDZ
// 0x0008 (0x0078 - 0x0070)
class UBendBTTask_Human_FindOpenPositionForMovingToDZ : public UBTTaskNode
{
public:
	bool                                               MoveAllTheWayToDZ;                                        // 0x0070(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0071(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_Human_FindOpenPositionForMovingToDZ");
		return ptr;
	}

};


// Class BendGame.BendBTTask_Human_FindOpenPositionForRetreat
// 0x0000 (0x0070 - 0x0070)
class UBendBTTask_Human_FindOpenPositionForRetreat : public UBTTaskNode
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_Human_FindOpenPositionForRetreat");
		return ptr;
	}

};


// Class BendGame.BendBTTask_Human_FindOpenPositionMoveToFriends
// 0x0000 (0x0070 - 0x0070)
class UBendBTTask_Human_FindOpenPositionMoveToFriends : public UBTTaskNode
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_Human_FindOpenPositionMoveToFriends");
		return ptr;
	}

};


// Class BendGame.BendBTTask_Human_FindOpenPositionNeutralCombat
// 0x0000 (0x0070 - 0x0070)
class UBendBTTask_Human_FindOpenPositionNeutralCombat : public UBTTaskNode
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_Human_FindOpenPositionNeutralCombat");
		return ptr;
	}

};


// Class BendGame.BendBTTask_Human_FindOpenPositionToDisentangleFrontline
// 0x0008 (0x0078 - 0x0070)
class UBendBTTask_Human_FindOpenPositionToDisentangleFrontline : public UBTTaskNode
{
public:
	int                                                SideToAttempt;                                            // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0074(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_Human_FindOpenPositionToDisentangleFrontline");
		return ptr;
	}

};


// Class BendGame.BendBTTask_Human_FindStrafeOscillationPoints
// 0x0008 (0x0078 - 0x0070)
class UBendBTTask_Human_FindStrafeOscillationPoints : public UBTTaskNode
{
public:
	float                                              MinRadius;                                                // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxRadius;                                                // 0x0074(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_Human_FindStrafeOscillationPoints");
		return ptr;
	}

};


// Class BendGame.BendBTTask_Human_FireBurst
// 0x0090 (0x0100 - 0x0070)
class UBendBTTask_Human_FireBurst : public UBTTaskNode
{
public:
	bool                                               RequiresLoS;                                              // 0x0070(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               UseAimTime;                                               // 0x0071(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               UseChargedFiringPattern;                                  // 0x0072(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0073(0x0001) MISSED OFFSET
	float                                              AimTime;                                                  // 0x0074(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              WaitForResourceTime;                                      // 0x0078(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ForceDistance;                                            // 0x007C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x80];                                      // 0x0080(0x0080) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_Human_FireBurst");
		return ptr;
	}


	void OnTargetChanged(class ABendAIController* OwnerController, class ABendPawn* PreviousTarget, class ABendPawn* NewTarget);
	void OnTakeDamage(float Damage, class UDamageType* DamageType, class AController* Instigator, class AActor* DamageCauser);
	void OnStepInStarted();
	void OnStepInFinished();
	void OnFireFinished();
	void OnDamageStarted();
	void OnDamageFinished();
};


// Class BendGame.BendBTTask_Human_GetFriendlyTeamCenter
// 0x0000 (0x0070 - 0x0070)
class UBendBTTask_Human_GetFriendlyTeamCenter : public UBTTaskNode
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_Human_GetFriendlyTeamCenter");
		return ptr;
	}

};


// Class BendGame.BendBTTask_Human_InitBB
// 0x0358 (0x03C8 - 0x0070)
class UBendBTTask_Human_InitBB : public UBTTaskNode
{
public:
	struct FBlackboardKeySelector                      CombatBTKey;                                              // 0x0070(0x0028) (Edit)
	struct FBlackboardKeySelector                      AmbientBTKey;                                             // 0x0098(0x0028) (Edit)
	struct FBlackboardKeySelector                      BeginCombatBTKey;                                         // 0x00C0(0x0028) (Edit)
	struct FBlackboardKeySelector                      CloseCombatBTKey;                                         // 0x00E8(0x0028) (Edit)
	struct FBlackboardKeySelector                      RetreatBTKey;                                             // 0x0110(0x0028) (Edit)
	struct FBlackboardKeySelector                      RetreatFailBTKey;                                         // 0x0138(0x0028) (Edit)
	struct FBlackboardKeySelector                      NonHumanEngagementBTKey;                                  // 0x0160(0x0028) (Edit)
	struct FBlackboardKeySelector                      InvestigationBTKey;                                       // 0x0188(0x0028) (Edit)
	struct FBlackboardKeySelector                      OnDamageBTKey;                                            // 0x01B0(0x0028) (Edit)
	struct FBlackboardKeySelector                      FleeBTKey;                                                // 0x01D8(0x0028) (Edit)
	struct FBlackboardKeySelector                      FindOpenCombatPosBTKey;                                   // 0x0200(0x0028) (Edit)
	struct FBlackboardKeySelector                      SMPFleeBTKey;                                             // 0x0228(0x0028) (Edit)
	struct FBlackboardKeySelector                      TargetedByFreakerBTKey;                                   // 0x0250(0x0028) (Edit)
	struct FBlackboardKeySelector                      FriendTargetedByFreakerCombatBTKey;                       // 0x0278(0x0028) (Edit)
	struct FBlackboardKeySelector                      FriendTargetedByFreakerNonCombatBTKey;                    // 0x02A0(0x0028) (Edit)
	struct FBlackboardKeySelector                      EnticeFreakerNonCombatBTKey;                              // 0x02C8(0x0028) (Edit)
	struct FBlackboardKeySelector                      BerzerkBTKey;                                             // 0x02F0(0x0028) (Edit)
	struct FBlackboardKeySelector                      ChargeBTKey;                                              // 0x0318(0x0028) (Edit)
	struct FBlackboardKeySelector                      ConfidenceLevelKey;                                       // 0x0340(0x0028) (Edit)
	TEnumAsByte<EConfidenceType>                       DefaultConfidenceLevel;                                   // 0x0368(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0369(0x0007) MISSED OFFSET
	struct FBlackboardKeySelector                      LastSuccessfulMeleeKey;                                   // 0x0370(0x0028) (Edit)
	struct FBlackboardKeySelector                      RoamingOpenCombatTimerKey;                                // 0x0398(0x0028) (Edit)
	bool                                               DisplayProperties;                                        // 0x03C0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x03C1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_Human_InitBB");
		return ptr;
	}

};


// Class BendGame.BendBTTask_Human_LeanOutOfCover
// 0x0048 (0x00B8 - 0x0070)
class UBendBTTask_Human_LeanOutOfCover : public UBTTaskNode
{
public:
	float                                              Timeout;                                                  // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x44];                                      // 0x0074(0x0044) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_Human_LeanOutOfCover");
		return ptr;
	}


	void OnTakeDamage(float Damage, class UDamageType* DamageType, class AController* Instigator, class AActor* DamageCauser);
	void OnStepOutStarted();
	void OnStepOutFinished();
};


// Class BendGame.BendBTTask_Human_LoadAdvanceCoverParameters
// 0x0000 (0x0070 - 0x0070)
class UBendBTTask_Human_LoadAdvanceCoverParameters : public UBTTaskNode
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_Human_LoadAdvanceCoverParameters");
		return ptr;
	}

};


// Class BendGame.BendBTTask_Human_LoadFlankingCoverParameters
// 0x0000 (0x0070 - 0x0070)
class UBendBTTask_Human_LoadFlankingCoverParameters : public UBTTaskNode
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_Human_LoadFlankingCoverParameters");
		return ptr;
	}

};


// Class BendGame.BendBTTask_Human_LoadGetToFLCoverParameters
// 0x0000 (0x0070 - 0x0070)
class UBendBTTask_Human_LoadGetToFLCoverParameters : public UBTTaskNode
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_Human_LoadGetToFLCoverParameters");
		return ptr;
	}

};


// Class BendGame.BendBTTask_Human_LoadMoveToDZCoverParameters
// 0x0000 (0x0070 - 0x0070)
class UBendBTTask_Human_LoadMoveToDZCoverParameters : public UBTTaskNode
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_Human_LoadMoveToDZCoverParameters");
		return ptr;
	}

};


// Class BendGame.BendBTTask_Human_LoadPlayerMovingCoverParameters
// 0x0010 (0x0080 - 0x0070)
class UBendBTTask_Human_LoadPlayerMovingCoverParameters : public UBTTaskNode
{
public:
	float                                              MaxCoverDistance;                                         // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MinDistanceFromTarget;                                    // 0x0074(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              SearchWidth;                                              // 0x0078(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x007C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_Human_LoadPlayerMovingCoverParameters");
		return ptr;
	}

};


// Class BendGame.BendBTTask_Human_LoadRetreatCoverParameters
// 0x0000 (0x0070 - 0x0070)
class UBendBTTask_Human_LoadRetreatCoverParameters : public UBTTaskNode
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_Human_LoadRetreatCoverParameters");
		return ptr;
	}

};


// Class BendGame.BendBTTask_Human_MeleeRetreat
// 0x0000 (0x0070 - 0x0070)
class UBendBTTask_Human_MeleeRetreat : public UBTTaskNode
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_Human_MeleeRetreat");
		return ptr;
	}

};


// Class BendGame.BendBTTask_Human_MoveToCover
// 0x0010 (0x0080 - 0x0070)
class UBendBTTask_Human_MoveToCover : public UBTTaskNode
{
public:
	TEnumAsByte<EAIMoveSpeed>                          MoveSpeedType;                                            // 0x0070(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0071(0x0003) MISSED OFFSET
	float                                              AcceptableRadius;                                         // 0x0074(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ApproachRadius;                                           // 0x0078(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               SlowApproach;                                             // 0x007C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               StopMoveOnAbort;                                          // 0x007D(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               ClearCoverOnAbort;                                        // 0x007E(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x007F(0x0001) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_Human_MoveToCover");
		return ptr;
	}

};


// Class BendGame.BendBTTask_Human_ReloadWeapon
// 0x0000 (0x0070 - 0x0070)
class UBendBTTask_Human_ReloadWeapon : public UBTTaskNode
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_Human_ReloadWeapon");
		return ptr;
	}

};


// Class BendGame.BendBTTask_Human_SetFindCover
// 0x0028 (0x0098 - 0x0070)
class UBendBTTask_Human_SetFindCover : public UBTTaskNode
{
public:
	struct FBlackboardKeySelector                      FindNewCoverKey;                                          // 0x0070(0x0028) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_Human_SetFindCover");
		return ptr;
	}

};


// Class BendGame.BendBTTask_Human_SetForcedMeleeStrafe
// 0x0008 (0x0078 - 0x0070)
class UBendBTTask_Human_SetForcedMeleeStrafe : public UBTTaskNode
{
public:
	bool                                               ValueToSet;                                               // 0x0070(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0071(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_Human_SetForcedMeleeStrafe");
		return ptr;
	}

};


// Class BendGame.BendBTTask_Human_StepToCover
// 0x0028 (0x0098 - 0x0070)
class UBendBTTask_Human_StepToCover : public UBTTaskNode
{
public:
	bool                                               UseWaitTime;                                              // 0x0070(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x27];                                      // 0x0071(0x0027) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_Human_StepToCover");
		return ptr;
	}


	void OnStepInFinished();
};


// Class BendGame.BendBTTask_Human_TryUsePreviousCover
// 0x0008 (0x0078 - 0x0070)
class UBendBTTask_Human_TryUsePreviousCover : public UBTTaskNode
{
public:
	bool                                               IgnoreValidity;                                           // 0x0070(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               ClaimSlot;                                                // 0x0071(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x0072(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_Human_TryUsePreviousCover");
		return ptr;
	}

};


// Class BendGame.BendBTTask_Human_WaitWhileSearchLocationIsBeingSearched
// 0x0000 (0x0070 - 0x0070)
class UBendBTTask_Human_WaitWhileSearchLocationIsBeingSearched : public UBTTaskNode
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_Human_WaitWhileSearchLocationIsBeingSearched");
		return ptr;
	}

};


// Class BendGame.BendBTTask_LeaveCover
// 0x0038 (0x00A8 - 0x0070)
class UBendBTTask_LeaveCover : public UBTTaskNode
{
public:
	bool                                               UsePathRequest;                                           // 0x0070(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               UseBBKey;                                                 // 0x0071(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x0072(0x0006) MISSED OFFSET
	struct FBlackboardKeySelector                      MoveSpeedKey;                                             // 0x0078(0x0028) (Edit)
	TEnumAsByte<EAIMoveSpeed>                          MoveSpeedType;                                            // 0x00A0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x00A1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_LeaveCover");
		return ptr;
	}

};


// Class BendGame.BendBTTask_LeavePOI
// 0x0000 (0x0070 - 0x0070)
class UBendBTTask_LeavePOI : public UBTTaskNode
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_LeavePOI");
		return ptr;
	}

};


// Class BendGame.BendBTTask_LootNewtStealWeapon
// 0x0018 (0x0088 - 0x0070)
class UBendBTTask_LootNewtStealWeapon : public UBTTaskNode
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0070(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_LootNewtStealWeapon");
		return ptr;
	}


	void OnWeaponAdded(class ABendWeapon* Weapon);
};


// Class BendGame.BendBTTask_MoveTaskBase
// 0x00F0 (0x0160 - 0x0070)
class UBendBTTask_MoveTaskBase : public UBTTaskNode
{
public:
	float                                              Duration;                                                 // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DurationVariance;                                         // 0x0074(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               SuccessOnTimeout;                                         // 0x0078(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0079(0x0003) MISSED OFFSET
	float                                              AcceptableRadius;                                         // 0x007C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FBlackboardKeySelector                      AcceptableRadiusKey;                                      // 0x0080(0x0028) (Edit)
	bool                                               SlowApproach;                                             // 0x00A8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x00A9(0x0003) MISSED OFFSET
	float                                              ApproachRadius;                                           // 0x00AC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               IgnoreDefendZone;                                         // 0x00B0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x00B1(0x0007) MISSED OFFSET
	struct FBlackboardKeySelector                      IgnoreDefendZoneKey;                                      // 0x00B8(0x0028) (Edit)
	bool                                               AllowPartialPath;                                         // 0x00E0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               StopMoveOnAbort;                                          // 0x00E1(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x6];                                       // 0x00E2(0x0006) MISSED OFFSET
	TArray<struct FBTWeightedMoveSpeedType>            WeightedMoveSpeedTypes;                                   // 0x00E8(0x0010) (Edit, ZeroConstructor)
	TEnumAsByte<EAIMoveSpeed>                          MoveSpeedType;                                            // 0x00F8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x7];                                       // 0x00F9(0x0007) MISSED OFFSET
	struct FBlackboardKeySelector                      MoveSpeedKey;                                             // 0x0100(0x0028) (Edit)
	bool                                               UseBBMoveSpeedKey;                                        // 0x0128(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               UseBBIgnoreDefendZoneKey;                                 // 0x0129(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               UseBBKeyAcceptableRadius;                                 // 0x012A(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               UseExplicitStrafing;                                      // 0x012B(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x4];                                       // 0x012C(0x0004) MISSED OFFSET
	struct FBlackboardKeySelector                      StrafingTargetKey;                                        // 0x0130(0x0028) (Edit)
	float                                              MaxStrafingDistance;                                      // 0x0158(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x4];                                       // 0x015C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_MoveTaskBase");
		return ptr;
	}

};


// Class BendGame.BendBTTask_InvestigateMoveFocus
// 0x0000 (0x0160 - 0x0160)
class UBendBTTask_InvestigateMoveFocus : public UBendBTTask_MoveTaskBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_InvestigateMoveFocus");
		return ptr;
	}

};


// Class BendGame.BendBTTask_MoveToFireFocus
// 0x0008 (0x0168 - 0x0160)
class UBendBTTask_MoveToFireFocus : public UBendBTTask_MoveTaskBase
{
public:
	float                                              MaxMoveFocusDeviation;                                    // 0x0160(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               SetFireFicusToSemiAwareOnFailure;                         // 0x0164(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               IgnoreAvoidanceOnFireFocus;                               // 0x0165(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0166(0x0002) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_MoveToFireFocus");
		return ptr;
	}

};


// Class BendGame.BendBTTask_MoveToMoveFocus
// 0x0008 (0x0168 - 0x0160)
class UBendBTTask_MoveToMoveFocus : public UBendBTTask_MoveTaskBase
{
public:
	bool                                               ForceOrientToMovement;                                    // 0x0160(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               IgnoreAvoidanceOnMoveFocus;                               // 0x0161(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x0162(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_MoveToMoveFocus");
		return ptr;
	}

};


// Class BendGame.BendBTTask_Animal_Leash
// 0x0008 (0x0170 - 0x0168)
class UBendBTTask_Animal_Leash : public UBendBTTask_MoveToMoveFocus
{
public:
	bool                                               ResetAwarenessAtDestination;                              // 0x0168(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               LookAtTarget;                                             // 0x0169(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x016A(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_Animal_Leash");
		return ptr;
	}

};


// Class BendGame.BendBTTask_Human_ReturnToSearchStart
// 0x0000 (0x0168 - 0x0168)
class UBendBTTask_Human_ReturnToSearchStart : public UBendBTTask_MoveToMoveFocus
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_Human_ReturnToSearchStart");
		return ptr;
	}

};


// Class BendGame.BendBTTask_MoveToMoveFocusUpdating
// 0x0008 (0x0168 - 0x0160)
class UBendBTTask_MoveToMoveFocusUpdating : public UBendBTTask_MoveTaskBase
{
public:
	float                                              MaxMoveFocusDeviation;                                    // 0x0160(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               IgnoreAvoidanceOnMoveFocus;                               // 0x0164(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0165(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_MoveToMoveFocusUpdating");
		return ptr;
	}

};


// Class BendGame.BendBTTask_OnGrenadeSuccess
// 0x0000 (0x0070 - 0x0070)
class UBendBTTask_OnGrenadeSuccess : public UBTTaskNode
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_OnGrenadeSuccess");
		return ptr;
	}

};


// Class BendGame.BendBTTask_PerformOneShot
// 0x0070 (0x00E0 - 0x0070)
class UBendBTTask_PerformOneShot : public UBTTaskNode
{
public:
	float                                              Timeout;                                                  // 0x0070(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               UseBBKey;                                                 // 0x0074(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0075(0x0003) MISSED OFFSET
	struct FName                                       CategoryName;                                             // 0x0078(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FBlackboardKeySelector                      CategoryNameKey;                                          // 0x0080(0x0028) (Edit, BlueprintVisible)
	TEnumAsByte<EOverlayType>                          DesiredOverlay;                                           // 0x00A8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               CancelAnimationOnAbort;                                   // 0x00A9(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x36];                                      // 0x00AA(0x0036) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_PerformOneShot");
		return ptr;
	}


	void OnOneShotStarted();
	void OnOneShotFinished();
};


// Class BendGame.BendBTTask_PerformOneShot_Edge
// 0x0000 (0x00E0 - 0x00E0)
class UBendBTTask_PerformOneShot_Edge : public UBendBTTask_PerformOneShot
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_PerformOneShot_Edge");
		return ptr;
	}

};


// Class BendGame.BendBTTask_PlayFirstAwareAnim
// 0x0000 (0x00E0 - 0x00E0)
class UBendBTTask_PlayFirstAwareAnim : public UBendBTTask_PerformOneShot
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_PlayFirstAwareAnim");
		return ptr;
	}

};


// Class BendGame.BendBTTask_PlayLoopingOneShot
// 0x0050 (0x00C0 - 0x0070)
class UBendBTTask_PlayLoopingOneShot : public UBTTaskNode
{
public:
	struct FName                                       EnterAnimType;                                            // 0x0070(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       LoopAnimType;                                             // 0x0078(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       ExitAnimType;                                             // 0x0080(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x38];                                      // 0x0088(0x0038) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_PlayLoopingOneShot");
		return ptr;
	}


	void OnOneShotStarted();
	void OnOneShotFinished();
};


// Class BendGame.BendBTTask_PlaySemiAwareAnim
// 0x0078 (0x00E8 - 0x0070)
class UBendBTTask_PlaySemiAwareAnim : public UBTTaskNode
{
public:
	bool                                               AllowPlayWhenInAmbushMode;                                // 0x0070(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               UseBBKey;                                                 // 0x0071(0x0001) (ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ESemiAwareAnim>                        RequestedAnim;                                            // 0x0072(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x5];                                       // 0x0073(0x0005) MISSED OFFSET
	struct FBlackboardKeySelector                      RequestedAnimKey;                                         // 0x0078(0x0028) (Edit)
	float                                              Timeout;                                                  // 0x00A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00A4(0x0004) MISSED OFFSET
	struct FName                                       VOToPlay;                                                 // 0x00A8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bIsBlendSpace;                                            // 0x00B0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bStopMove;                                                // 0x00B1(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x36];                                      // 0x00B2(0x0036) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_PlaySemiAwareAnim");
		return ptr;
	}


	void OnBecomeAware(class ABendAIController* Controller, TEnumAsByte<EAIAwareState> PreviousAwareness);
	void OnAnimStarted();
	void OnAnimComplete();
};


// Class BendGame.BendBTTask_PlayVO
// 0x0018 (0x0088 - 0x0070)
class UBendBTTask_PlayVO : public UBTTaskNode
{
public:
	struct FName                                       SoundName;                                                // 0x0070(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Priority;                                                 // 0x0078(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               AllowPlayWhenInAmbushMode;                                // 0x007C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               IsSquadLimited;                                           // 0x007D(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x007E(0x0002) MISSED OFFSET
	float                                              SquadLimitTime;                                           // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0084(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_PlayVO");
		return ptr;
	}

};


// Class BendGame.BendBTTask_PlayVOLatent
// 0x0028 (0x0098 - 0x0070)
class UBendBTTask_PlayVOLatent : public UBTTaskNode
{
public:
	struct FName                                       SoundName;                                                // 0x0070(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Priority;                                                 // 0x0078(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               IsSquadLimited;                                           // 0x007C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x007D(0x0003) MISSED OFFSET
	float                                              SquadLimitTime;                                           // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x14];                                      // 0x0084(0x0014) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_PlayVOLatent");
		return ptr;
	}


	void OnDonePlayingVO(class ABendPawn* PawnSpeaking, const struct FName& InSoundName, int ConversationID, TEnumAsByte<EDonePlayVocalReason> SuccessOrFail);
};


// Class BendGame.BendBTTask_PrepareRetreatGrenade
// 0x0000 (0x0070 - 0x0070)
class UBendBTTask_PrepareRetreatGrenade : public UBTTaskNode
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_PrepareRetreatGrenade");
		return ptr;
	}

};


// Class BendGame.BendBTTask_PrintLog
// 0x0018 (0x0088 - 0x0070)
class UBendBTTask_PrintLog : public UBTTaskNode
{
public:
	struct FString                                     Message;                                                  // 0x0070(0x0010) (Edit, ZeroConstructor)
	bool                                               UseDebug;                                                 // 0x0080(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0081(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_PrintLog");
		return ptr;
	}

};


// Class BendGame.BendBTTask_RegisterWithTarget
// 0x0030 (0x00A0 - 0x0070)
class UBendBTTask_RegisterWithTarget : public UBTTaskNode
{
public:
	bool                                               Unregister;                                               // 0x0070(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               IsRanged;                                                 // 0x0071(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               Success;                                                  // 0x0072(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x5];                                       // 0x0073(0x0005) MISSED OFFSET
	struct FBlackboardKeySelector                      CombatRingRadiusKey;                                      // 0x0078(0x0028) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_RegisterWithTarget");
		return ptr;
	}

};


// Class BendGame.BendBTTask_RequestGrapple
// 0x0010 (0x0080 - 0x0070)
class UBendBTTask_RequestGrapple : public UBTTaskNode
{
public:
	int                                                NumberOfAttempts;                                         // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TimeBetweenAttempts;                                      // 0x0074(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               DirectGrapple;                                            // 0x0078(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0079(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_RequestGrapple");
		return ptr;
	}

};


// Class BendGame.BendBTTask_RestartSelector
// 0x0008 (0x0078 - 0x0070)
class UBendBTTask_RestartSelector : public UBTTaskNode
{
public:
	int                                                ParentToRestartLevel;                                     // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0074(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_RestartSelector");
		return ptr;
	}

};


// Class BendGame.BendBTTask_RestartSequence
// 0x0008 (0x0078 - 0x0070)
class UBendBTTask_RestartSequence : public UBTTaskNode
{
public:
	int                                                ParentToRestartLevel;                                     // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0074(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_RestartSequence");
		return ptr;
	}

};


// Class BendGame.BendBTTask_RunVariableBehavior
// 0x0028 (0x00B0 - 0x0088)
class UBendBTTask_RunVariableBehavior : public UBTTask_RunBehaviorDynamic
{
public:
	struct FBlackboardKeySelector                      BehaviorTreeKey;                                          // 0x0088(0x0028) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_RunVariableBehavior");
		return ptr;
	}

};


// Class BendGame.BendBTTask_ScreamerHide
// 0x0028 (0x0098 - 0x0070)
class UBendBTTask_ScreamerHide : public UBTTaskNode
{
public:
	float                                              Timeout;                                                  // 0x0070(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x24];                                      // 0x0074(0x0024) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_ScreamerHide");
		return ptr;
	}


	void OnOneShotFinished();
};


// Class BendGame.BendBTTask_ScreamSetMoveToHorde
// 0x0000 (0x0070 - 0x0070)
class UBendBTTask_ScreamSetMoveToHorde : public UBTTaskNode
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_ScreamSetMoveToHorde");
		return ptr;
	}

};


// Class BendGame.BendBTTask_ScriptedMoveTo
// 0x0000 (0x0070 - 0x0070)
class UBendBTTask_ScriptedMoveTo : public UBTTaskNode
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_ScriptedMoveTo");
		return ptr;
	}

};


// Class BendGame.BendBTTask_ScriptedMoveToCover
// 0x0000 (0x0070 - 0x0070)
class UBendBTTask_ScriptedMoveToCover : public UBTTaskNode
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_ScriptedMoveToCover");
		return ptr;
	}

};


// Class BendGame.BendBTTask_SetAvoidanceGroup
// 0x0018 (0x0088 - 0x0070)
class UBendBTTask_SetAvoidanceGroup : public UBTTaskNode
{
public:
	bool                                               UseAvoidanceGroup;                                        // 0x0070(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0071(0x0003) MISSED OFFSET
	struct FNavAvoidanceMask                           AvoidanceGroup;                                           // 0x0074(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               UseGroupsToAvoid;                                         // 0x0078(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0079(0x0003) MISSED OFFSET
	struct FNavAvoidanceMask                           GroupsToAvoid;                                            // 0x007C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               UseGroupsToIgnore;                                        // 0x0080(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0081(0x0003) MISSED OFFSET
	struct FNavAvoidanceMask                           GroupsToIgnore;                                           // 0x0084(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_SetAvoidanceGroup");
		return ptr;
	}

};


// Class BendGame.BendBTTask_SetAwareness
// 0x0008 (0x0078 - 0x0070)
class UBendBTTask_SetAwareness : public UBTTaskNode
{
public:
	float                                              Awareness;                                                // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               DoNotOverrideForcedAwareness;                             // 0x0074(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0075(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_SetAwareness");
		return ptr;
	}

};


// Class BendGame.BendBTTask_SetBoolean
// 0x0030 (0x00A0 - 0x0070)
class UBendBTTask_SetBoolean : public UBTTaskNode
{
public:
	struct FBlackboardKeySelector                      BooleanKey;                                               // 0x0070(0x0028) (Edit)
	bool                                               NewValue;                                                 // 0x0098(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0099(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_SetBoolean");
		return ptr;
	}

};


// Class BendGame.BendBTTask_SetCanStrafeWhenAware
// 0x0008 (0x0078 - 0x0070)
class UBendBTTask_SetCanStrafeWhenAware : public UBTTaskNode
{
public:
	bool                                               NewCanStrafe;                                             // 0x0070(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0071(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_SetCanStrafeWhenAware");
		return ptr;
	}

};


// Class BendGame.BendBTTask_SetCoverValidationPackages
// 0x0008 (0x0078 - 0x0070)
class UBendBTTask_SetCoverValidationPackages : public UBTTaskNode
{
public:
	bool                                               Reset;                                                    // 0x0070(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EBendCoverVerificationPackages>        VerificationPackage;                                      // 0x0071(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EBendCoverMoveVerificationPackages>    MoveVerificationPackage;                                  // 0x0072(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x5];                                       // 0x0073(0x0005) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_SetCoverValidationPackages");
		return ptr;
	}

};


// Class BendGame.BendBTTask_SetEnumByName
// 0x0030 (0x00A0 - 0x0070)
class UBendBTTask_SetEnumByName : public UBTTaskNode
{
public:
	struct FBlackboardKeySelector                      EnumKey;                                                  // 0x0070(0x0028) (Edit)
	struct FName                                       NewValue;                                                 // 0x0098(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_SetEnumByName");
		return ptr;
	}

};


// Class BendGame.BendBTTask_SetFloat
// 0x0030 (0x00A0 - 0x0070)
class UBendBTTask_SetFloat : public UBTTaskNode
{
public:
	struct FBlackboardKeySelector                      FloatKey;                                                 // 0x0070(0x0028) (Edit)
	float                                              NewValue;                                                 // 0x0098(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x009C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_SetFloat");
		return ptr;
	}

};


// Class BendGame.BendBTTask_SetInt
// 0x0030 (0x00A0 - 0x0070)
class UBendBTTask_SetInt : public UBTTaskNode
{
public:
	struct FBlackboardKeySelector                      IntKey;                                                   // 0x0070(0x0028) (Edit)
	float                                              NewValue;                                                 // 0x0098(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x009C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_SetInt");
		return ptr;
	}

};


// Class BendGame.BendBTTask_SetMoveFocus
// 0x0028 (0x0098 - 0x0070)
class UBendBTTask_SetMoveFocus : public UBTTaskNode
{
public:
	struct FBlackboardKeySelector                      MovePointKey;                                             // 0x0070(0x0028) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_SetMoveFocus");
		return ptr;
	}

};


// Class BendGame.BendBTTask_SetMoveFocusByType
// 0x0038 (0x00A8 - 0x0070)
class UBendBTTask_SetMoveFocusByType : public UBTTaskNode
{
public:
	TEnumAsByte<EMoveFocusType>                        FocusType;                                                // 0x0070(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0071(0x0007) MISSED OFFSET
	struct FBlackboardKeySelector                      ReferenceLocationKey;                                     // 0x0078(0x0028) (Edit)
	bool                                               UseRefLocKey;                                             // 0x00A0(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x00A1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_SetMoveFocusByType");
		return ptr;
	}

};


// Class BendGame.BendBTTask_SetMoveFocusToDZ
// 0x0008 (0x0078 - 0x0070)
class UBendBTTask_SetMoveFocusToDZ : public UBTTaskNode
{
public:
	bool                                               UseCenter;                                                // 0x0070(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0071(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_SetMoveFocusToDZ");
		return ptr;
	}

};


// Class BendGame.BendBTTask_SetNPCShootingAccuracy
// 0x0008 (0x0078 - 0x0070)
class UBendBTTask_SetNPCShootingAccuracy : public UBTTaskNode
{
public:
	float                                              Accuracy;                                                 // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0074(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_SetNPCShootingAccuracy");
		return ptr;
	}

};


// Class BendGame.BendBTTask_SetObjectKey
// 0x0030 (0x00A0 - 0x0070)
class UBendBTTask_SetObjectKey : public UBTTaskNode
{
public:
	struct FBlackboardKeySelector                      ObjectKey;                                                // 0x0070(0x0028) (Edit)
	class UObject*                                     NewValue;                                                 // 0x0098(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_SetObjectKey");
		return ptr;
	}

};


// Class BendGame.BendBTTask_SetTime
// 0x0028 (0x0098 - 0x0070)
class UBendBTTask_SetTime : public UBTTaskNode
{
public:
	struct FBlackboardKeySelector                      FloatKey;                                                 // 0x0070(0x0028) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_SetTime");
		return ptr;
	}

};


// Class BendGame.BendBTTask_SniperAiming
// 0x0060 (0x00D0 - 0x0070)
class UBendBTTask_SniperAiming : public UBTTaskNode
{
public:
	unsigned char                                      UnknownData00[0x60];                                      // 0x0070(0x0060) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_SniperAiming");
		return ptr;
	}


	void OnPawnDamageCallback(float ActualDamage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser, class ABendPawn* PawnDamaged, bool CriticalHit, bool KillingBlow);
};


// Class BendGame.BendBTTask_SniperAimingAttack
// 0x0020 (0x00F0 - 0x00D0)
class UBendBTTask_SniperAimingAttack : public UBendBTTask_SniperAiming
{
public:
	float                                              Accuracy;                                                 // 0x00D0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1C];                                      // 0x00D4(0x001C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_SniperAimingAttack");
		return ptr;
	}


	void OnInstigatedDamage(float Damage, class UDamageType* DamageType, class AActor* DamagedActor, class AActor* DamageCauser);
	void OnBulletSpawned(class ABendProjectile* Bullet);
};


// Class BendGame.BendBTTask_SniperAimingActor
// 0x0008 (0x00F8 - 0x00F0)
class UBendBTTask_SniperAimingActor : public UBendBTTask_SniperAimingAttack
{
public:
	bool                                               bLockOnTarget;                                            // 0x00F0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00F1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_SniperAimingActor");
		return ptr;
	}

};


// Class BendGame.BendBTTask_SniperAimingNoTarget
// 0x0010 (0x00E0 - 0x00D0)
class UBendBTTask_SniperAimingNoTarget : public UBendBTTask_SniperAiming
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x00D0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_SniperAimingNoTarget");
		return ptr;
	}

};


// Class BendGame.BendBTTask_SniperAimingSearch
// 0x0000 (0x00D0 - 0x00D0)
class UBendBTTask_SniperAimingSearch : public UBendBTTask_SniperAiming
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_SniperAimingSearch");
		return ptr;
	}

};


// Class BendGame.BendBTTask_SniperAimingWaypoints
// 0x0018 (0x00E8 - 0x00D0)
class UBendBTTask_SniperAimingWaypoints : public UBendBTTask_SniperAiming
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x00D0(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_SniperAimingWaypoints");
		return ptr;
	}

};


// Class BendGame.BendBTTask_SquadBase
// 0x0018 (0x0088 - 0x0070)
class UBendBTTask_SquadBase : public UBTTaskNode
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0070(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_SquadBase");
		return ptr;
	}

};


// Class BendGame.BendBTTask_HumanSquadBase
// 0x0030 (0x00B8 - 0x0088)
class UBendBTTask_HumanSquadBase : public UBendBTTask_SquadBase
{
public:
	unsigned char                                      UnknownData00[0x30];                                      // 0x0088(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_HumanSquadBase");
		return ptr;
	}


	void OnTeamRoleStarted(class ABendAIController* MemberAIController, const struct FName& RoleName, uint32_t RoleId);
	void OnTeamRoleReplaced(class ABendAIController* MemberAIController, const struct FName& OldRoleName, uint32_t OldRoleId, const struct FName& NewRoleName, uint32_t NewRoleId);
	void OnTeamRoleQuit(class ABendAIController* MemberAIController, const struct FName& RoleName, uint32_t RoleId);
	void OnTeamRoleComplete(class ABendAIController* MemberAIController, const struct FName& RoleCompleted, uint32_t RoleId, bool bSuccess);
	void OnTeamRoleCleared(class ABendAIController* MemberAIController, class UObject* Clearer, const struct FName& RoleName, uint32_t RoleId);
	void OnMemberRemoved(class UBendAISquad* Squad, class ABendPawn* Pawn);
	void OnMemberAdded(class UBendAISquad* Squad, class ABendPawn* Pawn);
};


// Class BendGame.BendBTTask_HumanSquadCombat
// 0x0008 (0x00C0 - 0x00B8)
class UBendBTTask_HumanSquadCombat : public UBendBTTask_HumanSquadBase
{
public:
	bool                                               UseFarFrontLine;                                          // 0x00B8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00B9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_HumanSquadCombat");
		return ptr;
	}

};


// Class BendGame.BendBTTask_HumanSquadCombatInHomeEntity
// 0x0008 (0x00C0 - 0x00B8)
class UBendBTTask_HumanSquadCombatInHomeEntity : public UBendBTTask_HumanSquadBase
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x00B8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_HumanSquadCombatInHomeEntity");
		return ptr;
	}

};


// Class BendGame.BendBTTask_HumanSquadGrenadeAttack
// 0x0000 (0x00B8 - 0x00B8)
class UBendBTTask_HumanSquadGrenadeAttack : public UBendBTTask_HumanSquadBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_HumanSquadGrenadeAttack");
		return ptr;
	}

};


// Class BendGame.BendBTTask_HumanSquadMove
// 0x0008 (0x00C0 - 0x00B8)
class UBendBTTask_HumanSquadMove : public UBendBTTask_HumanSquadBase
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x00B8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_HumanSquadMove");
		return ptr;
	}

};


// Class BendGame.BendBTTask_HumanSquadGetBackToFrontLine
// 0x0000 (0x00C0 - 0x00C0)
class UBendBTTask_HumanSquadGetBackToFrontLine : public UBendBTTask_HumanSquadMove
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_HumanSquadGetBackToFrontLine");
		return ptr;
	}

};


// Class BendGame.BendBTTask_HumanSquadMoveToDZ
// 0x0000 (0x00C0 - 0x00C0)
class UBendBTTask_HumanSquadMoveToDZ : public UBendBTTask_HumanSquadMove
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_HumanSquadMoveToDZ");
		return ptr;
	}

};


// Class BendGame.BendBTTask_HumanSquadRetreat
// 0x0008 (0x00C8 - 0x00C0)
class UBendBTTask_HumanSquadRetreat : public UBendBTTask_HumanSquadMove
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x00C0(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_HumanSquadRetreat");
		return ptr;
	}

};


// Class BendGame.BendBTTask_HumanSquadBaseOld
// 0x0000 (0x0088 - 0x0088)
class UBendBTTask_HumanSquadBaseOld : public UBendBTTask_SquadBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_HumanSquadBaseOld");
		return ptr;
	}


	void OnTeamRoleStarted(class ABendAIController* MemberAIController, const struct FName& RoleName, uint32_t RoleId);
	void OnTeamRoleReplaced(class ABendAIController* MemberAIController, const struct FName& OldRoleName, uint32_t OldRoleId, const struct FName& NewRoleName, uint32_t NewRoleId);
	void OnTeamRoleEnded(class ABendAIController* MemberAIController, const struct FName& RoleName, uint32_t RoleId);
	void OnTeamRoleComplete(class ABendAIController* MemberAIController, const struct FName& RoleCompleted, uint32_t RoleId, bool bSuccess);
	void OnTeamRoleCleared(class ABendAIController* MemberAIController, class UObject* Clearer, const struct FName& RoleName, uint32_t RoleId);
	void OnScriptingBegin(class ABendAIController* Controller, TEnumAsByte<EBendAIScriptingMode> ScriptingMode);
	void OnMemberRemoved(class UBendAISquad* Squad, class ABendPawn* Pawn);
	void OnMemberAdded(class UBendAISquad* Squad, class ABendPawn* Pawn);
	void OnDocileChanged(class ABendAIController* Controller, bool NewValue);
};


// Class BendGame.BendBTTask_HumanSquadAreaSearch
// 0x01C0 (0x0248 - 0x0088)
class UBendBTTask_HumanSquadAreaSearch : public UBendBTTask_HumanSquadBaseOld
{
public:
	unsigned char                                      UnknownData00[0x1C0];                                     // 0x0088(0x01C0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_HumanSquadAreaSearch");
		return ptr;
	}


	void OnSquadMemberKilled(class UBendAISquad* Squad, class ABendPawn* Member, class ABendPawn* Killer);
	void OnMemberBecomeUnaware(class ABendAIController* AIController, TEnumAsByte<EAIAwareState> PreviousAwareness);
	void OnMemberBecomeAware(class ABendAIController* AIController, TEnumAsByte<EAIAwareState> PreviousAwareness);
	void OnAreaSearchClosed();
};


// Class BendGame.BendBTTask_HumanSquadPressAttack
// 0x0028 (0x00B0 - 0x0088)
class UBendBTTask_HumanSquadPressAttack : public UBendBTTask_HumanSquadBaseOld
{
public:
	bool                                               RunOnlyOnce;                                              // 0x0088(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0089(0x0003) MISSED OFFSET
	int                                                MinNumberOfMembersToAllowFlank;                           // 0x008C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x20];                                      // 0x0090(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_HumanSquadPressAttack");
		return ptr;
	}

};


// Class BendGame.BendBTTask_HumanSquadCombatHunt
// 0x0080 (0x0108 - 0x0088)
class UBendBTTask_HumanSquadCombatHunt : public UBendBTTask_SquadBase
{
public:
	unsigned char                                      UnknownData00[0x80];                                      // 0x0088(0x0080) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_HumanSquadCombatHunt");
		return ptr;
	}


	void OnTeamRoleComplete(class ABendAIController* MemberAIController, const struct FName& RoleCompleted, uint32_t RoleId, bool bSuccess);
	void OnTeamRoleCleared(class ABendAIController* MemberAIController, class UObject* Clearer, const struct FName& PreviousTeamRole, uint32_t RoleId);
	void OnSquadMemberRemoved(class UBendAISquad* Squad, class ABendPawn* Member);
	void OnSquadMemberKilled(class UBendAISquad* Squad, class ABendPawn* Member, class ABendPawn* Killer);
	void OnCurrentReverbChanged(class ABendAIController* MemberAIController);
	void OnCombatHuntFinished(int SquadId, class ABendPawn* Target, const struct FVector& TargetLocation, bool Succeeded);
};


// Class BendGame.BendBTTask_HumanSquadDisentangleFrontLine
// 0x0010 (0x0098 - 0x0088)
class UBendBTTask_HumanSquadDisentangleFrontLine : public UBendBTTask_SquadBase
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0088(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_HumanSquadDisentangleFrontLine");
		return ptr;
	}


	void OnTeamRoleComplete(class ABendAIController* MemberAIController, const struct FName& RoleCompleted, uint32_t RoleId, bool Success);
	void OnSquadMemberRemoved(class UBendAISquad* Squad, class ABendPawn* Member);
	void OnSquadMemberAdded(class UBendAISquad* Squad, class ABendPawn* Member);
};


// Class BendGame.BendBTTask_HumanSquadHideFromSniper
// 0x0020 (0x00A8 - 0x0088)
class UBendBTTask_HumanSquadHideFromSniper : public UBendBTTask_SquadBase
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0088(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_HumanSquadHideFromSniper");
		return ptr;
	}


	void OnTeamRoleComplete(class ABendAIController* MemberAIController, const struct FName& RoleCompleted, uint32_t RoleId, bool Success);
	void OnSquadMemberRemoved(class UBendAISquad* Squad, class ABendPawn* Member);
	void OnSquadMemberAdded(class UBendAISquad* Squad, class ABendPawn* Member);
};


// Class BendGame.BendBTTask_NewtTeamDistraction
// 0x0018 (0x00A0 - 0x0088)
class UBendBTTask_NewtTeamDistraction : public UBendBTTask_SquadBase
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0088(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_NewtTeamDistraction");
		return ptr;
	}


	void OnTeamRoleComplete(class ABendAIController* MemberAIController, const struct FName& RoleCompleted, uint32_t RoleId, bool bSuccess);
};


// Class BendGame.BendBTTask_StopAiming
// 0x0000 (0x0070 - 0x0070)
class UBendBTTask_StopAiming : public UBTTaskNode
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_StopAiming");
		return ptr;
	}

};


// Class BendGame.BendBTTask_StopMoving
// 0x0000 (0x0070 - 0x0070)
class UBendBTTask_StopMoving : public UBTTaskNode
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_StopMoving");
		return ptr;
	}

};


// Class BendGame.BendBTTask_ThrowThrowable
// 0x0048 (0x00B8 - 0x0070)
class UBendBTTask_ThrowThrowable : public UBTTaskNode
{
public:
	bool                                               bReportSuccesfulThrow;                                    // 0x0070(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x47];                                      // 0x0071(0x0047) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_ThrowThrowable");
		return ptr;
	}


	void OnThrowFinished();
	void OnTakeDamage(float Damage, class UDamageType* DamageType, class AController* Instigator, class AActor* DamageCauser);
	void OnStepOutFinished();
};


// Class BendGame.BendBTTask_TurnInPlace
// 0x0060 (0x00D0 - 0x0070)
class UBendBTTask_TurnInPlace : public UBTTaskNode
{
public:
	unsigned char                                      UnknownData00[0x14];                                      // 0x0070(0x0014) MISSED OFFSET
	bool                                               bUseBlackboardKey;                                        // 0x0084(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0085(0x0003) MISSED OFFSET
	struct FBlackboardKeySelector                      BBKey;                                                    // 0x0088(0x0028) (Edit)
	bool                                               FaceTarget;                                               // 0x00B0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x00B1(0x0003) MISSED OFFSET
	float                                              MinTurnAngle;                                             // 0x00B4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              angle;                                                    // 0x00B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Timeout;                                                  // 0x00BC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x10];                                      // 0x00C0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_TurnInPlace");
		return ptr;
	}


	void OnFinishedTIP();
};


// Class BendGame.BendBTTask_UseLaserBeam
// 0x0008 (0x0078 - 0x0070)
class UBendBTTask_UseLaserBeam : public UBTTaskNode
{
public:
	bool                                               TurnBeamOn;                                               // 0x0070(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0071(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_UseLaserBeam");
		return ptr;
	}

};


// Class BendGame.BendBTTask_UsePOI
// 0x0030 (0x00A0 - 0x0070)
class UBendBTTask_UsePOI : public UBTTaskNode
{
public:
	struct FBlackboardKeySelector                      POIKey;                                                   // 0x0070(0x0028) (Edit)
	bool                                               bSkipTests;                                               // 0x0098(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               ReturnSuccess;                                            // 0x0099(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x009A(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_UsePOI");
		return ptr;
	}

};


// Class BendGame.BendBTTask_WaitForCoveringFireProvided
// 0x0008 (0x0078 - 0x0070)
class UBendBTTask_WaitForCoveringFireProvided : public UBTTaskNode
{
public:
	float                                              TimeOutTime;                                              // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0074(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_WaitForCoveringFireProvided");
		return ptr;
	}

};


// Class BendGame.BendBTTask_WaitForCoveringFireRequested
// 0x0008 (0x0078 - 0x0070)
class UBendBTTask_WaitForCoveringFireRequested : public UBTTaskNode
{
public:
	float                                              TimeOutTime;                                              // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0074(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_WaitForCoveringFireRequested");
		return ptr;
	}

};


// Class BendGame.BendBTTask_WaitFrames
// 0x0008 (0x0078 - 0x0070)
class UBendBTTask_WaitFrames : public UBTTaskNode
{
public:
	int                                                FramesToWait;                                             // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0074(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBTTask_WaitFrames");
		return ptr;
	}

};


// Class BendGame.BendBuddySoloInteract
// 0x0000 (0x0348 - 0x0348)
class ABendBuddySoloInteract : public AActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBuddySoloInteract");
		return ptr;
	}

};


// Class BendGame.BendBuilding
// 0x0030 (0x0378 - 0x0348)
class ABendBuilding : public AActor
{
public:
	class UBendNestingZone*                            NestZone;                                                 // 0x0348(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	struct FString                                     NestID;                                                   // 0x0350(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate)
	class UBendNestingZone*                            NestZoneChallenge;                                        // 0x0360(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	struct FString                                     NestIDChallenge;                                          // 0x0368(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBuilding");
		return ptr;
	}

};


// Class BendGame.BendBunkerData
// 0x00F8 (0x0120 - 0x0028)
class UBendBunkerData : public UDataAsset
{
public:
	struct FText                                       BunkerName;                                               // 0x0028(0x0018) (Edit, BlueprintVisible)
	struct FTransform                                  BunkerLocation;                                           // 0x0040(0x0030) (Edit, BlueprintVisible, IsPlainOldData)
	unsigned char                                      Discovered : 1;                                           // 0x0070(0x0001) (Edit, BlueprintVisible, SaveGame)
	unsigned char                                      Secured : 1;                                              // 0x0070(0x0001) (Edit, BlueprintVisible, SaveGame)
	unsigned char                                      MapTaken : 1;                                             // 0x0070(0x0001) (Edit, BlueprintVisible, SaveGame)
	unsigned char                                      EnemyCampDiscovered : 1;                                  // 0x0070(0x0001) (Edit, BlueprintVisible, SaveGame)
	unsigned char                                      EnemyCampCleared : 1;                                     // 0x0070(0x0001) (Edit, BlueprintVisible, SaveGame)
	unsigned char                                      TrackingStarted : 1;                                      // 0x0070(0x0001) (Edit, BlueprintVisible, SaveGame)
	unsigned char                                      TrackingComplete : 1;                                     // 0x0070(0x0001) (Edit, BlueprintVisible, SaveGame)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0071(0x0007) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnDiscovered;                                             // 0x0078(0x0010) (BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnSecured;                                                // 0x0088(0x0010) (BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnMapTaken;                                               // 0x0098(0x0010) (BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnEnemyCampDiscovered;                                    // 0x00A8(0x0010) (BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnEnemyCampCleared;                                       // 0x00B8(0x0010) (BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnTrackingStarted;                                        // 0x00C8(0x0010) (BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnTrackingComplete;                                       // 0x00D8(0x0010) (BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable)
	class UMaterial*                                   BunkerFogMaterial;                                        // 0x00E8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  BunkerFogTexture;                                         // 0x00F0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                BunkerFogColor;                                           // 0x00F8(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxTextureSize;                                           // 0x0108(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x14];                                      // 0x010C(0x0014) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBunkerData");
		return ptr;
	}


	void SetTrackingStarted();
	void SetTrackingComplete();
	void SetMapTaken();
	void SetEnemyCampDiscovered();
	void SetEnemyCampCleared();
	void SecureBunker();
	void ResetBunkerData();
	void DiscoverBunker();
};


// Class BendGame.BendButtonPressEvent
// 0x0090 (0x03D8 - 0x0348)
class ABendButtonPressEvent : public AActor
{
public:
	TEnumAsByte<EControllerInputButton>                ButtonForEvent;                                           // 0x0348(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0349(0x0007) MISSED OFFSET
	struct FName                                       ActionName;                                               // 0x0350(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               ConsumeInputs;                                            // 0x0358(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               ConsumeStickInputs;                                       // 0x0359(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x6];                                       // 0x035A(0x0006) MISSED OFFSET
	struct FText                                       DisplayText;                                              // 0x0360(0x0018) (Edit, BlueprintVisible, DisableEditOnInstance)
	class UTexture2D*                                  DisplayTexture;                                           // 0x0378(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               ButtonEventActive;                                        // 0x0380(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0381(0x0007) MISSED OFFSET
	struct FScriptMulticastDelegate                    ButtonEventSuccess;                                       // 0x0388(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ButtonEventStart;                                         // 0x0398(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ButtonEventFailure;                                       // 0x03A8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ButtonEventInput;                                         // 0x03B8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ButtonEventInputReleased;                                 // 0x03C8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendButtonPressEvent");
		return ptr;
	}


	void TimeScaleInputEvent();
	void StartButtonEvent();
	void SetInputAction(const struct FName& InActionName);
	void SetButtonEventSuccessful();
	void SetButtonEventFail();
	void NotifyButtonEventReleased();
	void NotifyButtonEventDeactivated();
	void NotifyButtonEventActivated();
	void NotifyButtonEvent();
	bool IsButtonEventComplete();
	float GetCompletionPercent();
	void DeactivateButtonEvent();
	void ActivateButtonEvent();
};


// Class BendGame.BendButtonPressEventBlueprintSupport
// 0x0078 (0x0450 - 0x03D8)
class ABendButtonPressEventBlueprintSupport : public ABendButtonPressEvent
{
public:
	class UUserWidget*                                 ButtonPressUserWidget;                                    // 0x03D8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class AActor*                                      FollowingActor;                                           // 0x03E0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UActorComponent*                             FollowingComponent;                                       // 0x03E8(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	float                                              DeltaSeconds;                                             // 0x03F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               Active;                                                   // 0x03F4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               EasePositionOnTick;                                       // 0x03F5(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x03F6(0x0002) MISSED OFFSET
	int                                                SuccessfulInputsNeeded;                                   // 0x03F8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              LengthOfEvent;                                            // 0x03FC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DecayRate;                                                // 0x0400(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CurrentInput;                                             // 0x0404(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       FollowSocket;                                             // 0x0408(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               Debug;                                                    // 0x0410(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               InputAboveZero;                                           // 0x0411(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               FailOnTimeExpire;                                         // 0x0412(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x0413(0x0001) MISSED OFFSET
	float                                              CurrentLifeTime;                                          // 0x0414(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   ScreenLocationOrOffset;                                   // 0x0418(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               StartOnPlay;                                              // 0x0420(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               HasAnActorFollower;                                       // 0x0421(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x2];                                       // 0x0422(0x0002) MISSED OFFSET
	float                                              HoldTime;                                                 // 0x0424(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TimeHeld;                                                 // 0x0428(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               ButtonHeld;                                               // 0x042C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               TriggerOnButtonReleased;                                  // 0x042D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               IsCombatPromptTrap;                                       // 0x042E(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               UseSocketOffset;                                          // 0x042F(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     SocketOffset;                                             // 0x0430(0x000C) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   PrevPosition;                                             // 0x043C(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   ButtonForEventPosition;                                   // 0x0444(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               AnimatePosition;                                          // 0x044C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               EventComplete;                                            // 0x044D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x2];                                       // 0x044E(0x0002) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendButtonPressEventBlueprintSupport");
		return ptr;
	}


	void UpdatePosition();
	void UpdateContextualPosition();
	void OnDebuggingActive();
	void ButtonEventCompletelyDecayed();
};


// Class BendGame.BendGrappleButtonPressEvent
// 0x0098 (0x0470 - 0x03D8)
class ABendGrappleButtonPressEvent : public ABendButtonPressEvent
{
public:
	class UBaseUserWidget*                             GrappleUserWidget;                                        // 0x03D8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                SuccessfulInputsNeeded;                                   // 0x03E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              LastPressTimer;                                           // 0x03E4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData)
	float                                              CompletionPercent;                                        // 0x03E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData)
	float                                              CompletionPercentUpdateDelta;                             // 0x03EC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   ScreenLocationOrOffset;                                   // 0x03F0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class AActor*                                      FollowingActor;                                           // 0x03F8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UActorComponent*                             FollowingComponent;                                       // 0x0400(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	struct FName                                       FollowSocket;                                             // 0x0408(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               StartOnPlay;                                              // 0x0410(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               Debug;                                                    // 0x0411(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               HasAnActorFollower;                                       // 0x0412(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0413(0x0001) MISSED OFFSET
	float                                              TimeSinceStart;                                           // 0x0414(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxGrappleTime;                                           // 0x0418(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               CanFail;                                                  // 0x041C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x041D(0x0003) MISSED OFFSET
	float                                              SuccessPressRate;                                         // 0x0420(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CurrentDecrementValue;                                    // 0x0424(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData)
	float                                              StartingPercent;                                          // 0x0428(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DeltaSecondsCap;                                          // 0x042C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DecrementRate;                                            // 0x0430(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CurrentInputValue;                                        // 0x0434(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                GrappleTiers;                                             // 0x0438(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                CurrentGrappleTier;                                       // 0x043C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                TimeScaleInput_DID;                                       // 0x0440(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               EventFinished;                                            // 0x0444(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0445(0x0003) MISSED OFFSET
	float                                              ButtonPressRateAtLowStamina;                              // 0x0448(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ButtonPressRateAtFullStamina;                             // 0x044C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   PrevPosition;                                             // 0x0450(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   ButtonForEventPosition;                                   // 0x0458(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               AnimatePosition;                                          // 0x0460(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0xF];                                       // 0x0461(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendGrappleButtonPressEvent");
		return ptr;
	}


	void OnDebuggingActive();
	void OnCompletionPercentChanged();
};


// Class BendGame.BendCharacterCalloutWidgetComponent
// 0x0000 (0x07C0 - 0x07C0)
class UBendCharacterCalloutWidgetComponent : public UBendCalloutWidgetComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendCharacterCalloutWidgetComponent");
		return ptr;
	}

};


// Class BendGame.BendCrowdCalloutWidgetComponent
// 0x0030 (0x07F0 - 0x07C0)
class UBendCrowdCalloutWidgetComponent : public UBendCalloutWidgetComponent
{
public:
	unsigned char                                      UnknownData00[0x30];                                      // 0x07C0(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendCrowdCalloutWidgetComponent");
		return ptr;
	}

};


// Class BendGame.BendCamDeath
// 0x0030 (0x00F0 - 0x00C0)
class UBendCamDeath : public UBendCamBase
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x00C0(0x0028) MISSED OFFSET
	float                                              m_fTrackingLerp;                                          // 0x00E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_fHordeDist;                                             // 0x00EC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendCamDeath");
		return ptr;
	}

};


// Class BendGame.BendCamDebug
// 0x0030 (0x00F0 - 0x00C0)
class UBendCamDebug : public UBendCamBase
{
public:
	unsigned char                                      UnknownData00[0x30];                                      // 0x00C0(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendCamDebug");
		return ptr;
	}


	void SetMultiplier(float M);
};


// Class BendGame.BendCamMenu
// 0x0050 (0x0140 - 0x00F0)
class UBendCamMenu : public UBendCamDebug
{
public:
	unsigned char                                      UnknownData00[0x50];                                      // 0x00F0(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendCamMenu");
		return ptr;
	}


	void SetTransform(const struct FTransform& xform);
};


// Class BendGame.BendCamFollow
// 0x02C0 (0x0380 - 0x00C0)
class UBendCamFollow : public UBendCamBase
{
public:
	unsigned char                                      UnknownData00[0x1B8];                                     // 0x00C0(0x01B8) MISSED OFFSET
	TArray<TWeakObjectPtr<class AActor>>               m_ExtraCollisionActorsToIgnore;                           // 0x0278(0x0010) (ZeroConstructor)
	bool                                               m_bBlindFireAllowed;                                      // 0x0288(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0289(0x0003) MISSED OFFSET
	float                                              m_fLookAtLerp;                                            // 0x028C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_fMinTargetSpeed;                                        // 0x0290(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_fMaxTargetSpeed;                                        // 0x0294(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_fMinTimeSinceLastInput;                                 // 0x0298(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_fPolarGoalLerp;                                         // 0x029C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_fPivotOffsetX;                                          // 0x02A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_fPivotOffsetY;                                          // 0x02A4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_fPivotOffsetAltY;                                       // 0x02A8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_fPivotOffsetZ;                                          // 0x02AC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_fPivotXYLerp;                                           // 0x02B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_fPivotZLerp;                                            // 0x02B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_fPivotShiftForward;                                     // 0x02B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_fPivotShiftBack;                                        // 0x02BC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_fPivotXRelative;                                        // 0x02C0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_fPivotZRelative;                                        // 0x02C1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x2];                                       // 0x02C2(0x0002) MISSED OFFSET
	float                                              m_fGoalDist;                                              // 0x02C4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_fMinDist;                                               // 0x02C8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_fMaxDist;                                               // 0x02CC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_fDistLerp;                                              // 0x02D0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_fMaxDistLookingUp;                                      // 0x02D4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_fMaxDistLookingDown;                                    // 0x02D8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_bDistByEnemy;                                           // 0x02DC(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x02DD(0x0003) MISSED OFFSET
	float                                              m_fEnemyMaxDist;                                          // 0x02E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_fGoalYaw;                                               // 0x02E4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_bAutoYaw;                                               // 0x02E8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_bAutoYawReverseOnVehicle;                               // 0x02E9(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_bIgnoreAutoYawGlobalSetting;                            // 0x02EA(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_bAutoYawAtRest;                                         // 0x02EB(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_fAutoYawLerp;                                           // 0x02EC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_fMinYawLerp;                                            // 0x02F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_fMaxYawLerp;                                            // 0x02F4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_fDriftYawLerp;                                          // 0x02F8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_fYawInputSpeed;                                         // 0x02FC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_fNoYawTowardCamCos;                                     // 0x0300(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_bLimitYaw;                                              // 0x0304(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x3];                                       // 0x0305(0x0003) MISSED OFFSET
	float                                              m_fMinYaw;                                                // 0x0308(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_fMaxYaw;                                                // 0x030C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_bPitchFollowGround;                                     // 0x0310(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x3];                                       // 0x0311(0x0003) MISSED OFFSET
	float                                              m_fGoalPitch;                                             // 0x0314(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_bAutoPitch;                                             // 0x0318(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x3];                                       // 0x0319(0x0003) MISSED OFFSET
	float                                              m_fAutoPitchLerp;                                         // 0x031C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_fMinPitchLerp;                                          // 0x0320(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_fMaxPitchLerp;                                          // 0x0324(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_fPitchInputSpeed;                                       // 0x0328(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_fMinPitch;                                              // 0x032C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_fMinAutoPitch;                                          // 0x0330(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_fMaxAutoPitch;                                          // 0x0334(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_fMaxPitch;                                              // 0x0338(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_fGoalRoll;                                              // 0x033C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_fRollLerp;                                              // 0x0340(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_bCollisionPivotVert;                                    // 0x0344(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_bCollisionPivotHoriz;                                   // 0x0345(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_bCollisionPivot2Cam;                                    // 0x0346(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_bCollisionCornerAvoid;                                  // 0x0347(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_bCollisionPrediction;                                   // 0x0348(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_bCollisionCamPassthrough;                               // 0x0349(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_bCollisionHold;                                         // 0x034A(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0x1];                                       // 0x034B(0x0001) MISSED OFFSET
	float                                              m_fCollisionHoldTime;                                     // 0x034C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_fMinCollisionDist;                                      // 0x0350(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_fMaxCollisionDist;                                      // 0x0354(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_fMaxCollisionShiftUp;                                   // 0x0358(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_fCollisionShiftLerp;                                    // 0x035C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_fCollisionDistLerp;                                     // 0x0360(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_fCornerAvoidTime;                                       // 0x0364(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_fCornerAvoidMinRot;                                     // 0x0368(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_fCornerAvoidMaxRot;                                     // 0x036C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_fPassthroughForwardDist;                                // 0x0370(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData08[0xC];                                       // 0x0374(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendCamFollow");
		return ptr;
	}


	void SnapToTarget(class USceneComponent* snapTarget, float Time);
	void SetPolarGoalFromTTY(float pivotX_A, float pivotY_A, float pivotZ_A, float goaldist_A, float goalyaw_A, float goalpitch_A, float pivotX_B, float pivotY_B, float pivotZ_B, float goaldist_B, float goalyaw_B, float goalpitch_B);
	void RemoveAllCameraIgnoreExtraTargets();
	void LookAtVector(const struct FVector& LookAtVector, float Time, bool interruptable);
	void LookAtActor(class AActor* LookAtActor, float Time, bool interruptable);
	void LookAt(const struct FVector& lookAtPoint, float Time, bool interruptable);
	void CancelSnapTo();
	void CancelLookAt();
	void AddIgnoreCameraExtraTargets(class AActor* NewIgnoredActor);
};


// Class BendGame.BendCamAnim
// 0x0050 (0x03D0 - 0x0380)
class UBendCamAnim : public UBendCamFollow
{
public:
	unsigned char                                      UnknownData00[0x50];                                      // 0x0380(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendCamAnim");
		return ptr;
	}

};


// Class BendGame.BendCamHighCover
// 0x00B0 (0x0430 - 0x0380)
class UBendCamHighCover : public UBendCamFollow
{
public:
	float                                              PivotYDefault;                                            // 0x0380(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              MovingTime;                                               // 0x0384(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              RightCornerPivotYOffset;                                  // 0x0388(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              LeftCornerPivotYOffset;                                   // 0x038C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xA0];                                      // 0x0390(0x00A0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendCamHighCover");
		return ptr;
	}

};


// Class BendGame.BendCamManualAim
// 0x0160 (0x04E0 - 0x0380)
class UBendCamManualAim : public UBendCamFollow
{
public:
	unsigned char                                      UnknownData00[0xC0];                                      // 0x0380(0x00C0) MISSED OFFSET
	float                                              m_fPivotYGoalLerp;                                        // 0x0440(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      m_bSixAxisAim : 1;                                        // 0x0444(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      m_bSixAxisInvertYaw : 1;                                  // 0x0444(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      m_bSixAxisInvertPitch : 1;                                // 0x0444(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      m_bSixAxisRollForYaw : 1;                                 // 0x0444(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0445(0x0003) MISSED OFFSET
	float                                              m_fSixAxisScale;                                          // 0x0448(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_fSixAxisLerp;                                           // 0x044C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_fPivotOffsetCrouchX;                                    // 0x0450(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_fPivotOffsetCrouchY;                                    // 0x0454(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_fPivotOffsetCrouchAltY;                                 // 0x0458(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_fPivotOffsetCrouchZ;                                    // 0x045C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_fPivotShiftCrouchForward;                               // 0x0460(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_fPivotShiftCrouchBack;                                  // 0x0464(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_fPivotShiftLeaningOver;                                 // 0x0468(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_bUseCrouchSettingsInLowCover;                           // 0x046C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x046D(0x0003) MISSED OFFSET
	float                                              m_fPivotShiftLerp;                                        // 0x0470(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0474(0x0004) MISSED OFFSET
	struct FAimAssistDifficultySettings                AimAssistSettings;                                        // 0x0478(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FocalDistMin;                                             // 0x0490(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FocalDistMax;                                             // 0x0494(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FocalDistLerpIn;                                          // 0x0498(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FocalDistLerpOut;                                         // 0x049C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FZoomCamData                                m_ZoomData;                                               // 0x04A0(0x0024) (Edit, BlueprintVisible)
	unsigned char                                      m_CanZoom : 1;                                            // 0x04C4(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData04[0x7];                                       // 0x04C5(0x0007) MISSED OFFSET
	float                                              AngleForShoulderCamSwap;                                  // 0x04CC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DistanceForShoulderCamSwap;                               // 0x04D0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TimeToKeepShoulderChoice;                                 // 0x04D4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x8];                                       // 0x04D8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendCamManualAim");
		return ptr;
	}


	void OnPlayerWasDamaged(bool EnteredAnim);
	void OnPlayerRespawned(class ABendPlayerController* PlayerController);
};


// Class BendGame.BendCamFixedAim
// 0x0010 (0x04F0 - 0x04E0)
class UBendCamFixedAim : public UBendCamManualAim
{
public:
	bool                                               m_bAimUp;                                                 // 0x04E0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x04E1(0x0003) MISSED OFFSET
	float                                              m_fRecenterTimeThreshold;                                 // 0x04E4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_fRecenterSpeed;                                         // 0x04E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x04EC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendCamFixedAim");
		return ptr;
	}

};


// Class BendGame.BendCamMelee
// 0x0090 (0x0410 - 0x0380)
class UBendCamMelee : public UBendCamFollow
{
public:
	float                                              PivotPercentTowardTarget;                                 // 0x0380(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MinCollisionDist;                                         // 0x0384(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MinTimeBetweenGoalSwitch;                                 // 0x0388(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bIgnoreDeadMeleeTarget;                                   // 0x038C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bStayAtGoodAngle;                                         // 0x038D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bLookAtTarget;                                            // 0x038E(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x81];                                      // 0x038F(0x0081) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendCamMelee");
		return ptr;
	}

};


// Class BendGame.BendCamTransition
// 0x0090 (0x0150 - 0x00C0)
class UBendCamTransition : public UBendCamBase
{
public:
	unsigned char                                      UnknownData00[0x90];                                      // 0x00C0(0x0090) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendCamTransition");
		return ptr;
	}

};


// Class BendGame.BendMapRenderCam
// 0x0010 (0x00D0 - 0x00C0)
class UBendMapRenderCam : public UBendCamBase
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x00C0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendMapRenderCam");
		return ptr;
	}


	void SetTransform(const struct FTransform& xform);
	void SetMultiplier(float M);
};


// Class BendGame.BendCamModifier_Post
// 0x0978 (0x09C0 - 0x0048)
class UBendCamModifier_Post : public UCameraModifier
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0048(0x0008) MISSED OFFSET
	struct FPostProcessSettings                        post;                                                     // 0x0050(0x0960) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData01[0x10];                                      // 0x09B0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendCamModifier_Post");
		return ptr;
	}


	void SetWhiteBalanceTint(float TintIn);
	void SetWhiteBalanceTemp(float WhiteTempIn);
	void SetVignetteStrength(float VignetteStrengthIn);
	void SetVignetteFalloff(float VignetteFalloffIn);
	void SetVibrancy(float VibrancyIn);
	void SetTransitionSpread(float TransitionSpreadIn);
	void SetTransitionDepth(float TransitionDepthIn);
	void SetSaturation(float SaturationIn);
	struct FBendPhotoModePostPreset SetPresetName(const struct FBendPhotoModePostPreset& Preset, const struct FName& PresetName);
	void SetPostProcessSettings(struct FPostProcessSettings* PostProcessSettings);
	void SetOffSet(const struct FVector& OffsetIn);
	void SetNearTint(const struct FLinearColor& NearTintIn);
	void SetNearSaturation(const struct FLinearColor& NearSaturationIn);
	void SetNearGamma(const struct FLinearColor& NearGammaIn);
	void SetGamma(const struct FVector& GammaIn);
	void SetGain(const struct FVector& GainIn);
	void SetFStop(float FStopIn);
	void SetFocalDist(float FocalDistIn);
	void SetFilmGrainIntensity(float FilmGrainIntensityIn);
	void SetFarTint(const struct FLinearColor& FarTintIn);
	void SetFarSaturation(const struct FLinearColor& FarSaturationIn);
	void SetFarGamma(const struct FLinearColor& FarGammaIn);
	void SetContrast(float ContrastIn);
	void SetColorContrast(const struct FVector& ColorContrastIn);
	void SetBrightness(float BrightnessIn);
	void SetBloomOutput2MaxIntensity(float MaxIntenistyIn);
	void SetBloomOutput1MaxIntensity(float MaxIntenistyIn);
	void SetBloomMinIntensityInput2(float MinIntensityIn);
	void SetBloomMinIntensityInput1(float MinIntensityIn);
	void SetBloomMaxIntensityInput2(float MaxIntenistyIn);
	void SetBloomMaxIntensityInput1(float MaxIntenistyIn);
	void SetBloomInput2Scale(float ScaleIn);
	void SetBloomInput1Scale(float ScaleIn);
	void SetBloom2Size(const struct FVector2D& SizeIn);
	void SetBloom2Color(const struct FVector& ColorIn);
	void SetBloom1Size(const struct FVector2D& SizeIn);
	void SetBloom1Color(const struct FVector& ColorIn);
	bool SavePhotoModePresetByIndex(int Index, const struct FBendPhotoModePostPreset& Preset);
	bool SavePhotoModePreset(const struct FBendPhotoModePostPreset& Preset);
	bool SaveCurrentSettingsAsPreset(const struct FName& PresetName);
	bool RemovePhotoModePresetByName(const struct FName& PresetName);
	bool RemovePhotoModePresetByIndex(int Index);
	TArray<struct FBendPhotoModePostPreset> LoadUserCreatedPhotoModePresets();
	bool LoadPhotoModePresetByName(const struct FName& PresetName, struct FBendPhotoModePostPreset* PostPreset);
	bool LoadPhotoModePresetByIndex(int Index, struct FBendPhotoModePostPreset* PostPreset);
	bool STATIC_GetPresetVectorValue(const struct FBendPhotoModePostPreset& Preset, TEnumAsByte<EPhotoModePresetSetting> Setting, struct FVector* OutValue);
	bool STATIC_GetPresetVector2DValue(const struct FBendPhotoModePostPreset& Preset, TEnumAsByte<EPhotoModePresetSetting> Setting, struct FVector2D* OutValue);
	bool STATIC_GetPresetNameByIndex(int Index, struct FName* Name);
	struct FName STATIC_GetPresetName(const struct FBendPhotoModePostPreset& Preset);
	bool STATIC_GetPresetLinearColorValue(const struct FBendPhotoModePostPreset& Preset, TEnumAsByte<EPhotoModePresetSetting> Setting, struct FLinearColor* OutValue);
	bool STATIC_GetPresetFloatValue(const struct FBendPhotoModePostPreset& Preset, TEnumAsByte<EPhotoModePresetSetting> Setting, float* OutValue);
	bool STATIC_GetPresetDepthOfFieldMethod(const struct FBendPhotoModePostPreset& Preset, TEnumAsByte<EDepthOfFieldMethod>* OutValue);
	struct FBendPhotoModePostPreset GetCurrentSettings();
	float GetContrast();
	float GetBrightness();
	bool STATIC_DoesPhotoModePresetNameExist(const struct FName& InName);
	bool ClearPhotoModePresets();
};


// Class BendGame.BendHumanLookComponent
// 0x0008 (0x0178 - 0x0170)
class UBendHumanLookComponent : public UBendCharacterLookComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0170(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendHumanLookComponent");
		return ptr;
	}

};


// Class BendGame.BendCharacterMovementComponent
// 0x05D0 (0x0D70 - 0x07A0)
class UBendCharacterMovementComponent : public UCharacterMovementComponent
{
public:
	float                                              LeanLeftRightFactorScale;                                 // 0x07A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              LeanLeftRightFactorNaturalFrequency;                      // 0x07A4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<struct FVector2D>                           InputCurvePoints;                                         // 0x07A8(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FBendCharacterLocomotionParams              LocomotionParams;                                         // 0x07B8(0x0018) (Edit, BlueprintVisible)
	unsigned char                                      bUseSmoothRotation : 1;                                   // 0x07D0(0x0001) (BlueprintVisible, Transient)
	unsigned char                                      bStopping : 1;                                            // 0x07D0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst)
	unsigned char                                      bCanPerformUprightGroundMovementTransitions : 1;          // 0x07D0(0x0001) (BlueprintVisible, BlueprintReadOnly, Transient)
	unsigned char                                      UnknownData00 : 1;                                        // 0x07D0(0x0001)
	unsigned char                                      bDisableAllProceduralRotation : 1;                        // 0x07D0(0x0001) (Edit)
	unsigned char                                      bDisableYawProceduralRotationAlways : 1;                  // 0x07D0(0x0001) (Edit)
	unsigned char                                      UnknownData01[0xF];                                       // 0x07D1(0x000F) MISSED OFFSET
	unsigned char                                      bEnablePitchWhenOrientingRotationToMovement : 1;          // 0x07E0(0x0001) (Edit)
	unsigned char                                      bAlwaysMaintainHorizontalGroundVelocity : 1;              // 0x07E0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData02[0x3];                                       // 0x07E1(0x0003) MISSED OFFSET
	float                                              MoveStartInputDelay;                                      // 0x07E4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MoveStopInputDelay;                                       // 0x07E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SmallInputThresholdLength0To1;                            // 0x07EC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SmallInputResponseLagTime;                                // 0x07F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x07F4(0x0004) MISSED OFFSET
	TArray<struct FBendCharacterCollisionShapeData>    CharacterCollisionShapeData;                              // 0x07F8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditFixedSize, ZeroConstructor)
	struct FRotator                                    DesiredRotation;                                          // 0x0808(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	struct FRotator                                    DeltaToDesiredRotation;                                   // 0x0814(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              FloorOrientationInterpFractionPerThirtiethSec;            // 0x0820(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bWantsToOrientAlongFloorSurface : 1;                      // 0x0824(0x0001) (BlueprintVisible)
	unsigned char                                      UnknownData04[0x3];                                       // 0x0825(0x0003) MISSED OFFSET
	struct FRotator                                    FloorOrientationOffsetComponentSpace;                     // 0x0828(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              desiredSpeed;                                             // 0x0834(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              DesiredSpeed_NotSlowedDownForTurn;                        // 0x0838(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              DesiredSpeedSmoothed;                                     // 0x083C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              DesiredSpeedSmoothing_InterpRateRampingUp;                // 0x0840(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DesiredSpeedSmoothing_InterpRateRampingUp_Sprinting;      // 0x0844(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DesiredSpeedSmoothing_InterpRateRampingDown;              // 0x0848(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DesiredSpeedSmoothing_InterpRateRampingUp_NonCombatScale; // 0x084C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DesiredSpeedSmoothing_InterpRateRampingDown_NonCombatScale;// 0x0850(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      DesiredSpeedSmoothing_IgnoreVerticalSpeedWhenNotUsingRootMotion : 1;// 0x0854(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData05[0x3];                                       // 0x0855(0x0003) MISSED OFFSET
	float                                              DesiredSpeedMoveStartThreshold;                           // 0x0858(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DesiredSpeedMoveStopThreshold;                            // 0x085C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       TurnInPlaceAnchor1;                                       // 0x0860(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       TurnInPlaceAnchor2;                                       // 0x0868(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       TurnInPlaceAnimationCurveName;                            // 0x0870(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       TurnInPlaceEarlyOutAnimationCurveName;                    // 0x0878(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       RagdollGetupOrientationSocketName;                        // 0x0880(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bIsRagdollOnGround : 1;                                   // 0x0888(0x0001) (BlueprintVisible, BlueprintReadOnly, Transient)
	unsigned char                                      bOverrideNavWalkingOn : 1;                                // 0x0888(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	unsigned char                                      bUseNewTurnSystem : 1;                                    // 0x0888(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bEnableStopAtBarrier : 1;                                 // 0x0888(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bEnableStrafeAtBarrier : 1;                               // 0x0888(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bIsStrafingAtBarrier : 1;                                 // 0x0888(0x0001) (BlueprintVisible, BlueprintReadOnly, Transient)
	unsigned char                                      bIsStoppedAtBarrier : 1;                                  // 0x0888(0x0001) (BlueprintVisible, BlueprintReadOnly, Transient)
	unsigned char                                      UnknownData06[0x7];                                       // 0x0889(0x0007) MISSED OFFSET
	struct FBendCharacterMovementTurnRateScaleVsStrafeAngleCurveList YawRateScaleVsStrafeAngle;                                // 0x0890(0x0030) (Edit, DisableEditOnInstance)
	TArray<struct FBendCharacterTurnAnimParams>        TurnAnimParams;                                           // 0x08C0(0x0010) (Edit, EditFixedSize, ZeroConstructor)
	unsigned char                                      bAnimBlueprintReportsGroundIdleAndMoveStates : 1;         // 0x08D0(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData07[0x13];                                      // 0x08D1(0x0013) MISSED OFFSET
	unsigned char                                      bHandleDesiredRotationWhenIdleInCode : 1;                 // 0x08E4(0x0001)
	unsigned char                                      bChangeRotationBehaviorWhenAiming : 1;                    // 0x08E4(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      bUseSmoothRotationWhenAiming : 1;                         // 0x08E4(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData08[0x3];                                       // 0x08E5(0x0003) MISSED OFFSET
	struct FRotator                                    RotationRateWhenAiming;                                   // 0x08E8(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData09[0x4];                                       // 0x08F4(0x0004) MISSED OFFSET
	struct FRuntimeFloatCurve                          RotationRateVsAbsStrafeAngle;                             // 0x08F8(0x0080) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData10[0xC];                                       // 0x0978(0x000C) MISSED OFFSET
	float                                              Moving180PivotDetection_MaxDeviationFromLine;             // 0x0984(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Moving180PivotDetection_DeadZone;                         // 0x0988(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Moving180PivotDetection_MaxRewindTime;                    // 0x098C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DeepWaterThresholdDepth;                                  // 0x0990(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData11[0x44];                                      // 0x0994(0x0044) MISSED OFFSET
	struct FBendTapRequestDetector                     TurnInPlaceTapRequestDetector;                            // 0x09D8(0x0010) (Edit)
	unsigned char                                      UnknownData12[0x388];                                     // 0x09E8(0x0388) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendCharacterMovementComponent");
		return ptr;
	}


	bool WantsToTransitionMoveToTurn_RegardlessCanEarlyOutCurrentTurn();
	bool WantsToTransitionMoveToTurn();
	bool WantsToTransitionMoveToIdle_OLD();
	bool WantsToTransitionMoveToIdle_NEW(float DesiredMoveToStopThreshold);
	bool WantsToTransitionIdleToTurn_RegardlessCanEarlyOutCurrentTurn();
	bool WantsToTransitionIdleToTurn();
	bool WantsToTransitionIdleToMove();
	void UpdateTurnStatus();
	void UpdateCanEarlyOutAnyTurnInProgress();
	void UnregisterProceduralRotationSuppression_ByName(const struct FName& Name);
	void UnregisterProceduralRotationSuppression();
	void SetUpTurnToIdleAnchors(const struct FName& StartAnchor, const struct FName& EndAnchor);
	void SetUpTurnAnchors_OLD(TEnumAsByte<EBendCharacterTurnType> TurnType);
	void SetUpTurnAnchors_NEW(const struct FName& StartAnchor, const struct FName& EndAnchor);
	void SetUpMoveToIdleAnchors(const struct FName& StartAnchor, const struct FName& EndAnchor);
	void SetCollisionShape(TEnumAsByte<EBendCharacterCollisionShapeId> ShapeId);
	void SetAllowNavWalking(bool bInAllowNavWalking);
	void SetAllowDisableProceduralRotationIfAiming(bool bNewBehavior);
	void RevertToDefaultCollisionShape();
	void RegisterProceduralRotationSuppression_ByName(const struct FName& Name);
	void RegisterProceduralRotationSuppression();
	void OnTurnStart(TEnumAsByte<EBendCharacterTurnType> TurnType);
	void OnTurnEnd(TEnumAsByte<EBendCharacterTurnType> TurnType);
	void OnGroundMove_Left();
	void OnGroundMove_Entered();
	void OnGroundIdle_Left();
	void OnGroundIdle_Entered();
	void OnAnchoredTurnStart(TEnumAsByte<EBendCharacterTurnType> TurnType);
	void OnAnchoredTurnEnd(TEnumAsByte<EBendCharacterTurnType> TurnType);
	bool IsWalkingOrNavWalking();
	bool IsTurnInPlaceTapRequestPotentiallyInProgress();
	void InterpSmoothedMoveSpeedForAnimationSelectionAndScaling(float OldSmoothedSpeed, float DeltaTime, float InterpRateRampingUp, float InterpRateRampingDown, bool bIgnoreVerticalSpeedWhenNotUsingRootMotion, float* NewSmoothedSpeed, float* NewSpeed);
	bool HasTurnInPlaceTapRequest();
	float GetTurnToIdleAngle();
	float GetTurnAngleSnapped(TEnumAsByte<EBendCharacterTurnType> TurnType);
	float GetRotationalVelocityYaw();
	float GetRotationalVelocityPitch();
	float GetMoveSpeedForAnimationSelectionAndScaling(bool bIgnoreVerticalSpeedWhenNotUsingRootMotion);
	struct FVector GetFloorWaterLocation();
	float GetFloorWaterDepth();
	float GetDesiredVerticalTurnAngleAsFloat();
	float GetDesiredTurnAngleSnappedAsFloat(TEnumAsByte<EBendCharacterTurnType> TurnType);
	TEnumAsByte<EBendCharacterTurnAngleSnapped> GetDesiredTurnAngleSnappedAsEnum(TEnumAsByte<EBendCharacterTurnType> TurnType);
	float GetDesiredTurnAngleAsFloat();
	bool GetAllowNavWalking();
	void EnableSuspendPhysicsWhenOutOfBounds(bool bEnableSuspend);
	void EnableProceduralRotation(bool bEnable);
	void ConsumeTurnInPlaceTap();
	void ClearDesiredRotationWhenIdle();
	bool CanEnableMoveToIdleAnchor();
	bool CanEarlyOutAnyTurnInProgress();
	struct FTransform CalcCharacterStartingAnchorTransform();
	struct FTransform CalcCharacterDesiredRotationAnchorTransform();
};


// Class BendGame.BendClimbingSurfaceCharacterMovementComponent
// 0x0150 (0x0EC0 - 0x0D70)
class UBendClimbingSurfaceCharacterMovementComponent : public UBendCharacterMovementComponent
{
public:
	float                                              ClimbingSurfaceFriction;                                  // 0x0D70(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BrakingDecelerationClimbingSurface;                       // 0x0D74(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FFindClimbingSurfaceResult                  CurrentClimbingSurface;                                   // 0x0D78(0x0098) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst)
	TEnumAsByte<EBendClimbFeature>                     FoundClimbFeature;                                        // 0x0E10(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xF];                                       // 0x0E11(0x000F) MISSED OFFSET
	struct FTransform                                  FoundClimbFeatureAnchorTransform;                         // 0x0E20(0x0030) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	unsigned char                                      bNextWaterTooDeep : 1;                                    // 0x0E50(0x0001) (BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0E51(0x0003) MISSED OFFSET
	float                                              MaxWaterDepth;                                            // 0x0E54(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              WaterLookAheadDistance;                                   // 0x0E58(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x64];                                      // 0x0E5C(0x0064) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendClimbingSurfaceCharacterMovementComponent");
		return ptr;
	}


	void SetClimbingSurfaceDestination(const struct FVector& Destination, const struct FVector& StartPoint);
	bool IsClimbingSurface();
	void ClearClimbingSurfaceDestination();
	void AllowClimbingSurface(bool bAllow);
};


// Class BendGame.BendAnimalMovementComponent
// 0x0050 (0x0F10 - 0x0EC0)
class UBendAnimalMovementComponent : public UBendClimbingSurfaceCharacterMovementComponent
{
public:
	float                                              MaxFlyingPitchAngle;                                      // 0x0EC0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bUseMaxFlyingPitchAngle;                                  // 0x0EC4(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0EC5(0x0003) MISSED OFFSET
	struct FRotator                                    DeltaAnglesForMaxRotation;                                // 0x0EC8(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUpdateSlopeAngle;                                        // 0x0ED4(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0ED5(0x0003) MISSED OFFSET
	float                                              GroundProbeForwardDistance;                               // 0x0ED8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              GroundProbeBackDistance;                                  // 0x0EDC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              GroundProbeZDistance;                                     // 0x0EE0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bSlowDownForSmartLink;                                    // 0x0EE4(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bStopUntilJump;                                           // 0x0EE5(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x2];                                       // 0x0EE6(0x0002) MISSED OFFSET
	struct FVector                                     SmartLinkStart;                                           // 0x0EE8(0x000C) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData03[0x1C];                                      // 0x0EF4(0x001C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAnimalMovementComponent");
		return ptr;
	}


	float GetSlopeAngle();
	struct FVector GetFutureVelocity();
};


// Class BendGame.BendCheatManager
// 0x0000 (0x0078 - 0x0078)
class UBendCheatManager : public UCheatManager
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendCheatManager");
		return ptr;
	}

};


// Class BendGame.BendCinematicControls
// 0x0010 (0x0358 - 0x0348)
class ABendCinematicControls : public AActor
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0348(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendCinematicControls");
		return ptr;
	}


	struct FVector2D GetMovementInputVector();
	struct FVector2D GetCameraInputVector();
};


// Class BendGame.BendCinLightRigBase
// 0x0088 (0x03D0 - 0x0348)
class ABendCinLightRigBase : public ABendLightRigBase
{
public:
	TArray<class AActor*>                              LightLinkedCharacters;                                    // 0x0348(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FName                                       ParentCharBoneName;                                       // 0x0358(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class AActor*                                      ParentChar;                                               // 0x0360(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               MatchParentMaterialAssignments;                           // 0x0368(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0369(0x0007) MISSED OFFSET
	class ACameraActor*                                CachedActiveCameraRef;                                    // 0x0370(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<struct FCinCinematicOverride>               TurnOffDuringTheseCinematics;                             // 0x0378(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<class ACameraActor*>                        LinkedCameras;                                            // 0x0388(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	bool                                               RigDisabledForCinematic;                                  // 0x0398(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0399(0x0003) MISSED OFFSET
	TWeakObjectPtr<class ACameraActor>                 ActiveCamera;                                             // 0x039C(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0xC];                                       // 0x03A4(0x000C) MISSED OFFSET
	TArray<class AActor*>                              CamActorsInLevel;                                         // 0x03B0(0x0010) (ZeroConstructor)
	TWeakObjectPtr<class APlayerCameraManager>         CameraManager;                                            // 0x03C0(0x0008) (ZeroConstructor, IsPlainOldData)
	bool                                               EditorInitialSetup;                                       // 0x03C8(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData03[0x7];                                       // 0x03C9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendCinLightRigBase");
		return ptr;
	}


	bool UpdateRigPresetStatus();
	void TurnOnPostCinematicEvent(const struct FName& CinematicName);
	void TurnOffPreCinematicEvent(const struct FName& CinematicName);
	void LinkedCameraStateChanged(class ACameraActor* DisabledCamera, class ACameraActor* EnabledCamera);
	void InitializeForEditor();
	class ACameraActor* GetActiveCamera();
	void CheckEditorInitialSetup();
	void CameraStateChangedCheck(class ACameraActor* DisabledCamActor, class ACameraActor* EnabledCamActor);
};


// Class BendGame.BendBikeSpotLightRig
// 0x0100 (0x04D0 - 0x03D0)
class ABendBikeSpotLightRig : public ABendCinLightRigBase
{
public:
	class USpotLightComponent*                         HeadlightSpot;                                            // 0x03D0(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	TArray<struct FBikeSpotSettings>                   SpotLightSettings;                                        // 0x03D8(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FBikeEmissiveSettings>               EmissiveHeadlightSettings;                                // 0x03E8(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FBikeTaillightEmissiveSettings>      EmissiveSidelightSettings;                                // 0x03F8(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FBikeTaillightEmissiveSettings>      EmissiveTaillightSettings;                                // 0x0408(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FBikeVolumetricSettings>             VolumeSettings;                                           // 0x0418(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FBikeHeadlightOffset>                HeadlightOffsets;                                         // 0x0428(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FBikeTaillightOffset>                SidelightOffsets;                                         // 0x0438(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FBikeTaillightOffset>                TaillightOffsets;                                         // 0x0448(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	class UStaticMeshComponent*                        VolumeticShape;                                           // 0x0458(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UStaticMeshComponent*                        CenterVolumetricShape;                                    // 0x0460(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	float                                              HeadLightMultiplier;                                      // 0x0468(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TailLightMultiplier;                                      // 0x046C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x38];                                      // 0x0470(0x0038) MISSED OFFSET
	class UMaterialInstanceDynamic*                    HeadLightDynMaterial;                                     // 0x04A8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UMaterialInstanceDynamic*                    SideLightDynMaterial;                                     // 0x04B0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UMaterialInstanceDynamic*                    TailLightDynMaterial;                                     // 0x04B8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UMaterialInstanceDynamic*                    VolumeDynMaterial;                                        // 0x04C0(0x0008) (ZeroConstructor, IsPlainOldData)
	class UMaterialInstanceDynamic*                    CenterVolumeDynMaterial;                                  // 0x04C8(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBikeSpotLightRig");
		return ptr;
	}


	void CheckForParentingPreset();
	void CameraChangeUpdate(class ACameraActor* CurrentCamera);
};


// Class BendGame.BendCinEmergencyLightRig
// 0x0048 (0x0418 - 0x03D0)
class ABendCinEmergencyLightRig : public ABendCinLightRigBase
{
public:
	TEnumAsByte<EEmergencyLightPresets>                RigPreset;                                                // 0x03D0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x03D1(0x0007) MISSED OFFSET
	class USceneComponent*                             RotSceneComp;                                             // 0x03D8(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UFlickeringSpotLightComponent*               FlickerSpot1;                                             // 0x03E0(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UFlickeringSpotLightComponent*               FlickerSpot2;                                             // 0x03E8(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	float                                              RotationRate;                                             // 0x03F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     RotationAxis;                                             // 0x03F4(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<struct FEmergencyLightSettings>             RigSettings;                                              // 0x0400(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0410(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendCinEmergencyLightRig");
		return ptr;
	}


	void UpdateRig(float DeltaSeconds);
};


// Class BendGame.BendCinFlickeringLightRig
// 0x0040 (0x0410 - 0x03D0)
class ABendCinFlickeringLightRig : public ABendCinLightRigBase
{
public:
	TEnumAsByte<ECinFlickeringLightPresets>            RigPreset;                                                // 0x03D0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x03D1(0x0007) MISSED OFFSET
	class USceneComponent*                             RotSceneComp;                                             // 0x03D8(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UFlickeringSpotLightComponent*               FlickerSpot1;                                             // 0x03E0(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	float                                              RotationRate;                                             // 0x03E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     RotationAxis;                                             // 0x03EC(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<struct FCinFlickeringLightSettings>         RigSettings;                                              // 0x03F8(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0408(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendCinFlickeringLightRig");
		return ptr;
	}


	void UpdateRig(float DeltaSeconds);
	void SetActorHiddenInGame(bool bNewHidden);
	void CameraStateChangedCheck(class ACameraActor* DisabledCamActor, class ACameraActor* EnabledCamActor);
};


// Class BendGame.BendCinSlaveLightRig
// 0x0020 (0x03F0 - 0x03D0)
class ABendCinSlaveLightRig : public ABendCinLightRigBase
{
public:
	class USpotLightComponent*                         KeySpotLightComponent;                                    // 0x03D0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class USpotLightComponent*                         FillSpotLightComponent;                                   // 0x03D8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class USpotLightComponent*                         RimSpotLightComponent;                                    // 0x03E0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class USpotLightComponent*                         AuxSpotLightComponent;                                    // 0x03E8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendCinSlaveLightRig");
		return ptr;
	}

};


// Class BendGame.BendCinSpotLightRig
// 0x0008 (0x03D8 - 0x03D0)
class ABendCinSpotLightRig : public ABendCinLightRigBase
{
public:
	class USpotLightComponent*                         SpotLightComponent;                                       // 0x03D0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendCinSpotLightRig");
		return ptr;
	}

};


// Class BendGame.BendCinTripleFlickeringLightRig
// 0x0050 (0x0420 - 0x03D0)
class ABendCinTripleFlickeringLightRig : public ABendCinLightRigBase
{
public:
	TEnumAsByte<ECinFlickeringLightPresets>            RigPreset;                                                // 0x03D0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x03D1(0x0007) MISSED OFFSET
	class USceneComponent*                             RotSceneComp;                                             // 0x03D8(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UFlickeringSpotLightComponent*               FlickerSpot1;                                             // 0x03E0(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UFlickeringSpotLightComponent*               FlickerSpot2;                                             // 0x03E8(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UFlickeringSpotLightComponent*               FlickerSpot3;                                             // 0x03F0(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	float                                              RotationRate;                                             // 0x03F8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     RotationAxis;                                             // 0x03FC(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<struct FCinFlickeringLightSettings>         RigSettings;                                              // 0x0408(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0418(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendCinTripleFlickeringLightRig");
		return ptr;
	}


	void UpdateRig(float DeltaSeconds);
	void SetActorHiddenInGame(bool bNewHidden);
	void CameraStateChangedCheck(class ACameraActor* DisabledCamActor, class ACameraActor* EnabledCamActor);
};


// Class BendGame.BendDumpTruckLightRig
// 0x0148 (0x0518 - 0x03D0)
class ABendDumpTruckLightRig : public ABendCinLightRigBase
{
public:
	TArray<struct FDumpTruckSettings>                  TruckSettings;                                            // 0x03D0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	class USpotLightComponent*                         HeadlightLeftSpot;                                        // 0x03E0(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class USpotLightComponent*                         HeadlightRightSpot;                                       // 0x03E8(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UPointLightComponent*                        HeadlightLeftPoint;                                       // 0x03F0(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UPointLightComponent*                        HeadlightRightPoint;                                      // 0x03F8(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	TArray<struct FDumpTruckSpotSettings>              HeadLightSettings;                                        // 0x0400(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FDumpTruckSpotSettings>              HeadLightBNCLightSettings;                                // 0x0410(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	class UPointLightComponent*                        TailLightLeftInnerPoint;                                  // 0x0420(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UPointLightComponent*                        TailLightLeftOuterPoint;                                  // 0x0428(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UPointLightComponent*                        TailLightRightInnerPoint;                                 // 0x0430(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UPointLightComponent*                        TailLightRightOuterPoint;                                 // 0x0438(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UStaticMeshComponent*                        HeadLightVolumeLeft;                                      // 0x0440(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UStaticMeshComponent*                        HeadLightVolumeRight;                                     // 0x0448(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	TArray<struct FDumpTruckSpotSettings>              TailLightSettings;                                        // 0x0450(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FDumpTruckEmissiveSettings>          HeadLightEmissive;                                        // 0x0460(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FDumpTruckEmissiveSettings>          OverHeadLightEmissive;                                    // 0x0470(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FDumpTruckEmissiveSettings>          TailLightEmissive;                                        // 0x0480(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FDumpTruckEmissiveSettings>          DashboardEmissive;                                        // 0x0490(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FDumpTruckVolSettings>               VolumeEmissive;                                           // 0x04A0(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	float                                              HeadLightMultiplier;                                      // 0x04B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              OverheadLightMultiplier;                                  // 0x04B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TailLightMultiplier;                                      // 0x04B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DashboardMultiplier;                                      // 0x04BC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UMaterialInstanceDynamic*                    HeadLightDynMaterial;                                     // 0x04C0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UMaterialInstanceDynamic*                    OverHeadLightDynMaterial;                                 // 0x04C8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UMaterialInstanceDynamic*                    TailLightDynMaterial;                                     // 0x04D0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UMaterialInstanceDynamic*                    DashboardDynMaterial;                                     // 0x04D8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UMaterialInstanceDynamic*                    VolumeLeftDynMaterial;                                    // 0x04E0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UMaterialInstanceDynamic*                    VolumeRightDynMaterial;                                   // 0x04E8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x28];                                      // 0x04F0(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendDumpTruckLightRig");
		return ptr;
	}


	void UpdateVolEmissiveHelper(TArray<struct FDumpTruckVolSettings> TruckEmissive, class UMaterialInstanceDynamic* CurMat, class ACameraActor* CurrentCamera, float emissiveMult);
	void UpdateLightHelper(TArray<struct FDumpTruckSpotSettings> SpotSettings, class UPointLightComponent* CurLight, class ACameraActor* CurrentCamera, float lightMult);
	void UpdateEmissiveHelper(TArray<struct FDumpTruckEmissiveSettings> TruckEmissive, class UMaterialInstanceDynamic* CurMat, class ACameraActor* CurrentCamera, float emissiveMult);
	void CheckForParentingPreset();
	void CameraChangeUpdate(class ACameraActor* CurrentCamera);
};


// Class BendGame.BendHelicopterBaseRig
// 0x0240 (0x0610 - 0x03D0)
class ABendHelicopterBaseRig : public ABendCinLightRigBase
{
public:
	TArray<struct FHelicopterSettings>                 HelicopterSettings;                                       // 0x03D0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FHelicopterSpotSettings>             SpotLightSettings;                                        // 0x03E0(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FHelicopterVolumetricSettings>       VolumeSettings;                                           // 0x03F0(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FHelicopterPointEmissiveSettings>    SideLightSettings;                                        // 0x0400(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FHelicopterPointEmissiveSettings>    TailLightSettings;                                        // 0x0410(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FHelicopterOverheadSpotSettings>     OverheadSpotSettings;                                     // 0x0420(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	class USpotLightComponent*                         HeadlightSpot;                                            // 0x0430(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UPointLightComponent*                        HeadlightPoint;                                           // 0x0438(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UStaticMeshComponent*                        VolumetricShape;                                          // 0x0440(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UStaticMeshComponent*                        CenterVolumetricShape;                                    // 0x0448(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UStaticMeshComponent*                        SideGeoSMLeft;                                            // 0x0450(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UStaticMeshComponent*                        SideGeoSMRight;                                           // 0x0458(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UPointLightComponent*                        SidePointLeft;                                            // 0x0460(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UPointLightComponent*                        SidePointRight;                                           // 0x0468(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UStaticMeshComponent*                        TailGeoSMLeft;                                            // 0x0470(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UStaticMeshComponent*                        TailGeoSMRight;                                           // 0x0478(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UPointLightComponent*                        TailPointLeft;                                            // 0x0480(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UPointLightComponent*                        TailPointRight;                                           // 0x0488(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class USpotLightComponent*                         OverheadSpot;                                             // 0x0490(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	float                                              RigMultiplier;                                            // 0x0498(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x049C(0x0004) MISSED OFFSET
	struct FBendRuntimeFloatCurve                      OverheadLightFlicker;                                     // 0x04A0(0x0088) (Edit)
	struct FBendRuntimeFloatCurve                      TailLightFlicker;                                         // 0x0528(0x0088) (Edit)
	unsigned char                                      UnknownData01[0x30];                                      // 0x05B0(0x0030) MISSED OFFSET
	class UMaterialInstanceDynamic*                    SideLightDynMaterialLeft;                                 // 0x05E0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UMaterialInstanceDynamic*                    SideLightDynMaterialRight;                                // 0x05E8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UMaterialInstanceDynamic*                    TailLightDynMaterialLeft;                                 // 0x05F0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UMaterialInstanceDynamic*                    TailLightDynMaterialRight;                                // 0x05F8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UMaterialInstanceDynamic*                    VolumeDynMaterial;                                        // 0x0600(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UMaterialInstanceDynamic*                    CenterVolumeDynMaterial;                                  // 0x0608(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendHelicopterBaseRig");
		return ptr;
	}


	void UpdateFlickeringCamera(float DeltaSeconds, class ACameraActor* CurrentCamera);
	void CheckForParentingPreset(class USkeletalMeshComponent* SkelMeshComp, bool AttachToSkeleton);
	void CameraChangeUpdate(class ACameraActor* CurrentCamera);
};


// Class BendGame.BendHelicopterEmbeddedLightRig
// 0x00D0 (0x06E0 - 0x0610)
class ABendHelicopterEmbeddedLightRig : public ABendHelicopterBaseRig
{
public:
	bool                                               FrontLightsOn;                                            // 0x0610(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               InteriorLightsOn;                                         // 0x0611(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               SideLightsOn;                                             // 0x0612(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               AnimatedSpotLightAttachment;                              // 0x0613(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0614(0x0004) MISSED OFFSET
	struct FBendRuntimeFloatCurve                      BladeStartupCurve;                                        // 0x0618(0x0088) (Edit)
	int                                                HelicopterBladeMaterialIndex1;                            // 0x06A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                HelicopterBladeMaterialIndex2;                            // 0x06A4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       BladeMaterialDynMaterialName;                             // 0x06A8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class USpotLightComponent*                         InteriorlightSpot;                                        // 0x06B0(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	struct FName                                       SearchLightJointName;                                     // 0x06B8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x06C0(0x0008) MISSED OFFSET
	class UMaterialInstanceDynamic*                    HelicopterBlades1DynMaterial;                             // 0x06C8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UMaterialInstanceDynamic*                    HelicopterBlades2DynMaterial;                             // 0x06D0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x06D8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendHelicopterEmbeddedLightRig");
		return ptr;
	}


	void UpdateLightsEnabledStatus();
	void UpdateFlickering(float DeltaSeconds);
	void UpdateBlades(float DeltaSeconds);
	void SetupReferences(class USkeletalMeshComponent* SkelMeshComp, class USpotLightComponent* HLSpot, class UPointLightComponent* HLPoint, class UStaticMeshComponent* VolShape, class UStaticMeshComponent* CenterVolShape, class UStaticMeshComponent* SideGeoLeft, class UStaticMeshComponent* SideGeoRight, class UPointLightComponent* SidePointLightLeft, class UPointLightComponent* SidePointLightRight, class UStaticMeshComponent* TailGeoLeft, class UStaticMeshComponent* TailGeoRight, class UPointLightComponent* TailPointLightLeft, class UPointLightComponent* TailPointLightRight, class USpotLightComponent* OverheadLight, class USpotLightComponent* InteriorLight);
	void ResetBlades(bool BladesHoldingStill);
	void CheckForParentingPreset(class USkeletalMeshComponent* SkelMeshComp, bool AttachToSkeleton);
};


// Class BendGame.BendHelicopterLightRig
// 0x0000 (0x0610 - 0x0610)
class ABendHelicopterLightRig : public ABendHelicopterBaseRig
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendHelicopterLightRig");
		return ptr;
	}

};


// Class BendGame.BendClimbStateData
// 0x0018 (0x0040 - 0x0028)
class UBendClimbStateData : public UBendClimbStateDataBase
{
public:
	bool                                               OverrideDynamicClimb;                                     // 0x0028(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0029(0x0007) MISSED OFFSET
	TArray<struct FBendGenericAnimData>                ClimbAnimSequences;                                       // 0x0030(0x0010) (Edit, BlueprintVisible, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendClimbStateData");
		return ptr;
	}

};


// Class BendGame.BendClothFXType
// 0x0018 (0x0360 - 0x0348)
class ABendClothFXType : public AActor
{
public:
	TEnumAsByte<EeClothFXType>                         TypeOfClothFX;                                            // 0x0348(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0349(0x0007) MISSED OFFSET
	TArray<struct FClothFXTypeData>                    ClothFXTypes;                                             // 0x0350(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendClothFXType");
		return ptr;
	}


	class USoundCue* STATIC_BendGetClothFXSoundCue(TEnumAsByte<EeClothFXType> ClothFXType, const struct FName& FXName);
};


// Class BendGame.BendCommunicationComponent
// 0x0050 (0x0120 - 0x00D0)
class UBendCommunicationComponent : public UActorComponent
{
public:
	struct FScriptMulticastDelegate                    InvestigationReceived;                                    // 0x00D0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               bIsInvestigationRequester;                                // 0x00E0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bIsInvestigationAgent;                                    // 0x00E1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x16];                                      // 0x00E2(0x0016) MISSED OFFSET
	struct FScriptMulticastDelegate                    AwarenessReceived;                                        // 0x00F8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               bIsAwarenessHub;                                          // 0x0108(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bIsAwarenessEmitter;                                      // 0x0109(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bIsAwarenessListener;                                     // 0x010A(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x15];                                      // 0x010B(0x0015) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendCommunicationComponent");
		return ptr;
	}


	void UnregisterInvestigator(class UBendCommunicationComponent* InvestigatorComponent);
	void UnregisterAwarenessListener(class UBendCommunicationComponent* ListenerComponent);
	void ShareAwareness(class UBendAwarenessCommunication* AwarenessCommunication);
	void RequestInvestigation(class UBendInvestigationCommunication* InvestigationCommunication);
	void RegisterInvestigator(class UBendCommunicationComponent* InvestigatorComponent);
	void RegisterAwarenessListener(class UBendCommunicationComponent* ListenerComponent);
	void OnInvestigationRequested(class UBendInvestigationCommunication* InvestigationCommunication);
	void OnInvestigationRequestDone(class UBendInvestigationCommunication* InvestigationCommunication);
	void OnAwarenessRequested(class UBendAwarenessCommunication* AwarenessCommunication);
};


// Class BendGame.BendCommunicationComponentHelpers
// 0x0000 (0x0028 - 0x0028)
class UBendCommunicationComponentHelpers : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendCommunicationComponentHelpers");
		return ptr;
	}


	void STATIC_StopInvestigationGroup(TArray<class AController*> InvestigationMembers);
	void STATIC_StopAwarenessGroup(TArray<class AController*> AwarenessMembers);
	void STATIC_StartInvestigationGroup(TArray<class AController*> InvestigationMembers);
	void STATIC_StartAwarenessGroup(TArray<class AController*> AwarenessMembers);
};


// Class BendGame.BendConditionsObject
// 0x0020 (0x0048 - 0x0028)
class UBendConditionsObject : public UObject
{
public:
	TArray<TAssetPtr<class UClass>>                    UseConditions;                                            // 0x0028(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<struct FBendInfluenceCondition>             InfluenceConditions;                                      // 0x0038(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendConditionsObject");
		return ptr;
	}


	bool TestUseConditions(bool bResetConditions);
	float TestInfluenceConditions(bool bResetConditions);
	void AddUseCondition(TAssetPtr<class UClass> BendUseCondition);
};


// Class BendGame.BendConflictTracker
// 0x00D8 (0x0100 - 0x0028)
class UBendConflictTracker : public UObject
{
public:
	struct FScriptMulticastDelegate                    OnConflictEscalation;                                     // 0x0028(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnConflictEscalationPullPawn;                             // 0x0038(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	float                                              IntensityValue[0x6];                                      // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MinRadius;                                                // 0x0060(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxRadius;                                                // 0x0064(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CoolDownTime;                                             // 0x0068(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              IntensityToRadius;                                        // 0x006C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              IntensityDecPerSec;                                       // 0x0070(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DeadzoneDuration;                                         // 0x0074(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              IntensityRequired;                                        // 0x0078(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DeadzoneRadius;                                           // 0x007C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinTimeBetweenEscalations;                                // 0x0080(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                MaxPlayerEnemiesAware;                                    // 0x0084(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                MaxPlayerEnemiesAlive;                                    // 0x0088(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DeadzoneDuration_Night;                                   // 0x008C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              IntensityRequired_Night;                                  // 0x0090(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DeadzoneRadius_Night;                                     // 0x0094(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinTimeBetweenEscalations_Night;                          // 0x0098(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                MaxPlayerEnemiesAware_Night;                              // 0x009C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                MaxPlayerEnemiesAlive_Night;                              // 0x00A0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x5C];                                      // 0x00A4(0x005C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendConflictTracker");
		return ptr;
	}


	bool IsLocationInConflictDeadzone(const struct FVector& Location);
	float GetIntensityAtLocation(const struct FVector& Location);
	void AllowConflictEscalation(bool isAllowed);
	void AddConflictEventCustom(float customIntensity, const struct FVector& Location);
	void AddConflictEvent(TEnumAsByte<EeConflictEventType> eventType, const struct FVector& Location);
};


// Class BendGame.BendConversation
// 0x0130 (0x0478 - 0x0348)
class ABendConversation : public AActor
{
public:
	class USoundClass*                                 mpSoundClass;                                             // 0x0348(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<struct FConversationLineArray>              mConversations;                                           // 0x0350(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FConversationLineIDAndIndex>         mConversationData;                                        // 0x0360(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FScriptMulticastDelegate                    ConversationStarted;                                      // 0x0370(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ConversationStopped;                                      // 0x0380(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ConversationPaused;                                       // 0x0390(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ConversationResumed;                                      // 0x03A0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ConversationComplete;                                     // 0x03B0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData00[0x10];                                      // 0x03C0(0x0010) MISSED OFFSET
	int                                                mConversationID;                                          // 0x03D0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                mConversationIndex;                                       // 0x03D4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                mTmpConversationIndex;                                    // 0x03D8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                mStringLength;                                            // 0x03DC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<struct FVocalConversationData>              mConversationToPlay;                                      // 0x03E0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FVocalConversationData                      mTempConvoData;                                           // 0x03F0(0x0050) (Edit, DisableEditOnInstance)
	class ABendPawn*                                   mpSpeaker;                                                // 0x0440(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<class ABendPawn*>                           mpSpeakers;                                               // 0x0448(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FString>                             mSpeakerNames;                                            // 0x0458(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<int>                                        mCurrentConversationIDs;                                  // 0x0468(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendConversation");
		return ptr;
	}


	void UpdateConversationData();
	void StopConversations();
	void StopConversation(int ConversationID);
	class ABendPawn* SetSpeaker(const struct FName& SoundID, bool ManualOrdering, int SpeakingPosition);
	void ResumeConversation(int ConversationID);
	void PlayConverAtIndex(int aIndex, class USoundClass* aSoundClass, TArray<class ABendPawn*> aSpeakers, float aMaxPauseBetweenLines, float aMinPauseBetweenLines, int aNumSecondsAllowedRepeat, bool aStopPreviousConversation, bool aLoopConversation, bool aShouldDuckSounds, bool aShouldUnduckSounds, float aPriority, float aMaxWaitTimeInQueue, bool aUseInterruptSystem, bool aCheckThreatsBeforePlaying, bool aCheckThreatsBeforeResuming, bool aInterruptWhenShooting, bool aInterruptWhenMeleeing, bool aPlayResumeVO, bool aStopIfInterrupted);
	void PauseConversation(int ConversationID);
	void HandleConversationComplete(class ABendPawn* PawnSpeaking, const struct FName& SoundName, int ConversationID, TEnumAsByte<EDonePlayVocalReason> SuccessOrFail);
	int GetConversationID();
	void ClearConversationIDs();
	void CallConversationStarted(int ConversationID, int conversationIndex);
	void CallConversationComplete(class ABendPawn* PawnSpeaking, const struct FName& SoundName, int conversationIndex, int ConversationID);
};


// Class BendGame.BendDynamicConversationCharacter
// 0x0018 (0x0040 - 0x0028)
class UBendDynamicConversationCharacter : public UObject
{
public:
	TArray<class UBendDynamicConversationRole*>        Roles;                                                    // 0x0028(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst)
	bool                                               bIsOptional;                                              // 0x0038(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0039(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendDynamicConversationCharacter");
		return ptr;
	}


	class UBendDynamicConversationCharacter* STATIC_CreateBendDynamicConversationCharacterSingleRole(class UBendDynamicConversationRole* Role, bool bIsOptional);
	class UBendDynamicConversationCharacter* STATIC_CreateBendDynamicConversationCharacter(TArray<class UBendDynamicConversationRole*> Roles, bool bIsOptional);
};


// Class BendGame.BendDynamicConversation
// 0x00A0 (0x00C8 - 0x0028)
class UBendDynamicConversation : public UObject
{
public:
	struct FBendDynamicConversationParameters          Parameters;                                               // 0x0028(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)
	TArray<struct FVocalConversationData>              ConversationData;                                         // 0x0040(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst)
	int                                                ConversationUID;                                          // 0x0050(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	TEnumAsByte<EAIAwareState>                         RequesterAwareness;                                       // 0x0054(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0055(0x0003) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnConversationStartedDelegate;                            // 0x0058(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnConversationStoppedDelegate;                            // 0x0068(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData01[0x50];                                      // 0x0078(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendDynamicConversation");
		return ptr;
	}


	void StopConversation(class UBendDynamicConversationComponent* Component);
	bool StartConversation(class UBendDynamicConversationComponent* Component);
	void OnConversationStopped(class ABendPawn* PawnSpeaking, const struct FName& SoundName, int ConversationID, TEnumAsByte<EDonePlayVocalReason> SuccessOrFail);
	class UBendDynamicConversation* STATIC_CreateBendDynamicConversation(const struct FBendDynamicConversationParameters& Parameters);
	bool ApplyForAnyCharacter(class UBendDynamicConversationComponent* Candidate);
};


// Class BendGame.BendDynamicConversationGroup
// 0x0010 (0x0038 - 0x0028)
class UBendDynamicConversationGroup : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0028(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendDynamicConversationGroup");
		return ptr;
	}

};


// Class BendGame.BendDynamicConversationComponent
// 0x0020 (0x00F0 - 0x00D0)
class UBendDynamicConversationComponent : public UActorComponent
{
public:
	class UBendDynamicConversationRole*                Role;                                                     // 0x00D0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FScriptMulticastDelegate                    ApplyDelegate;                                            // 0x00D8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class UBendDynamicConversationGroup*               DynamicConversationGroup;                                 // 0x00E8(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendDynamicConversationComponent");
		return ptr;
	}


	void OnApply(class UBendDynamicConversationComponent* Requester, class UBendDynamicConversation* DynamicConversation);
	void LeaveGroup();
	void JoinGroup(class UBendDynamicConversationGroup* DynamicConversationGroup);
	class UBendDynamicConversationGroup* GetGroup();
};


// Class BendGame.BendDynamicConversationComponentHelpers
// 0x0000 (0x0028 - 0x0028)
class UBendDynamicConversationComponentHelpers : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendDynamicConversationComponentHelpers");
		return ptr;
	}


	class UBendDynamicConversation* STATIC_StartDynamicConversation(class AActor* Requester, class UClass* ConversationDataClass);
};


// Class BendGame.BendConversationDataBase
// 0x0000 (0x0028 - 0x0028)
class UBendConversationDataBase : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendConversationDataBase");
		return ptr;
	}


	void Generate(struct FBendDynamicConversationParameters* Output);
};


// Class BendGame.BendCorpse
// 0x0018 (0x0360 - 0x0348)
class ABendCorpse : public AActor
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0348(0x0010) MISSED OFFSET
	class UBendCharacterSkeletalMeshComponent*         SkeletalMeshComp;                                         // 0x0358(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendCorpse");
		return ptr;
	}

};


// Class BendGame.BendSectorSaveData
// 0x0220 (0x0568 - 0x0348)
class ABendSectorSaveData : public AActor
{
public:
	struct FBox                                        EffectiveBounds;                                          // 0x0348(0x001C) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0364(0x0004) MISSED OFFSET
	struct FName                                       OwningLevelDebugName;                                     // 0x0368(0x0008) (ZeroConstructor, SaveGame, IsPlainOldData)
	struct FBoxSphereBounds                            SavedBounds;                                              // 0x0370(0x001C) (ZeroConstructor, SaveGame, IsPlainOldData)
	bool                                               HasBeenRegistered;                                        // 0x038C(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0xF3];                                      // 0x038D(0x00F3) MISSED OFFSET
	TArray<class ABendCorpse*>                         SpawnedCorpses;                                           // 0x0480(0x0010) (ZeroConstructor)
	TArray<int>                                        SearchBodyCorpseIDs;                                      // 0x0490(0x0010) (ZeroConstructor, SaveGame)
	TArray<int>                                        SearchBodyMeshSwapIndices;                                // 0x04A0(0x0010) (ZeroConstructor, SaveGame)
	TArray<class ABendTrap*>                           SpawnedTraps;                                             // 0x04B0(0x0010) (ZeroConstructor)
	TArray<class UBendSkeletalMeshLookBase*>           ReferencedMeshLooks;                                      // 0x04C0(0x0010) (ZeroConstructor)
	TArray<class USkeletalMesh*>                       ReferencedSkeletalMeshes;                                 // 0x04D0(0x0010) (ZeroConstructor)
	TArray<class UClass*>                              ReferencedTrapAssets;                                     // 0x04E0(0x0010) (ZeroConstructor)
	TArray<class UClass*>                              ReferencedSearchBodyAssets;                               // 0x04F0(0x0010) (ZeroConstructor)
	TArray<class UClass*>                              ReferencedBoltAssets;                                     // 0x0500(0x0010) (ZeroConstructor)
	TArray<class UStaticMesh*>                         ReferencedBoltMeshAssets;                                 // 0x0510(0x0010) (ZeroConstructor)
	TArray<class UMaterialInterface*>                  ReferencedBoltMaterialAssets;                             // 0x0520(0x0010) (ZeroConstructor)
	TArray<class AActor*>                              ExistingSearchBodies;                                     // 0x0530(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData02[0x28];                                      // 0x0540(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendSectorSaveData");
		return ptr;
	}

};


// Class BendGame.BendCorpseMeshActor
// 0x00A8 (0x0430 - 0x0388)
class ABendCorpseMeshActor : public ASkeletalMeshActor
{
public:
	class UBendSkeletalMeshLookBase*                   SelectedLook;                                             // 0x0388(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class USkeletalMesh*                               SelectedMesh;                                             // 0x0390(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           SelectedAnimation;                                        // 0x0398(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EAIFactionType>                        Faction;                                                  // 0x03A0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x03A1(0x0007) MISSED OFFSET
	class UBendRegionWeaponData*                       LoadoutData;                                              // 0x03A8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FBendFNameDropdown                          SelectedLoadout;                                          // 0x03B0(0x0018) (Edit)
	unsigned char                                      UnknownData01[0x8];                                       // 0x03C8(0x0008) MISSED OFFSET
	class ABendProjectile*                             LoadedAmmo;                                               // 0x03D0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x03D8(0x0008) MISSED OFFSET
	struct FTransform                                  WeaponSpawnLocation;                                      // 0x03E0(0x0030) (Edit, DisableEditOnTemplate, IsPlainOldData)
	class UStaticMeshComponent*                        StaticMeshComponent;                                      // 0x0410(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0418(0x0008) MISSED OFFSET
	bool                                               WeaponTaken;                                              // 0x0420(0x0001) (ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData04[0x3];                                       // 0x0421(0x0003) MISSED OFFSET
	int                                                RemainingAmmo;                                            // 0x0424(0x0004) (ZeroConstructor, SaveGame, IsPlainOldData)
	bool                                               IsGorePile;                                               // 0x0428(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x7];                                       // 0x0429(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendCorpseMeshActor");
		return ptr;
	}


	void SetMeshAndAnimation(class USkeletalMesh* Mesh, class UAnimSequenceBase* Animation);
	void SetLookAndAnimation(class UBendSkeletalMeshLookBase* Look, class UAnimSequenceBase* Animation);
	void OnInventoryPickup(class ABendInventoryPickup* InventoryPickup);
	void FinishedStreaming();
};


// Class BendGame.BendCoverChildComponent
// 0x0010 (0x0240 - 0x0230)
class UBendCoverChildComponent : public UChildActorComponent
{
public:
	class ABendBaseCoverObject*                        CoverObject;                                              // 0x0230(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0238(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendCoverChildComponent");
		return ptr;
	}


	void DisableCoverSlots();
	void AddCoverProxies(TArray<class UBendCoverProxyComponent*> CoverProxies);
};


// Class BendGame.BendCoverComponent
// 0x0010 (0x0610 - 0x0600)
class UBendCoverComponent : public UBoxComponent
{
public:
	uint32_t                                           CoverObjectID;                                            // 0x0600(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	uint32_t                                           CoverGroupID;                                             // 0x0604(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0608(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendCoverComponent");
		return ptr;
	}

};


// Class BendGame.BendCoverProxyComponent
// 0x0000 (0x0700 - 0x0700)
class UBendCoverProxyComponent : public UBendCoverProxyComponentTemplate
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendCoverProxyComponent");
		return ptr;
	}

};


// Class BendGame.BendCoverProxy
// 0x0000 (0x0348 - 0x0348)
class ABendCoverProxy : public ABendCoverProxyTemplate
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendCoverProxy");
		return ptr;
	}

};


// Class BendGame.BendManualCoverProxy
// 0x0000 (0x0348 - 0x0348)
class ABendManualCoverProxy : public ABendCoverProxy
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendManualCoverProxy");
		return ptr;
	}

};


// Class BendGame.BendCrowdAnimInstance
// 0x0000 (0x0590 - 0x0590)
class UBendCrowdAnimInstance : public UAnimSingleNodeInstance
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendCrowdAnimInstance");
		return ptr;
	}

};


// Class BendGame.BendCrowdAnimManager
// 0x00E8 (0x0110 - 0x0028)
class UBendCrowdAnimManager : public UObject
{
public:
	unsigned char                                      UnknownData00[0x98];                                      // 0x0028(0x0098) MISSED OFFSET
	TArray<class UBendCrowdSharedAnimSkeletalMeshComponent*> SharedAnimSkeletalMeshComponentFlatList;                  // 0x00C0(0x0010) (ExportObject, ZeroConstructor)
	TArray<class UBendCrowdSharedAnimSkeletalMeshComponent*> SharedAnimSkeletalMeshComponentActiveList;                // 0x00D0(0x0010) (ExportObject, ZeroConstructor)
	unsigned char                                      UnknownData01[0x30];                                      // 0x00E0(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendCrowdAnimManager");
		return ptr;
	}

};


// Class BendGame.BendCrowdAnimTransitionGroupSetup
// 0x0048 (0x0070 - 0x0028)
class UBendCrowdAnimTransitionGroupSetup : public UDataAsset
{
public:
	struct FBendCrowdAnimTransitionSetup               AutoTransition;                                           // 0x0028(0x0018) (Edit, DisableEditOnInstance)
	TArray<struct FBendCrowdAnimTransitionSetup>       TransitionGroupSetup;                                     // 0x0040(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FBendCrowdAnimDisabledTransitionSetup> DisabledTransitions;                                      // 0x0050(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class UBendCrowdAnimTransitionGroupSetup*>  InheritedTransitionGroups;                                // 0x0060(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendCrowdAnimTransitionGroupSetup");
		return ptr;
	}

};


// Class BendGame.BendCrowdAnimStateTableSetup
// 0x0018 (0x0040 - 0x0028)
class UBendCrowdAnimStateTableSetup : public UDataAsset
{
public:
	class UClass*                                      DefaultCollisionShapeType;                                // 0x0028(0x0008) (Edit, EditFixedSize, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<struct FBendCrowdAnimStateSetup>            StateSetups;                                              // 0x0030(0x0010) (Edit, EditFixedSize, ZeroConstructor, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendCrowdAnimStateTableSetup");
		return ptr;
	}

};


// Class BendGame.BendCrowdAudioManager
// 0x00E8 (0x01B8 - 0x00D0)
class UBendCrowdAudioManager : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x30];                                      // 0x00D0(0x0030) MISSED OFFSET
	class UBendCrowdSetup*                             Setup;                                                    // 0x0100(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TArray<class UAudioComponent*>                     AudioComponentList;                                       // 0x0108(0x0010) (ExportObject, ZeroConstructor, Transient)
	TArray<class UAudioComponent*>                     MobAudioComponentList;                                    // 0x0118(0x0010) (ExportObject, ZeroConstructor, Transient)
	TArray<class UAudioComponent*>                     UnusedList;                                               // 0x0128(0x0010) (ExportObject, ZeroConstructor, Transient)
	struct FMiniMapLocationComponentCache              MinimapComponentCache;                                    // 0x0138(0x0018) (Transient)
	unsigned char                                      UnknownData01[0x68];                                      // 0x0150(0x0068) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendCrowdAudioManager");
		return ptr;
	}

};


// Class BendGame.BendCrowdAwarenessZone
// 0x0010 (0x0358 - 0x0348)
class ABendCrowdAwarenessZone : public AActor
{
public:
	class UBendCrowdAwarenessZoneComponent*            CrowdAwarenessZoneComponent;                              // 0x0348(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      bAutoDestroyAwarenessZoneWhenFinished : 1;                // 0x0350(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0351(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendCrowdAwarenessZone");
		return ptr;
	}

};


// Class BendGame.BendCrowdBehaviorData
// 0x0010 (0x0038 - 0x0028)
class UBendCrowdBehaviorData : public UObject
{
public:
	struct FBendCrowdBehaviorProperties                BehaviorProperties;                                       // 0x0028(0x0010) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendCrowdBehaviorData");
		return ptr;
	}

};


// Class BendGame.BendCrowdPOIComponent
// 0x01A0 (0x03B0 - 0x0210)
class UBendCrowdPOIComponent : public USceneComponent
{
public:
	int                                                NumSlots;                                                 // 0x0210(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bAlignCrowdMemberWithSlotRotation : 1;                    // 0x0214(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bRandomizeRotations : 1;                                  // 0x0214(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bCanUseWhenFrenzied : 1;                                  // 0x0214(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0215(0x0003) MISSED OFFSET
	TArray<TEnumAsByte<EBendCrowdPOIActivity>>         Activities;                                               // 0x0218(0x0010) (Edit, BlueprintVisible, EditFixedSize, ZeroConstructor)
	unsigned char                                      UnknownData01[0x78];                                      // 0x0228(0x0078) MISSED OFFSET
	struct FBendCrowdDistribution                      Distribution;                                             // 0x02A0(0x0100) (Edit, EditConst)
	unsigned char                                      UnknownData02[0x10];                                      // 0x03A0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendCrowdPOIComponent");
		return ptr;
	}


	void GenerateSlots(bool bOverrideRandomizeRotations, class AActor* OverrideDistributionAreaCutter, int OverridNumSlots, bool bKeepExistingSlots);
};


// Class BendGame.BendGenericNeedsSystem
// 0x0050 (0x0078 - 0x0028)
class UBendGenericNeedsSystem : public UObject
{
public:
	unsigned char                                      UnknownData00[0x50];                                      // 0x0028(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendGenericNeedsSystem");
		return ptr;
	}


	void Tick(float DeltaTime);
	float GetNeedValue(const struct FName& NeedName);
	bool AugmentNeedGrowthRate(const struct FName& NeedName, float AugmentedRate);
	void AddNeed(const struct FName& NeedName, const struct FBendNeedsData& NeedsData);
};


// Class BendGame.BendCrowdController
// 0x0270 (0x05B8 - 0x0348)
class ABendCrowdController : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0348(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnGainedAwarenessOfPawn;                                  // 0x0350(0x0010) (ZeroConstructor, Transient, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnLostAwarenessOfPawn;                                    // 0x0360(0x0010) (ZeroConstructor, Transient, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnFirstGainedAwarenessOfAnyPawn;                          // 0x0370(0x0010) (ZeroConstructor, Transient, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnLostAllAwareness;                                       // 0x0380(0x0010) (ZeroConstructor, Transient, InstancedReference, BlueprintAssignable)
	class UBendGenericNeedsSystem*                     NeedsSystem;                                              // 0x0390(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0xB8];                                      // 0x0398(0x00B8) MISSED OFFSET
	class UClass*                                      BehaviorData;                                             // 0x0450(0x0008) (ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData02[0x80];                                      // 0x0458(0x0080) MISSED OFFSET
	TArray<class UBendCrowdFlowPrimaryPlayerPosBroadcaster*> ExclusionaryFocusArray;                                   // 0x04D8(0x0010) (ExportObject, ZeroConstructor, Transient)
	unsigned char                                      UnknownData03[0xC4];                                      // 0x04E8(0x00C4) MISSED OFFSET
	float                                              CrowdMemberMaxHealth;                                     // 0x05AC(0x0004) (ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData04 : 6;                                        // 0x05B0(0x0001)
	unsigned char                                      bForceIgnoreAll : 1;                                      // 0x05B0(0x0001) (SaveGame)
	unsigned char                                      bIgnoreSounds : 1;                                        // 0x05B0(0x0001) (SaveGame)
	unsigned char                                      UnknownData05[0x1];                                       // 0x05B1(0x0001) MISSED OFFSET
	unsigned char                                      UnknownData06 : 2;                                        // 0x05B2(0x0001)
	unsigned char                                      bForceAllFrenzied : 1;                                    // 0x05B2(0x0001) (SaveGame)
	unsigned char                                      UnknownData07[0x5];                                       // 0x05B3(0x0005) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendCrowdController");
		return ptr;
	}


	void SuppressAmbientWanderBehavior(bool bSuppress);
	void SetWaypointSequence(class ABendAIWaypointSequence* InWaypointSequence);
	void SetPOIComponent(class UBendCrowdPOIComponent* InPOI);
	void SetPOI(class ABendCrowdPOI* InPOI);
	void SetIgnoreSounds(bool bIgnore);
	void SetForceIgnoreAll(bool bForce);
	void SetDefendZone(class ABendDefendZone* NewDefendZone);
	void SetCrowdMemberMaxHealth(float MaxHealth);
	void SetBehaviorData(class UClass* BehaviorData);
	void RemoveExclusionaryFocus(class AActor* Focus);
	void RemoveAllExclusionaryFocuses();
	void Possess(const struct FBendCrowdMemberHandle& AdditionalCrowdMember, bool bPossess);
	void OnPOISlotsGenerated();
	void MoveMembersToAnotherController(class ABendCrowdController* OtherController, int NumberToMove);
	bool IsAwareOfPawn(class APawn* Pawn);
	float GetCrowdMemberMaxHealth();
	struct FBendCrowdMemberHandle GetAnyMember();
	void ForceAllFrenzied(bool bEnable);
	void AddExclusionaryFocus(class AActor* Focus);
};


// Class BendGame.BendCrowdAwarenessZoneComponent
// 0x00A0 (0x02B0 - 0x0210)
class UBendCrowdAwarenessZoneComponent : public USceneComponent
{
public:
	struct FBendCrowdAwarenessZoneInstance             AwarenessZoneInstance;                                    // 0x0210(0x0090) (Edit)
	unsigned char                                      bStartAware : 1;                                          // 0x02A0(0x0001) (Edit)
	unsigned char                                      UnknownData00[0xF];                                       // 0x02A1(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendCrowdAwarenessZoneComponent");
		return ptr;
	}


	void StopAwareness();
	void RestartAwareness();
	bool IsExpired();
};


// Class BendGame.BendCrowdAwarenessZoneComponent_Pawn
// 0x0000 (0x02B0 - 0x02B0)
class UBendCrowdAwarenessZoneComponent_Pawn : public UBendCrowdAwarenessZoneComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendCrowdAwarenessZoneComponent_Pawn");
		return ptr;
	}

};


// Class BendGame.BendCrowdClimbNavArea
// 0x0008 (0x0050 - 0x0048)
class UBendCrowdClimbNavArea : public UNavArea
{
public:
	float                                              ClimbWidth;                                               // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ClimbHeightAboveLinkEnd;                                  // 0x004C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendCrowdClimbNavArea");
		return ptr;
	}

};


// Class BendGame.BendCrowdCollisionShapeSetup
// 0x0028 (0x0050 - 0x0028)
class UBendCrowdCollisionShapeSetup : public UObject
{
public:
	float                                              CapsuleRadius;                                            // 0x0028(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CapsuleHalfHeight;                                        // 0x002C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DelayBeforeTransitionToNextShape;                         // 0x0030(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     Translation;                                              // 0x0034(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FRotator                                    Rotation;                                                 // 0x0040(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x004C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendCrowdCollisionShapeSetup");
		return ptr;
	}

};


// Class BendGame.BendCrowdCriticalTrigger
// 0x0008 (0x0350 - 0x0348)
class ABendCrowdCriticalTrigger : public AActor
{
public:
	class UBendCrowdCriticalTriggerComponent*          TriggerComponent;                                         // 0x0348(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendCrowdCriticalTrigger");
		return ptr;
	}

};


// Class BendGame.BendCrowdBehaviorTrigger
// 0x0000 (0x0350 - 0x0350)
class ABendCrowdBehaviorTrigger : public ABendCrowdCriticalTrigger
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendCrowdBehaviorTrigger");
		return ptr;
	}

};


// Class BendGame.BendCrowdDespawnTrigger
// 0x0000 (0x0350 - 0x0350)
class ABendCrowdDespawnTrigger : public ABendCrowdCriticalTrigger
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendCrowdDespawnTrigger");
		return ptr;
	}

};


// Class BendGame.BendCrowdKillTrigger
// 0x0000 (0x0350 - 0x0350)
class ABendCrowdKillTrigger : public ABendCrowdCriticalTrigger
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendCrowdKillTrigger");
		return ptr;
	}

};


// Class BendGame.BendCrowdCriticalTriggerComponent
// 0x0010 (0x0610 - 0x0600)
class UBendCrowdCriticalTriggerComponent : public UBoxComponent
{
public:
	TEnumAsByte<ECollisionEnabled>                     SaveGameCollisionEnabled;                                 // 0x0600(0x0001) (ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData00[0xF];                                       // 0x0601(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendCrowdCriticalTriggerComponent");
		return ptr;
	}

};


// Class BendGame.BendCrowdLiveMemberDetectorComponent
// 0x00D0 (0x06E0 - 0x0610)
class UBendCrowdLiveMemberDetectorComponent : public UBendCrowdCriticalTriggerComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0610(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnEndOverlapLiveMember;                                   // 0x0618(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBeginOverlapThresholdNumberOfLiveMembers;               // 0x0628(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnEndOverlapThresholdNumberOfLiveMembers;                 // 0x0638(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData01[0x84];                                      // 0x0648(0x0084) MISSED OFFSET
	int                                                ThresholdNumberOfLiveMembers;                             // 0x06CC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bIgnoreIncapacitedMembers : 1;                            // 0x06D0(0x0001) (Edit)
	unsigned char                                      UnknownData02[0xF];                                       // 0x06D1(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendCrowdLiveMemberDetectorComponent");
		return ptr;
	}


	void SetThresholdNumberOfLiveMembers(int Threshold);
	void NotifyEndOverlap(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex);
	void NotifyBeginOverlap(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	bool HasReachedThresholdNumberOfLiveMembers();
};


// Class BendGame.BendCrowdLiveMemberDetector
// 0x0008 (0x0358 - 0x0350)
class ABendCrowdLiveMemberDetector : public ABendCrowdCriticalTrigger
{
public:
	TWeakObjectPtr<class UBendCrowdLiveMemberDetectorComponent> LiveMemberDetectorComponent;                              // 0x0350(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendCrowdLiveMemberDetector");
		return ptr;
	}

};


// Class BendGame.BendCrowdBehaviorTriggerComponent
// 0x0020 (0x0630 - 0x0610)
class UBendCrowdBehaviorTriggerComponent : public UBendCrowdCriticalTriggerComponent
{
public:
	TArray<struct FBendCrowdBehaviorEntry>             Behaviors;                                                // 0x0610(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0620(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendCrowdBehaviorTriggerComponent");
		return ptr;
	}


	void NotifyEndOverlap(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex);
	void NotifyBeginOverlap(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
};


// Class BendGame.BendCrowdDespawnTriggerComponent
// 0x0000 (0x0610 - 0x0610)
class UBendCrowdDespawnTriggerComponent : public UBendCrowdCriticalTriggerComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendCrowdDespawnTriggerComponent");
		return ptr;
	}


	void NotifyBeginOverlap(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
};


// Class BendGame.BendCrowdKillTriggerComponent
// 0x0000 (0x0610 - 0x0610)
class UBendCrowdKillTriggerComponent : public UBendCrowdCriticalTriggerComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendCrowdKillTriggerComponent");
		return ptr;
	}


	void NotifyBeginOverlap(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
};


// Class BendGame.BendCrowdFlowBreadcrumbDropper
// 0x0020 (0x00F0 - 0x00D0)
class UBendCrowdFlowBreadcrumbDropper : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x00D0(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendCrowdFlowBreadcrumbDropper");
		return ptr;
	}


	void StopDropping();
	void StartDropping();
	void RemoveNearbyBreadcrumbs(float Radius);
};


// Class BendGame.BendCrowdFlowFoodAttractorComponent
// 0x0080 (0x0150 - 0x00D0)
class UBendCrowdFlowFoodAttractorComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x80];                                      // 0x00D0(0x0080) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendCrowdFlowFoodAttractorComponent");
		return ptr;
	}

};


// Class BendGame.BendCrowdFlowPrimaryPlayerPosBroadcaster
// 0x00D0 (0x01A0 - 0x00D0)
class UBendCrowdFlowPrimaryPlayerPosBroadcaster : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0xD0];                                      // 0x00D0(0x00D0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendCrowdFlowPrimaryPlayerPosBroadcaster");
		return ptr;
	}


	void OnHiddenFromCrowdStateChanged();
};


// Class BendGame.BendCrowdFlowSoundEmitter
// 0x0028 (0x00F8 - 0x00D0)
class UBendCrowdFlowSoundEmitter : public UActorComponent
{
public:
	float                                              AiSoundInnerRadius;                                       // 0x00D0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AiSoundOuterRadius;                                       // 0x00D4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AiSoundIntensityZeroRadius;                               // 0x00D8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AiSoundIntensityInnerRadius;                              // 0x00DC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AiSoundAwarenessLingerTime;                               // 0x00E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bSetFrenzied : 1;                                         // 0x00E4(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x13];                                      // 0x00E5(0x0013) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendCrowdFlowSoundEmitter");
		return ptr;
	}


	void EmitSoundEnd();
	void EmitSoundBegin();
	void EmitSoundAtLocation(const struct FVector& Location);
	void EmitSound();
};


// Class BendGame.BendCrowdFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UBendCrowdFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendCrowdFunctionLibrary");
		return ptr;
	}


	void STATIC_UnregisterClosestCrowdMemberQuery(class AActor* QueryingActor);
	void STATIC_RegisterClosestCrowdMemberQuery(class AActor* QueryingActor, bool bForceFirstTimeResultUpToDate);
	void STATIC_KillCrowdMember(const struct FBendCrowdMemberHandle& Handle);
	void STATIC_KillAllCrowdMembers();
	bool STATIC_IsPawnPromotedHordeMember(class APawn* Pawn);
	bool STATIC_IsClosestNonPromotedCrowdMemberWithinDistance(class AActor* QueryingActor, float DistanceThreshold, bool* IsWithinDistance, bool* IsOutputValid);
	bool STATIC_IsClosestCrowdMemberWithinDistance(class AActor* QueryingActor, float DistanceThreshold, bool* IsWithinDistance, bool* IsOutputValid);
	struct FTransform STATIC_GetCrowdMemberTransform(const struct FBendCrowdMemberHandle& Handle);
	struct FVector STATIC_GetCrowdMemberLocation(const struct FBendCrowdMemberHandle& Handle);
	struct FBendCrowdMemberHandle STATIC_GetCrowdMemberHandle(int BodyIndex);
	bool STATIC_GetClosestNonPromotedCrowdMemberLocation(class AActor* QueryingActor, struct FVector* OutputLocation, float* DistanceSquared, bool* IsOutputValid);
	bool STATIC_GetClosestNonPromotedCrowdMemberHandle(class AActor* QueryingActor, struct FBendCrowdMemberHandle* OutputHandle, bool* IsOutputValid);
	float STATIC_GetClosestNonPromotedCrowdMemberDistanceSquared(class AActor* QueryingActor, float* DistanceSquared, bool* IsOutputValid);
	bool STATIC_GetClosestCrowdMemberLocation(class AActor* QueryingActor, struct FVector* OutputLocation, float* DistanceSquared, bool* IsOutputValid);
	bool STATIC_GetClosestCrowdMemberHandle(class AActor* QueryingActor, struct FBendCrowdMemberHandle* OutputHandle, bool* IsOutputValid);
	float STATIC_GetClosestCrowdMemberDistanceSquared(class AActor* QueryingActor, float* DistanceSquared, bool* IsOutputValid);
	void STATIC_DestroyCrowdMember(const struct FBendCrowdMemberHandle& Handle);
	void STATIC_DestroyAllCrowdMembers();
};


// Class BendGame.BendCrowdGenerator
// 0x0068 (0x03B0 - 0x0348)
class ABendCrowdGenerator : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0348(0x0008) MISSED OFFSET
	class ABendCrowdGroup*                             Group;                                                    // 0x0350(0x0008) (ZeroConstructor, IsPlainOldData)
	TWeakObjectPtr<class ABendCrowdGroup>              GroupPtr;                                                 // 0x0358(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      bIsActive : 1;                                            // 0x0360(0x0001) (Edit, BlueprintVisible, SaveGame)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0361(0x0003) MISSED OFFSET
	float                                              ActivationRadiusMin;                                      // 0x0364(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ActivationRadius;                                         // 0x0368(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x40];                                      // 0x036C(0x0040) MISSED OFFSET
	unsigned char                                      bRegenerateSaveGameTag : 1;                               // 0x03AC(0x0001)
	unsigned char                                      UnknownData03[0x3];                                       // 0x03AD(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendCrowdGenerator");
		return ptr;
	}


	void SetPaused(bool bPaused);
	void SetActive(bool bActive);
	void SetActivationRadiusMin(float Radius);
	void SetActivationRadius(float Radius);
	void Reset();
	bool IsPaused();
	bool IsActive();
	float GetActivationRadius();
	void GenerateCrowdMember(const struct FVector& Location, const struct FRotator& Rotation, bool bSpawnImmediately);
	void DestroyGeneratedCrowdMembers();
	void Decommission();
};


// Class BendGame.BendCrowdGroup
// 0x0238 (0x0580 - 0x0348)
class ABendCrowdGroup : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0348(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnAllCrowdGroupMembersDespawned;                          // 0x0350(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnAllCrowdGroupMembersDied;                               // 0x0360(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnAllCrowdGroupPossibleSpawnsDied;                        // 0x0370(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	TArray<class ABendCrowdGenerator*>                 Generators;                                               // 0x0380(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      bSpawnInfinitely : 1;                                     // 0x0390(0x0001) (Edit)
	unsigned char                                      bSpawnAllImmediately : 1;                                 // 0x0390(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0391(0x0003) MISSED OFFSET
	int                                                MaxTotalSpawns;                                           // 0x0394(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                MaxActiveSpawns;                                          // 0x0398(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x039C(0x0004) MISSED OFFSET
	class ABendAIWaypointSequence*                     InitialWaypointSequence;                                  // 0x03A0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class ABendCrowdPOI*                               InitialPOI;                                               // 0x03A8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bSpawnAtStartingPoiTillPoiSwitches : 1;                   // 0x03B0(0x0001) (Edit)
	unsigned char                                      bShouldCheckpointRespawnAtDestinationPOI : 1;             // 0x03B0(0x0001) (Edit)
	unsigned char                                      UnknownData03[0x7];                                       // 0x03B1(0x0007) MISSED OFFSET
	class UClass*                                      BehaviorData;                                             // 0x03B8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ChanceToDropEar;                                          // 0x03C0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PickupConsolidationDistance;                              // 0x03C4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       PickupSubclassName;                                       // 0x03C8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x10];                                      // 0x03D0(0x0010) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnCrowdMemberDied;                                        // 0x03E0(0x0010) (ZeroConstructor, Transient, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnCrowdMemberDied_NEW;                                    // 0x03F0(0x0010) (ZeroConstructor, Transient, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnAfterCrowdMemberSpawned;                                // 0x0400(0x0010) (ZeroConstructor, Transient, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBeforeCrowdMemberDespawned;                             // 0x0410(0x0010) (ZeroConstructor, Transient, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnSpawnedFreakerEar;                                      // 0x0420(0x0010) (ZeroConstructor, Transient, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData05[0x40];                                      // 0x0430(0x0040) MISSED OFFSET
	class ABendDefendZone*                             defendZone;                                               // 0x0470(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0xC0];                                      // 0x0478(0x00C0) MISSED OFFSET
	class ABendDefendZone*                             ControllerSaveGame_DefendZone;                            // 0x0538(0x0008) (ZeroConstructor, SaveGame, IsPlainOldData)
	class ABendAIWaypointSequence*                     ControllerSaveGame_WaypointSequence;                      // 0x0540(0x0008) (ZeroConstructor, SaveGame, IsPlainOldData)
	class UBendCrowdPOIComponent*                      ControllerSaveGame_PendingPOI;                            // 0x0548(0x0008) (ExportObject, ZeroConstructor, InstancedReference, SaveGame, IsPlainOldData)
	class UBendCrowdPOIComponent*                      ControllerSaveGame_ResetPOI;                              // 0x0550(0x0008) (ExportObject, ZeroConstructor, InstancedReference, SaveGame, IsPlainOldData)
	TEnumAsByte<EBendCrowdPOIPriority>                 ControllerSaveGame_PendingPOIPriority;                    // 0x0558(0x0001) (ZeroConstructor, SaveGame, IsPlainOldData)
	TEnumAsByte<EBendCrowdPOIPriority>                 ControllerSaveGame_ResetPOIPriority;                      // 0x0559(0x0001) (ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      bControllerSaveGame_HasPendingPOI : 1;                    // 0x055A(0x0001) (SaveGame)
	unsigned char                                      UnknownData07[0x5];                                       // 0x055B(0x0005) MISSED OFFSET
	class ABendCrowdController*                        Controller;                                               // 0x0560(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData08[0xC];                                       // 0x0568(0x000C) MISSED OFFSET
	int                                                TotalDied;                                                // 0x0574(0x0004) (ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData09[0x8];                                       // 0x0578(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendCrowdGroup");
		return ptr;
	}


	void SetWaypointSequence(class ABendAIWaypointSequence* InWaypointSequence);
	void SetSpawnAtStartingPoiTillPoiSwitches(bool bSpawnAtPOI);
	void SetPOIActor(class ABendCrowdPOI* InPOI);
	void SetPOI(class UBendCrowdPOIComponent* InPOI);
	void SetMaxTotalSpawns(int InMaxTotalSpawns);
	void SetIgnoreSounds(bool bIgnore);
	void SetDefendZone(class ABendDefendZone* NewDefendZone);
	void RemoveGenerator(class ABendCrowdGenerator* Generator);
	void RemoveExclusionaryFocus(class AActor* Focus);
	void RemoveAllGenerators();
	void RemoveAllExclusionaryFocuses();
	bool HasWaypoints();
	class ABendAIWaypointSequence* GetWaypointSequence();
	bool GetSpawnAtStartingPoiTillPoiSwitches();
	class UBendCrowdPOIComponent* GetPOI();
	int GetNumMembersEverSpawned();
	int GetNumMembersDied();
	int GetNumMembersAlive();
	int GetNumMembers();
	bool GetIgnoreSounds();
	class ABendCrowdController* GetController();
	void ForceIgnoreAll(bool bForce);
	void DestroyAllMembers();
	void AddGenerator(class ABendCrowdGenerator* Generator);
	void AddExclusionaryFocus(class AActor* Focus);
};


// Class BendGame.BendCrowdGeneratorVolume
// 0x0120 (0x04D0 - 0x03B0)
class ABendCrowdGeneratorVolume : public ABendCrowdGenerator
{
public:
	struct FScriptMulticastDelegate                    OnBegin_SpawningSuspendedSolelyByPlayerProximity;         // 0x03B0(0x0010) (ZeroConstructor, Transient, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnEnd_SpawningSuspendedSolelyByPlayerProximity;           // 0x03C0(0x0010) (ZeroConstructor, Transient, InstancedReference, BlueprintAssignable)
	int                                                NumSlots;                                                 // 0x03D0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bIsSpigot : 1;                                            // 0x03D4(0x0001)
	unsigned char                                      bStartWithSlotsFilled : 1;                                // 0x03D4(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bSpawnInfinitely : 1;                                     // 0x03D4(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bSpawnAllImmediately : 1;                                 // 0x03D4(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x03D5(0x0003) MISSED OFFSET
	int                                                NumToSpawn;                                               // 0x03D8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SpawnRate;                                                // 0x03DC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bRandomizeRotations : 1;                                  // 0x03E0(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bDrawDebugGeneratedLocations : 1;                         // 0x03E0(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData01[0x3];                                       // 0x03E1(0x0003) MISSED OFFSET
	float                                              TimeDelayBeforeStartGenerating;                           // 0x03E4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              TimeDelayBeforeStartGenerating_NEW;                       // 0x03E8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ESpawnImportance>                      importance;                                               // 0x03EC(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x03ED(0x0003) MISSED OFFSET
	struct FBendCrowdLocationDistribution              NonPOILocations;                                          // 0x03F0(0x00B0) (Edit, EditConst)
	unsigned char                                      UnknownData03[0x24];                                      // 0x04A0(0x0024) MISSED OFFSET
	unsigned char                                      UnknownData04 : 4;                                        // 0x04C4(0x0001)
	unsigned char                                      bNewVersion : 1;                                          // 0x04C4(0x0001)
	unsigned char                                      bIsPoi : 1;                                               // 0x04C4(0x0001) (Transient)
	unsigned char                                      UnknownData05[0xB];                                       // 0x04C5(0x000B) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendCrowdGeneratorVolume");
		return ptr;
	}


	void StartUp();
	void Shutoff();
	void SetNumToSpawn(int Num_To_Spawn, bool bSpawn_Infinitely);
};


// Class BendGame.BendCrowdGeneratorBox
// 0x0000 (0x04D0 - 0x04D0)
class ABendCrowdGeneratorBox : public ABendCrowdGeneratorVolume
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendCrowdGeneratorBox");
		return ptr;
	}

};


// Class BendGame.BendCrowdGroupGlobal
// 0x0000 (0x0580 - 0x0580)
class ABendCrowdGroupGlobal : public ABendCrowdGroup
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendCrowdGroupGlobal");
		return ptr;
	}

};


// Class BendGame.BendCrowdGroupHorde
// 0x0020 (0x05A0 - 0x0580)
class ABendCrowdGroupHorde : public ABendCrowdGroup
{
public:
	class ABendCrowdPOI*                               StartHibernatePOI;                                        // 0x0580(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class ABendCrowdPOI*                               StopHibernatePOI;                                         // 0x0588(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0590(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendCrowdGroupHorde");
		return ptr;
	}

};


// Class BendGame.BendCrowdImmobileStaticMeshComponent
// 0x01F0 (0x08F0 - 0x0700)
class UBendCrowdImmobileStaticMeshComponent : public UStaticMeshComponent
{
public:
	unsigned char                                      UnknownData00[0x1F0];                                     // 0x0700(0x01F0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendCrowdImmobileStaticMeshComponent");
		return ptr;
	}


	void UpdateOverlapsCompletion_GameThread();
};


// Class BendGame.BendCrowdPOI
// 0x0008 (0x0350 - 0x0348)
class ABendCrowdPOI : public AActor
{
public:
	class UBendCrowdPOIComponent*                      POIComponent;                                             // 0x0348(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendCrowdPOI");
		return ptr;
	}

};


// Class BendGame.BendCrowdSetup
// 0x04E8 (0x0510 - 0x0028)
class UBendCrowdSetup : public UDataAsset
{
public:
	class UClass*                                      CrowdManagerClass;                                        // 0x0028(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      CrowdMemberPhysicsActorClass;                             // 0x0030(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      CrowdMemberSkeletalMeshActorClass;                        // 0x0038(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                MaxActiveDefault;                                         // 0x0040(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                MaxRecyclePerFrame;                                       // 0x0044(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxSpawnTimePerFrame;                                     // 0x0048(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MissionDespawnDistance_Inner;                             // 0x004C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MissionDespawnDistance_Outer;                             // 0x0050(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              JobDespawnDistance_Inner;                                 // 0x0054(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              JobDespawnDistance_Outer;                                 // 0x0058(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              OpenWorldDespawnDistance_Inner;                           // 0x005C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              OpenWorldDespawnDistance_Outer;                           // 0x0060(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TargetNearnessFutureProjectionTime;                       // 0x0064(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TargetNearnessFutureProjectionTime_ForPromotion_NormalDifficulty;// 0x0068(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TargetNearnessFutureProjectionTime_ForPromotion_HardDifficulty;// 0x006C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBendCrowdAnimStateTableSetup*               AnimStateTableSetup;                                      // 0x0070(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<struct FCrowdLodSetup>                      LodSetups;                                                // 0x0078(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FCrowdLodSetup>                      LodSetups_SlowGpu;                                        // 0x0088(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	int                                                LodHysteresisDelayFrames;                                 // 0x0098(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              LodAllocationMaxDistanceFactor;                           // 0x009C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxRenderDistance_Inner_Alive;                            // 0x00A0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxRenderDistance_Outer_Alive;                            // 0x00A4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxRenderDistance_Inner_Dead;                             // 0x00A8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxRenderDistance_Outer_Dead;                             // 0x00AC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                MaxDeadBodies_Mission;                                    // 0x00B0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                MaxDeadBodies_OpenWorld;                                  // 0x00B4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TAssetPtr<class UClass>                            FullFledgedPawnType;                                      // 0x00B8(0x0020) (Edit, DisableEditOnInstance)
	TAssetPtr<class UClass>                            FullFledgedPawnControllerType;                            // 0x00D8(0x0020) (Edit, DisableEditOnInstance)
	uint32_t                                           MinFullFledgedPawns;                                      // 0x00F8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	uint32_t                                           MaxFullFledgedPawns;                                      // 0x00FC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	uint32_t                                           NumCrowdMembersWhenUsingMinFullFledgedPawns;              // 0x0100(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FullFledgedPawnActivationInnerRadius;                     // 0x0104(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FullFledgedPawnActivationOuterRadius;                     // 0x0108(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FullFledgedPawnBlendTime;                                 // 0x010C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ExternallyCreatedFullFledgedPawnJoinCrowdRate;            // 0x0110(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	uint32_t                                           ExternallyCreatedFullFledgedPawnJoinMinCrowdSize;         // 0x0114(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ExternallyCreatedFullFledgedPawnJoinCrowdMaxScreenSize;   // 0x0118(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x011C(0x0004) MISSED OFFSET
	TArray<TAssetPtr<class USkeletalMesh>>             MeshVariationSet;                                         // 0x0120(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	class USkeletalMesh*                               EmptyMeshForAnimation;                                    // 0x0130(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<class USkeletalMesh*>                       SkeletalMeshAttachments;                                  // 0x0138(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      bRandomizeAttachments : 1;                                // 0x0148(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0149(0x0003) MISSED OFFSET
	struct FVector                                     Scale3D;                                                  // 0x014C(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UParticleSystem*                             WaterSplashParticle;                                      // 0x0158(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              WaterSplashDepthThreshold;                                // 0x0160(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0164(0x0004) MISSED OFFSET
	TArray<struct FCrowdSharedParticle>                CrowdSharedParticles;                                     // 0x0168(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class UParticleSystem*>                     FireParticleVariationSet;                                 // 0x0178(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	float                                              FireParticleVerticalOffset;                               // 0x0188(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      bCanFireSpreadThroughCrowd : 1;                           // 0x018C(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData03[0x3];                                       // 0x018D(0x0003) MISSED OFFSET
	float                                              TimeTillCatchFireWhileTouchingBurningNeighbor;            // 0x0190(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DeathFromFireTime;                                        // 0x0194(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FireLifetime;                                             // 0x0198(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ContactCollectionSkinWidth;                               // 0x019C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              InterCharacterClimbContactNetSkinWidth;                   // 0x01A0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FloorCushionNetSkinWidth;                                 // 0x01A4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CollisionReactionNetSkinWidth;                            // 0x01A8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              UnassistedClimbRestNetSkinWidth;                          // 0x01AC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              RestSkinWidth;                                            // 0x01B0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                MaxOverlapUpdatesPerFrame;                                // 0x01B4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      CollisionShapeChangeHysteresisFrames;                     // 0x01B8(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x3];                                       // 0x01B9(0x0003) MISSED OFFSET
	float                                              SecondShapeRadius;                                        // 0x01BC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SecondShapeHalfHeight;                                    // 0x01C0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              BulletRadiusForLimbHitDetection;                          // 0x01C4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData05[0x8];                                       // 0x01C8(0x0008) MISSED OFFSET
	struct FTransform                                  SecondShapeLocalOffsetTransform;                          // 0x01D0(0x0030) (Edit, DisableEditOnInstance, IsPlainOldData)
	float                                              ClimbForceMagnitude_NoRootMotion;                         // 0x0200(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ClimbForceMagnitude_NoRootMotion_InsideClimbColumn;       // 0x0204(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ClimbForceMagnitude_WithRootMotion_Max;                   // 0x0208(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ClimbForceMagnitude_WithRootMotion_ClimbingWall_Max;      // 0x020C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ClimbForceMagnitude_AnchoredMotion_Max;                   // 0x0210(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              StepImpulseReactionScale0To1;                             // 0x0214(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ClimbImpulseReactionScale0To1;                            // 0x0218(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ConstraintImpulseReactionScale0To1_forSupportedCrowd;     // 0x021C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              JostleForceSkewUpFactor;                                  // 0x0220(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ExtraGravityInGs;                                         // 0x0224(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ExtraGravityDuration;                                     // 0x0228(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TimeWindowForWorldConstraintAfterLastSupportedOrLastTouchedByCrowd;// 0x022C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              UnassistedClimbStickyForceSpringConstant;                 // 0x0230(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DelayTillCanTraverseUpright;                              // 0x0234(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DelayTillCanTraverseCrawling;                             // 0x0238(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      bMaintainGroupCoherence : 1;                              // 0x023C(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData06[0x3];                                       // 0x023D(0x0003) MISSED OFFSET
	float                                              NeighborDistanceAtMaxAttraction;                          // 0x0240(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxHeadingSkewForNeighborAttraction;                      // 0x0244(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HeadingSkewForNeighborAlignment;                          // 0x0248(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      bCanClimbEvenWhenBeingClimbed : 1;                        // 0x024C(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      bCanClimbEvenWhenBeingHungFrom : 1;                       // 0x024C(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      bUseRootMotionForClimbing : 1;                            // 0x024C(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      bCanAttachToWallAtAnyHeightAlongBody : 1;                 // 0x024C(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      bCanClimbOnlyWhenFrenzied : 1;                            // 0x024C(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      bEnableClimbing_Assisted : 1;                             // 0x024C(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      bEnableClimbing_Unassisted : 1;                           // 0x024C(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData07[0x3];                                       // 0x024D(0x0003) MISSED OFFSET
	unsigned char                                      bCanClimbUnassistedOnlyAcrossNavLinks : 1;                // 0x0250(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      bCanClimbUnassistedWhenPursuingTargetWithoutPath : 1;     // 0x0250(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      bOrientAssistedClimb : 1;                                 // 0x0250(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      bDisallowPitchingBackwardWhenClimbingWallInAssistedMode : 1;// 0x0250(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData08[0x3];                                       // 0x0251(0x0003) MISSED OFFSET
	float                                              HowCloseCanAttachBelowTopOfWall;                          // 0x0254(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ClimbAnimThreshold_0M;                                    // 0x0258(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ClimbAnimThreshold_HalfM;                                 // 0x025C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ClimbAnimThreshold_1M;                                    // 0x0260(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ClimbAnimThreshold_1AndHalfM;                             // 0x0264(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ClimbAnimThreshold_2M;                                    // 0x0268(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ClimbAnimThreshold_2AndHalfM;                             // 0x026C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              IsGoalStationary_SpeedThreshold;                          // 0x0270(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData09[0x4];                                       // 0x0274(0x0004) MISSED OFFSET
	float                                              EstimatedPursuitSpeed;                                    // 0x0278(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxGoalMovementPredictionDistance;                        // 0x027C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              StallTimeBeforeClimb;                                     // 0x0280(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TimeBetweenClimbsWithoutStall;                            // 0x0284(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      bAlsoStallCrowdOnCrowdClimbing : 1;                       // 0x0288(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      bEnableBulletAvoidance : 1;                               // 0x0288(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      bUseAnchoredEdgeClimbing : 1;                             // 0x0288(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData10[0x3];                                       // 0x0289(0x0003) MISSED OFFSET
	float                                              EdgeClimbTrimAmount;                                      // 0x028C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              WaterDepthThresholdForSlowDown;                           // 0x0290(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData11[0x4];                                       // 0x0294(0x0004) MISSED OFFSET
	struct FName                                       AnchorRefBoneName;                                        // 0x0298(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                MaxEatersPerFreshBody;                                    // 0x02A0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ProbabilityOfEatersPerFreshBody;                          // 0x02A4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      bEnableSlowProjectileCollision : 1;                       // 0x02A8(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      bUseSecondShapeForProjectileAndOverlapCollision : 1;      // 0x02A8(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData12[0x1];                                       // 0x02A9(0x0001) MISSED OFFSET
	int16_t                                            MaxUpdateClosestOverlapsEveryFrame;                       // 0x02AA(0x0002) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DamageCrowdLinearMomentumThreshold;                       // 0x02AC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DamageCrowdAngularMomentumThreshold;                      // 0x02B0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData13[0x4];                                       // 0x02B4(0x0004) MISSED OFFSET
	class UClass*                                      DamageTypeFalling;                                        // 0x02B8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      bDrawInMiniMap : 1;                                       // 0x02C0(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      bDrawInMiniMapAudioManager : 1;                           // 0x02C0(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData14[0x7];                                       // 0x02C1(0x0007) MISSED OFFSET
	class UClass*                                      PawnPresenceDefaultAwarenessZoneData;                     // 0x02C8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UClass*                                      CrowdIntruderSightedAwarenessZoneData;                    // 0x02D0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UClass*                                      CrowdDamageAwarenessZoneData;                             // 0x02D8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UClass*                                      CrowdFireDamageAwarenessZoneData;                         // 0x02E0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UClass*                                      NestBurntAwarenessZoneData;                               // 0x02E8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UClass*                                      PursuePreyAwarenessZoneData;                              // 0x02F0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UClass*                                      PursuePreyAwarenessZoneData_NonMission;                   // 0x02F8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<class UClass*>                              ActorNoiseAwarenessZoneData;                              // 0x0300(0x0010) (Edit, ZeroConstructor)
	class UClass*                                      AttractorAwarenessZoneData;                               // 0x0310(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ActorNoiseRadiusToNoiseLoudnessRatio;                     // 0x0318(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AwarenessZoneReachedThresholdDistance;                    // 0x031C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AwarenessTriggerSuppressionStaleThresholdDistance;        // 0x0320(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              VisibilityCooldownTime;                                   // 0x0324(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MinAwarenessRampDownTimeOutsideDefendZone;                // 0x0328(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxAwarenessRampDownTimeOutsideDefendZone;                // 0x032C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DefendZoneAttenuationDistanceForAwarenessEvents;          // 0x0330(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              SightDistanceScaleOutsideDefendZone;                      // 0x0334(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              HearingDistanceScaleOutsideDefendZone;                    // 0x0338(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AwarenessSharingDistanceScaleOutsideDefendZone;           // 0x033C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bAllowPursuingOutOfSightPreyAsLongAsFrenzied : 1;         // 0x0340(0x0001) (Edit)
	unsigned char                                      UnknownData15[0x3];                                       // 0x0341(0x0003) MISSED OFFSET
	int                                                MaxNavPathSearchNodes;                                    // 0x0344(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              RemoveStuckCharacterTime;                                 // 0x0348(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              RemoveStuckCharacterDistance;                             // 0x034C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                NumFramesSuspendNavQueriesAfterFailedSearch;              // 0x0350(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxPathSearchFailTimePerFrame;                            // 0x0354(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              EdgeTraversalNavAreaCostScale_NonFrenzied;                // 0x0358(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              EdgeTraversalNavAreaCostEntering_NonFrenzied;             // 0x035C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              EdgeTraversalNavAreaCostScale_Frenzied;                   // 0x0360(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              EdgeTraversalNavAreaCostEntering_Frenzied;                // 0x0364(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ShallowWaterNavAreaCostScale_NonFrenzied;                 // 0x0368(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ShallowWaterNavAreaCostEntering_NonFrenzied;              // 0x036C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ShallowWaterNavAreaCostScale_Frenzied;                    // 0x0370(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ShallowWaterNavAreaCostEntering_Frenzied;                 // 0x0374(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              LosAndNavClosestMembersUpdatesMaxTimePerFrame;            // 0x0378(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              LosAndNavRoundRobinUpdatesMaxTimePerFrame;                // 0x037C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      DamageTypeMelee;                                          // 0x0380(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              Hitpoints;                                                // 0x0388(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DamagePerHit_Player;                                      // 0x038C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DamagePerHit_NPC;                                         // 0x0390(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DamagePerContactPerTimeWhenBeingCrushed;                  // 0x0394(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AttackDistThreshold_StationaryGoal_VeryClose;             // 0x0398(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AttackDistThreshold_StationaryGoal;                       // 0x039C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AttackDistThreshold_MovingGoal;                           // 0x03A0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AttackDistThreshold_MovingGoal_Stumbling;                 // 0x03A4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              XPGainPerCrowdMemberKilled;                               // 0x03A8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              RisingInAirDampMultiplier;                                // 0x03AC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      bUseHardcodedRootMotion : 1;                              // 0x03B0(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      bHackRotateRootMotionTranslation90DegresCounterclockwiseInYaw : 1;// 0x03B0(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      bHackOffsetRootForwardForRunState : 1;                    // 0x03B0(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      bEnableProceduralLeaningWhenRunningOnGround : 1;          // 0x03B0(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      bReturnToUprightWhenFallingAndAlreadySomewhatUpright : 1; // 0x03B0(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      bAllowJostleHalfClimbing : 1;                             // 0x03B0(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      bScaleRootMotionByCharacterScale : 1;                     // 0x03B0(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData16[0x3];                                       // 0x03B1(0x0003) MISSED OFFSET
	float                                              MaxGroundSlopeAngle;                                      // 0x03B4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxUnassistedClimbSlopeAngle;                             // 0x03B8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              VeerVecMultiplier;                                        // 0x03BC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              VeerVecMultiplier_Unfrenzied;                             // 0x03C0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              VeerVecLerpAlpha;                                         // 0x03C4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              VeerVecDecayLerpAlpha;                                    // 0x03C8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              VeerVecCutoffEpsilon;                                     // 0x03CC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      bEnableVeering : 1;                                       // 0x03D0(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      bDisableVeeringOnDeadBodies : 1;                          // 0x03D0(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData17[0x3];                                       // 0x03D1(0x0003) MISSED OFFSET
	float                                              SizeVariationMin;                                         // 0x03D4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SizeVariationMax;                                         // 0x03D8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SizeVariationCurveBroadness;                              // 0x03DC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     InertiaScale;                                             // 0x03E0(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData18[0x4];                                       // 0x03EC(0x0004) MISSED OFFSET
	class UPhysicsAsset*                               RagdollPhysicsAsset;                                      // 0x03F0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              RagdollSleepThresholdScale;                               // 0x03F8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              RagdollFreezeRootAverageVelocityThreshold;                // 0x03FC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              RagdollRootAverageVelocityLerpAlpha;                      // 0x0400(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              RagdollMaxSimulateTime;                                   // 0x0404(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                MaxSimultaneousRagdolls;                                  // 0x0408(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                MaxRagdollStartsPerFrame;                                 // 0x040C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxHordeSpeedIncPerSec;                                   // 0x0410(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      bDisallowEnteringRagdollOnceFullyDead : 1;                // 0x0414(0x0001) (Edit, DisableEditOnInstance)
	bool                                               DebugHordeAudio;                                          // 0x0415(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData19[0x2];                                       // 0x0416(0x0002) MISSED OFFSET
	class USoundCue*                                   HordeSoundIdle;                                           // 0x0418(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                MinNumHordeSwarmerStartSound;                             // 0x0420(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                MinNumHordeSwarmerStopSound;                              // 0x0424(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                NumHordeSwarmerMaxCCSound;                                // 0x0428(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxHordeMovementPerSec;                                   // 0x042C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxHordeRadiusChangePerSec;                               // 0x0430(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxHordeRadius;                                           // 0x0434(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinHordeRadius;                                           // 0x0438(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              IncHordeRadiusPerSwarmer;                                 // 0x043C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               DebugFrenzyHordeAudio;                                    // 0x0440(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData20[0x7];                                       // 0x0441(0x0007) MISSED OFFSET
	class USoundCue*                                   HordeSoundFrenzy;                                         // 0x0448(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                MinNumFrenzyHordeSwarmerStartSound;                       // 0x0450(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                MinNumFrenzyHordeSwarmerStopSound;                        // 0x0454(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                NumFrenzyHordeSwarmerMaxCCSound;                          // 0x0458(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxFrenzyHordeMovementPerSec;                             // 0x045C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxFrenzyHordeRadiusChangePerSec;                         // 0x0460(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxFrenzyHordeRadius;                                     // 0x0464(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinFrenzyHordeRadius;                                     // 0x0468(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              IncFrenzyHordeRadiusPerSwarmer;                           // 0x046C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               DebugIndivAudio;                                          // 0x0470(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData21[0x7];                                       // 0x0471(0x0007) MISSED OFFSET
	TArray<class USoundCue*>                           IndividualSoundOnFire;                                    // 0x0478(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class USoundCue*>                           IndividualSoundEating;                                    // 0x0488(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class USoundCue*>                           IndividualSoundTransIntoAware;                            // 0x0498(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class USoundCue*>                           IndividualSoundTransIntoFrenzied;                         // 0x04A8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class USoundCue*>                           IndividualSoundFrenzy;                                    // 0x04B8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class USoundCue*>                           IndividualSoundAttack;                                    // 0x04C8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class USoundCue*>                           IndividualSoundHibernating;                               // 0x04D8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class USoundCue*>                           IndividualSoundIdle;                                      // 0x04E8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	float                                              MaxIndivSwarmerRadius;                                    // 0x04F8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                NumIndivSwarmers;                                         // 0x04FC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData22[0x10];                                      // 0x0500(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendCrowdSetup");
		return ptr;
	}

};


// Class BendGame.BendCrowdSharedAnimSkeletalMeshComponent
// 0x0010 (0x0FA0 - 0x0F90)
class UBendCrowdSharedAnimSkeletalMeshComponent : public USkeletalMeshComponent
{
public:
	TEnumAsByte<EBendCrowdAnimState>                   AnimState;                                                // 0x0F90(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xF];                                       // 0x0F91(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendCrowdSharedAnimSkeletalMeshComponent");
		return ptr;
	}

};


// Class BendGame.BendCrowdTickReceiverComponent
// 0x0000 (0x00D0 - 0x00D0)
class UBendCrowdTickReceiverComponent : public UActorComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendCrowdTickReceiverComponent");
		return ptr;
	}

};


// Class BendGame.BendCrowdTracker
// 0x0018 (0x0360 - 0x0348)
class ABendCrowdTracker : public AActor
{
public:
	TEnumAsByte<EBendCrowdTrackerType>                 Type;                                                     // 0x0348(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0349(0x0007) MISSED OFFSET
	class AActor*                                      ReferenceObject;                                          // 0x0350(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              InterpolationRate;                                        // 0x0358(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x035C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendCrowdTracker");
		return ptr;
	}


	void SetType(TEnumAsByte<EBendCrowdTrackerType> TrackerType);
	void SetReferenceObject(class AActor* Object);
};


// Class BendGame.BendDamageType_ImpactVehicle
// 0x0000 (0x0050 - 0x0050)
class UBendDamageType_ImpactVehicle : public UDamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendDamageType_ImpactVehicle");
		return ptr;
	}

};


// Class BendGame.BendDamageType_Incendiary
// 0x0000 (0x0050 - 0x0050)
class UBendDamageType_Incendiary : public UDamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendDamageType_Incendiary");
		return ptr;
	}

};


// Class BendGame.BendDamageType_PhysicsObjectImpact
// 0x0000 (0x0050 - 0x0050)
class UBendDamageType_PhysicsObjectImpact : public UDamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendDamageType_PhysicsObjectImpact");
		return ptr;
	}

};


// Class BendGame.BendDamageType_RamBike
// 0x0000 (0x0050 - 0x0050)
class UBendDamageType_RamBike : public UDamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendDamageType_RamBike");
		return ptr;
	}

};


// Class BendGame.BendDamageType_Water
// 0x0000 (0x0050 - 0x0050)
class UBendDamageType_Water : public UDamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendDamageType_Water");
		return ptr;
	}

};


// Class BendGame.BendDefaultSkyProfile
// 0x0078 (0x03C0 - 0x0348)
class ABendDefaultSkyProfile : public AActor
{
public:
	int                                                PresetWeight;                                             // 0x0348(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x034C(0x0004) MISSED OFFSET
	class UTextRenderComponent*                        TextLabel_CodeReference;                                  // 0x0350(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UPostProcessComponent*                       PostProcessComponent_CodeReference;                       // 0x0358(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	bool                                               MissionOverride;                                          // 0x0360(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0361(0x0003) MISSED OFFSET
	float                                              MissionOverrideInterpolationRate;                         // 0x0364(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PostBlendAmount;                                          // 0x0368(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MipFogTransitionDistance;                                 // 0x036C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DistanceScale;                                            // 0x0370(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MieScatterTerm;                                           // 0x0374(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              RayleighScaleTerm;                                        // 0x0378(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MieScaleTerm;                                             // 0x037C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MieDirectionTerm;                                         // 0x0380(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ReferenceAltitudeMeters;                                  // 0x0384(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AltitudeScale;                                            // 0x0388(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     RayleighScatterTerm;                                      // 0x038C(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                SunColor;                                                 // 0x0398(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UPostProcessComponent*                       SP_Base;                                                  // 0x03A8(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	struct FLinearColor                                CloudLightingTint;                                        // 0x03B0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendDefaultSkyProfile");
		return ptr;
	}


	void UpdateProfile();
	void SetTextLabel(const struct FString& Text, const struct FLinearColor& Color);
	void SetPresetValues(float aMipFogTransitionDistance, float aDistanceScale, float aMieScatterTerm, float aRayleighScaleTerm, float aMieScaleTerm, float aMieDirectionTerm, float aReferenceAltitudeMeters, float aAltitudeScale, const struct FVector& aRayleighScatterTerm, const struct FLinearColor& aSunColor, const struct FLinearColor& aCloudLightingTint);
	void InitializeCodeReferences();
	float GetGameWorldTime();
};


// Class BendGame.BendDefendZone
// 0x0018 (0x03A0 - 0x0388)
class ABendDefendZone : public AVolume
{
public:
	bool                                               m_bActiveZone;                                            // 0x0388(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0389(0x0007) MISSED OFFSET
	TArray<class UClass*>                              TeamsToRegisterWith;                                      // 0x0390(0x0010) (Edit, BlueprintVisible, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendDefendZone");
		return ptr;
	}


	bool IsPointInDefendZone(const struct FVector& Point);
	struct FVector GetClosestPointWithinDefendZone(const struct FVector& Point);
	class UModel* GetBrush();
	void DeactivateZone();
	void ActivateZone();
};


// Class BendGame.BendDesignEditorActor
// 0x0010 (0x0358 - 0x0348)
class ABendDesignEditorActor : public AActor
{
public:
	struct FScriptMulticastDelegate                    EditorActorDeletedDelegate;                               // 0x0348(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendDesignEditorActor");
		return ptr;
	}


	void ReceiveBendEditorTick();
	void OnDeletedHandler(class AActor* InActor);
	void OnAddedHandler(class AActor* InActor);
	void OnActorMovedHandler(class AActor* InActor);
	void OnActorMoved(class AActor* InActor);
	void OnActorDeleted(class AActor* InActor);
	void OnActorAdded(class AActor* InActor);
};


// Class BendGame.BendDetourCrowdAvoidanceComponent
// 0x0038 (0x0108 - 0x00D0)
class UBendDetourCrowdAvoidanceComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x00D0(0x0008) MISSED OFFSET
	unsigned char                                      bUseDetourCrowsAvoidance : 1;                             // 0x00D8(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bAutoCalculateAgentDimensions : 1;                        // 0x00D8(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData01[0x3];                                       // 0x00D9(0x0003) MISSED OFFSET
	struct FVector                                     CenterOffset;                                             // 0x00DC(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bCenterOffsetInWorldSpace : 1;                            // 0x00E8(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData02[0x3];                                       // 0x00E9(0x0003) MISSED OFFSET
	float                                              AgentRadius;                                              // 0x00EC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AgentHeight;                                              // 0x00F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FNavAvoidanceMask                           AvoidanceGroup;                                           // 0x00F4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x10];                                      // 0x00F8(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendDetourCrowdAvoidanceComponent");
		return ptr;
	}


	void SetUseDetourCrowsAvoidance(bool Enabled);
	void SetCenterOffsetInWorldSpace(bool WorldSpace);
	void SetCenterOffset(const struct FVector& Offset);
	void SetAutoCalculateAgentDimensions(bool Enabled);
	void SetAgentRadius(float Radius);
	void SetAgentHeight(float Height);
};


// Class BendGame.BendDifficultyData
// 0x0150 (0x0178 - 0x0028)
class UBendDifficultyData : public UDataAsset
{
public:
	struct FPlayerDamageDealtMultiplier                PlayerDamageDealtMultiplier;                              // 0x0028(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FPlayerDamageRecievedMultiplier             PlayerDamageRecievedMultiplier;                           // 0x0040(0x0048) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FPlayerAmmoPickupMultiplier                 PlayerAmmoPickupMultiplier;                               // 0x0088(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FAimAssistGlobalSettings                    PlayerAimAssistSettings;                                  // 0x00A0(0x0060) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FFuelConsumptionMultiplier                  FuelConsumptionMultiplier;                                // 0x0100(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FNeroInjectorMultiplier                     NeroInjectorMultiplier;                                   // 0x0118(0x0048) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FExperienceMultiplier                       ExperienceMultiplier;                                     // 0x0160(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendDifficultyData");
		return ptr;
	}


	bool IsAimSnapProfileChangeAllowed(TEnumAsByte<EGameDifficulty> Difficulty);
	bool IsAimLockProfileChangeAllowed(TEnumAsByte<EGameDifficulty> Difficulty);
	bool IsAimFrictionProfileChangeAllowed(TEnumAsByte<EGameDifficulty> Difficulty);
	bool GetAimSnapOn(TEnumAsByte<EGameDifficulty> Difficulty);
	bool GetAimLockOn(TEnumAsByte<EGameDifficulty> Difficulty);
	float GetAimAssistMaxAngle(TEnumAsByte<EGameDifficulty> Difficulty);
};


// Class BendGame.BendDrawActorDataComponent
// 0x0010 (0x05E0 - 0x05D0)
class UBendDrawActorDataComponent : public UPrimitiveComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x05D0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendDrawActorDataComponent");
		return ptr;
	}

};


// Class BendGame.BendDrawPathDataComponent
// 0x0000 (0x05D0 - 0x05D0)
class UBendDrawPathDataComponent : public UPrimitiveComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendDrawPathDataComponent");
		return ptr;
	}

};


// Class BendGame.BendDynamicClimbAnimData
// 0x0DE8 (0x0E10 - 0x0028)
class UBendDynamicClimbAnimData : public UDataAsset
{
public:
	struct FClimbAnimSeparator                         ZeroMeterNegativeAnims;                                   // 0x0028(0x0220) (Edit, BlueprintVisible)
	struct FClimbAnimSeparator                         HalfMeterAnims;                                           // 0x0248(0x0220) (Edit, BlueprintVisible)
	struct FClimbAnimSeparator                         OneMeterAnims;                                            // 0x0468(0x0220) (Edit, BlueprintVisible)
	struct FClimbAnimSeparator                         OneAndHalfMeterAnims;                                     // 0x0688(0x0220) (Edit, BlueprintVisible)
	struct FClimbAnimSeparator                         TwoMeterAnims;                                            // 0x08A8(0x0220) (Edit, BlueprintVisible)
	struct FClimbAnimSeparator                         TwoAndHalfMeterAnims;                                     // 0x0AC8(0x0220) (Edit, BlueprintVisible)
	struct FInAirClimbAnimSeparator                    FootAirAnims;                                             // 0x0CE8(0x0060) (Edit, BlueprintVisible)
	struct FInAirClimbAnimSeparator                    WaistAirAnims;                                            // 0x0D48(0x0060) (Edit, BlueprintVisible)
	struct FInAirClimbAnimSeparator                    ArmsAirAnims;                                             // 0x0DA8(0x0060) (Edit, BlueprintVisible)
	bool                                               AddNegativeTolerance;                                     // 0x0E08(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0E09(0x0003) MISSED OFFSET
	float                                              AdditionalNegativeTolerance;                              // 0x0E0C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendDynamicClimbAnimData");
		return ptr;
	}


	struct FBendGenericAnimData GetClimbAnimation(const struct FClimbAnimSelectionData& SelectionData, bool WantsExitAnim);
};


// Class BendGame.BendHigherDynamicClimbAnimData
// 0x1320 (0x2130 - 0x0E10)
class UBendHigherDynamicClimbAnimData : public UBendDynamicClimbAnimData
{
public:
	struct FClimbAnimSeparator                         ThreeMeterAnims;                                          // 0x0E10(0x0220) (Edit, BlueprintVisible)
	struct FClimbAnimSeparator                         ThreeAndHalfMeterAnims;                                   // 0x1030(0x0220) (Edit, BlueprintVisible)
	struct FClimbAnimSeparator                         FourMeterAnims;                                           // 0x1250(0x0220) (Edit, BlueprintVisible)
	struct FClimbAnimSeparator                         FourAndHalfMeterAnims;                                    // 0x1470(0x0220) (Edit, BlueprintVisible)
	struct FClimbAnimSeparator                         FiveMeterAnims;                                           // 0x1690(0x0220) (Edit, BlueprintVisible)
	struct FClimbAnimSeparator                         FiveAndHalfMeterAnims;                                    // 0x18B0(0x0220) (Edit, BlueprintVisible)
	struct FClimbAnimSeparator                         SixMeterAnims;                                            // 0x1AD0(0x0220) (Edit, BlueprintVisible)
	struct FClimbAnimSeparator                         SixAndHalfMeterAnims;                                     // 0x1CF0(0x0220) (Edit, BlueprintVisible)
	struct FClimbAnimSeparator                         SevenMeterAnims;                                          // 0x1F10(0x0220) (Edit, BlueprintVisible)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendHigherDynamicClimbAnimData");
		return ptr;
	}


	struct FBendGenericAnimData GetClimbAnimation(const struct FClimbAnimSelectionData& SelectionData, bool WantsExitAnim);
};


// Class BendGame.BendDynamicConversationRole
// 0x0000 (0x0028 - 0x0028)
class UBendDynamicConversationRole : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendDynamicConversationRole");
		return ptr;
	}


	bool IsEqual(class UBendDynamicConversationRole* Role);
};


// Class BendGame.BendEdgeComponent
// 0x0010 (0x00E0 - 0x00D0)
class UBendEdgeComponent : public UActorComponent
{
public:
	class UEdgeSet*                                    EdgeSet;                                                  // 0x00D0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x00D8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendEdgeComponent");
		return ptr;
	}


	bool SetEdgeSet(class UEdgeSet* NewEdgeSet);
};


// Class BendGame.BendJobManager
// 0x0310 (0x0658 - 0x0348)
class ABendJobManager : public AActor
{
public:
	bool                                               Debug_AllowJobCompletionViaMapMenuActive;                 // 0x0348(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0349(0x0007) MISSED OFFSET
	TArray<class UJobClassInfo*>                       JobRefsInOrder;                                           // 0x0350(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<class UJobClassInfo*>                       CompletedJobsWithMapsWaitingToUnload;                     // 0x0360(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<class UJobClassInfo*>                       ActiveJobRefsInOrder;                                     // 0x0370(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<class UJobClassInfo*>                       PausedJobRefsInOrder;                                     // 0x0380(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<class UJobClassInfo*>                       WaitingOnTimeJobRefs;                                     // 0x0390(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FScriptMulticastDelegate                    OnJobEnded;                                               // 0x03A0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnJobSelectScreenEnded;                                   // 0x03B0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnJobUnlocked;                                            // 0x03C0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnJobAboutToLoadIn;                                       // 0x03D0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnArriveAtJobLocation;                                    // 0x03E0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnLeaveJobLocation;                                       // 0x03F0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnJobResetCalled;                                         // 0x0400(0x0010) (Edit, BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable)
	class UJobClassInfo*                               CurrentTrackedJob;                                        // 0x0410(0x0008) (BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	class ABendGameMission*                            MissionManagerPointer;                                    // 0x0418(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bBlockOWSaveForJob;                                       // 0x0420(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0421(0x0007) MISSED OFFSET
	struct FJobMapDetails                              TempforMapValues;                                         // 0x0428(0x0020) (Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UJobClassInfo*>                       StoredValues;                                             // 0x0448(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	struct FBendJobData                                TemporaryJobData;                                         // 0x0458(0x0158) (Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FName>                               LevelListToUnload;                                        // 0x05B0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	bool                                               FoundJob;                                                 // 0x05C0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x05C1(0x0007) MISSED OFFSET
	class UClass*                                      ClassReference;                                           // 0x05C8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<class UClass*>                              JobScriptClassRefs;                                       // 0x05D0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	bool                                               DebugSettingJobactive;                                    // 0x05E0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               DoNonAsynchLoads;                                         // 0x05E1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               LoadingSaves;                                             // 0x05E2(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x5];                                       // 0x05E3(0x0005) MISSED OFFSET
	TArray<struct FBendStoryLinesBasicDataForUI>       TempRewardsForStoryLine;                                  // 0x05E8(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FBendJobLevelRequest>                ActiveJobLevelStreamRequests;                             // 0x05F8(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	struct FTimespan                                   LastHordeResetTime;                                       // 0x0608(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame)
	struct FTimespan                                   LastAmbushCampResetTime;                                  // 0x0610(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame)
	struct FTimespan                                   LastInfestationCampResetTime;                             // 0x0618(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame)
	TArray<struct FString>                             Horde_StringsForDatabaseComplete;                         // 0x0620(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class UJobClassInfo*>                       ExtraHordeJobsToUnlockWithResetting;                      // 0x0630(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	class UJobClassInfo*                               CrierNestJobData;                                         // 0x0640(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<class UBendNestingZone*>                    ExtraNestingZones;                                        // 0x0648(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendJobManager");
		return ptr;
	}


	bool UnPauseJob(class UJobClassInfo* JobID);
	bool UnlockJobAtID(class UJobClassInfo* JobID);
	void UnloadListedLevels();
	bool StoreJobPreReqMissionTriggers();
	class UClass* StaticLoadJobscript(class UJobClassInfo* JobID);
	bool StartJobAtID(class UJobClassInfo* JobID, bool OnlyLoadIfUnlocked, bool UseSelectionScreen);
	bool StartEndingJob(class UJobClassInfo* JobID, TEnumAsByte<EMissionStates> State);
	void SpawnAndSetupJobScript(const struct FBendJobData& JobData, class UClass* ScriptClassReference);
	void ResetJobsByResetType(TEnumAsByte<EJobResetTypes> TypeOfReset);
	bool PullAndStoreJobDataTableInfo();
	bool PauseJob(class UJobClassInfo* JobID, bool PauseBecauseMissionActive);
	bool PauseAllActiveJobsForMission(bool Pause);
	void OnFinishLoad(class UClass* Actor);
	void LoadInLevelTickCheck(bool ForceBlockingLoad);
	void JobStreamRequestFinished();
	bool GiveJobRewardsNew(class UJobClassInfo* JobID);
	void GetJobScript(class UJobClassInfo* JobID, class ABendJobScript** TheScript);
	bool GetIsJobComplete(class UJobClassInfo* JobID);
	bool GetIsJobActive(class UJobClassInfo* JobID);
	class UJobClassInfo* GetCurrentFocusedJob();
	void GetAllActiveJobsData(TArray<struct FBendJobData>* JobData);
	TArray<class UJobClassInfo*> GetAllActiveJobDatas();
	bool FinishEndingJob(class UJobClassInfo* JobID, TEnumAsByte<EMissionStates> State);
	void DoCheckOnMapData(class UJobClassInfo* JobID, bool ForceBlockingLoad, struct FJobMapDetails* MapData, struct FVector* PointToCheckAround);
	bool DebugSetJobActive(class UJobClassInfo* JobID, int OverrideInt);
	bool DebugSetAllJobPreReqsToComplete(class UJobClassInfo* JobID, bool IncludeSelf);
	bool DebugCompleteAllJobObjectives(class UJobClassInfo* JobID);
	bool CheckTimeWaitToUnlockPreRequisite(class UJobClassInfo* JobID);
	bool CheckReLockReUnlockPreReqs(class UJobClassInfo* JobData);
	bool CheckJobPreRequisites(TArray<class UJobClassInfo*> JobIDs);
	bool CheckIfNeedToResetJobObjectFromJobReset(TEnumAsByte<EJobResetTypes> TypeOfReset, const struct FTimespan& LastTimeCheckedOnObject);
	void CheckIfAutoFailJob(class UJobClassInfo* JobID, bool* Failed, bool* Empty);
	class UJobClassInfo* CheckIfAnyJobIsAvailable(TArray<class UJobClassInfo*> JobIDs);
	bool CheckForJobsOnHourChange();
	bool CheckForAnyNewActiveJobs();
	bool CheckAllPReRequisites(class UJobClassInfo* JobID, TEnumAsByte<EMissionPreReqFailureReasons>* FailureReason);
	void ActivateJobAtIndex(bool IgnoreState, class UJobClassInfo* JobID);
};


// Class BendGame.JobClassInfo
// 0x0260 (0x0288 - 0x0028)
class UJobClassInfo : public UDataAsset
{
public:
	TAssetPtr<class UClass>                            ActorClass;                                               // 0x0028(0x0020) (Edit, BlueprintVisible)
	TAssetPtr<class UTexture2D>                        OverrideMapLocationImage;                                 // 0x0048(0x0020) (Edit, BlueprintVisible)
	TArray<struct FBendJobObjectives>                  DefaultJobObjectiveList;                                  // 0x0068(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<struct FJobMapDetails>                      JobMaps;                                                  // 0x0078(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FBendCinematicLevelData>             CinematicLevelsInJob;                                     // 0x0088(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	class UTexture2D*                                  OverrideJobMiniMapIcon;                                   // 0x0098(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FGameplayTag                                CollectibleUnlockedOnComplete;                            // 0x00A0(0x0008) (Edit, BlueprintVisible)
	TArray<struct FBendJobObjectives>                  CurrentJobObjectiveList;                                  // 0x00A8(0x0010) (Edit, BlueprintVisible, ZeroConstructor, EditConst)
	int                                                CurrentJobObjectiveIndex;                                 // 0x00B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, EditConst, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00BC(0x0004) MISSED OFFSET
	struct FName                                       StoredRowName;                                            // 0x00C0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	TEnumAsByte<EMissionStates>                        JobCurrentState;                                          // 0x00C8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x00C9(0x0007) MISSED OFFSET
	TArray<class UBendMissionData*>                    MissionDataRefs;                                          // 0x00D0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, EditConst)
	class ABendJobScript*                              JobScriptReference;                                       // 0x00E0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	TArray<class UBendUseCondition*>                   Conditions;                                               // 0x00E8(0x0010) (Edit, BlueprintVisible, ZeroConstructor, EditConst)
	bool                                               PausedForMission;                                         // 0x00F8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, EditConst, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x00F9(0x0003) MISSED OFFSET
	int                                                DayCompleted;                                             // 0x00FC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, EditConst, SaveGame, IsPlainOldData)
	int                                                HourCompleted;                                            // 0x0100(0x0004) (Edit, BlueprintVisible, ZeroConstructor, EditConst, SaveGame, IsPlainOldData)
	bool                                               JobHasBeenActive;                                         // 0x0104(0x0001) (Edit, BlueprintVisible, ZeroConstructor, EditConst, SaveGame, IsPlainOldData)
	bool                                               JumpToStorylineMenuInRewardsScreen;                       // 0x0105(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x2];                                       // 0x0106(0x0002) MISSED OFFSET
	struct FBendJobData                                StoredJobData;                                            // 0x0108(0x0158) (Edit, BlueprintVisible, EditConst)
	TEnumAsByte<EObjectiveCategories>                  ObjectiveCategory;                                        // 0x0260(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x7];                                       // 0x0261(0x0007) MISSED OFFSET
	TArray<struct FName>                               DoOnceComparisonArray;                                    // 0x0268(0x0010) (ZeroConstructor, SaveGame)
	TArray<bool>                                       DoOnceBools;                                              // 0x0278(0x0010) (ZeroConstructor, SaveGame)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.JobClassInfo");
		return ptr;
	}


	void SetDoOnceVariableAtIndex(const struct FName& Index, bool NewValue);
	struct FString GetIdentifierInStringForm();
	bool GetDoOnceVariableAtIndex(const struct FName& Index);
	TArray<struct FText> GetAllCurrentObjectiveConditionsRequirements(const struct FName& ObjectiveID);
	struct FText GetActiveJobObjectiveText();
	class UClass* Get(class AActor* Actor);
	void ClearDoOnceVariables();
	bool CheckIfPassObjectiveConditions(const struct FName& ObjectiveID, struct FText* FailureText);
};


// Class BendGame.BendJobCinematicPreLoader
// 0x0030 (0x0378 - 0x0348)
class ABendJobCinematicPreLoader : public AActor
{
public:
	class UBendSphereComponent*                        BendSphereComponent;                                      // 0x0348(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UJobClassInfo*                               JobDataAsset;                                             // 0x0350(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FName                                       CinematicID;                                              // 0x0358(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               CurrentlyActive;                                          // 0x0360(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData)
	bool                                               AutoDeactivateIfCinematicPlays;                           // 0x0361(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               MapIsPreLoaded;                                           // 0x0362(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0363(0x0001) MISSED OFFSET
	int                                                CinematicIndex;                                           // 0x0364(0x0004) (ZeroConstructor, IsPlainOldData)
	struct FName                                       CinematicLevelName;                                       // 0x0368(0x0008) (ZeroConstructor, IsPlainOldData)
	class ABendGameMission*                            MissionManagerRef;                                        // 0x0370(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendJobCinematicPreLoader");
		return ptr;
	}


	void PlayerEndOverlap();
	void PlayerBeginOverlap();
	void CinematicStarted(const struct FName& CinName);
	void ActivateCinematicPreLoader(bool Activate);
};


// Class BendGame.BendEncampmentData
// 0x00B0 (0x00D8 - 0x0028)
class UBendEncampmentData : public UDataAsset
{
public:
	struct FString                                     Name;                                                     // 0x0028(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	struct FText                                       EncampmentNameText;                                       // 0x0038(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly)
	TEnumAsByte<EAIFactionType>                        Faction;                                                  // 0x0050(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0051(0x0007) MISSED OFFSET
	class UMerchantInventory*                          MerchantDataAsset;                                        // 0x0058(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UMerchantInventory*                          MechanicDataAsset;                                        // 0x0060(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                MaxSurvivors;                                             // 0x0068(0x0004) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	int                                                CurSurvivors;                                             // 0x006C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	float                                              FoodNeed;                                                 // 0x0070(0x0004) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	int                                                Credits;                                                  // 0x0074(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData)
	int                                                CreditsSpentAtEncampment;                                 // 0x0078(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      Discovered : 1;                                           // 0x007C(0x0001) (Edit, BlueprintVisible, SaveGame)
	unsigned char                                      UnknownData01[0x3];                                       // 0x007D(0x0003) MISSED OFFSET
	float                                              TrustNeededToStartJobs;                                   // 0x0080(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0084(0x0004) MISSED OFFSET
	struct FTimespan                                   LastVisitTime;                                            // 0x0088(0x0008) (Edit, BlueprintVisible, ZeroConstructor, SaveGame)
	bool                                               HasReachedMaxTrust;                                       // 0x0090(0x0001) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData03[0x7];                                       // 0x0091(0x0007) MISSED OFFSET
	TArray<struct FJobGiverDetails>                    JobGiverData;                                             // 0x0098(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FEncampmentGateState>                GateStates;                                               // 0x00A8(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FScriptMulticastDelegate                    OnGateStateRequest;                                       // 0x00B8(0x0010) (Edit, BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnGateOpenOrClosedFully;                                  // 0x00C8(0x0010) (Edit, BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendEncampmentData");
		return ptr;
	}


	bool SpendCredits(int toSpend);
	void SetTrust(int Trust);
	void SetJobValuesToDefaults();
	void SetGiverActiveJob(int Index, class UJobClassInfo* NewJobData);
	void SetEncampmentGateToState(int GateIndex, bool Lock, bool LockToOpenState, bool PlayTheAnimation);
	void ResetGateStates();
	void ResetEncampmentData();
	float ModifyTrust(int modification, bool Notify);
	TEnumAsByte<ETrustTier> GetTrustLevel();
	struct FTrustData GetTrustData();
	int GetTrust();
	int GetEncampmentJobcompletionCount(int* TotalCount, float* Percentage);
	float GetCompletionPercent();
	TArray<class UJobClassInfo*> GetAllEncampmentJobs();
	TArray<struct FString> GenerateVoLines(const struct FString& JobType, const struct FString& JobLocation, bool Radio, bool RecievingJob);
	int GainCredits(int toGain);
};


// Class BendGame.BendEnclosedSpaceOverrideVolume
// 0x0008 (0x0390 - 0x0388)
class ABendEnclosedSpaceOverrideVolume : public AVolume
{
public:
	bool                                               ValidForAttackInto;                                       // 0x0388(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               ValidForDefendIn;                                         // 0x0389(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x038A(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendEnclosedSpaceOverrideVolume");
		return ptr;
	}


	bool ContainsPoint(const struct FVector& Point);
};


// Class BendGame.BendEnvCommon
// 0x0048 (0x0390 - 0x0348)
class ABendEnvCommon : public AActor
{
public:
	float                                              UpdateTime;                                               // 0x0348(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DeltaSeconds;                                             // 0x034C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class ABendWorldManager*                           WorldManager;                                             // 0x0350(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     windDirection;                                            // 0x0358(0x000C) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               PrintVariablestoScreen;                                   // 0x0364(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0365(0x0003) MISSED OFFSET
	float                                              windTurbulenceUvPosition_X;                               // 0x0368(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              windTurbulenceUvPosition_Y;                               // 0x036C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              WindTurbulenceUVResetThreshold;                           // 0x0370(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               OverrideWindDirection;                                    // 0x0374(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0375(0x0003) MISSED OFFSET
	struct FVector                                     OverrideWindDirectionVector;                              // 0x0378(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0384(0x0004) MISSED OFFSET
	class UMaterialParameterCollection*                envCommonParameterCollection;                             // 0x0388(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendEnvCommon");
		return ptr;
	}

};


// Class BendGame.BendEnvGlobals
// 0x0010 (0x0358 - 0x0348)
class ABendEnvGlobals : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0348(0x0008) MISSED OFFSET
	class UMaterialParameterCollection*                MaterialParameterCollection;                              // 0x0350(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendEnvGlobals");
		return ptr;
	}

};


// Class BendGame.BendEQSContext_Buddy
// 0x0000 (0x0028 - 0x0028)
class UBendEQSContext_Buddy : public UEnvQueryContext
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendEQSContext_Buddy");
		return ptr;
	}

};


// Class BendGame.BendEQSContext_BuddyCombatLocation
// 0x0000 (0x0028 - 0x0028)
class UBendEQSContext_BuddyCombatLocation : public UEnvQueryContext
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendEQSContext_BuddyCombatLocation");
		return ptr;
	}

};


// Class BendGame.BendEQSContext_ClosestRoadPoint
// 0x0000 (0x0028 - 0x0028)
class UBendEQSContext_ClosestRoadPoint : public UEnvQueryContext
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendEQSContext_ClosestRoadPoint");
		return ptr;
	}

};


// Class BendGame.BendEQSContext_CombatCenter
// 0x0000 (0x0028 - 0x0028)
class UBendEQSContext_CombatCenter : public UEnvQueryContext
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendEQSContext_CombatCenter");
		return ptr;
	}

};


// Class BendGame.BendEQSContext_EngagementPoint
// 0x0000 (0x0028 - 0x0028)
class UBendEQSContext_EngagementPoint : public UEnvQueryContext
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendEQSContext_EngagementPoint");
		return ptr;
	}

};


// Class BendGame.BendEQSContext_FacingTarget
// 0x0000 (0x0028 - 0x0028)
class UBendEQSContext_FacingTarget : public UEnvQueryContext
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendEQSContext_FacingTarget");
		return ptr;
	}

};


// Class BendGame.BendEQSContext_FireFocus
// 0x0000 (0x0028 - 0x0028)
class UBendEQSContext_FireFocus : public UEnvQueryContext
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendEQSContext_FireFocus");
		return ptr;
	}

};


// Class BendGame.BendEQSContext_FireFocusActor
// 0x0000 (0x0028 - 0x0028)
class UBendEQSContext_FireFocusActor : public UEnvQueryContext
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendEQSContext_FireFocusActor");
		return ptr;
	}

};


// Class BendGame.BendEQSContext_FireFocusNoDZ
// 0x0000 (0x0028 - 0x0028)
class UBendEQSContext_FireFocusNoDZ : public UEnvQueryContext
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendEQSContext_FireFocusNoDZ");
		return ptr;
	}

};


// Class BendGame.BendEQSContext_FleePoint
// 0x0000 (0x0028 - 0x0028)
class UBendEQSContext_FleePoint : public UEnvQueryContext
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendEQSContext_FleePoint");
		return ptr;
	}

};


// Class BendGame.BendEQSContext_LastKnownLoc
// 0x0000 (0x0028 - 0x0028)
class UBendEQSContext_LastKnownLoc : public UEnvQueryContext
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendEQSContext_LastKnownLoc");
		return ptr;
	}

};


// Class BendGame.BendEQSContext_MoveFocus
// 0x0000 (0x0028 - 0x0028)
class UBendEQSContext_MoveFocus : public UEnvQueryContext
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendEQSContext_MoveFocus");
		return ptr;
	}

};


// Class BendGame.BendEQSContext_OtherAttackers
// 0x0000 (0x0028 - 0x0028)
class UBendEQSContext_OtherAttackers : public UEnvQueryContext
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendEQSContext_OtherAttackers");
		return ptr;
	}

};


// Class BendGame.BendEQSContext_OthersOfFaction
// 0x0000 (0x0028 - 0x0028)
class UBendEQSContext_OthersOfFaction : public UEnvQueryContext
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendEQSContext_OthersOfFaction");
		return ptr;
	}

};


// Class BendGame.BendEQSContext_PlayerCameraRot
// 0x0000 (0x0028 - 0x0028)
class UBendEQSContext_PlayerCameraRot : public UEnvQueryContext
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendEQSContext_PlayerCameraRot");
		return ptr;
	}

};


// Class BendGame.BendEQSContext_TeamDestination
// 0x0000 (0x0028 - 0x0028)
class UBendEQSContext_TeamDestination : public UEnvQueryContext
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendEQSContext_TeamDestination");
		return ptr;
	}

};


// Class BendGame.BendEQSContext_ThreatLocation
// 0x0000 (0x0028 - 0x0028)
class UBendEQSContext_ThreatLocation : public UEnvQueryContext
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendEQSContext_ThreatLocation");
		return ptr;
	}

};


// Class BendGame.BendEQSGenerator_Arc
// 0x0110 (0x0190 - 0x0080)
class UBendEQSGenerator_Arc : public UEnvQueryGenerator_ProjectedPoints
{
public:
	struct FAIDataProviderIntValue                     NumberOfPoints;                                           // 0x0080(0x0030) (Edit, DisableEditOnInstance)
	struct FAIDataProviderFloatValue                   ArcAngle;                                                 // 0x00B0(0x0030) (Edit, DisableEditOnInstance)
	bool                                               ArcTowardsFacingPoint;                                    // 0x00E0(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               UseMinDistanceBetweenPoints;                              // 0x00E1(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x00E2(0x0006) MISSED OFFSET
	struct FAIDataProviderFloatValue                   MinDistanceBetweenPoints;                                 // 0x00E8(0x0030) (Edit, DisableEditOnInstance)
	bool                                               UseMaxArcLength;                                          // 0x0118(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0119(0x0007) MISSED OFFSET
	struct FAIDataProviderFloatValue                   MaxArcLength;                                             // 0x0120(0x0030) (Edit, DisableEditOnInstance)
	struct FAIDataProviderFloatValue                   MaxArcRadius;                                             // 0x0150(0x0030) (Edit, DisableEditOnInstance)
	class UClass*                                      ArcOrigin;                                                // 0x0180(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UClass*                                      ArcFacingPoint;                                           // 0x0188(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendEQSGenerator_Arc");
		return ptr;
	}

};


// Class BendGame.BendEQSGenerator_AroundEnclosedSpace
// 0x0060 (0x00E0 - 0x0080)
class UBendEQSGenerator_AroundEnclosedSpace : public UEnvQueryGenerator_ProjectedPoints
{
public:
	struct FAIDataProviderFloatValue                   MinDistanceBetweenPoints;                                 // 0x0080(0x0030) (Edit, DisableEditOnInstance)
	struct FAIDataProviderIntValue                     PointsDepth;                                              // 0x00B0(0x0030) (Edit, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendEQSGenerator_AroundEnclosedSpace");
		return ptr;
	}

};


// Class BendGame.BendEQSGenerator_Constrained
// 0x0038 (0x00B8 - 0x0080)
class UBendEQSGenerator_Constrained : public UEnvQueryGenerator_ProjectedPoints
{
public:
	struct FAIDataProviderFloatValue                   MinDistanceBetweenPoints;                                 // 0x0080(0x0030) (Edit, DisableEditOnInstance)
	int                                                MaxPointsGenerated;                                       // 0x00B0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               UseRectangularGeneation;                                  // 0x00B4(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00B5(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendEQSGenerator_Constrained");
		return ptr;
	}

};


// Class BendGame.BendEQSGenerator_AroundEnclosedSpaceOverrideVolume
// 0x0010 (0x00C8 - 0x00B8)
class UBendEQSGenerator_AroundEnclosedSpaceOverrideVolume : public UBendEQSGenerator_Constrained
{
public:
	float                                              SurroundDistance;                                         // 0x00B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xC];                                       // 0x00BC(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendEQSGenerator_AroundEnclosedSpaceOverrideVolume");
		return ptr;
	}

};


// Class BendGame.BendEQSGenerator_DefendZone
// 0x0008 (0x00C0 - 0x00B8)
class UBendEQSGenerator_DefendZone : public UBendEQSGenerator_Constrained
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x00B8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendEQSGenerator_DefendZone");
		return ptr;
	}

};


// Class BendGame.BendEQSGenerator_EnclosedSpaceOverrideVolume
// 0x0008 (0x00C0 - 0x00B8)
class UBendEQSGenerator_EnclosedSpaceOverrideVolume : public UBendEQSGenerator_Constrained
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x00B8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendEQSGenerator_EnclosedSpaceOverrideVolume");
		return ptr;
	}

};


// Class BendGame.BendEQSGenerator_Fortification
// 0x0008 (0x00C0 - 0x00B8)
class UBendEQSGenerator_Fortification : public UBendEQSGenerator_Constrained
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x00B8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendEQSGenerator_Fortification");
		return ptr;
	}

};


// Class BendGame.BendEQSGenerator_Cover
// 0x0070 (0x00F0 - 0x0080)
class UBendEQSGenerator_Cover : public UEnvQueryGenerator_ProjectedPoints
{
public:
	class UClass*                                      CoverSearchCenter;                                        // 0x0080(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FAIDataProviderFloatValue                   CoverCylinderRadius;                                      // 0x0088(0x0030) (Edit, DisableEditOnInstance)
	struct FAIDataProviderFloatValue                   CoverCylinderHeight;                                      // 0x00B8(0x0030) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x8];                                       // 0x00E8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendEQSGenerator_Cover");
		return ptr;
	}

};


// Class BendGame.BendEQSGenerator_DonutGrid
// 0x0128 (0x01A8 - 0x0080)
class UBendEQSGenerator_DonutGrid : public UEnvQueryGenerator_ProjectedPoints
{
public:
	struct FAIDataProviderFloatValue                   CircleRadius;                                             // 0x0080(0x0030) (Edit, DisableEditOnInstance)
	struct FAIDataProviderFloatValue                   InnerCircleRadius;                                        // 0x00B0(0x0030) (Edit, DisableEditOnInstance)
	struct FAIDataProviderFloatValue                   SpaceBetween;                                             // 0x00E0(0x0030) (Edit, DisableEditOnInstance)
	struct FEnvDirection                               ArcDirection;                                             // 0x0110(0x0020) (Edit, DisableEditOnInstance)
	struct FAIDataProviderFloatValue                   ArcAngle;                                                 // 0x0130(0x0030) (Edit, DisableEditOnInstance)
	float                                              AngleRadians;                                             // 0x0160(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0164(0x0004) MISSED OFFSET
	class UClass*                                      CircleCenter;                                             // 0x0168(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FAIDataProviderFloatValue                   CircleCenterZOffset;                                      // 0x0170(0x0030) (Edit)
	unsigned char                                      bDefineArc : 1;                                           // 0x01A0(0x0001)
	unsigned char                                      UnknownData01[0x7];                                       // 0x01A1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendEQSGenerator_DonutGrid");
		return ptr;
	}

};


// Class BendGame.BendEQSGenerator_EnclosedSpace
// 0x0030 (0x00B0 - 0x0080)
class UBendEQSGenerator_EnclosedSpace : public UEnvQueryGenerator_ProjectedPoints
{
public:
	struct FAIDataProviderFloatValue                   MinDistanceBetweenPoints;                                 // 0x0080(0x0030) (Edit, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendEQSGenerator_EnclosedSpace");
		return ptr;
	}

};


// Class BendGame.BendEQSGenerator_FlankEnemy
// 0x0090 (0x0110 - 0x0080)
class UBendEQSGenerator_FlankEnemy : public UEnvQueryGenerator_ProjectedPoints
{
public:
	struct FAIDataProviderIntValue                     NumberOfPointsDepth;                                      // 0x0080(0x0030) (Edit, DisableEditOnInstance)
	struct FAIDataProviderIntValue                     NumberOfPointsWidth;                                      // 0x00B0(0x0030) (Edit, DisableEditOnInstance)
	struct FAIDataProviderFloatValue                   DistanceBetweenPoints;                                    // 0x00E0(0x0030) (Edit, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendEQSGenerator_FlankEnemy");
		return ptr;
	}

};


// Class BendGame.BendEQSGenerator_FrontLine
// 0x00A0 (0x0120 - 0x0080)
class UBendEQSGenerator_FrontLine : public UEnvQueryGenerator_ProjectedPoints
{
public:
	struct FAIDataProviderIntValue                     NumberOfPoints;                                           // 0x0080(0x0030) (Edit, DisableEditOnInstance)
	bool                                               UseMinDistanceBetweenPoints;                              // 0x00B0(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00B1(0x0007) MISSED OFFSET
	struct FAIDataProviderFloatValue                   MinDistanceBetweenPoints;                                 // 0x00B8(0x0030) (Edit, DisableEditOnInstance)
	bool                                               UseMaxDistanceFromFrontLine;                              // 0x00E8(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x00E9(0x0007) MISSED OFFSET
	struct FAIDataProviderFloatValue                   MaxDistanceFromFrontLine;                                 // 0x00F0(0x0030) (Edit, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendEQSGenerator_FrontLine");
		return ptr;
	}

};


// Class BendGame.BendEQSGenerator_FrontLineLane
// 0x0030 (0x00B0 - 0x0080)
class UBendEQSGenerator_FrontLineLane : public UEnvQueryGenerator_ProjectedPoints
{
public:
	struct FAIDataProviderFloatValue                   MinDistanceBetweenPoints;                                 // 0x0080(0x0030) (Edit, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendEQSGenerator_FrontLineLane");
		return ptr;
	}

};


// Class BendGame.BendEQSGenerator_HomeEntity
// 0x0030 (0x00B0 - 0x0080)
class UBendEQSGenerator_HomeEntity : public UEnvQueryGenerator_ProjectedPoints
{
public:
	struct FAIDataProviderFloatValue                   MinDistanceBetweenPoints;                                 // 0x0080(0x0030) (Edit, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendEQSGenerator_HomeEntity");
		return ptr;
	}

};


// Class BendGame.BendEQSGenerator_Line
// 0x00A8 (0x0128 - 0x0080)
class UBendEQSGenerator_Line : public UEnvQueryGenerator_ProjectedPoints
{
public:
	struct FAIDataProviderIntValue                     NumberOfPoints;                                           // 0x0080(0x0030) (Edit, DisableEditOnInstance)
	struct FAIDataProviderFloatValue                   LineWidth;                                                // 0x00B0(0x0030) (Edit, DisableEditOnInstance)
	bool                                               UseMinDistanceBetweenPoints;                              // 0x00E0(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00E1(0x0007) MISSED OFFSET
	struct FAIDataProviderFloatValue                   MinDistanceBetweenPoints;                                 // 0x00E8(0x0030) (Edit, DisableEditOnInstance)
	class UClass*                                      LineOrigin;                                               // 0x0118(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UClass*                                      LineFacingPoint;                                          // 0x0120(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendEQSGenerator_Line");
		return ptr;
	}

};


// Class BendGame.BendEQSGenerator_LocationProxies
// 0x0040 (0x0090 - 0x0050)
class UBendEQSGenerator_LocationProxies : public UEnvQueryGenerator
{
public:
	struct FAIDataProviderFloatValue                   SearchRadius;                                             // 0x0050(0x0030) (Edit, DisableEditOnInstance)
	struct FName                                       ProxyCategory;                                            // 0x0080(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      SearchCenter;                                             // 0x0088(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendEQSGenerator_LocationProxies");
		return ptr;
	}

};


// Class BendGame.BendEQSTest_CheckAvoidance
// 0x0000 (0x01C0 - 0x01C0)
class UBendEQSTest_CheckAvoidance : public UEnvQueryTest
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendEQSTest_CheckAvoidance");
		return ptr;
	}

};


// Class BendGame.BendEQSTest_CloserThan
// 0x0018 (0x01D8 - 0x01C0)
class UBendEQSTest_CloserThan : public UEnvQueryTest
{
public:
	TEnumAsByte<EEnvTestDistance>                      TestMode;                                                 // 0x01C0(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x01C1(0x0007) MISSED OFFSET
	class UClass*                                      TestLocationA;                                            // 0x01C8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      TestLocationB;                                            // 0x01D0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendEQSTest_CloserThan");
		return ptr;
	}

};


// Class BendGame.BendEQSTest_DistanceToDetected
// 0x0008 (0x01C8 - 0x01C0)
class UBendEQSTest_DistanceToDetected : public UEnvQueryTest
{
public:
	TEnumAsByte<EEnvTestDistance>                      TestMode;                                                 // 0x01C0(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<EEnvTestDetectedPawnType>              TestType;                                                 // 0x01C1(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x01C2(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendEQSTest_DistanceToDetected");
		return ptr;
	}

};


// Class BendGame.BendEQSTest_FoliageTrace
// 0x0098 (0x0258 - 0x01C0)
class UBendEQSTest_FoliageTrace : public UEnvQueryTest
{
public:
	struct FAIDataProviderBoolValue                    TraceFromContext;                                         // 0x01C0(0x0030) (Edit, DisableEditOnInstance)
	struct FAIDataProviderFloatValue                   ItemHeightOffset;                                         // 0x01F0(0x0030) (Edit, DisableEditOnInstance)
	struct FAIDataProviderFloatValue                   ContextHeightOffset;                                      // 0x0220(0x0030) (Edit, DisableEditOnInstance)
	class UClass*                                      Context;                                                  // 0x0250(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendEQSTest_FoliageTrace");
		return ptr;
	}

};


// Class BendGame.BendEQSTest_FrontLine
// 0x0008 (0x01C8 - 0x01C0)
class UBendEQSTest_FrontLine : public UEnvQueryTest
{
public:
	bool                                               UseAcceptableWidth;                                       // 0x01C0(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               UseAcceptableDepth;                                       // 0x01C1(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x01C2(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendEQSTest_FrontLine");
		return ptr;
	}

};


// Class BendGame.BendEQSTest_InDefendZone
// 0x0008 (0x01C8 - 0x01C0)
class UBendEQSTest_InDefendZone : public UEnvQueryTest
{
public:
	bool                                               HardDefendZoneOnlyRestrictedIfInsideDZ;                   // 0x01C0(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               AlwaysTestHardDZ;                                         // 0x01C1(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x01C2(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendEQSTest_InDefendZone");
		return ptr;
	}

};


// Class BendGame.BendEQSTest_IsFlankingEnemy
// 0x0000 (0x01C0 - 0x01C0)
class UBendEQSTest_IsFlankingEnemy : public UEnvQueryTest
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendEQSTest_IsFlankingEnemy");
		return ptr;
	}

};


// Class BendGame.BendEQSTest_NavTrace
// 0x0040 (0x0200 - 0x01C0)
class UBendEQSTest_NavTrace : public UEnvQueryTest
{
public:
	class UClass*                                      Context;                                                  // 0x01C0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      FilterClass;                                              // 0x01C8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FAIDataProviderFloatValue                   MaxDistanceFromLocation;                                  // 0x01D0(0x0030) (Edit, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendEQSTest_NavTrace");
		return ptr;
	}

};


// Class BendGame.BendEQSTest_NotInNoMansLandOrEnemyTerritory
// 0x0000 (0x01C0 - 0x01C0)
class UBendEQSTest_NotInNoMansLandOrEnemyTerritory : public UEnvQueryTest
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendEQSTest_NotInNoMansLandOrEnemyTerritory");
		return ptr;
	}

};


// Class BendGame.BendEQSTest_OffScreen
// 0x0000 (0x01C0 - 0x01C0)
class UBendEQSTest_OffScreen : public UEnvQueryTest
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendEQSTest_OffScreen");
		return ptr;
	}

};


// Class BendGame.BendEQSTest_UnclaimedLocation
// 0x0030 (0x01F0 - 0x01C0)
class UBendEQSTest_UnclaimedLocation : public UEnvQueryTest
{
public:
	struct FAIDataProviderFloatValue                   MaxDistanceFromLocation;                                  // 0x01C0(0x0030) (Edit, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendEQSTest_UnclaimedLocation");
		return ptr;
	}

};


// Class BendGame.BendEquippableItem_Flashlight
// 0x0000 (0x05B0 - 0x05B0)
class ABendEquippableItem_Flashlight : public ABendEquippableItem
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendEquippableItem_Flashlight");
		return ptr;
	}

};


// Class BendGame.BendWeapon_Instant
// 0x0060 (0x2A60 - 0x2A00)
class ABendWeapon_Instant : public ABendWeapon
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x2A00(0x0028) MISSED OFFSET
	class UClass*                                      ImpactTemplate;                                           // 0x2A28(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UParticleSystem*                             TrailFX;                                                  // 0x2A30(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       TrailTargetParam;                                         // 0x2A38(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FInstantHitInfo                             HitNotify;                                                // 0x2A40(0x0014) (Net, Transient)
	unsigned char                                      UnknownData01[0xC];                                       // 0x2A54(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendWeapon_Instant");
		return ptr;
	}


	void ServerNotifyMiss(const struct FVector& ShootDir, int RandomSeed, float ReticleSpread);
	void ServerNotifyHit(const struct FHitResult& Impact, const struct FVector& ShootDir, int RandomSeed, float ReticleSpread);
	void OnRep_HitNotify();
};


// Class BendGame.BendWeapon_Projectile
// 0x0080 (0x2A80 - 0x2A00)
class ABendWeapon_Projectile : public ABendWeapon
{
public:
	class UPrimitiveComponent*                         EffectPreview;                                            // 0x2A00(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	float                                              OverrideEffectRadius;                                     // 0x2A08(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PreviewLerpRate;                                          // 0x2A0C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               PreviewLoop;                                              // 0x2A10(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1F];                                      // 0x2A11(0x001F) MISSED OFFSET
	class UBendAIFlowLineRepellerComponent*            ProjectileNpcRepellerComponent;                           // 0x2A30(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData01[0x28];                                      // 0x2A38(0x0028) MISSED OFFSET
	bool                                               m_bUsesLaserBeam;                                         // 0x2A60(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x2A61(0x0007) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnProjectileSpawned;                                      // 0x2A68(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData03[0x8];                                       // 0x2A78(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendWeapon_Projectile");
		return ptr;
	}


	float GetCurrentOverheatedCooldownTimeRemaining();
	float GetCurrentMinDamage();
	float GetCurrentMaxDamage();
	float GetCurrentHeatPercent();
	float GetCurrentHeat();
};


// Class BendGame.BendWeapon_Rock
// 0x0000 (0x2A80 - 0x2A80)
class ABendWeapon_Rock : public ABendWeapon_Projectile
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendWeapon_Rock");
		return ptr;
	}

};


// Class BendGame.BendWeaponMeleeBase
// 0x0020 (0x2AA0 - 0x2A80)
class ABendWeaponMeleeBase : public ABendWeapon_Projectile
{
public:
	struct FVector                                     LastPosition;                                             // 0x2A80(0x000C) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     CurrentPosition;                                          // 0x2A8C(0x000C) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               DisplayDebug;                                             // 0x2A98(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               FirstTimeIn;                                              // 0x2A99(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x2A9A(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendWeaponMeleeBase");
		return ptr;
	}


	void OnDebuggingActive();
};


// Class BendGame.BendWeaponGunBase
// 0x0090 (0x2B30 - 0x2AA0)
class ABendWeaponGunBase : public ABendWeaponMeleeBase
{
public:
	class UForceFeedbackEffect*                        ForceFeedback;                                            // 0x2AA0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               HeldByPlayer;                                             // 0x2AA8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x2AA9(0x0007) MISSED OFFSET
	class UBendCamFollow*                              BendCamFollow;                                            // 0x2AB0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ManualAimCamDistance;                                     // 0x2AB8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ReticleScale;                                             // 0x2ABC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               HideReticle;                                              // 0x2AC0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x2AC1(0x0003) MISSED OFFSET
	int                                                AmtDamageToApply;                                         // 0x2AC4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               WeaponArmed;                                              // 0x2AC8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x2AC9(0x0003) MISSED OFFSET
	float                                              ShakeMagnitude;                                           // 0x2ACC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ShakeDuration;                                            // 0x2AD0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               Debug_AccuracyCone;                                       // 0x2AD4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x2AD5(0x0003) MISSED OFFSET
	float                                              CurrentAccuracyCone;                                      // 0x2AD8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MinAccuracyCone;                                          // 0x2ADC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxAccuracyCone;                                          // 0x2AE0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MinReticleSize;                                           // 0x2AE4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxReticleSize;                                           // 0x2AE8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x2AEC(0x0004) MISSED OFFSET
	class UCurveFloat*                                 ReticleSizeGraph;                                         // 0x2AF0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                DamagePerHit;                                             // 0x2AF8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x4];                                       // 0x2AFC(0x0004) MISSED OFFSET
	TArray<TEnumAsByte<EInventorySkillID>>             SkillsToCheck;                                            // 0x2B00(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	struct FGameplayTag                                LocalSkillTag;                                            // 0x2B10(0x0008) (Edit, BlueprintVisible, DisableEditOnInstance)
	class UMaterialInstanceDynamic*                    GunMaterial;                                              // 0x2B18(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                LocalMaterialIndex;                                       // 0x2B20(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               ShouldChangeClipMesh;                                     // 0x2B24(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               ShouldHideClipOnReload;                                   // 0x2B25(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0xA];                                       // 0x2B26(0x000A) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendWeaponGunBase");
		return ptr;
	}

};


// Class BendGame.BendWeapon_Flamethrower
// 0x0050 (0x2B80 - 0x2B30)
class ABendWeapon_Flamethrower : public ABendWeaponGunBase
{
public:
	float                                              GravityFactor;                                            // 0x2B30(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              Length;                                                   // 0x2B34(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class USkeletalMeshComponent*                      FlameEffectMesh;                                          // 0x2B38(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	bool                                               Debug;                                                    // 0x2B40(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3F];                                      // 0x2B41(0x003F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendWeapon_Flamethrower");
		return ptr;
	}


	struct FTransform GetTransform(float RelativeTime);
};


// Class BendGame.BendTrap
// 0x0128 (0x0470 - 0x0348)
class ABendTrap : public AActor
{
public:
	class USceneComponent*                             BaseSceneComponent;                                       // 0x0348(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class USkeletalMeshComponent*                      TrapSkeletalMesh;                                         // 0x0350(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class USkeletalMeshComponent*                      UsedTrapSkeletalMesh;                                     // 0x0358(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UBendSphereComponent*                        TrapOverlapSphere;                                        // 0x0360(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UBendWidgetComponent*                        ExplosionWidget;                                          // 0x0368(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FTransform                                  WeaponLocation;                                           // 0x0370(0x0030) (Edit, DisableEditOnInstance, EditConst, IsPlainOldData)
	class UClass*                                      DamageType;                                               // 0x03A0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<EExplosiveType>                        ExplosiveType;                                            // 0x03A8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x03A9(0x0007) MISSED OFFSET
	class ABendWeapon*                                 Weapon;                                                   // 0x03B0(0x0008) (ZeroConstructor, IsPlainOldData)
	class UClass*                                      WeaponType;                                               // 0x03B8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                TriggerLimit;                                             // 0x03C0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      PlayerCanTrigger : 1;                                     // 0x03C4(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      HideWeapon : 1;                                           // 0x03C4(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	unsigned char                                      HideMesh : 1;                                             // 0x03C4(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	unsigned char                                      TriggerOnLivingPawnsOnly : 1;                             // 0x03C4(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	unsigned char                                      CanPlaceOnWall : 1;                                       // 0x03C4(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	unsigned char                                      CanPlaceOnGround : 1;                                     // 0x03C4(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	unsigned char                                      CanPlaceOnTree : 1;                                       // 0x03C4(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	unsigned char                                      DeleteAfterRadius : 1;                                    // 0x03C4(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	unsigned char                                      bDynamicallyPlacedByPlayer : 1;                           // 0x03C5(0x0001) (BlueprintVisible, BlueprintReadOnly, Transient)
	unsigned char                                      UnknownData01[0x2];                                       // 0x03C6(0x0002) MISSED OFFSET
	float                                              DeletionRadius;                                           // 0x03C8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TriggerDelay;                                             // 0x03CC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           FireAnimSequence;                                         // 0x03D0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FPairedTrapAnimData                         ResetAnimData;                                            // 0x03D8(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              IconTriggerRadiusMultiplier;                              // 0x03E8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x03EC(0x0004) MISSED OFFSET
	class USphereComponent*                            PawnTrigger_Code;                                         // 0x03F0(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class USphereComponent*                            HordeTrigger_Code;                                        // 0x03F8(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UBendCrowdCriticalTriggerComponent*          HordeCriticalTrigger_Code;                                // 0x0400(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData03[0x41];                                      // 0x0408(0x0041) MISSED OFFSET
	unsigned char                                      CurTriggerCount;                                          // 0x0449(0x0001) (ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData04[0x16];                                      // 0x044A(0x0016) MISSED OFFSET
	struct FTimerHandle                                DeletionTimerHandle;                                      // 0x0460(0x0004)
	unsigned char                                      UnknownData05[0xC];                                       // 0x0464(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendTrap");
		return ptr;
	}


	void WillLureToThrownNoise(bool WillHear);
	void TriggerWeapon(class ABendPawn* TriggeringPawn, bool IgnoreDelayTimer);
	void TrapPlacementAnimFinished();
	void SetTripwireEndpoints(const struct FVector& Point1, const struct FVector& Point2, const struct FRotator& Point1Rot, const struct FRotator& Point2Rot);
	void SetTriggerLimit(unsigned char NewTriggerLimit);
	void ResetTriggerCount();
	void ResetTrap(class ABendPawn* ResettingPawn);
	void PawnTriggerEndOverlap(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex);
	void PawnTriggerBeginOverlap(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void OnWeaponTripped(class ABendPawn* TriggeringPawn);
	void OnTriggerEndOverlap();
	void OnTriggerBeginOverlap();
	void OnTrigger(class ABendPawn* TriggeringPawn);
	void OnTrapReset(class ABendPawn* ResettingPawn);
	void OnPostTrigger();
	void OnHitMaxTriggerCount(class ABendPawn* TriggeringPawn);
	void HordeTriggerBeginOverlap(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void HordeCriticalTriggerBeginOverlap(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	float GetTrapRadius();
	unsigned char GetCurrentTriggerCount();
	void DetonateWeapon(class ABendPawn* TriggeringPawn);
};


// Class BendGame.BendBearTrap
// 0x0000 (0x0470 - 0x0470)
class ABendBearTrap : public ABendTrap
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBearTrap");
		return ptr;
	}


	bool CheckForValidNavMeshPoint(class ABendAIController* Controller, const struct FVector& PointToProjectTo, struct FVector* PointOnNavigation);
};


// Class BendGame.BendWeapon_TrapPlacer
// 0x00F0 (0x2AF0 - 0x2A00)
class ABendWeapon_TrapPlacer : public ABendWeapon
{
public:
	class USkeletalMeshComponent*                      TrapSkeletalMeshComp;                                     // 0x2A00(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UMaterialInstance*                           GoodPlacementMaterial;                                    // 0x2A08(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UMaterialInstance*                           BadPlacementMaterial;                                     // 0x2A10(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UAnimationAsset*                             m_pPlacementAnim;                                         // 0x2A18(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAnimationAsset*                             m_pPlacementAnim_Crouched;                                // 0x2A20(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxPlacementDistance;                                     // 0x2A28(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EInventoryWeaponID>                    DetonatorID;                                              // 0x2A2C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xC3];                                      // 0x2A2D(0x00C3) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendWeapon_TrapPlacer");
		return ptr;
	}


	void OnTrapSpawned(class ABendTrap* NewlySpawnedTrap);
	class UAnimMontage* ChoosePlacementAnim(const struct FTransform& placementLocation);
	bool CanPlaceOnSurface(const struct FHitResult& AimPoint);
};


// Class BendGame.BendWeapon_BearTrapPlacer
// 0x0010 (0x2B00 - 0x2AF0)
class ABendWeapon_BearTrapPlacer : public ABendWeapon_TrapPlacer
{
public:
	float                                              ProbeStartHeight;                                         // 0x2AF0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ProbeDistanceOut;                                         // 0x2AF4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ProbeStartLateralOffset;                                  // 0x2AF8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bProbeDebug;                                              // 0x2AFC(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x2AFD(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendWeapon_BearTrapPlacer");
		return ptr;
	}

};


// Class BendGame.BendWeapon_Detonator
// 0x0010 (0x2B00 - 0x2AF0)
class ABendWeapon_Detonator : public ABendWeapon_TrapPlacer
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x2AF0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendWeapon_Detonator");
		return ptr;
	}

};


// Class BendGame.BendWeapon_TripwirePlacer
// 0x0080 (0x2B70 - 0x2AF0)
class ABendWeapon_TripwirePlacer : public ABendWeapon_TrapPlacer
{
public:
	class UStaticMeshComponent*                        WireMesh;                                                 // 0x2AF0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	float                                              TotalTrapRaycastDistance;                                 // 0x2AF8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PreviewWireSize;                                          // 0x2AFC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MinTripwireLength;                                        // 0x2B00(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxTripwireLength;                                        // 0x2B04(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           FirstPlaceAnim;                                           // 0x2B08(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x60];                                      // 0x2B10(0x0060) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendWeapon_TripwirePlacer");
		return ptr;
	}

};


// Class BendGame.BendEquippableItemStaticMeshComponent
// 0x0010 (0x0710 - 0x0700)
class UBendEquippableItemStaticMeshComponent : public UStaticMeshComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0700(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendEquippableItemStaticMeshComponent");
		return ptr;
	}

};


// Class BendGame.BendEquippableItemUserAnimParams
// 0x0040 (0x0068 - 0x0028)
class UBendEquippableItemUserAnimParams : public UDataAsset
{
public:
	struct FBendEquippableItemUserAnimBlendProfile_WithForcedLocalSpaceVersion Loose;                                                    // 0x0028(0x0020) (Edit)
	struct FBendEquippableItemUserAnimBlendProfile_WithForcedLocalSpaceVersion Tense;                                                    // 0x0048(0x0020) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendEquippableItemUserAnimParams");
		return ptr;
	}

};


// Class BendGame.BendExplosionEffect
// 0x00D8 (0x0420 - 0x0348)
class ABendExplosionEffect : public AActor
{
public:
	class UParticleSystem*                             ExplosionFX;                                              // 0x0348(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UPointLightComponent*                        ExplosionLight;                                           // 0x0350(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	float                                              ExplosionLightFadeOut;                                    // 0x0358(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x035C(0x0004) MISSED OFFSET
	class USoundCue*                                   ExplosionSound;                                           // 0x0360(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FDecalData                                  Decal;                                                    // 0x0368(0x0028) (Edit, DisableEditOnInstance)
	struct FHitResult                                  SurfaceHit;                                               // 0x0390(0x0088) (BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0418(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendExplosionEffect");
		return ptr;
	}

};


// Class BendGame.BendExtractionGroup
// 0x00B0 (0x00D8 - 0x0028)
class UBendExtractionGroup : public UObject
{
public:
	TArray<class ABendAIController*>                   Users;                                                    // 0x0028(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<class ABendAIController*>                   UsersInExtractionArea;                                    // 0x0038(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<class ABendAIController*>                   UsersInCover;                                             // 0x0048(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	class ABendAIController*                           UserEnteringHeli;                                         // 0x0058(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TArray<class ABendAIController*>                   UsersEnteredHeli;                                         // 0x0060(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	class AActor*                                      ExtractionPoint;                                          // 0x0070(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TArray<class AActor*>                              CoverPoints;                                              // 0x0078(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<class AActor*>                              AvailableCoverPoints;                                     // 0x0088(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	struct FScriptMulticastDelegate                    AnyoneRequestsExtractionDelegate;                         // 0x0098(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    AnyoneEntersExtractionAreaDelegate;                       // 0x00A8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    AnyoneEnteredHeliDelegate;                                // 0x00B8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    AllUsersEnteredHeliDelegate;                              // 0x00C8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendExtractionGroup");
		return ptr;
	}


	void RequestExtraction();
	class AActor* RequestCover();
	void RemoveUser(class ABendAIController* User);
	bool EnterHeliEntrance(class ABendAIController* User);
	bool EnterHeli(class ABendAIController* User);
	void EnterExtractionArea(class ABendAIController* User);
	class UBendExtractionGroup* STATIC_CreateBendExtractionGroup(class AActor* ExtractionPoint, TArray<class AActor*> CoverPoints);
	void AddUser(class ABendAIController* User);
};


// Class BendGame.BendExtractionGroupComponent
// 0x0028 (0x00F8 - 0x00D0)
class UBendExtractionGroupComponent : public UActorComponent
{
public:
	struct FScriptMulticastDelegate                    JoinGroupDelegate;                                        // 0x00D0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    LeaveGroupDelegate;                                       // 0x00E0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class UBendExtractionGroup*                        ExtractionGroup;                                          // 0x00F0(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendExtractionGroupComponent");
		return ptr;
	}


	void LeaveGroup();
	void JoinGroup(class UBendExtractionGroup* ExtractionGroup);
	class UBendExtractionGroup* GetGroup();
};


// Class BendGame.BendFactionConversation
// 0x0038 (0x0380 - 0x0348)
class ABendFactionConversation : public AActor
{
public:
	TArray<struct FFactionConversationStruct>          mFactionConversations;                                    // 0x0348(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	class UChildActorComponent*                        mConversationObject;                                      // 0x0358(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class USoundClass*                                 mpSoundClass;                                             // 0x0360(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<class ABendPawn*>                           mpSpeakers;                                               // 0x0368(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	int                                                mStringLength;                                            // 0x0378(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x037C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendFactionConversation");
		return ptr;
	}


	void PlayConverAtIndex(int aIndex, TArray<class ABendPawn*> aSpeakers, class USoundClass* aSoundClass);
	void MakeConver(int aIndex);
	struct FName DetermineFactionVal(const struct FName& InSoundID);
};


// Class BendGame.BendFocusModeOutlineComponent
// 0x0068 (0x0138 - 0x00D0)
class UBendFocusModeOutlineComponent : public UActorComponent
{
public:
	int                                                StencilIndex;                                             // 0x00D0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                StencilIndexIfFailedSkillCheck;                           // 0x00D4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               DisableComponent;                                         // 0x00D8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               PullComponentsFromParentEveryActivation;                  // 0x00D9(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x00DA(0x0002) MISSED OFFSET
	struct FVector                                     FocusIconOffset;                                          // 0x00DC(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<class UMeshComponent*>                      ComponentRefs;                                            // 0x00E8(0x0010) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FGameplayTag>                        RequiredSkills;                                           // 0x00F8(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	unsigned char                                      UnknownData01[0x28];                                      // 0x0108(0x0028) MISSED OFFSET
	bool                                               CurrentlyEnabled;                                         // 0x0130(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0131(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendFocusModeOutlineComponent");
		return ptr;
	}


	void UpdateStencil(int NewStencil);
	void OnFocusModeToggle(bool EnteredFocusMode);
	void OnFocusFadingFinished();
	void InteractStartedHideFocusUI();
	void EnableFocusOutlines(TArray<class UMeshComponent*> Components);
	void DisableFocusOutlines();
	void CollectRefsAndResetStencil();
	bool AreSkillsAcquired();
};


// Class BendGame.BendFortificationZone
// 0x0060 (0x03E8 - 0x0388)
class ABendFortificationZone : public AVolume
{
public:
	bool                                               Human;                                                    // 0x0388(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               Freaker;                                                  // 0x0389(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               Animal;                                                   // 0x038A(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               UseFrustum;                                               // 0x038B(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              FrustumLeftAngle;                                         // 0x038C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              FrustumRightAngle;                                        // 0x0390(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              FrustumVerticalAngle;                                     // 0x0394(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              FrustumMaxHeight;                                         // 0x0398(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              StartOffset;                                              // 0x039C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              VerticalOffset;                                           // 0x03A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Depth;                                                    // 0x03A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              BoxLeftWidth;                                             // 0x03A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              BoxRightWidth;                                            // 0x03AC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              BoxVerticalMax;                                           // 0x03B0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              BoxVerticalMin;                                           // 0x03B4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                MaximumNumberOfUsers;                                     // 0x03B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x14];                                      // 0x03BC(0x0014) MISSED OFFSET
	float                                              FrustumLeftStart;                                         // 0x03D0(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              FrustumRightStart;                                        // 0x03D4(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              FrustumForwardStart;                                      // 0x03D8(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              FrustumLow;                                               // 0x03DC(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              FrustumHigh;                                              // 0x03E0(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x03E4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendFortificationZone");
		return ptr;
	}


	class UModel* GetBrush();
	bool ContainsPoint(const struct FVector& Point);
};


// Class BendGame.BendFortificationZoneRenderingComponent
// 0x0010 (0x05E0 - 0x05D0)
class UBendFortificationZoneRenderingComponent : public UPrimitiveComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x05D0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendFortificationZoneRenderingComponent");
		return ptr;
	}


	void OnObjectSelection(class UObject* SelectedObject);
};


// Class BendGame.BendGameAndEditorSharedData
// 0x0060 (0x0088 - 0x0028)
class UBendGameAndEditorSharedData : public UObject
{
public:
	TArray<class UUserDefinedEnum*>                    UserDefinedEnums;                                         // 0x0028(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<TAssetPtr<class UClass>>                    GameSurfaceTypes;                                         // 0x0038(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class UClass*>                              GameWpnImpactFXs;                                         // 0x0048(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class UClass*>                              GameMovementFXTypes;                                      // 0x0058(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class UClass*>                              GameClothFXTypes;                                         // 0x0068(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class UClass*>                              GameVocalFXTypes;                                         // 0x0078(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendGameAndEditorSharedData");
		return ptr;
	}

};


// Class BendGame.BendWorldEdge
// 0x00C8 (0x0410 - 0x0348)
class ABendWorldEdge : public AActor
{
public:
	struct FVector                                     Position1;                                                // 0x0348(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector                                     Position2;                                                // 0x0354(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               CustomNormals;                                            // 0x0360(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0361(0x0007) MISSED OFFSET
	TArray<struct FVector>                             Normals;                                                  // 0x0368(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear)
	TAssetPtr<class UBendClimbStateDataBase>           ClimbStateData;                                           // 0x0378(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly)
	bool                                               PlayerClimbable;                                          // 0x0398(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               climbable;                                                // 0x0399(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               guardRail;                                                // 0x039A(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               FlipNormals;                                              // 0x039B(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               forceVault;                                               // 0x039C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               ladderEdge;                                               // 0x039D(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               windowEdge;                                               // 0x039E(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bRoofEdge;                                                // 0x039F(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ELadderRungType>                       LadderRungType;                                           // 0x03A0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               CrowsCanPerch;                                            // 0x03A1(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               DestructibleEdge;                                         // 0x03A2(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x6D];                                      // 0x03A3(0x006D) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendWorldEdge");
		return ptr;
	}


	void SetWindowEdge(bool NewWindowEdge);
	void SetSkipAutoNavLinkCreation(bool NewSkipAutoNavLinkCreation);
	void SetRoofEdge(bool NewRoofEdge);
	void SetPlayerClimbable(bool NewPlayerClimbable);
	void SetLadderRungType(TEnumAsByte<ELadderRungType> NewLadderRungType);
	void SetLadderEdge(bool NewLadderEdge);
	void SetGuardrail(bool NewGuardrail);
	void SetClimbable(bool NewClimbable);
	void FlipEdgeDirection();
};


// Class BendGame.BendGameAutoNavLinkSystem
// 0x0000 (0x0028 - 0x0028)
class UBendGameAutoNavLinkSystem : public UBendAutoNavLinkSystem
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendGameAutoNavLinkSystem");
		return ptr;
	}

};


// Class BendGame.BendGameEventManager
// 0x0180 (0x01A8 - 0x0028)
class UBendGameEventManager : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnItemPurchased;                                          // 0x0030(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnItemSold;                                               // 0x0040(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnItemBuyBack;                                            // 0x0050(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnWeaponPurchased;                                        // 0x0060(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnWeaponPartPurchased;                                    // 0x0070(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBikePartPurchased;                                      // 0x0080(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnWeaponEquip;                                            // 0x0090(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnWeaponSwap;                                             // 0x00A0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnWeaponPartEquip;                                        // 0x00B0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnWeaponRepaired;                                         // 0x00C0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBikePartEquip;                                          // 0x00D0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBikeRepair;                                             // 0x00E0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBikeRefuel;                                             // 0x00F0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnEarSold;                                                // 0x0100(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class USoundCue*                                   MoneyExchangeCue;                                         // 0x0110(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class USoundCue*                                   RefuelCue;                                                // 0x0118(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class USoundCue*                                   RepairCue;                                                // 0x0120(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<TEnumAsByte<EMotorcyclePartType>>           TypesForSoundPurchaseMap;                                 // 0x0128(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<class USoundCue*>                           SoundsForSoundPurchaseMap;                                // 0x0138(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FScriptMulticastDelegate                    OnGameEventDelegate;                                      // 0x0148(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData01[0x50];                                      // 0x0158(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendGameEventManager");
		return ptr;
	}


	void OnGameEvent(const struct FBendGameEventBase& Event);
	void HandleEvent(const struct FBendGameEventBase& Event);
	class UBendGameEventManager* STATIC_GetGameEventManager();
	void STATIC_BikeRepairEvent(int Cost, float DamageRepaired);
	void STATIC_BikeRefuelEvent(int Cost, float FuelAdded);
};


// Class BendGame.BendGameInstance
// 0x0080 (0x00F8 - 0x0078)
class UBendGameInstance : public UGameInstance
{
public:
	unsigned char                                      UnknownData00[0x80];                                      // 0x0078(0x0080) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendGameInstance");
		return ptr;
	}


	void SerializePersistentStreamedObjects(class ULevel* Level);
	void DeSerializePersistentStreamedObjects(class ULevel* Level);
	void DeSerializePersistentStreamedActor(class AActor* Actor);
	void BindStreamedObjectSerializationToAllLevels();
};


// Class BendGame.BendPlayerRespawnManager
// 0x0158 (0x04A0 - 0x0348)
class ABendPlayerRespawnManager : public AActor
{
public:
	struct FScriptMulticastDelegate                    OnRespawnPointTriggered;                                  // 0x0348(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FVector                                     PlayerSaveLocation;                                       // 0x0358(0x000C) (ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData00[0xC];                                       // 0x0364(0x000C) MISSED OFFSET
	struct FTransform                                  VehicleSaveTransform;                                     // 0x0370(0x0030) (SaveGame, IsPlainOldData)
	TArray<struct FTransform>                          BackupRespawnPositions;                                   // 0x03A0(0x0010) (ZeroConstructor, SaveGame)
	TArray<struct FTransform>                          BackupVehicleRespawnPositions;                            // 0x03B0(0x0010) (ZeroConstructor, SaveGame)
	float                                              MinDistanceFromDeathLoc;                                  // 0x03C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              RespawnPointAcceptanceRadius;                             // 0x03C4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1C];                                      // 0x03C8(0x001C) MISSED OFFSET
	int                                                CurrentOverrideID;                                        // 0x03E4(0x0004) (ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData02[0x18];                                      // 0x03E8(0x0018) MISSED OFFSET
	TArray<struct FRespawnPoint>                       DiscoveredRespawns;                                       // 0x0400(0x0010) (ZeroConstructor, SaveGame)
	unsigned char                                      UnknownData03[0x30];                                      // 0x0410(0x0030) MISSED OFFSET
	struct FRespawnPoint                               LastRespawnPoint;                                         // 0x0440(0x0048) (SaveGame)
	unsigned char                                      UnknownData04[0x18];                                      // 0x0488(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendPlayerRespawnManager");
		return ptr;
	}


	void ResetRespawnManager();
	void RemoveRespawnPointByID(int RespawnID);
	void RemoveRespawnPoint(const struct FRespawnPoint& RespawnPoint);
	bool RemoveRespawnOverride(int RespawnID);
	void RemoveRespawnLoc(class ABendRespawnLoc* RespawnLoc);
	void RemoveLastRespawnLoc();
	void OnPlayerTeleported(const struct FVector& NewLocation);
	void OnPlayerRespawned(class ABendPlayerController* PlayerController);
	void OnPlayerDied(float ActualDamage, class AController* Killer, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, const struct FName& BoneName, const struct FVector& Momentum, class UDamageType* DamageType, class AActor* DamageCauser);
	struct FRespawnPoint STATIC_MakeRespawnPoint(const struct FTransform& PlayerTransform, const struct FTransform& VehicleTransform, bool RespawnOnBike);
	bool HasVehicleRespawnLocation();
	float GetRespawnPointMinDistanceFromDeathRadius();
	float GetRespawnPointAcceptanceRadius();
	struct FVector GetRespawnLocOffset();
	struct FRespawnPoint GetMostRecentRespawnPoint(bool AllowBackupPointCheck);
	TArray<struct FRespawnPoint> GetAllRespawnPoints();
	TArray<struct FVector> GetAllRespawnLocations();
	void ClearAllRespawnLocs();
	int AddRespawnPointOverride(const struct FRespawnPoint& SpawnPoint);
	int AddRespawnOverride(const struct FTransform& PlayerTransform, const struct FTransform& VehicleTransform, bool RespawnOnBike);
	void AddRespawnLoc(class ABendRespawnLoc* RespawnLoc);
};


// Class BendGame.BendGameMissionTrigger
// 0x0100 (0x0448 - 0x0348)
class ABendGameMissionTrigger : public AActor
{
public:
	class UBendMissionData*                            MissionDataAsset;                                         // 0x0348(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UBendWidgetComponent*                        InWorldIconComponent;                                     // 0x0350(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class USceneComponent*                             SceneRootComponent;                                       // 0x0358(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UMiniMapLocationComponent*                   MissionTriggerMiniMapLocationComponent;                   // 0x0360(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UBoxComponent*                               MissionTriggerBoxComponent;                               // 0x0368(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UBendSphereComponent*                        BendSphereComponent;                                      // 0x0370(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UBendSphereComponent*                        InnerSphereComponent;                                     // 0x0378(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UBendSphereComponent*                        MapSphereComponent;                                       // 0x0380(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	float                                              DefaultTimeRate;                                          // 0x0388(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CurrentProgress;                                          // 0x038C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               CurrentlyTracked;                                         // 0x0390(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               BlockOverlapFirstFrame;                                   // 0x0391(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x0392(0x0006) MISSED OFFSET
	class UMaterialInstanceDynamic*                    DynamicMaterial;                                          // 0x0398(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               UseDayTimetransition;                                     // 0x03A0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x03A1(0x0003) MISSED OFFSET
	int                                                DisplayedIndex;                                           // 0x03A4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               UseRegionToShowTriggerSize;                               // 0x03A8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x03A9(0x0007) MISSED OFFSET
	class UBendUIObjectiveCalloutWidget*               InWorldIcon_CODE;                                         // 0x03B0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FLinearColor                                ColorWhenValid;                                           // 0x03B8(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FLinearColor                                ColorWhenInvalid;                                         // 0x03C8(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FRespawnPoint                               MissionStartSaveRespawnPoint;                             // 0x03D8(0x0048) (Edit, BlueprintVisible)
	float                                              MaxDist;                                                  // 0x0420(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinDist;                                                  // 0x0424(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinDistToEnemy;                                           // 0x0428(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               MapsArePreLoaded;                                         // 0x042C(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x042D(0x0003) MISSED OFFSET
	TArray<struct FName>                               MapsPreLoaded;                                            // 0x0430(0x0010) (ZeroConstructor)
	class ABendGameMission*                            MissionManagerPointer;                                    // 0x0440(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendGameMissionTrigger");
		return ptr;
	}


	bool UpdateTriggersWorldDisplay();
	void PlayerEndOverlapInner();
	void PlayerEndOverlap();
	void PlayerBeginOverlapInner();
	void PlayerBeginOverlap();
	bool MarkMissionAsActiveTracked(bool Tracked);
	bool MarkCloseToMissionTrigger(bool IsClose);
	bool DoAutoTracking(bool Enter);
	bool CheckIfValidForStartMission();
	bool ChangeMiniMapMarkerState(bool IsRegion);
};


// Class BendGame.BendSphereComponentManager
// 0x0030 (0x0058 - 0x0028)
class UBendSphereComponentManager : public UObject
{
public:
	unsigned char                                      UnknownData00[0x30];                                      // 0x0028(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendSphereComponentManager");
		return ptr;
	}


	void PlayerTeleported(const struct FVector& NewLocation);
	void PlayerStoppedZenMode(bool InZenMode);
	void PlayerRespawned(class ABendPlayerController* Controller);
	void PlayerDied(float ActualDamage, class AController* Killer, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, const struct FName& BoneName, const struct FVector& Momentum, class UDamageType* DamageType, class AActor* DamageCauser);
};


// Class BendGame.BendRegionsData
// 0x06C0 (0x06E8 - 0x0028)
class UBendRegionsData : public UDataAsset
{
public:
	struct FRegionData                                 Regions[0x8];                                             // 0x0028(0x00D8) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendRegionsData");
		return ptr;
	}


	void ResetAllDataAssets();
	int GetTourismCollectiblesCompletedCount(bool GetFromSpecificRegion, TEnumAsByte<ERegions> regionID, int* TotalCount, float* Percentage);
	int GetRIPSermonCollectiblesCompletedCount(bool GetFromSpecificRegion, TEnumAsByte<ERegions> regionID, int* TotalCount, float* Percentage);
	struct FText GetRegionNameFromID(TEnumAsByte<ERegions> regionID);
	struct FRegionData GetRegion(TEnumAsByte<ERegions> regionID);
	int GetNestingZoneCompletedCount(bool GetFromSpecificRegion, TEnumAsByte<ERegions> regionID, int* TotalCount, float* Percentage);
	int GetNeroSitesCompletedCount(bool GetFromSpecificRegion, TEnumAsByte<ERegions> regionID, int* TotalCount, float* Percentage);
	int GetNeroRecorderCollectiblesCompletedCount(bool GetFromSpecificRegion, TEnumAsByte<ERegions> regionID, int* TotalCount, float* Percentage);
	int GetNeroCheckpointsCompletedCount(bool GetFromSpecificRegion, TEnumAsByte<ERegions> regionID, int* TotalCount, float* Percentage);
	int GetHordeCompletedCount(bool GetFromSpecificRegion, TEnumAsByte<ERegions> regionID, int* TotalCount, float* Percentage);
	int GetHistoricalMarkerCollectiblesCompletedCount(bool GetFromSpecificRegion, TEnumAsByte<ERegions> regionID, int* TotalCount, float* Percentage);
	int GetHerbologyCollectiblesCompletedCount(bool GetFromSpecificRegion, TEnumAsByte<ERegions> regionID, int* TotalCount, float* Percentage);
	int GetEncampmentJobCompletedCount(bool GetFromSpecificRegion, TEnumAsByte<ERegions> regionID, int* TotalCount, float* Percentage);
	int GetEncampmentDiscoveredCount(bool GetFromSpecificRegion, TEnumAsByte<ERegions> regionID, int* TotalCount, float* Percentage);
	float GetCompletionPercentage(bool GetFromSpecificRegion, TEnumAsByte<ERegions> regionID, int* TotalCount, int* CompletedCount);
	int GetCharacterCollectiblesCompletedCount(bool GetFromSpecificRegion, TEnumAsByte<ERegions> regionID, int* TotalCount, float* Percentage);
	int GetBunkersCompletedCount(bool GetFromSpecificRegion, TEnumAsByte<ERegions> regionID, int* TotalCount, float* Percentage);
	TArray<struct FGameplayTag> GetAllTourismCollectibles(bool GetFromSpecificRegion, TEnumAsByte<ERegions> regionID);
	TArray<struct FGameplayTag> GetAllRIPSermonCollectibles(bool GetFromSpecificRegion, TEnumAsByte<ERegions> regionID);
	TArray<class UBendNestingZone*> GetAllNestingZones(bool GetFromSpecificRegion, TEnumAsByte<ERegions> regionID);
	TArray<class UBendNeroCheckpointData*> GetAllNeroSites(bool GetFromSpecificRegion, TEnumAsByte<ERegions> regionID);
	TArray<struct FGameplayTag> GetAllNeroRecorderCollectibles(bool GetFromSpecificRegion, TEnumAsByte<ERegions> regionID);
	TArray<class UBendNeroCheckpointData*> GetAllNeroCheckpoints(bool GetFromSpecificRegion, TEnumAsByte<ERegions> regionID);
	TArray<class UJobClassInfo*> GetAllHordeJobs(bool GetFromSpecificRegion, TEnumAsByte<ERegions> regionID);
	TArray<struct FGameplayTag> GetAllHistoricalMarkerCollectibles(bool GetFromSpecificRegion, TEnumAsByte<ERegions> regionID);
	TArray<struct FGameplayTag> GetAllHerbologyCollectibles(bool GetFromSpecificRegion, TEnumAsByte<ERegions> regionID);
	TArray<class UBendEncampmentData*> GetAllEncampmentDatas(bool GetFromSpecificRegion, TEnumAsByte<ERegions> regionID);
	TArray<struct FGameplayTag> GetAllCharacterCollectibles(bool GetFromSpecificRegion, TEnumAsByte<ERegions> regionID);
	TArray<class UBendBunkerData*> GetAllBunkers(bool GetFromSpecificRegion, TEnumAsByte<ERegions> regionID);
};


// Class BendGame.PopupMenuBaseWidget
// 0x00A0 (0x03F0 - 0x0350)
class UPopupMenuBaseWidget : public UBaseMenuWidget
{
public:
	TEnumAsByte<EPopupID>                              PopupID;                                                  // 0x0350(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0351(0x0007) MISSED OFFSET
	struct FSlatePopupDetails                          MyPopupDetails;                                           // 0x0358(0x0040) (Edit, BlueprintVisible, Transient, EditConst)
	struct FScriptMulticastDelegate                    OnPopupConfirmedDynamic;                                  // 0x0398(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData01[0x48];                                      // 0x03A8(0x0048) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.PopupMenuBaseWidget");
		return ptr;
	}

};


// Class BendGame.PopupMenuWidget
// 0x0060 (0x0450 - 0x03F0)
class UPopupMenuWidget : public UPopupMenuBaseWidget
{
public:
	struct FScriptMulticastDelegate                    PopupCallback;                                            // 0x03F0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData00[0x50];                                      // 0x0400(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.PopupMenuWidget");
		return ptr;
	}


	void SetPopupDetails(const struct FSlatePopupDetails& InDetails);
	void SetButtonSelected(TEnumAsByte<ESlatePopupButton> Button, bool IsSelected);
	void Configure(const struct FSlatePopupDetails& PopupDetails);
};


// Class BendGame.PopupContactingServerWidget
// 0x0000 (0x0450 - 0x0450)
class UPopupContactingServerWidget : public UPopupMenuWidget
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.PopupContactingServerWidget");
		return ptr;
	}


	void SetPopupType(TEnumAsByte<EContactingServerPopupType> Type);
	void OnSetPoupType(TEnumAsByte<EContactingServerPopupType> NewType);
	TEnumAsByte<EContactingServerPopupType> GetPopupType();
};


// Class BendGame.BendLeaderboardManager
// 0x0170 (0x04B8 - 0x0348)
class ABendLeaderboardManager : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0348(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnFinishedGetAllGlobalLeaderboardsDelegate;               // 0x0350(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnFinishedGetGlobalLeaderboardDelegate;                   // 0x0360(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnFinishedGetAllFriendsLeaderboardsDelegate;              // 0x0370(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnFinishedGetFriendLeaderboardDelegate;                   // 0x0380(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnFinishedWriteMyScoreDelegate;                           // 0x0390(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnFinishedGetMyScoreDelegate;                             // 0x03A0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnFinishedGetAllMyScoresDelegate;                         // 0x03B0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnFinishedReadMyRankDelegate;                             // 0x03C0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnFinishedGetEventsUnlockedDelegate;                      // 0x03D0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnLeaderboardSystemsActivatedDelegate;                    // 0x03E0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData01[0xC8];                                      // 0x03F0(0x00C8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendLeaderboardManager");
		return ptr;
	}


	bool SignedInAndSystemsActivated();
	void OnFinishedWriteMyScore(const struct FBendRankInfo& RankInfo);
	void OnFinishedReadMyRank(TEnumAsByte<EBendLeaderboardID> BendBoardID);
	void OnFinishedGetMyScore(TEnumAsByte<EBendLeaderboardID> BendBoardID);
	void OnFinishedGetGlobalLeaderboard(TEnumAsByte<EBendLeaderboardID> BendBoardID);
	void OnFinishedGetFriendsLeaderboard(TEnumAsByte<EBendLeaderboardID> BendBoardID);
	void OnFinishedGetEventsUnlocked(TArray<struct FBendTusScore> Slots);
	void OnFinishedGetAllMyScores();
	void OnFinishedGetAllGlobalLeaderboards();
	void OnFinishedGetAllFriendsLeaderboards();
	void OnExitChallengeMode();
	void OnEnterChallengeMode();
	void OnContactingServerPopupClosed();
	bool IsContactingServerPopupActive();
	class ABendLeaderboardManager* STATIC_GetLeaderboardManager();
};


// Class BendGame.DLCDataAsset
// 0x0130 (0x0158 - 0x0028)
class UDLCDataAsset : public UDataAsset
{
public:
	class UDataTable*                                  ChallengeData;                                            // 0x0028(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UDataTable*                                  SubChallengeData;                                         // 0x0030(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UDataTable*                                  ScoreEventData;                                           // 0x0038(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UDataTable*                                  ScoreModifierData;                                        // 0x0040(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TArray<int>                                        ChallengeReputation;                                      // 0x0048(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<int>                                        ChallengeShopPoints;                                      // 0x0058(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	class UDataTable*                                  RingData;                                                 // 0x0068(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TArray<int>                                        RingCost;                                                 // 0x0070(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	class UDataTable*                                  CharacterData;                                            // 0x0080(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                CharacterCost;                                            // 0x0088(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x008C(0x0004) MISSED OFFSET
	class UDataTable*                                  BikeSkinData;                                             // 0x0090(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                BikeSkinCost;                                             // 0x0098(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x009C(0x0004) MISSED OFFSET
	class UDataTable*                                  PatchData;                                                // 0x00A0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UDataTable*                                  RankData;                                                 // 0x00A8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UDataTable*                                  DisplayData;                                              // 0x00B0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UClass*                                      ChallengeCompleteMenuClass;                               // 0x00B8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TArray<struct FLinearColor>                        PrimaryColor;                                             // 0x00C0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<struct FLinearColor>                        SecondaryColor;                                           // 0x00D0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<struct FLinearColor>                        RankColor;                                                // 0x00E0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<TAssetPtr<class UTexture2D>>                ChallengeTypeIcon;                                        // 0x00F0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	int                                                ShopPointDisplayModifier;                                 // 0x0100(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                ReputationDisplayModifier;                                // 0x0104(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x50];                                      // 0x0108(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.DLCDataAsset");
		return ptr;
	}

};


// Class BendGame.DLCMetaManager
// 0x0088 (0x00B0 - 0x0028)
class UDLCMetaManager : public UObject
{
public:
	struct FScriptMulticastDelegate                    OnReputationChanged;                                      // 0x0028(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnShopPointsChanged;                                      // 0x0038(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnChallengeUnlockChanged;                                 // 0x0048(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnItemPurchased;                                          // 0x0058(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData00[0x48];                                      // 0x0068(0x0048) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.DLCMetaManager");
		return ptr;
	}


	void RespondToLeaderboardSystemsActivated();
	void RespondToChallengeUnlock(TArray<struct FBendTusScore> Challenges);
	void RequestChallengeUnlockStates();
};


// Class BendGame.BendGameMode
// 0x08A0 (0x0CE0 - 0x0440)
class ABendGameMode : public AGameMode
{
public:
	class UBendMapInfo*                                MapInfo;                                                  // 0x0440(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FString                                     LevelCompleteMessage;                                     // 0x0448(0x0010) (ZeroConstructor)
	TAssetPtr<class UBendCrowdSetup>                   CrowdSetup;                                               // 0x0458(0x0020) (Edit)
	class UBendAISetup*                                AISetup;                                                  // 0x0478(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class ABendWorldManager*                           WorldManager;                                             // 0x0480(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TAssetPtr<class UClass>                            AmbientEventManagerClass;                                 // 0x0488(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	class ABendAmbientEventManager*                    AmbientEventManager;                                      // 0x04A8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TAssetPtr<class UClass>                            MissionManagerClass;                                      // 0x04B0(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	class ABendGameMission*                            MissionManager;                                           // 0x04D0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TAssetPtr<class UClass>                            FocusModeIconManagerClass;                                // 0x04D8(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	class AFocusModeIconManager*                       FocusModeIconManager;                                     // 0x04F8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TAssetPtr<class UClass>                            FogOfWarClass;                                            // 0x0500(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	class AFogOfWar*                                   FogOfWar;                                                 // 0x0520(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TAssetPtr<class UClass>                            JobManagerClass;                                          // 0x0528(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	class ABendJobManager*                             JobManager;                                               // 0x0548(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TAssetPtr<class UClass>                            OpenWorldVOManagerClass;                                  // 0x0550(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	class ABendOpenWorldVOManager*                     OpenWorldVOManager;                                       // 0x0570(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TAssetPtr<class UClass>                            RespawnManagerClass;                                      // 0x0578(0x0020) (Edit)
	class ABendPlayerRespawnManager*                   PlayerRespawnManager;                                     // 0x0598(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TAssetPtr<class UClass>                            SectorDataManagerClass;                                   // 0x05A0(0x0020) (Edit)
	class ABendSectorDataManager*                      SectorDataManager;                                        // 0x05C0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TAssetPtr<class UClass>                            AIManagerClass;                                           // 0x05C8(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly)
	TAssetPtr<class UClass>                            AIVehicleManagerClass;                                    // 0x05E8(0x0020) (Edit)
	class UClass*                                      ABendInputManagerClass;                                   // 0x0608(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UClass*                                      ABendRoadSplineManagerClass;                              // 0x0610(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	TAssetPtr<class UClass>                            PhysicsSurfaceConditionsManagerClass;                     // 0x0618(0x0020) (Edit)
	TAssetPtr<class UClass>                            BendStreamingOverrideManagerClass;                        // 0x0638(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	class ABendStreamingOverrideManager*               BendStreamingOverrideManager;                             // 0x0658(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TAssetPtr<class UClass>                            UIManagerClass;                                           // 0x0660(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly)
	TAssetPtr<class UClass>                            DLCUIManagerClass;                                        // 0x0680(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly)
	TAssetPtr<class UClass>                            DLCUnlockedItemsManagerClass;                             // 0x06A0(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly)
	TAssetPtr<class UClass>                            GameEventManagerClass;                                    // 0x06C0(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly)
	TAssetPtr<class UClass>                            CheatMenuClass;                                           // 0x06E0(0x0020) (Edit)
	TAssetPtr<class UClass>                            TrophyManagerClass;                                       // 0x0700(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly)
	class UBendVehicleSkillGlobalSetup*                VehicleSkillSetup;                                        // 0x0720(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TArray<class UUserDefinedEnum*>                    UserDefinedEnums;                                         // 0x0728(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TAssetPtr<class UClass>                            AudioManagerClass;                                        // 0x0738(0x0020) (Edit, DisableEditOnInstance)
	class UBendAudioEventVOWaitTimeData*               DefaultEventVOWaitTimeData;                               // 0x0758(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UStaticMesh*                                 ProjectileTracerStaticMesh;                               // 0x0760(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FLinearColor                                ProjectileTracerLightColor;                               // 0x0768(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FBendDefaultClimbDataLookup                 DefaultClimbDataLookup;                                   // 0x0778(0x0020) (Edit, DisableEditOnInstance)
	struct FScriptMulticastDelegate                    PlayerDeathFadeToBlack;                                   // 0x0798(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPlayerRespawned;                                        // 0x07A8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class UClass*                                      CurrentPlayerVehicle;                                     // 0x07B8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UClass*                                      CurrentBuddyVehicle;                                      // 0x07C0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class ABendPawn*                                   Buddy;                                                    // 0x07C8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TAssetPtr<class UClass>                            UnlockManagerClass;                                       // 0x07D0(0x0020) (Edit, DisableEditOnInstance)
	bool                                               bIsMainMenuActive;                                        // 0x07F0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               NewGamePlusActive;                                        // 0x07F1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               HasSavedCheckpoint;                                       // 0x07F2(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x5];                                       // 0x07F3(0x0005) MISSED OFFSET
	struct FNewGamePlusCarryOverData                   NewGamePlusDataFromLastRequest;                           // 0x07F8(0x0158) (BlueprintVisible, BlueprintReadOnly)
	bool                                               ReturningToMenuForNGPCarryOverData;                       // 0x0950(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bWantsOWSave;                                             // 0x0951(0x0001) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData01[0xE];                                       // 0x0952(0x000E) MISSED OFFSET
	struct FText                                       SaveSubtitleAutosave;                                     // 0x0960(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FText                                       SaveSubtitlePreMissionStart;                              // 0x0978(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FText                                       SaveSubtitleCheckpoint;                                   // 0x0990(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FText                                       SaveSubtitleMainMenu;                                     // 0x09A8(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FText                                       SaveSubtitlePlayerProfile;                                // 0x09C0(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FText                                       SaveSubtitleMissionLabel;                                 // 0x09D8(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FText                                       SaveSubtitleJob;                                          // 0x09F0(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FText                                       SaveSubtitleDaysGone;                                     // 0x0A08(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	bool                                               bIsInLoadGame;                                            // 0x0A20(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               bIsInOWSave;                                              // 0x0A21(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData02[0x6];                                       // 0x0A22(0x0006) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnOWSaveExecuted;                                         // 0x0A28(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnGameSaved;                                              // 0x0A38(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnOWSaveExecutedTelemetry;                                // 0x0A48(0x0010) (Edit, BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnCheckpointSaveExecuted;                                 // 0x0A58(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnFinishedSetSynchronousStreaming;                        // 0x0A68(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnFinishedLoading;                                        // 0x0A78(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData03[0x5C];                                      // 0x0A88(0x005C) MISSED OFFSET
	struct FVector                                     PlayerLocationOverride;                                   // 0x0AE4(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData)
	struct FRotator                                    PlayerRotationOverride;                                   // 0x0AF0(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData04[0x14];                                      // 0x0AFC(0x0014) MISSED OFFSET
	bool                                               ResettingJobsFunctionalityActivated;                      // 0x0B10(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               WantsToQuitToMainMenuOnDeathLoad;                         // 0x0B11(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               LastQuitToMainMenuWasDLCForced;                           // 0x0B12(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               LastQuitToMainMenuWasNGPForced;                           // 0x0B13(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x4];                                       // 0x0B14(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnFastTravelBegin;                                        // 0x0B18(0x0010) (Edit, BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnFastTravelEnd;                                          // 0x0B28(0x0010) (Edit, BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnUserChoiceMade;                                         // 0x0B38(0x0010) (Edit, BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnSkippableSectionStarted;                                // 0x0B48(0x0010) (Edit, BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnSkippableSectionSkipped;                                // 0x0B58(0x0010) (Edit, BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnSkippableSectionEnded;                                  // 0x0B68(0x0010) (Edit, BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPostSaveGameLoaded;                                     // 0x0B78(0x0010) (Edit, BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPreSaveGameLoaded;                                      // 0x0B88(0x0010) (Edit, BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPauseGame;                                              // 0x0B98(0x0010) (Edit, BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnMenuToHideSpecificUIActivated;                          // 0x0BA8(0x0010) (Edit, BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable)
	TArray<class UBendNestingZone*>                    AllNestingZones;                                          // 0x0BB8(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<class UBendNeroCheckpointData*>             AllNeroCheckpoints;                                       // 0x0BC8(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<class UBendBunkerData*>                     AllBunkers;                                               // 0x0BD8(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	class UBendRegionsData*                            RegionsData;                                              // 0x0BE8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UDLCDataAsset*                               DLCData;                                                  // 0x0BF0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UDLCMetaManager*                             DLCMetaManager;                                           // 0x0BF8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	TArray<class UIndexedColorDataAsset*>              IndexedColorDataAssets;                                   // 0x0C00(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	class AActor*                                      TelemetryManager;                                         // 0x0C10(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bHasCollectorsEdition;                                    // 0x0C18(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	bool                                               bHasPreOrderBonus;                                        // 0x0C19(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData06[0x6];                                       // 0x0C1A(0x0006) MISSED OFFSET
	TArray<struct FString>                             Entitlements;                                             // 0x0C20(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst)
	unsigned char                                      UnknownData07[0x8];                                       // 0x0C30(0x0008) MISSED OFFSET
	float                                              DistanceToCheckAgainstEnemiesForSaves;                    // 0x0C38(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData08[0x4];                                       // 0x0C3C(0x0004) MISSED OFFSET
	TArray<TEnumAsByte<EBendAnimStates>>               AnimStatesToCheckAgainstOnSave;                           // 0x0C40(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	bool                                               NonSavableMenuIsOpen;                                     // 0x0C50(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               BlockMissionManualRestarts;                               // 0x0C51(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData09[0x2E];                                      // 0x0C52(0x002E) MISSED OFFSET
	class UPlayerDataManager*                          PlayerDataManager;                                        // 0x0C80(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData10[0x58];                                      // 0x0C88(0x0058) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendGameMode");
		return ptr;
	}


	void UnloadStreamLevelArrayWithGC(TArray<struct FName> LevelNames, float Delay);
	void SetSavingBlockedByBlueprint(bool SavingBlocked);
	void ResetJobCategory(TEnumAsByte<EJobResetTypes> TypeToReset, bool ResetAll);
	void RequestFastTravel(const struct FTransform& PlayerTransform, const struct FTransform& BikeTransform, const struct FName& TravelDestination);
	void ORWorldLoadedIn();
	void OnAsyncLoadingEnded();
	bool IsSavingBlockedByBlueprint();
	bool IsSafeToSavePlayerOnBike(TEnumAsByte<ESaveGameRequestTypes> TypeOfRequest, TEnumAsByte<ESaveGameFailureReasons>* ReasonForFailing);
	bool IsSafeForOWSave(bool bCriticalSave, TEnumAsByte<ESaveGameRequestTypes> TypeOfRequest, bool requiresProximityToSaveInteract, bool checkBikeState, TEnumAsByte<ESaveGameFailureReasons>* ReasonForFailing);
	bool IsInNewGamePlus();
	void GoToMainMenuForceNGP();
	void GoToMainMenuForceDLC();
	void GoToMainMenu();
	class AVehiclePawn* GetVehicle(class UClass* VehicleClass);
	class UBendGameplayDatabase* GetProfileDatabase();
	class UPlayerDataManager* GetPlayerDataManger();
	struct FString GetLocalizedDifficultyString();
	bool GetIsShowingLoadingScreenFromSaveGameLoad();
	class UBendGameplayDatabase* GetGameplayDatabase();
	class AGameCheatMenu* GetGameCheatMenu();
	void ForceGCAfter();
	void DestroyEndCreditsWidget();
	void DeactivateVehicle(class UClass* VehicleClass, bool bDestroyVehicle);
	class AVehiclePawn* CreateVehicle(class UClass* VehicleClass);
	void CreateEndCreditsWidget(const struct FText& CreditsText);
	bool STATIC_CanRenderGore();
	bool BeginFastTravel(const struct FTransform& PlayerTransform, const struct FTransform& BikeTransform);
	class AVehiclePawn* ActivateVehicle(class UClass* VehicleClass, bool UsePreviousPosition, const struct FVector& DestLocation, const struct FRotator& DestRotation);
};


// Class BendGame.VehicleTypes
// 0x0000 (0x0028 - 0x0028)
class UVehicleTypes : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.VehicleTypes");
		return ptr;
	}

};


// Class BendGame.BendVehicleDamage
// 0x0058 (0x0128 - 0x00D0)
class UBendVehicleDamage : public UActorComponent
{
public:
	class UVehicleDamageInfo*                          VehicleDamageInfo;                                        // 0x00D0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x50];                                      // 0x00D8(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendVehicleDamage");
		return ptr;
	}


	void UpgradeHealth(float newMax);
	void SetWaterDamageResistance(float NewWaterDamageResistance);
	void SetMaxHealthAndScaleCurrentHealth(float NewMaxHealth);
	void SetMaxHealth(float NewMaxHealth);
	void SetHitDamageEnabled(bool bHitDamageEnabled);
	void SetHealth(float Health);
	void SetDebugEnabled(bool Enabled);
	void SetDamageEnabled(bool Enabled);
	void ResetHealth();
	bool IsHitDamageEnabled();
	bool IsDebugEnabled();
	bool IsDamagedEnoughForSpeedNerf();
	bool HasValidDamageInfo();
	float GetWaterDamageResistance();
	float GetMaxHealth();
	float GetHealthPercent();
	float GetHealth();
	void ApplyMiscellaneousDamage(float Damage);
};


// Class BendGame.BendSpotLightComponent
// 0x0040 (0x04B0 - 0x0470)
class UBendSpotLightComponent : public USpotLightComponent
{
public:
	float                                              MaxBrightnessForFlashlight;                               // 0x0470(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               CanBlind;                                                 // 0x0474(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               CauseAvoidance;                                           // 0x0475(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0476(0x0002) MISSED OFFSET
	float                                              MaxIntensity;                                             // 0x0478(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BlindDistPercent;                                         // 0x047C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BlindAnglePercent;                                        // 0x0480(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               DebugBlindCone;                                           // 0x0484(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2B];                                      // 0x0485(0x002B) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendSpotLightComponent");
		return ptr;
	}


	void TurnOnLight(bool On);
	bool IsTurnedOn();
};


// Class BendGame.VehiclePawn
// 0x0520 (0x08D0 - 0x03B0)
class AVehiclePawn : public APawn
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x03B0(0x0010) MISSED OFFSET
	struct FBendInputFilter                            InputFilter;                                              // 0x03C0(0x000C) (Edit)
	TEnumAsByte<EBendVehicleType>                      VehicleType;                                              // 0x03CC(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x03CD(0x0003) MISSED OFFSET
	float                                              timeBetweenMakingSound;                                   // 0x03D0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x03D4(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnTireHit;                                                // 0x03D8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDriverEnteredVehiclePawn;                               // 0x03E8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnVehicleKnockedOver;                                     // 0x03F8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBikeOutOfGas;                                           // 0x0408(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDriverExitedVehiclePawn;                                // 0x0418(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnRammed;                                                 // 0x0428(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class UBendVehicleDamage*                          VehicleDamage;                                            // 0x0438(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnVehicleReceivedDamage;                                  // 0x0440(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class UBendMovementComp_Bike*                      VehicleSim;                                               // 0x0450(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UBendVehicleSeatsComponent*                  SeatsComponent;                                           // 0x0458(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UBendVehicleFuelComponent*                   FuelComponent;                                            // 0x0460(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UBendVehicleAlwaysTickComponent*             AlwaysTickComponent;                                      // 0x0468(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UBendVehicleTireParticlesComponent*          TireParticlesComponent;                                   // 0x0470(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UParticleSystemComponent*                    BikeNitroParticleComponent;                               // 0x0478(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UParticleSystemComponent*                    SmokeParticle_Internal;                                   // 0x0480(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	bool                                               WantsToSmoke;                                             // 0x0488(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x7];                                       // 0x0489(0x0007) MISSED OFFSET
	class UBoxComponent*                               DamageEnemyTriggerComponent;                              // 0x0490(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UBoxComponent*                               TripWireBreakerComponent;                                 // 0x0498(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class AActor*                                      ActorAttachedToBack;                                      // 0x04A0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData)
	bool                                               CanPlayerManuallyEnter;                                   // 0x04A8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x7];                                       // 0x04A9(0x0007) MISSED OFFSET
	TArray<class UAudioComponent*>                     RoadNoiseAudioComponent;                                  // 0x04B0(0x0010) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst)
	class UAudioComponent*                             SND_Bike_CC_Internal;                                     // 0x04C0(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UAudioComponent*                             SND_Bike_Stop_Internal;                                   // 0x04C8(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	TArray<struct FGearSetup>                          gearSetups_Initial;                                       // 0x04D0(0x0010) (BlueprintVisible, ZeroConstructor)
	float                                              throttleUpshiftFactor;                                    // 0x04E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SoundRpmWhenShift0To1;                                    // 0x04E4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     HitLoc;                                                   // 0x04E8(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SoundDrawDebugHeight;                                     // 0x04F4(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               TempSoundBikesBoost;                                      // 0x04F8(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               TempSoundBikesBoostOrBurnout;                             // 0x04F9(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IsThrottlePressed_Temp;                                   // 0x04FA(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               DrawDebugSound;                                           // 0x04FB(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x4];                                       // 0x04FC(0x0004) MISSED OFFSET
	class UClass*                                      FollowOverrideCamera;                                     // 0x0500(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      CombatOverrideCamera;                                     // 0x0508(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      BoostOverrideCamera;                                      // 0x0510(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      FixedAimOverrideCamera;                                   // 0x0518(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      FollowWaterOverrideCamera;                                // 0x0520(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      ImpactWeaponDmgType;                                      // 0x0528(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               SoundSuppressRpm;                                         // 0x0530(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               SoundSuppressThrottle;                                    // 0x0531(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               PreviewingParts;                                          // 0x0532(0x0001) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData06[0x1];                                       // 0x0533(0x0001) MISSED OFFSET
	float                                              SoundFuelRemainingPrevFrame0To1;                          // 0x0534(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SoundLowFuelWarningLevel0To1;                             // 0x0538(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ShouldLowOrNoFuelStallDuration;                           // 0x053C(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                TargetGear;                                               // 0x0540(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               ValidScraping;                                            // 0x0544(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0x3];                                       // 0x0545(0x0003) MISSED OFFSET
	class USoundCue*                                   ScrapingCue;                                              // 0x0548(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UAudioComponent*                             ScrapingSound;                                            // 0x0550(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	float                                              ImpactForceDuration;                                      // 0x0558(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MotionBlurWhenRiding;                                     // 0x055C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TWeakObjectPtr<class AVehicleInputListener>        VehicleInputListener;                                     // 0x0560(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	class UBendVehiclePartsDatabase*                   VehiclePartsDatabase;                                     // 0x0568(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData08[0x10];                                      // 0x0570(0x0010) MISSED OFFSET
	class UBendAnimVariationData*                      AnimationSet;                                             // 0x0580(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UBendDetourCrowdAvoidanceComponent*          DetourCrowdAvoidanceComponent;                            // 0x0588(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	bool                                               UseFrontComponent;                                        // 0x0590(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData09[0x7];                                       // 0x0591(0x0007) MISSED OFFSET
	class UBendDetourCrowdAvoidanceComponent*          DetourCrowdAvoidanceComponentFront;                       // 0x0598(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	bool                                               UseBackComponent;                                         // 0x05A0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData10[0x7];                                       // 0x05A1(0x0007) MISSED OFFSET
	class UBendDetourCrowdAvoidanceComponent*          DetourCrowdAvoidanceComponentBack;                        // 0x05A8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	float                                              DLCRing_TimeInTheAir;                                     // 0x05B0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              DLCRing_TimeRequiredInAirForSkillToActivate;              // 0x05B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DLCRing_FuelEfficiencyModifier;                           // 0x05B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DLCRing_ActiveTimeLeft;                                   // 0x05BC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class USkeletalMeshComponent*                      VehicleMesh;                                              // 0x05C0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UStaticMeshComponent*                        RagdollColliderMeshRef;                                   // 0x05C8(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnEnteredEncampment;                                      // 0x05D0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnLeftEncampment;                                         // 0x05E0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	float                                              MakeNoiseThreshold;                                       // 0x05F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ExhaustNoiseReduction;                                    // 0x05F4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ExhaustTipNoiseReduction;                                 // 0x05F8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                FireCount;                                                // 0x05FC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                NapalmFireCount;                                          // 0x0600(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FireDamagePerSecond;                                      // 0x0604(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              NapalmFireDamagePerSecond;                                // 0x0608(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              HealthPercent;                                            // 0x060C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnWaterEntered;                                           // 0x0610(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnWaterExited;                                            // 0x0620(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	float                                              WaterDepthEnterThreshold;                                 // 0x0630(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              WaterDepthExitThreshold;                                  // 0x0634(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              WaterDepthGPUQueryScale;                                  // 0x0638(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData11[0x4];                                       // 0x063C(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnBeginVehicleOverrideForCinematics;                      // 0x0640(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnEndVehicleOverrideForCinematics;                        // 0x0650(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData12[0x4];                                       // 0x0660(0x0004) MISSED OFFSET
	float                                              mVehicleHealth_Save;                                      // 0x0664(0x0004) (ZeroConstructor, SaveGame, IsPlainOldData)
	float                                              mVehicleFuel_Save;                                        // 0x0668(0x0004) (ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData13[0x4];                                       // 0x066C(0x0004) MISSED OFFSET
	class UBendAIDriveComponent*                       AIDriveComponent;                                         // 0x0670(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UBendAIDriveNoPhysicsComponent*              AIDriveNoPhysicsComponent;                                // 0x0678(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UBendAIVehicleFailsafe*                      FailsafeComponent;                                        // 0x0680(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UBendLaneRestrictionComponent*               LaneRestrictionComponent;                                 // 0x0688(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UBendAIVehicleDebugComponent*                AIDebugComponent;                                         // 0x0690(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData14[0x10];                                      // 0x0698(0x0010) MISSED OFFSET
	class UBendVehiclePartLoadouts*                    VehiclePartLoadouts;                                      // 0x06A8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TArray<struct FVehicleAttachedPart>                AttachedPartArray;                                        // 0x06B0(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient)
	TArray<class UBendVehicleMeshAttachmentSpecs*>     PreLoadedPartsFromEditor;                                 // 0x06C0(0x0010) (Edit, ZeroConstructor, EditConst)
	TArray<struct FBendVehicleImpactSoundInfo>         ImpactSounds;                                             // 0x06D0(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData15[0x8];                                       // 0x06E0(0x0008) MISSED OFFSET
	class UMaterialInstanceDynamic*                    HeadLightDynMat;                                          // 0x06E8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                HeadLightDynMatIndex;                                     // 0x06F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData16[0x4];                                       // 0x06F4(0x0004) MISSED OFFSET
	class UMaterialInstanceDynamic*                    TailLightDynMat;                                          // 0x06F8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                TailLightDynMatIndex;                                     // 0x0700(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData17[0x4];                                       // 0x0704(0x0004) MISSED OFFSET
	TArray<class USkeletalMesh*>                       BikeSeatsWithTailLights;                                  // 0x0708(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TEnumAsByte<EMotorcyclePartType>                   HeadlightPartType;                                        // 0x0718(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EMotorcyclePartType>                   TaillightPartType;                                        // 0x0719(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData18[0x6];                                       // 0x071A(0x0006) MISSED OFFSET
	TArray<struct FGameplayTag>                        SkinTags;                                                 // 0x0720(0x0010) (Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst)
	struct FGameplayTag                                PaintTag;                                                 // 0x0730(0x0008) (Edit, BlueprintVisible, Transient, EditConst)
	struct FGameplayTag                                BodyTag;                                                  // 0x0738(0x0008) (Edit, BlueprintVisible, Transient, EditConst)
	struct FGameplayTag                                TankTag;                                                  // 0x0740(0x0008) (Edit, BlueprintVisible, Transient, EditConst)
	unsigned char                                      UnknownData19[0xC];                                       // 0x0748(0x000C) MISSED OFFSET
	int                                                ChainMaterialIndex;                                       // 0x0754(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData20[0x88];                                      // 0x0758(0x0088) MISSED OFFSET
	struct FVector                                     DriverHandOffsetLeft;                                     // 0x07E0(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector                                     DriverHandOffsetRight;                                    // 0x07EC(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData21[0xC0];                                      // 0x07F8(0x00C0) MISSED OFFSET
	struct FRandomParts                                DefaultPartIndexes;                                       // 0x08B8(0x0010)
	unsigned char                                      UnknownData22[0x8];                                       // 0x08C8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.VehiclePawn");
		return ptr;
	}


	void UpdateSound(float DeltaTime);
	bool UnReserveSeat(class AActor* Rider, const struct FName& SeatName);
	void ToggleRideAssist();
	TEnumAsByte<EeTiresInAir> TiresInAir();
	void SuppressBikeStartupSound();
	void StopVehicleAI(float stopForce);
	void StopFuelConsumptionWhenLow(bool ShouldStopConsumptionWhenLow);
	void StopFuelConsumption(bool ShouldStopConsumption);
	void StopFollowing();
	void StopDamageWhenLow(bool StopDamage);
	void StopDamageForMission(bool StopDamage);
	void SoundSlippage();
	void SoundSetSpeedAndEngineIdle();
	void SoundSetBurnout();
	void SoundRoadWetness();
	void SoundOnGravel();
	void SoundIsThrottlePressed();
	void SoundDrawDebug(const struct FString& Name, float Value);
	float SoundCalculateNormalizedRPM();
	void SimulateEngineRev(float Time);
	bool ShouldApplyBlockingForceToAll();
	bool ShouldApplyBlockingForceTo(class AVehiclePawn* OtherVehiclePawn);
	void SetVehiclesToApplyBlockForce(TArray<class AVehiclePawn*> VehicleList);
	void SetVehiclePartSpecsClass(class UClass* Specs, TEnumAsByte<EMotorcyclePartType> PartType);
	void SetVehiclePartSpecs(class UBendVehicleMeshAttachmentSpecs* Specs, TEnumAsByte<EMotorcyclePartType> PartType);
	void SetVehiclePartsLevel(TEnumAsByte<EBendVehiclePartLevel> Level);
	void SetVehiclePartsDatabase(class UBendVehiclePartsDatabase* InVehiclePartsDatabase);
	bool SetUpEntryAnchor(class AActor* Rider);
	void SetupDynBikeMaterials(TEnumAsByte<EMotorcyclePartType> InMotorPartType, class UMeshComponent* InMesh);
	void SetRPMSound(float NormalizedRPM);
	void SetPreviewPartsFlag(bool IsPreviewingParts);
	void SetNoLean(bool bNoLean);
	void SetMaxHandBrakeTorque(float MaxHandBrakeTorque);
	void SetMaxBrakeTorque(float MaxBrakeTorque);
	void SetMaxAcceleration(float MaxAcceleration);
	void SetMaterial(class UMaterialInterface* InMaterial, int InMaterialIndex, TEnumAsByte<EMotorcyclePartType> InMotorPartType);
	void SetIsPlayerRidable(bool bIsPlayerRidable);
	void SetIgnoreBrakeInput(bool IgnoreBrakeInput, bool IgnoreRearWheelSlip);
	void SetHighBeams(bool B);
	void SetFuelIfLow(float MinimumFuel);
	void SetFormation(TEnumAsByte<EVehicleAI> formation);
	void SetDesiredSpeed(float desiredSpeed);
	void SetDesiredLane(int lane);
	void SetCanBePushedOver(bool bCan);
	void SetBroken(bool bIsBroken);
	void SetBikeToRevInPlace(bool RevInPlace, float RevTime, const struct FScriptDelegate& OnRevvingFinished);
	void SetAllowAutoCornerSpeed(bool bAllow);
	void ResetVehicleWithSingleRiderAtLocation(class ABendPawn* Rider, const struct FName& SeatName, const struct FVector& NewLocation, const struct FRotator& NewRotation);
	void ResetVehicleWithRidersAtLocation(TArray<class ABendPawn*> Riders, TArray<struct FName> SeatNames, const struct FVector& NewLocation, const struct FRotator& NewRotation);
	void ResetVehicleAI();
	void ResetHeadlightAimAt();
	bool ReserveSeat(class AActor* Rider, const struct FName& SeatName);
	void RemoveVehicleFromBlockForceList(class AVehiclePawn* VehiclePawn);
	void RemoveRider(class AActor* RiderActor);
	void RemoveAllVehiclesFromBlockForceList();
	void RefreshHealth();
	void ReceiveTireHit(int TireIndex, const struct FVector& NormalVelocity);
	void Park(bool bPark);
	void OnVehiclePartUpdated(TEnumAsByte<EMotorcyclePartType> PartType, class UMeshComponent* Mesh, class UBendVehicleMeshAttachmentSpecs* Specs);
	void OnTriggerAISound();
	void OnTiltForward(float Val);
	void OnSwitchedOnLights();
	void OnSwitchedOffLights();
	void OnStopExplicitBraking();
	void OnStopEngineFailed();
	void OnStopEngine();
	void OnStopBraking();
	void OnStopBoosting();
	void OnStartExplicitBraking();
	void OnStartEngineFailed();
	void OnStartEngine();
	void OnStartBraking();
	void OnStartBoosting();
	void OnSimulateEngineRevSound();
	void OnReceivedDamage(TEnumAsByte<EBendVehicleDamageType> DamageType, float damageTaken);
	void OnNotifyRepairEngine();
	void OnNotifyEngineDestroyed();
	void OnNotifyBrokenNPCVehicleTutorial();
	void OnMoveRight(float Val);
	void OnMoveForward(float Val);
	void OnMoveBackward(float Val);
	void OnLanded(int NumTiresOnGround);
	void OnImpactedEnemy(class ABendPawn* OtherActor, const struct FVector& Impulse);
	void OnHealthRestored();
	void OnHandbrakeReleased();
	void OnHandbrakePressed();
	void OnFullyDamaged();
	void OnEndVignette();
	void OnDriverFinishedExitingVehicle(TEnumAsByte<EBendVehicleExitReason> InExitReason);
	void OnDriverFinishedEnteringVehicle();
	void OnDriverExitedVehicle(TEnumAsByte<EBendVehicleExitReason> InExitReason);
	void OnDriverEnteredVehicle();
	void OnDamageEnemyTriggerOverlapEnd(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex);
	void OnDamageEnemyTriggerOverlapBegin(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void OnChangeTailLightState(TEnumAsByte<EBendVehicleTailLightState> NewState);
	void OnBoostReleased();
	void OnBoostPressed();
	void OnBeginVignette();
	void On180Finished();
	void LowerKickstand(bool bLower);
	void LeavingEncampment(class UBendEncampmentData* Encampment);
	bool IsRiderLocalPlayer();
	bool IsRideAssistEnabled();
	bool IsRidableBy(class ABendPawn* Character);
	bool IsPreviewingParts();
	bool IsPlayerThrottleButtonPressed(float Threshold);
	bool IsPlayerInVehicle();
	bool IsKickstandLowered();
	bool IsInWater();
	bool IsHighCentered();
	bool IsDriverSeat(const struct FName& SeatName);
	bool IsBroken();
	bool IsBoostInputBlocked();
	bool IsBoostActive();
	bool IsAutoCornerSpeedAllowed();
	bool InitNavigationPathList(TArray<class AAIVehicleWaypoint*> WaypointList, TEnumAsByte<EVehicleAILoopType> LoopType);
	bool InitNavigationPath(class AAIVehicleWaypoint* Start, class AAIVehicleWaypoint* End);
	bool HasVehiclePart(TEnumAsByte<EMotorcyclePartType> PartType);
	bool HasRider();
	class UBendVehicleMeshAttachmentSpecs* GetVehiclePartSpecs(TEnumAsByte<EMotorcyclePartType> PartType);
	class UMeshComponent* GetVehiclePartMesh(TEnumAsByte<EMotorcyclePartType> PartType);
	struct FVehicleAttachedPart GetVehiclePart(TEnumAsByte<EMotorcyclePartType> PartType);
	class ABendPawn* GetRiderBendPawn(const struct FName& SeatName);
	class AActor* GetRiderActor(const struct FName& SeatName);
	float GetMaxHandBrakeTorque();
	float GetMaxBrakeTorque();
	float GetMaxAcceleration();
	class UBendLaneRestrictionComponent* GetLaneRestrictionComponent();
	class UBendSpotLightComponent* GetHeadlightComponent();
	float GetFloorWaterDepth(bool bUseWheelGPUDepthCheck);
	class AActor* GetFirstRiderActor();
	class ABendPawn* GetDriverBendPawn();
	class AActor* GetDriver();
	float GetDesiredSpeed();
	int GetCurrentLane();
	class UBendAIVehicleDebugComponent* GetAIVehicleDebugComponent();
	class UBendAIDriveComponent* GetAIDriveComponent();
	void ForceVehicleDamageUpdate();
	void ForceLane(int lane);
	void EnteredEncampment(class UBendEncampmentData* Encampment);
	void EnableVehicleInputBlocking();
	void EnableRideAssistWithUserThrottle();
	void EnableRideAssist();
	void EnablePhysics(bool bEnable);
	void EnableCollision(bool bEnable, bool bApplyToRiders, bool bFromParkKnockDown);
	void EnableBlockingForceAllVehicles();
	void EjectRiders();
	void DisableVehicleInputBlocking();
	void DisableRideAssist();
	void DisableBlockingForceForAllVehicles();
	void ClearPath();
	bool CanSeatBeReservedBy(class AActor* Rider, const struct FName& SeatName);
	bool CanSeatBeOccupiedBy(class AActor* Rider, const struct FName& SeatName);
	void Burnout(bool start_stop);
	void BlockBoostInput(bool bBlock);
	void AssignToPlayer(int PlayerIndex);
	void AssignToFirstPlayer();
	void AimHeadlightAt(const struct FVector& TargetLocation);
	void AddVehicleToBlockForceList(class AVehiclePawn* VehiclePawn);
	bool AddRider(class AActor* RiderActor, const struct FName& SeatName);
	void ActivateBoostForTime(float HowLong, bool IgnoreBoostDrain, bool NeedsBoostUnlocked);
};


// Class BendGame.BendGameState
// 0x0020 (0x03C0 - 0x03A0)
class ABendGameState : public AGameState
{
public:
	class ABendWorldManager*                           WorldManager;                                             // 0x03A0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class ABendAmbientEventManager*                    AmbientEventManager;                                      // 0x03A8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class AVehiclePawn*                                Bike;                                                     // 0x03B0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x03B8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendGameState");
		return ptr;
	}

};


// Class BendGame.IndexedColorDataAsset
// 0x0010 (0x0038 - 0x0028)
class UIndexedColorDataAsset : public UDataAsset
{
public:
	TArray<struct FLinearColor>                        IndexedColors;                                            // 0x0028(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.IndexedColorDataAsset");
		return ptr;
	}

};


// Class BendGame.BendGameplayStatics
// 0x0008 (0x0030 - 0x0028)
class UBendGameplayStatics : public UBlueprintFunctionLibrary
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendGameplayStatics");
		return ptr;
	}


	void STATIC_WeatherUpdateAudioComponent(class UObject* WorldContextObject, class UAudioComponent* AudioComponent, const struct FName& CCTag, bool StopSound, bool IsWind);
	bool STATIC_WasLastInputKeyFromKeyboard();
	float STATIC_UnderHeightMap(class UBendGraphicsBufferQueryComponent* GraphicsBufferQueryComponent, const struct FVector& Location, int QueryCount, float Radius);
	void STATIC_TeleportActorsToMatineeEnd(class AMatineeActor* MatineeActor);
	void STATIC_ShowLoadingScreen(class UObject* WorldContextObject, bool State, bool WaitForManualClose);
	bool STATIC_ShouldSkipMainMenu();
	bool STATIC_ShouldSkipAllTutorials();
	bool STATIC_ShouldResetDoOnceForLevelScriptActor(class UObject* LevelScriptSelf, float NumTicks);
	void STATIC_SetWorldLevelStreamingFrozen(class UObject* WorldContextObject, bool bLevelStreamingFrozen);
	void STATIC_SetSynchronousStreamingNoLoadOrFlush(class UObject* WorldContextObject, const struct FVector& NewLocation, bool NoLoadingScreen);
	void STATIC_SetSynchronousStreaming(class UObject* WorldContextObject, const struct FVector& NewLocation, bool bIgnoreDistanceCheck, bool bHideLoadingScreenUI);
	void STATIC_SetStreamingPosition(class UObject* WorldContextObject, const struct FVector& NewLocation, bool ShouldUpdateStreamingState, bool Force);
	void STATIC_SetStreamingMode(class UObject* WorldContextObject, const struct FString& Mode);
	void STATIC_SetStreamingDistance(class UObject* WorldContextObject, const struct FString& Params);
	void STATIC_SetIndoors(class UObject* WorldContextObject, bool IsIndoors);
	void STATIC_SetGameDifficulty(TEnumAsByte<EGameDifficulty> InGameDifficulty);
	void STATIC_SetFlashbackIndexByKeyNoStreamingUpdate(class UObject* WorldContextObject, const struct FName& FlashbackKey, int Index);
	void STATIC_SetFlashbackIndexByKey(class UObject* WorldContextObject, const struct FName& FlashbackKey, int Index, bool NoLoadingScreen);
	void STATIC_SetDestroyActorOnSaveGameTag(class AActor* Actor);
	void STATIC_SetCurrentShotNum(int shotnum);
	void STATIC_SetBendTimeDilation(float TimeDilation, int* DilationID);
	void STATIC_SetBasicInteractSettings(class USlateInputInteractComponent* SlateInput, const struct FString& PreText, const struct FString& Text, const struct FTransform& FollowTransform, bool SecondaryInteract, class ABendInventoryPickup* InventoryPickup, bool SinglePressInput, TEnumAsByte<EIconTypes> IconType, bool ThirdInteractType);
	void STATIC_SetActorSaveGameTag(class AActor* Actor, bool ForceTagSet);
	void STATIC_SetActorActive(class UObject* WorldContextObject, class AActor* Actor, bool bNewActive);
	bool STATIC_SaveSlotExists(TEnumAsByte<ESaveGameType> SlotNumber);
	bool STATIC_SavePlayerProfile(class USaveGame* BendSaveGame);
	void STATIC_SaveGameToFile(class UObject* WorldContextObject, const struct FString& FileName, TEnumAsByte<ESaveGameFileIOResult>* IOResult, struct FText* Message);
	void STATIC_SaveGameOWWithPlayerOnVehicle(const struct FTransform& VehicleLocation, bool bCriticalSave, int* RespawnID);
	void STATIC_SaveGameOWWithLocAndVehicle(const struct FTransform& Transform, const struct FTransform& VehicleTransform, bool bCriticalSave, bool requiresProximityToSaveInteract, bool checkBikeState, int* RespawnID);
	void STATIC_SaveGameOWWithLoc(const struct FTransform& Transform, bool bCriticalSave, int* RespawnID);
	bool STATIC_SaveGameOW(bool bCriticalSave);
	bool STATIC_SaveGame(class USaveGame* SaveGame, TEnumAsByte<ESaveGameType> SlotNumber, bool bIsOWSave);
	bool STATIC_SaveCheckpoint(class USaveGame* BendSaveGame, const struct FString& SaveGameID);
	void STATIC_RestoreStreamingDistance(class UObject* WorldContextObject, const struct FString& Params);
	void STATIC_RestoreAllStreamingDistances(class UObject* WorldContextObject, const struct FString& Params);
	void STATIC_ResetBendTimeDilation(int DilationID);
	void STATIC_ResetAllBendTimeDilation();
	void STATIC_RequestSaveScreenShot(class UObject* WorldContextObject);
	void STATIC_RequestNGPDataAndReturnToMenu(class USaveGame* SaveToLoad);
	void STATIC_RemoveSaveGameTag(class AActor* Actor);
	bool STATIC_RemoveRespawnOverrideLoc(int RespawnID);
	bool STATIC_RemoteEventOneStringParameter(class UObject* WorldContextObject, const struct FName& EventName, const struct FString& EventParameter);
	bool STATIC_RemoteEventNoParams(class UObject* WorldContextObject, const struct FName& EventName);
	void STATIC_ReleaseRequestedSaveScreenShot(class UObject* WorldContextObject);
	struct FString STATIC_ReadTextFromDisk(const struct FString& InFilePath);
	void STATIC_PauseOnFocusLost();
	void STATIC_OpenScreenShotFolder(const struct FString& Path);
	void STATIC_MoveWorldOrigin(class UObject* WorldContextObject, const struct FIntVector& InPosition);
	class USaveGame* STATIC_LoadPlayerProfile();
	class UBendSkeletalMeshArrayData* STATIC_LoadPawnMeshList(class UClass* PawnClass);
	void STATIC_LoadMissionStartDeferred(class UObject* WorldContextObject);
	void STATIC_LoadGameFromFile(class UObject* WorldContextObject, const struct FString& FileName, TEnumAsByte<ESaveGameFileIOResult>* IOResult, class USaveGame** SaveGame, struct FText* Message);
	class USaveGame* STATIC_LoadGame(class UObject* WorldContextObject, TEnumAsByte<ESaveGameType> SlotNumber, bool UseUIOnFailure);
	class USaveGame* STATIC_LoadCheckpoint(class UObject* WorldContextObject);
	void STATIC_ListLoadedLevels(TArray<struct FString>* OutLevels);
	bool STATIC_IsWorldLevelStreamingFrozen(class UObject* WorldContextObject);
	bool STATIC_IsUsingGamepad();
	bool STATIC_IsTelemetryEnabled();
	bool STATIC_IsSwipeSupported();
	bool STATIC_IsShippingBuild();
	bool STATIC_IsSaveGameCorrupted(TEnumAsByte<ESaveGameType> SlotNumber, bool ShouldDisplayCorruptDialog);
	bool STATIC_IsRunningGame(class UObject* WorldContextObject);
	bool STATIC_IsPhotoModeUICaptureComplete();
	bool STATIC_IsPhotoModeCaptureSaveComplete();
	bool STATIC_IsLoadingScreenEnabled();
	bool STATIC_IsLoadingMovieDisabled();
	bool STATIC_IsInFlashbackMode(class UObject* WorldContextObject, bool* NotReallyAFlashback);
	bool STATIC_IsEditorBuild();
	bool STATIC_IsCooking();
	bool STATIC_IsAsyncLoadingActive();
	void STATIC_HideTheAdvertiseIcon(class UBendWidgetComponent* WidgetComponent);
	bool STATIC_HasRecentMouseInput();
	bool STATIC_HasMouseInputThisTick();
	void STATIC_HandleExplosion(class AActor* ExplodingActor, const struct FVector& Origin, const struct FBendExplosionParams& Params, TArray<class AActor*> IgnoreActors, class AActor* DamageCauser, class AController* InstigatedByController, TEnumAsByte<ECollisionChannel> DamagePreventionChannel, TArray<class ABendPawn*>* PawnsHit);
	TArray<struct FString> STATIC_GetWorldLevelStrings(class UObject* WorldContextObject);
	struct FTransform STATIC_GetTransformFromAnimationsAlign(const struct FName& AnchorRef, class UAnimSequenceBase* anim, const struct FTransform& AnchorLocation, class ABendPawn* Pawn);
	float STATIC_GetTimeSincePlaythroughStart();
	struct FGuid STATIC_GetPlaythroughGUID();
	class UBendSavePlayerProfile* STATIC_GetPlayerProfile();
	bool STATIC_GetPhotoModeCaptureProgress(int* outPercentage);
	TArray<struct FName> STATIC_GetParticleSystemEmitterNames(class UParticleSystem* ParticleSystem);
	bool STATIC_GetParticleSystemEmitterEnabledIndex(class UParticleSystem* ParticleSystem, int EmitterIndex, bool* EmitterExists);
	bool STATIC_GetParticleSystemEmitterEnabled(class UParticleSystem* ParticleSystem, const struct FName& EmitterName);
	void STATIC_GetOwningLevel(class AActor* Actor, class ULevel** OutLevel);
	void STATIC_GetOverlappingLevels(const struct FString& InLevel, TArray<struct FString>* OutLevels);
	bool STATIC_GetNewGamePlusDataFromSave(const struct FString& FileName, struct FNewGamePlusCarryOverData* NewGamePlusCarryOverData, class USaveGame** SelectedSaveOnFailure);
	bool STATIC_GetIsUsingBookmarkedLevel();
	struct FLinearColor STATIC_GetIndexedColor(TEnumAsByte<EColorIndex> ColorIndex, int ColorMode);
	TEnumAsByte<EGameDifficulty> STATIC_GetGameDifficulty();
	int STATIC_GetFlashbackIndexByKey(class UObject* WorldContextObject, const struct FName& FlashbackKey);
	int STATIC_GetCurrentShotNum();
	float STATIC_GetCurrentNumTicks();
	TEnumAsByte<EConsoleForGamepadLabels> STATIC_GetCurrentInputDevice();
	bool STATIC_GetCreditsState(class UObject* WorldContextObject);
	struct FTransform STATIC_GetBikeOffset(class AActor* Actor);
	struct FString STATIC_GetBendSaveGameFilename(TEnumAsByte<ESaveGameType> SaveGameType);
	class ABendPlayerPawn* STATIC_GetBendPlayerPawn(class UObject* WorldContextObject, int PlayerIndex);
	class ABendPlayerController* STATIC_GetBendPlayerController(class UObject* WorldContextObject, int PlayerIndex);
	class ABendGameMission* STATIC_GetBendMissionManager();
	class ABendJobManager* STATIC_GetBendJobManager();
	class ABendGameState* STATIC_GetBendGameState(class UObject* WorldContextObject);
	class ABendGameMode* STATIC_GetBendGameMode(class UObject* WorldContextObject);
	float STATIC_GetAverageFPS();
	TArray<struct FName> STATIC_GetAllObjectPathsInCollection(class UObject* WorldContextObject, const struct FName& CollectionName);
	TArray<struct FName> STATIC_GetAllLevelReferencers(class UObject* WorldContextObject, const struct FName& AssetName);
	void STATIC_GetAllActorsOfClassInLevel(class ULevel* Level, class UClass* ActorClass, TArray<class AActor*>* OutActors);
	struct FAimAssistSettings STATIC_GetAimAssistSettingsCurDifficulty();
	struct FAimAssistSettings STATIC_GetAimAssistSettings(TEnumAsByte<EGameDifficulty> Difficulty);
	struct FString STATIC_FormatFNamesAsString(TArray<struct FName> FNamesAsString);
	void STATIC_FlushPlayerInput();
	class UObject* STATIC_FindGameObject(const struct FString& ObjectName);
	struct FVector STATIC_FindClosestRoadSplinePositionFromLocation(const struct FVector& TargetLocation);
	struct FVector STATIC_FindClosestRoadSplinePosition(class AActor* TargetActor);
	void STATIC_EnableWorldHUD(class UObject* WorldContextObject, bool IsEnabled);
	void STATIC_EnablePhysicsAroundPoint(const struct FVector& Location, float Radius, TArray<class AActor*> ActorsToIgnore, float ForceRagdollDuration);
	void STATIC_EnablePhotoMode(bool IsEnabled);
	void STATIC_EnableFlashbackMode(class UObject* WorldContextObject, const struct FString& MissionID, bool NotReallyAFlashback);
	void STATIC_EnableCredits(class UObject* WorldContextObject, bool State);
	bool STATIC_DoesPlayerHaveLOSToInteract(class AActor* ActorToIgnore, class UInteractComponent* InteractComponent, const struct FVector& LastCheckedPlayerPos, bool LastCheckResult, const struct FVector& OverrideCheckLocation, bool* OutDidCast);
	bool STATIC_DoesActorBelongToRootWorld(class AActor* Actor);
	void STATIC_DisplayTheAdvertiseIcon(class UBendWidgetComponent* WidgetComponent, bool UseWideLayout, class UInventoryItem* InventoryItem, bool IsAmmoPickup, TEnumAsByte<EIconTypes> IconType, float Durability);
	void STATIC_DisplaySystemCorruptSaveDialog();
	void STATIC_DisableLoadingScreenMovie(bool bIsDisabled);
	void STATIC_DisableFlashbackMode(class UObject* WorldContextObject, bool bDoSynchronousStreaming);
	void STATIC_DidNotCompleteInteractHold(class USlateInputInteractComponent* SlateInteract, class UInteractComponent* InteractComponent);
	struct FString STATIC_DetermineCurrentSector(class UObject* WorldContextObject);
	TArray<struct FString> STATIC_DeformatFNamesString(const struct FString& FNamesAsString);
	struct FTraversalEdge STATIC_DefaultTraversalEdge();
	void STATIC_DebugDestroyAllNests();
	struct FString STATIC_CreateDistanceTextFromLocations(const struct FVector& Location1, const struct FVector& Location2, float InnerDistanceLimitInMeters, float OuterDistanceLimitInMeters, bool* WithinLimits, float* DistanceInMeters);
	struct FString STATIC_ConstructReferenceReport(class UObject* WorldContextObject, const struct FName& AssetName);
	void STATIC_ClearAppliedVehicleData();
	struct FString STATIC_CapturePhotoModeScreenShot(bool UseMegaScreenshot, int ResolutionMultiplier);
	bool STATIC_CanRequestNewScreenshot();
	void STATIC_BendQuickSave(bool bCriticalSave, bool requiresProximityToSaveInteract, bool checkBikeState);
	bool STATIC_AutoDetectUsingKeyboardAndMouse();
	bool STATIC_AutoDetectLastInputIsGamepad();
	void STATIC_ApplyVehicleDataFromProfile(class UBendSavePlayerProfile* ProfileSave);
	void STATIC_AddWindowFrames(class AStaticMeshActor* StaticMeshActor, TArray<class UStaticMesh*> Meshes, TArray<struct FTransform> Transforms, TArray<class UMaterialInterface*> Materials);
	void STATIC_AddActorToMatineeGroup(class AMatineeActor* MatineeActor, class AActor* NewActor, int GroupIndex);
};


// Class BendGame.BendGameScriptBase
// 0x0248 (0x0590 - 0x0348)
class ABendGameScriptBase : public AActor
{
public:
	struct FScriptMulticastDelegate                    OnObjectiveComplete;                                      // 0x0348(0x0010) (Edit, BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnMissionCheckpointSave;                                  // 0x0358(0x0010) (Edit, BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnMissionFail;                                            // 0x0368(0x0010) (Edit, BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDLCMissionFail;                                         // 0x0378(0x0010) (Edit, BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable)
	class UTexture2D*                                  MissionImage;                                             // 0x0388(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EMissionFailureOptions>                StartWithFailureSetting;                                  // 0x0390(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EMissionFailureSubject>                DistanceFailureMessagingSubject;                          // 0x0391(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EMissionFailureType>                   DistanceFailureMessagingReason;                           // 0x0392(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               UseOverrideSphereDistanceFailureMessaging;                // 0x0393(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EMissionFailureSubject>                OverrideSphereDistanceFailureMessagingSubject;            // 0x0394(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EMissionFailureType>                   OverrideSphereDistanceFailureMessagingReason;             // 0x0395(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EMissionFailureSubject>                BuddyDeathMessagingSubject;                               // 0x0396(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               CurrentlyInStateWaitingOnLoadCheckpoint;                  // 0x0397(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TWeakObjectPtr<class ABendPawn>                    BuddyForTrackedHealth;                                    // 0x0398(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TimeToWaitBeforeCheckpointReset;                          // 0x03A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               TrackingBuddyHealth;                                      // 0x03A4(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               UseBuddyHealthBar;                                        // 0x03A5(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x03A6(0x0002) MISSED OFFSET
	class UBendMissionData*                            StoredMissionData;                                        // 0x03A8(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CurrentDistanceFromObject;                                // 0x03B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x03B4(0x0004) MISSED OFFSET
	class ABendGameMission*                            MissionManagerPointer;                                    // 0x03B8(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<class ABendObjective*>                      MissionObjectives;                                        // 0x03C0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class ABendObjective*>                      MissionSideObjectives;                                    // 0x03D0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	int                                                TotalObjectivesComplete;                                  // 0x03E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData)
	int                                                HighestObjectiveStage;                                    // 0x03E4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData)
	int                                                CurrentObjectiveStage;                                    // 0x03E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData)
	bool                                               LeftMissionBoundaries;                                    // 0x03EC(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x03ED(0x0003) MISSED OFFSET
	TArray<class AVolume*>                             FailureVolume;                                            // 0x03F0(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	class ABendPawn*                                   Stored_Pawn;                                              // 0x0400(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<class AVehiclePawn*>                        RideAssistCandidates;                                     // 0x0408(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class ABendPawn*>                           STORED_Pawns;                                             // 0x0418(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	float                                              Failure_Distance;                                         // 0x0428(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x042C(0x0004) MISSED OFFSET
	class AActor*                                      FailureDistanceTarget;                                    // 0x0430(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IgnoreZAxisDistCheck;                                     // 0x0438(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x7];                                       // 0x0439(0x0007) MISSED OFFSET
	TArray<bool>                                       DoOnce_HasBeenInitd;                                      // 0x0440(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame)
	TArray<bool>                                       DoOnce_IsClosed;                                          // 0x0450(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame)
	int                                                DoOnce_HighestIndexUsed;                                  // 0x0460(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FailureBufferForVolume;                                   // 0x0464(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FailureBuffer_ForDistance;                                // 0x0468(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               DistanceCheckingActive;                                   // 0x046C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData05[0x3];                                       // 0x046D(0x0003) MISSED OFFSET
	TArray<class AVehiclePawn*>                        STORED_VehicleRefs;                                       // 0x0470(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	bool                                               UsingBuddyForDistance;                                    // 0x0480(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               ScriptReloadingCheckpoint;                                // 0x0481(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData06[0x6];                                       // 0x0482(0x0006) MISSED OFFSET
	struct FString                                     MostRecentCheckpointSave;                                 // 0x0488(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	float                                              Scoring_TimeToComplete;                                   // 0x0498(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                Scoring_EnemiesKilled;                                    // 0x049C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData)
	int                                                Scoring_PlayerDeaths;                                     // 0x04A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               PlayerDead;                                               // 0x04A4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               ForceOffBikeAtEnd;                                        // 0x04A5(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0x2];                                       // 0x04A6(0x0002) MISSED OFFSET
	struct FTimerHandle                                SavingHandle;                                             // 0x04A8(0x0004) (Edit, BlueprintVisible, DisableEditOnInstance)
	int                                                CurrentCheckpointNumber;                                  // 0x04AC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                MaxCheckpointCount;                                       // 0x04B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               FailingByVolume;                                          // 0x04B4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               FailingByDistance;                                        // 0x04B5(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               FailedThroughLeaving;                                     // 0x04B6(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData08[0x1];                                       // 0x04B7(0x0001) MISSED OFFSET
	TArray<class AVehiclePawn*>                        AllVehicleSpawns;                                         // 0x04B8(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class ABendPawn*>                           AllRiderCandidates;                                       // 0x04C8(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData09[0x8];                                       // 0x04D8(0x0008) MISSED OFFSET
	struct FTransform                                  PlayerEndPosition;                                        // 0x04E0(0x0030) (Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData)
	struct FTransform                                  BikeEndPosition;                                          // 0x0510(0x0030) (Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData)
	bool                                               OnBikeAtEnd;                                              // 0x0540(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData10[0x7];                                       // 0x0541(0x0007) MISSED OFFSET
	class AVolume*                                     CurrentFailureVolume;                                     // 0x0548(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CurrentMaxFailureValue;                                   // 0x0550(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     BeforeTeleportLocation;                                   // 0x0554(0x000C) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               MissionEnded;                                             // 0x0560(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               PreInitializingBuddies;                                   // 0x0561(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               HasInitializedStartLocations;                             // 0x0562(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData11[0x5];                                       // 0x0563(0x0005) MISSED OFFSET
	class UHudMissionTimerWidget*                      HealthRef;                                                // 0x0568(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FTimerHandle                                SaveInAFrameTimer;                                        // 0x0570(0x0004) (Edit, BlueprintVisible, DisableEditOnInstance)
	float                                              TimeBetweenVolumeChecksWhenInBounds;                      // 0x0574(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CurrentTimeBetweenVolumeChecks;                           // 0x0578(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     LastVolumeCollisionCheck;                                 // 0x057C(0x000C) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData12[0x8];                                       // 0x0588(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendGameScriptBase");
		return ptr;
	}


	bool UpdateObjectiveProgression();
	bool UpdateHealthBar(bool RemoveBar, float NewHealth, float MaxHealth, bool inverseBar);
	bool SetUpBuddyDeathTracking(bool Active, class ABendPawn* Pawn, bool ShowBuddyHealthBar, TEnumAsByte<EMissionFailureSubject> Subject);
	void OnBuddyTakeAnyDamage(float TheDamage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void OnBuddyDied(class ABendPawn* Pawn, bool bDied);
	void LoadThePreviousCheckpoint(const struct FString& MessageToDisplay);
	void LoadPreviousCheckpointWithMessage(TEnumAsByte<EMissionFailureSubject> Subject, TEnumAsByte<EMissionFailureType> Reason);
	TArray<class ABendObjective*> GetSideObjectives();
	void GetMissionEndingPositions(struct FTransform* PlayerPosition, struct FTransform* BikePosition, bool* OnBike);
	bool GetManualReloadingCheckpoint();
	TArray<class ABendObjective*> GetMainObjectives();
	void GetCurrentScoringVariables(float* Time, int* Deaths, int* kills);
	TArray<class ABendObjective*> GetAllObjectives();
	struct FString GenerateFailingText(TEnumAsByte<EMissionFailureSubject> Subject, TEnumAsByte<EMissionFailureType> Reason);
	struct FText GenerateFailingLocalizedText(TEnumAsByte<EMissionFailureSubject> Subject, TEnumAsByte<EMissionFailureType> Reason);
	void ClearTheMissionFailing(TEnumAsByte<EMissionFailureOptions> FailureType);
	void ChangeOverrideSphereDistanceFailureMessagingType(TEnumAsByte<EMissionFailureSubject> Subject, TEnumAsByte<EMissionFailureType> Reason, bool UseOverride);
	void ChangeDistanceFailureMessagingType(TEnumAsByte<EMissionFailureSubject> Subject, TEnumAsByte<EMissionFailureType> Reason);
	void BeginTheMissionFailing(TEnumAsByte<EMissionFailureOptions> FailureType);
};


// Class BendGame.BendHangingBody
// 0x0010 (0x0358 - 0x0348)
class ABendHangingBody : public AActor
{
public:
	float                                              WindSpeedOffset;                                          // 0x0348(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              WindAdaption;                                             // 0x034C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0350(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendHangingBody");
		return ptr;
	}

};


// Class BendGame.BendHumanCoverQuerySettings
// 0x0090 (0x00B8 - 0x0028)
class UBendHumanCoverQuerySettings : public UDataAsset
{
public:
	TArray<struct FCoverQuerySettingsData>             CoverQueries;                                             // 0x0028(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FCoverVerificationSettingsData>      CoverVerification;                                        // 0x0038(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FCoverMoveVerificationSettingsData>  MoveVerification;                                         // 0x0048(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x60];                                      // 0x0058(0x0060) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendHumanCoverQuerySettings");
		return ptr;
	}

};


// Class BendGame.BendImpactIncendiaryEffect
// 0x0190 (0x06F0 - 0x0560)
class ABendImpactIncendiaryEffect : public ABendImpactEffect
{
public:
	class UAudioComponent*                             FireAudioComponent;                                       // 0x0560(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UBendDetourCrowdAvoidanceComponent*          DetourCrowdAvoidanceComponent;                            // 0x0568(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	struct FVector                                     local_CollideLocation;                                    // 0x0570(0x000C) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x057C(0x0004) MISSED OFFSET
	TArray<class UMaterialInstanceDynamic*>            DecalMaterials;                                           // 0x0580(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class USphereComponent*>                    CollisionSphereComponents;                                // 0x0590(0x0010) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance)
	TArray<class ABendPawn*>                           PawnsSetOnFire;                                           // 0x05A0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class UDecalComponent*>                     Decals;                                                   // 0x05B0(0x0010) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance)
	float                                              CurrentDecalBurnLevel;                                    // 0x05C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CurrentLifetimeOfBlueprint;                               // 0x05C4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TotalLifeTime;                                            // 0x05C8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FadeOutTime;                                              // 0x05CC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CollisionRemovalTime;                                     // 0x05D0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     CurrentAveragePosition;                                   // 0x05D4(0x000C) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                NumberOfImpactsToAverage;                                 // 0x05E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                CurrentNumberOfImpacts;                                   // 0x05E4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                MaxPawnsAffected;                                         // 0x05E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     LocationToPlaceDecalAndCollider;                          // 0x05EC(0x000C) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SphereColliderSize;                                       // 0x05F8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               CollidersDestroyed;                                       // 0x05FC(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               PreCollidersDestroyed;                                    // 0x05FD(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x05FE(0x0002) MISSED OFFSET
	float                                              MaxFireDistance;                                          // 0x0600(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0604(0x0004) MISSED OFFSET
	TArray<class UParticleSystemComponent*>            ParticleFires;                                            // 0x0608(0x0010) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance)
	struct FRotator                                    IgniteRots;                                               // 0x0618(0x000C) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0624(0x0004) MISSED OFFSET
	class UParticleSystemComponent*                    Explosion;                                                // 0x0628(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	struct FName                                       Size;                                                     // 0x0630(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UParticleSystemComponent*                    MoloCore;                                                 // 0x0638(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	float                                              ElapsedTime;                                              // 0x0640(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              Scalar;                                                   // 0x0644(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TimeToSpread;                                             // 0x0648(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxMaskStrength;                                          // 0x064C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinMaskStrength;                                          // 0x0650(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x0654(0x0004) MISSED OFFSET
	class UMaterialInstanceDynamic*                    BurnDecalDMI;                                             // 0x0658(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<class UParticleSystemComponent*>            Particles;                                                // 0x0660(0x0010) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance)
	class UDecalComponent*                             BurnDecal;                                                // 0x0670(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	float                                              BurnPatternDuration;                                      // 0x0678(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     DecalSize;                                                // 0x067C(0x000C) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<struct FVector>                             ImpactLocations;                                          // 0x0688(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	struct FVector                                     UpperBounds;                                              // 0x0698(0x000C) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     LowerBounds;                                              // 0x06A4(0x000C) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               DebugDrawBendDetourCrowdAvoidance;                        // 0x06B0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x3];                                       // 0x06B1(0x0003) MISSED OFFSET
	float                                              BendDetourCrowdAvoidRadius;                               // 0x06B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FTimerHandle                                RemoveCollisionTimer;                                     // 0x06B8(0x0004) (Edit, BlueprintVisible, DisableEditOnInstance)
	unsigned char                                      UnknownData06[0x4];                                       // 0x06BC(0x0004) MISSED OFFSET
	class UParticleSystem*                             EmitterTemplate;                                          // 0x06C0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               IsNapalm;                                                 // 0x06C8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData07[0x7];                                       // 0x06C9(0x0007) MISSED OFFSET
	class UClass*                                      DamageType;                                               // 0x06D0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      StatusEffect;                                             // 0x06D8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData08[0x10];                                      // 0x06E0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendImpactIncendiaryEffect");
		return ptr;
	}


	void UnbindOverlapEvents(class UPrimitiveComponent* PrimitiveComponent);
	void PreRemoveCollision();
	void OnComponentOverlapEnd(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex);
	void OnComponentOverlapBegin(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool FromSweep, const struct FHitResult& SweepResult);
	void CollisionRemoved();
	void BindOverlapEvents(class UPrimitiveComponent* PrimitiveComponent);
};


// Class BendGame.BendIncendiary_Bolt_AnimProp
// 0x0058 (0x03A0 - 0x0348)
class ABendIncendiary_Bolt_AnimProp : public AActor
{
public:
	class UParticleSystemComponent*                    mTipFire_CodeRef;                                         // 0x0348(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UMaterialInstanceDynamic*                    mVelSprite_DMI;                                           // 0x0350(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FLinearColor                                mTargetSpeed;                                             // 0x0358(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FLinearColor                                mCurrentSpeed;                                            // 0x0368(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     mPreviousPosition;                                        // 0x0378(0x000C) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     mCurrentPosition;                                         // 0x0384(0x000C) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              mMaxSpeedInfluence;                                       // 0x0390(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              mDeltaTime;                                               // 0x0394(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              mLerpAlpha;                                               // 0x0398(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x039C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendIncendiary_Bolt_AnimProp");
		return ptr;
	}

};


// Class BendGame.BendInputListener
// 0x0008 (0x0350 - 0x0348)
class ABendInputListener : public AActor
{
public:
	unsigned char                                      bBendBlockInput : 1;                                      // 0x0348(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0349(0x0003) MISSED OFFSET
	TEnumAsByte<EAutoReceiveInput>                     BendAutoReceiveInput;                                     // 0x034C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x034D(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendInputListener");
		return ptr;
	}

};


// Class BendGame.BendInputManager
// 0x0058 (0x03A0 - 0x0348)
class ABendInputManager : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0348(0x0008) MISSED OFFSET
	TArray<class UClass*>                              BendInputModeActors;                                      // 0x0350(0x0010) (Edit, ZeroConstructor)
	TArray<struct FName>                               GlobalDebounceActions;                                    // 0x0360(0x0010) (Edit, ZeroConstructor)
	class UDataTable*                                  PriorityDataTable;                                        // 0x0370(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UClass*                                      BendInputMapperClass;                                     // 0x0378(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class ABendInputMapper*                            BendInputMapper;                                          // 0x0380(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UDataTable*                                  SteamInputTable;                                          // 0x0388(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<class AActor*>                              InputModeActors;                                          // 0x0390(0x0010) (ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendInputManager");
		return ptr;
	}


	void SetMouseSmoothing(bool bSmooth);
	void SetMouseSensitivityModifier(TEnumAsByte<EBendMouseSettingType> MouseSettingType, float SensitivityModifier);
	void SetMouseSensitivity(TEnumAsByte<EBendMouseSettingAxis> MouseAxis, float Sensitivity);
	void SetMouseInvertSetting(TEnumAsByte<EBendMouseSettingType> MouseSettingType, TEnumAsByte<EBendMouseSettingAxis> MouseAxis, bool bInvert);
	void SaveMouseSettings();
	void RestoreDefaultMouseSettings();
	void IncreaseMouseSensitivity(float StepAmount);
	bool GetMouseSmoothing();
	float GetMouseSensitivityModifier(TEnumAsByte<EBendMouseSettingType> MouseSettingType);
	float GetMouseSensitivity(TEnumAsByte<EBendMouseSettingAxis> MouseAxis);
	bool GetMouseInvertSetting(TEnumAsByte<EBendMouseSettingType> MouseSettingType, TEnumAsByte<EBendMouseSettingAxis> MouseAxis);
	class AActor* GetInputModeActor(int Priority);
	class ABendInputMapper* STATIC_GetBendInputMapper();
	class ABendInputManager* STATIC_GetBendInputManager();
	bool EnableInputModeActorByName(const struct FName& PriorityName);
	bool EnableInputModeActor(int Priority);
	bool DisableInputModeActorByName(const struct FName& PriorityName);
	bool DisableInputModeActor(int Priority);
	void DecreaseMouseSensitivity(float StepAmount);
	void DebugDrawDebugControlsActive();
	class ABendInputManager* STATIC_BendInputManager();
};


// Class BendGame.BendInputMapping
// 0x00C8 (0x00F0 - 0x0028)
class UBendInputMapping : public UObject
{
public:
	unsigned char                                      UnknownData00[0x58];                                      // 0x0028(0x0058) MISSED OFFSET
	struct FText                                       ActionDisplayName;                                        // 0x0080(0x0018) (BlueprintVisible, BlueprintReadOnly)
	TArray<class UBendInputMapping*>                   LinkedBindings;                                           // 0x0098(0x0010) (ZeroConstructor)
	struct FName                                       SubGroupName;                                             // 0x00A8(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<struct FName>                               ConflictingSubGroups;                                     // 0x00B0(0x0010) (ZeroConstructor)
	TArray<struct FName>                               ConflictingActions;                                       // 0x00C0(0x0010) (ZeroConstructor)
	TArray<struct FName>                               ExceptionActions;                                         // 0x00D0(0x0010) (ZeroConstructor)
	TArray<struct FKey>                                IllegalBindingKeys;                                       // 0x00E0(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendInputMapping");
		return ptr;
	}


	bool IsPrimary();
	bool IsKeyValid();
	bool IsGamePadKey();
	bool IsAlternate();
	struct FText GetKeyName();
	struct FKey GetKey();
	float GetAxisScale();
	struct FName GetActionName();
	struct FText GetActionDisplayName();
};


// Class BendGame.BendInputMapper
// 0x0048 (0x0390 - 0x0348)
class ABendInputMapper : public AActor
{
public:
	struct FScriptMulticastDelegate                    OnInputBindingChange;                                     // 0x0348(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	TArray<struct FName>                               ActionExemptionList;                                      // 0x0358(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FKey>                                NonBindableKeys;                                          // 0x0368(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	class UDataTable*                                  RemapTable;                                               // 0x0378(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<struct FBendInputMappingGroup>              InputRemapGroups;                                         // 0x0380(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendInputMapper");
		return ptr;
	}


	bool UpdateInputMapping(class UBendInputMapping* BendInputMapping, const struct FKey& NewKey);
	void RestoreDefaults();
	bool IsKeyAllowedForMapping(class UBendInputMapping* BendInputMapping, const struct FKey& InKey);
	bool IsKeyAllowedForBinding(const struct FKey& InKey);
	struct FKey GetDismissBindingKey();
	struct FKey GetClearBindingKey();
	void ClearInputMapping(class UBendInputMapping* BendInputMapping);
	TArray<class UBendInputMapping*> CheckForConflicts(class UBendInputMapping* BendInputMapping, const struct FKey& NewKey);
};


// Class BendGame.BendInteractiveMusicState
// 0x0000 (0x0028 - 0x0028)
class UBendInteractiveMusicState : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendInteractiveMusicState");
		return ptr;
	}

};


// Class BendGame.BendJobMiniMapMarker
// 0x0048 (0x0390 - 0x0348)
class ABendJobMiniMapMarker : public AActor
{
public:
	class UBendWidgetComponent*                        InWorldIconComponent;                                     // 0x0348(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class USceneComponent*                             SceneRootComponent;                                       // 0x0350(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UMiniMapLocationComponent*                   JobObjectiveMiniMapLocationComponent;                     // 0x0358(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	bool                                               HiddenOnMapUnPause;                                       // 0x0360(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               HiddenOnMiniMapUnpause;                                   // 0x0361(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               JobHasFocus;                                              // 0x0362(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               HasInWorldMarker;                                         // 0x0363(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               IsCurrentlyActive;                                        // 0x0364(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0365(0x0003) MISSED OFFSET
	class UBendUIObjectiveCalloutWidget*               InWorldJobIcon_CODE;                                      // 0x0368(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                Distance;                                                 // 0x0370(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxDist;                                                  // 0x0374(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinDist;                                                  // 0x0378(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x037C(0x0004) MISSED OFFSET
	class UJobClassInfo*                               JobData;                                                  // 0x0380(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<EObjectiveCategories>                  JobCategory;                                              // 0x0388(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<EObjectiveVisualType>                  ObjectiveType;                                            // 0x0389(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x6];                                       // 0x038A(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendJobMiniMapMarker");
		return ptr;
	}

};


// Class BendGame.BendJobScript
// 0x0118 (0x0460 - 0x0348)
class ABendJobScript : public ABendBlueprintActor
{
public:
	float                                              CurrentFailTime;                                          // 0x0348(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CurrentFailDistanceLimit;                                 // 0x034C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CurrentFailDistanceToTarget;                              // 0x0350(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               FailDistanceCheckActive;                                  // 0x0354(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               FailingByDistance;                                        // 0x0355(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IgnoreFailZAxis;                                          // 0x0356(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               LoadCheckPointOnFail;                                     // 0x0357(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class AActor*                                      ActorForFailDistanceCheck;                                // 0x0358(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                HighestJobObjectiveStage;                                 // 0x0360(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                TotalObjectivesCompleted;                                 // 0x0364(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<struct FName>                               JobObjectiveIDOrder;                                      // 0x0368(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<class UChildActorComponent*>                MiniMapActorsNotInUse;                                    // 0x0378(0x0010) (Edit, BlueprintVisible, ExportObject, ZeroConstructor)
	TArray<class UChildActorComponent*>                AllMiniMapActors;                                         // 0x0388(0x0010) (Edit, BlueprintVisible, ExportObject, ZeroConstructor)
	class UTexture2D*                                  DefaultMapIcon;                                           // 0x0398(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  DefaultLocationImage;                                     // 0x03A0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               WillCompleteWhenObjectivesFinished;                       // 0x03A8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x03A9(0x0007) MISSED OFFSET
	class UJobClassInfo*                               JobRefID;                                                 // 0x03B0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               EncampmentJobReadyToTurnIn;                               // 0x03B8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x03B9(0x0003) MISSED OFFSET
	int                                                JobUnlockedTime;                                          // 0x03BC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	TArray<struct FVocalConversationData>              ReminderConversation;                                     // 0x03C0(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FVector>                             LocationsForConversationToAvoid;                          // 0x03D0(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	class USoundClass*                                 ReminderConversationSoundClass;                           // 0x03E0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnJobObjectiveCompleted;                                  // 0x03E8(0x0010) (Edit, BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnJobObjectiveChanged;                                    // 0x03F8(0x0010) (Edit, BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnJobFailedViaDistance;                                   // 0x0408(0x0010) (Edit, BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnJobDistanceFailingCancelled;                            // 0x0418(0x0010) (Edit, BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable)
	TArray<struct FBendJobAttachecdMiniMapData>        StoredAttachMapMarkerData;                                // 0x0428(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FJobGlobalObject>                    GlobalObjectsData;                                        // 0x0438(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	bool                                               InAutoRangeForZones;                                      // 0x0448(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0449(0x0003) MISSED OFFSET
	int                                                InAutoRangeForZonesCount;                                 // 0x044C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FString                                     StoredDisplayName;                                        // 0x0450(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendJobScript");
		return ptr;
	}


	bool UpdateObjectiveToUnlocked(const struct FBendJobObjectives& Objective, int Index, bool ForcedChange);
	bool UpdateObjectiveToLocked(const struct FBendJobObjectives& Objective, int Index, bool ForcedChange);
	bool UpdateObjectiveToFailed(const struct FBendJobObjectives& Objective, int Index, bool ForcedChange);
	bool UpdateObjectiveToComplete(const struct FBendJobObjectives& Objective, int Index, bool ForcedChange);
	bool UpdateObjectiveText(const struct FName& ObjIdentifier, const struct FText& NewFText, bool DisplayToScreen);
	void UpdateJobObjectiveStatusAndProgression(const struct FName& ObjIdentifier, TEnumAsByte<EObjectiveStates> ObjState);
	bool UpdateJobObjectiveStatus(const struct FName& ObjIdentifier, TEnumAsByte<EObjectiveStates> ObjState);
	bool UpdateJobObjectiveProgression();
	bool UpdateJobObjectiveCounter(const struct FName& ObjIdentifier, bool IncrementOne, int CustomCount, bool DisplayToScreen);
	bool TryRemoveObjectiveFromScreen(TEnumAsByte<EObjectiveStates> NewState, int ObjectiveIndex);
	bool TryAddObjectiveToScreen(const struct FText& NewText, bool sideObjective, int ObjectiveIndex);
	bool StoreMapMarkers(TArray<class UChildActorComponent*> MapMarkers);
	bool StoreJobScriptVariables(class UJobClassInfo* JobsID, int OverrideIndex);
	void StopJobFailDistanceCheck();
	void StartJobFailDistanceCheck(class AActor* ActorToDistanceCheckFrom, float Distance, bool IgnoreZAxis, bool LoadCheckPointOnFail);
	void SetUpMapMarkersForObjective(bool AddMarkers, int ObjectiveIndex, const struct FText& ObjDescriptionText, TArray<struct FBendJobObjectiveMarkers> MarkerData, TArray<struct FBendJobObjectiveMarkers>* NewMarkerData);
	bool SetupLateVO();
	bool SendGenericJobScriptMessage(const struct FString& Message);
	bool PauseTheJobScript(bool Pause);
	bool OverrideJobMapImages(const struct FName& ObjIdentifier, bool OverrideAllInObjective, int MapIconIndex, class UTexture2D* OverrideIcon, class UTexture2D* OverrideImage);
	bool MarkJobAsActiveFocus(bool TheFocus);
	void JobScriptCheckpointLoaded(TArray<struct FName> UnlockedObjectiveIDs);
	bool InitJobObjectives();
	bool InitializeJob(TArray<class UChildActorComponent*> MiniMapMarkers, bool EndWhenObjectivesComplete);
	bool GoBackToJobObjectiveStage(int TheStage);
	void GetObjectiveState(const struct FName& ObjIdentifier, TEnumAsByte<EObjectiveStates>* CurrentState);
	void GetObjectiveFromID(const struct FName& ObjID, struct FBendJobObjectives* Objective, int* Index);
	void GetCurrentCounterCount(const struct FName& ObjIdentifier, int* TheCount);
	void GetActiveJobObjectivesData(TArray<struct FBendJobObjectives>* Objectives);
	bool FailTheJob();
	bool DetachJobMapMarker(const struct FName& ObjIdentifier, int MapIconIndex);
	bool CompleteTheJob();
	bool ChangeJobMiniMapMarkerVisibility(const struct FName& ObjIdentifier, int MapIconIndex, bool HideOnMap, bool HideOnMiniMap);
	bool ChangeJobMiniMapLocation(const struct FName& ObjIdentifier, int MapIconIndex, const struct FVector& NewLocation);
	bool ChangeJobMapMarkerType(const struct FName& ObjIdentifier, int MapIconIndex, bool IsObjectiveRegion, float RegionSize);
	bool ChangeJobInWorldMarkerVisibility(const struct FName& ObjIdentifier, int MapIconIndex, bool Hide);
	bool AttemptToPlayLateVO();
	void AttachJobMapMarkerToPawn(const struct FName& ObjIdentifier, int MapIconIndex, class ABendPawn* ThePawn, bool HideOnDeathOrDespawn, bool DetachOnDeath, const struct FVector& Offset);
	bool AttachJobMapMarkerToItem(const struct FName& ObjIdentifier, int MapIconIndex, class AActor* TheActor, const struct FVector& Offset);
};


// Class BendGame.BendLaneRestrictionComponent
// 0x0140 (0x0210 - 0x00D0)
class UBendLaneRestrictionComponent : public UActorComponent
{
public:
	bool                                               bRestrictionEnabled;                                      // 0x00D0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00D1(0x0003) MISSED OFFSET
	float                                              InnerForceBumperWidth;                                    // 0x00D4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00D8(0x0004) MISSED OFFSET
	int                                                PointsAhead;                                              // 0x00DC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                ForceBumperLane;                                          // 0x00E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x00E4(0x0008) MISSED OFFSET
	float                                              DownForce;                                                // 0x00EC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ForceFrequency;                                           // 0x00F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              YawFrequency;                                             // 0x00F4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              RollFrequency;                                            // 0x00F8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x8];                                       // 0x00FC(0x0008) MISSED OFFSET
	float                                              TimeSpentOutsideThreshold;                                // 0x0104(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bEnableDebugDraws;                                        // 0x0108(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x107];                                     // 0x0109(0x0107) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendLaneRestrictionComponent");
		return ptr;
	}

};


// Class BendGame.BendMissionScriptActor
// 0x0000 (0x03A8 - 0x03A8)
class ABendMissionScriptActor : public ABendLevelScriptActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendMissionScriptActor");
		return ptr;
	}

};


// Class BendGame.DLCChallengeScriptActor
// 0x0058 (0x0400 - 0x03A8)
class ADLCChallengeScriptActor : public ABendMissionScriptActor
{
public:
	struct FGameplayTag                                ChallengeTag;                                             // 0x03A8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	int                                                ChallengeTime;                                            // 0x03B0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bFailIfTimeExpires;                                       // 0x03B4(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x03B5(0x0003) MISSED OFFSET
	struct FGameplayTagContainer                       AllowedScoreEvents;                                       // 0x03B8(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FGameplayTagContainer                       AllowedScoreModifiers;                                    // 0x03D8(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	int                                                ChallengeScore;                                           // 0x03F8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ElapsedTime;                                              // 0x03FC(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.DLCChallengeScriptActor");
		return ptr;
	}


	void SetSubchallengeValue(const struct FGameplayTag& SubchallengeTag, int Value);
	bool IsTimedChallenge();
	float GetCurrentTime();
	void EndChallenge(bool bChallengeFailed);
	void DisableSubChallenge(const struct FGameplayTag& SubchallengeTag);
	void AdjustElapsedTime(float Seconds);
};


// Class BendGame.BendLibManager
// 0x0030 (0x0378 - 0x0348)
class ABendLibManager : public AActor
{
public:
	unsigned char                                      UnknownData00[0x30];                                      // 0x0348(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendLibManager");
		return ptr;
	}

};


// Class BendGame.BendLightRigBlueprintLibrary
// 0x0000 (0x0028 - 0x0028)
class UBendLightRigBlueprintLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendLightRigBlueprintLibrary");
		return ptr;
	}


	bool STATIC_UpdateTimeOfDayStatus(class UObject* WorldContextObject, TEnumAsByte<ELightTimeOfDay> TimeOfDaySetting, class USceneComponent* LightRigBase, int ProvidedTime, float* LightIntensity);
	void STATIC_UpdateLightIntensity(class UObject* WorldContextObject, class ULightComponent* LightRef, float NewColorIntensity);
	struct FBendLightFlicker STATIC_UpdateFlickerSpotPointLight(class UObject* WorldContextObject, float DeltaSeconds, class ULightComponent* LightRef, bool UpdateGoalIntensity, struct FBendLightFlicker* InputFlickerStruct);
	struct FBendLightFlicker STATIC_HelperUpdateFlickerGoal(class UObject* WorldContextObject, float DeltaSeconds, struct FBendLightFlicker* InputFlickerStruct);
	struct FLinearColor STATIC_HelperUpdateFlickerColor(class UObject* WorldContextObject, const struct FLinearColor& LightColor, struct FBendLightFlicker* InputFlickerStruct);
};


// Class BendGame.BendMapControls
// 0x0008 (0x0350 - 0x0348)
class ABendMapControls : public AActor
{
public:
	float                                              FlickAngle;                                               // 0x0348(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x034C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendMapControls");
		return ptr;
	}


	void InputFlickUp();
	void InputFlickRight();
	void InputFlickLeft();
	void InputFlickDown();
	void InputFlick(float GestureAngle);
};


// Class BendGame.BendMapInfo
// 0x0018 (0x0040 - 0x0028)
class UBendMapInfo : public UObject
{
public:
	int                                                ItemsNeededToWin;                                         // 0x0028(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x002C(0x0004) MISSED OFFSET
	struct FString                                     NextMapToLoad;                                            // 0x0030(0x0010) (Edit, BlueprintVisible, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendMapInfo");
		return ptr;
	}

};


// Class BendGame.MotoGroupEntry
// 0x0018 (0x0040 - 0x0028)
class UMotoGroupEntry : public UObject
{
public:
	TWeakObjectPtr<class ABendPawn>                    m_driver;                                                 // 0x0028(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                m_desiredLane;                                            // 0x0030(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xC];                                       // 0x0034(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.MotoGroupEntry");
		return ptr;
	}

};


// Class BendGame.BendMotorcycleRiderGroup
// 0x0098 (0x00C0 - 0x0028)
class UBendMotorcycleRiderGroup : public UObject
{
public:
	struct FString                                     m_groupName;                                              // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FGroupFormationSettings                     m_FormationSettings;                                      // 0x0038(0x0010) (Edit, BlueprintVisible)
	TArray<class UMotoGroupEntry*>                     m_group;                                                  // 0x0048(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData00[0x68];                                      // 0x0058(0x0068) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendMotorcycleRiderGroup");
		return ptr;
	}


	void UpdateRubberbandParams(const struct FRubberbandParams& RubberbandParams);
	void UpdatePaceParams(const struct FPaceParams& PaceParams);
	void StopRubberbanding();
	void StopPacing();
	void StopGroup(float brakeForce);
	void StartRubberbanding(class ABendPawn* followPawn, const struct FRubberbandParams& RubberbandParams);
	void SetGroupDriveDestinationPath(TArray<class AAIVehicleWaypoint*> WaypointList, TEnumAsByte<EVehicleAILoopType> LoopType);
	void SetGroupDriveDestinationBendSpline(class ABendSplinePath* BendSplinePath);
	void SetGroupDriveDestination(class AAIVehicleWaypoint* Destination);
	void SetAllowAutoCornerSpeed(bool bAllow);
	void Reset();
	void RemoveDriverFromGroup(class ABendPawn* driver);
	void RemoveAllDrivers();
	void Pace(class ABendPawn* targetPawn, const struct FPaceParams& PaceParams);
	bool IsDriverInGroup(class ABendPawn* driver);
	int GetNumDrivers();
	class UMotoGroupEntry* GetGroupLeaderEntry();
	class UMotoGroupEntry* GetFrontRunnerEntry();
	class UMotoGroupEntry* GetDriverEntryAt(int Index);
	class UMotoGroupEntry* GetBackRunnerEntry();
	void DriveToDestination();
	void DriveNoPath();
	void ClearBendSplinePath();
	void CancelDrive();
	void AddGroupList(TArray<class UMotoGroupEntry*> groupList);
	void AddGroupEntry(class UMotoGroupEntry* groupEntry);
	void AddDriverToGroup(class ABendPawn* driver);
};


// Class BendGame.BendMovementFXType
// 0x0010 (0x0358 - 0x0348)
class ABendMovementFXType : public AActor
{
public:
	TArray<struct FMovementFXTypeData>                 MovementFXTypes;                                          // 0x0348(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendMovementFXType");
		return ptr;
	}


	class USoundCue* STATIC_BendGetMovementFXSoundCue(const struct FName& FXName);
};


// Class BendGame.BendNavigationQueryFilter
// 0x0010 (0x0050 - 0x0040)
class UBendNavigationQueryFilter : public UNavigationQueryFilter
{
public:
	bool                                               bIgnoreNavlinkDirectionality;                             // 0x0040(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0xF];                                       // 0x0041(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendNavigationQueryFilter");
		return ptr;
	}

};


// Class BendGame.BendCrowdNavigationQueryFilter
// 0x0018 (0x0068 - 0x0050)
class UBendCrowdNavigationQueryFilter : public UBendNavigationQueryFilter
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0050(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendCrowdNavigationQueryFilter");
		return ptr;
	}

};


// Class BendGame.BendCrowdNavigationQueryFilter_NonFrenzied
// 0x0000 (0x0068 - 0x0068)
class UBendCrowdNavigationQueryFilter_NonFrenzied : public UBendCrowdNavigationQueryFilter
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendCrowdNavigationQueryFilter_NonFrenzied");
		return ptr;
	}

};


// Class BendGame.BendNavigationQueryFilter_Human_Default
// 0x0018 (0x0058 - 0x0040)
class UBendNavigationQueryFilter_Human_Default : public UNavigationQueryFilter
{
public:
	struct FBendPathAvoidanceAreaDescriptor            Player;                                                   // 0x0040(0x0008) (Edit, DisableEditOnInstance)
	struct FBendPathAvoidanceAreaDescriptor            DeadBody;                                                 // 0x0048(0x0008) (Edit, DisableEditOnInstance)
	float                                              NavLinkCostMultiplier;                                    // 0x0050(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NavLinkEntryCost;                                         // 0x0054(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendNavigationQueryFilter_Human_Default");
		return ptr;
	}

};


// Class BendGame.BendNavigationSystem
// 0x0000 (0x0550 - 0x0550)
class UBendNavigationSystem : public UNavigationSystem
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendNavigationSystem");
		return ptr;
	}

};


// Class BendGame.BendNavLinkCollectionComponent
// 0x0020 (0x0610 - 0x05F0)
class UBendNavLinkCollectionComponent : public UNavLinkCollectionComponent
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x05F0(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendNavLinkCollectionComponent");
		return ptr;
	}


	void ClimbCompleted(class ABendPawn* Pawn, bool Success);
};


// Class BendGame.BendNavLinkCollection
// 0x0008 (0x0360 - 0x0358)
class ABendNavLinkCollection : public ANavLinkCollection
{
public:
	class UBendNavLinkCollectionComponent*             Component;                                                // 0x0358(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendNavLinkCollection");
		return ptr;
	}

};


// Class BendGame.BendNavLinkCustomComponent
// 0x0070 (0x0310 - 0x02A0)
class UBendNavLinkCustomComponent : public UNavLinkCustomComponent
{
public:
	unsigned char                                      UnknownData00[0x70];                                      // 0x02A0(0x0070) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendNavLinkCustomComponent");
		return ptr;
	}


	void PawnDied(class ABendPawn* Pawn, bool bDied);
};


// Class BendGame.BendNavModifierBox
// 0x0020 (0x0368 - 0x0348)
class ABendNavModifierBox : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0348(0x0008) MISSED OFFSET
	class UClass*                                      AreaClass;                                                // 0x0350(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UBoxComponent*                               BoxComponent;                                             // 0x0358(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UNavRelevantComponent*                       NavComponent;                                             // 0x0360(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendNavModifierBox");
		return ptr;
	}


	void ToggleNavRelevancy(bool navRelevant);
};


// Class BendGame.BendNeroCheckpoint
// 0x0008 (0x0350 - 0x0348)
class ABendNeroCheckpoint : public AActor
{
public:
	class UBendNeroCheckpointData*                     CheckpointData;                                           // 0x0348(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendNeroCheckpoint");
		return ptr;
	}


	void SetCheckpointClear();
	bool IsCheckpointCleared();
};


// Class BendGame.BendNeroCheckpointData
// 0x0050 (0x0078 - 0x0028)
class UBendNeroCheckpointData : public UDataAsset
{
public:
	struct FText                                       CheckpointName;                                           // 0x0028(0x0018) (Edit, BlueprintVisible)
	bool                                               Discovered;                                               // 0x0040(0x0001) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	bool                                               Cleared;                                                  // 0x0041(0x0001) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	bool                                               InjectorUsed;                                             // 0x0042(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData00[0x5];                                       // 0x0043(0x0005) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnNeroCheckpointInjectorUsed;                             // 0x0048(0x0010) (ZeroConstructor, Transient, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnCheckpointCleared;                                      // 0x0058(0x0010) (ZeroConstructor, Transient, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnCheckpointDiscovered;                                   // 0x0068(0x0010) (ZeroConstructor, Transient, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendNeroCheckpointData");
		return ptr;
	}


	void SetInjectorUsed();
	void SetCheckpointDiscovered();
	void SetCheckpointClear(bool IsCleared);
	void ResetNeroCheckpointData();
	bool IsCheckpointCleared();
};


// Class BendGame.BendNestComponent
// 0x0040 (0x0270 - 0x0230)
class UBendNestComponent : public UChildActorComponent
{
public:
	struct FString                                     m_NestID;                                                 // 0x0230(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate)
	float                                              MinNoiseSpawnTime;                                        // 0x0240(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BurningSpawnPercent;                                      // 0x0244(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              NestDespawnDistance;                                      // 0x0248(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x024C(0x0004) MISSED OFFSET
	class UClass*                                      Nest;                                                     // 0x0250(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class ABendNest*                                   m_Nest;                                                   // 0x0258(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0260(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendNestComponent");
		return ptr;
	}


	void SetStructureBox(class UChildActorComponent* childActorComp);
	void AddWindowPointArray(TArray<class UChildActorComponent*> childActorComps);
	void AddWindowPoint(class UChildActorComponent* childActorComp);
	void AddSmokeLocationArray(TArray<class UChildActorComponent*> childActorComps);
	void AddSmokeLocation(class UChildActorComponent* childActorComp);
	void AddSmokeEmitterArray(TArray<class UParticleSystemComponent*> smokeEmitterComps);
	void AddObjectToDestroyArray(TArray<class UChildActorComponent*> childActorComps);
	void AddObjectToDestroy(class UChildActorComponent* childActorComp);
	void AddFireGenericArray(TArray<class UChildActorComponent*> childActorComps);
	void AddFireGeneric(class UChildActorComponent* childActorComp);
	void AddFireBaseArray(TArray<class UChildActorComponent*> childActorComps);
	void AddFireBase(class UChildActorComponent* childActorComp);
};


// Class BendGame.BendNestComponentBase
// 0x0008 (0x0350 - 0x0348)
class ABendNestComponentBase : public AActor
{
public:
	TWeakObjectPtr<class ABendNest>                    m_Nest;                                                   // 0x0348(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendNestComponentBase");
		return ptr;
	}


	void OnFinishedBurning();
	void OnDisableCollision();
	void FinishedBurning();
	void DisableCollision();
};


// Class BendGame.BendNestingZone
// 0x00D0 (0x00F8 - 0x0028)
class UBendNestingZone : public UDataAsset
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	int                                                m_DestroyedNests;                                         // 0x0030(0x0004) (BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	int                                                m_AllSpawnsClearedNests;                                  // 0x0034(0x0004) (BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	TArray<struct FNestData>                           m_Nests;                                                  // 0x0038(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst)
	struct FString                                     zoneName;                                                 // 0x0048(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst)
	struct FText                                       InfestationName;                                          // 0x0058(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly)
	bool                                               bDiscovered;                                              // 0x0070(0x0001) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               BroadcastClearEvent;                                      // 0x0071(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x6];                                       // 0x0072(0x0006) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnZoneCleared;                                            // 0x0078(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnZoneAllSpawnsCleared;                                   // 0x0088(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnNestDestroyed;                                          // 0x0098(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnNestAllSpawnsCleared;                                   // 0x00A8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnNestStartedBurning;                                     // 0x00B8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class UMaterial*                                   MapMaterial;                                              // 0x00C8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UTexture2D*                                  MapTexture;                                               // 0x00D0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UTexture2D*                                  MapDestroyedTexture;                                      // 0x00D8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxTextureSize;                                           // 0x00E0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x00E4(0x0004) MISSED OFFSET
	TArray<uint32_t>                                   NestingZoneMask;                                          // 0x00E8(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendNestingZone");
		return ptr;
	}


	void ResetAllNestsToNotBurnt();
	bool RegionCleared();
	void NotifyNestStartedBurning(const struct FString& NestID);
	void NotifyNestDestroyed(const struct FString& NestID);
	int GetNestCount();
	void DebugDestroyAllNestsInZone();
};


// Class BendGame.FastTravelInterface
// 0x0000 (0x0028 - 0x0028)
class UFastTravelInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.FastTravelInterface");
		return ptr;
	}

};


// Class BendGame.MapLocationFastTravelActor
// 0x00E8 (0x0470 - 0x0388)
class AMapLocationFastTravelActor : public AVolume
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0388(0x0008) MISSED OFFSET
	struct FMapLocationFastTravel                      FastTravelLocation;                                       // 0x0390(0x0070) (Edit, BlueprintVisible, SaveGame)
	class UMiniMapLocationComponent*                   MinimapComponent;                                         // 0x0400(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0408(0x0008) MISSED OFFSET
	struct FTransform                                  PlayerSpawnTransform;                                     // 0x0410(0x0030) (Edit, BlueprintVisible, IsPlainOldData)
	struct FTransform                                  BikeSpawnTransform;                                       // 0x0440(0x0030) (Edit, BlueprintVisible, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.MapLocationFastTravelActor");
		return ptr;
	}


	struct FVector GetPlayerFastTravelLocation();
	struct FVector GetBikeFastTravelLocation();
	bool AvailableForFastTravel();
};


// Class BendGame.BendNestingZoneActor
// 0x0088 (0x0410 - 0x0388)
class ABendNestingZoneActor : public AVolume
{
public:
	int                                                m_iDestroyedNests;                                        // 0x0388(0x0004) (ZeroConstructor, SaveGame, IsPlainOldData)
	int                                                m_iClearedNests;                                          // 0x038C(0x0004) (ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0390(0x0008) MISSED OFFSET
	class UBendNestingZone*                            m_NestingZone;                                            // 0x0398(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UMaterialInstanceDynamic*                    MatInstanceDynamic;                                       // 0x03A0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UMiniMapLocationComponent*                   MinimapComponent;                                         // 0x03A8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UAudioComponent*                             AudioComponent;                                           // 0x03B0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData01[0x58];                                      // 0x03B8(0x0058) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendNestingZoneActor");
		return ptr;
	}


	void PlayerEndOverlap();
	void PlayerBeginOverlap();
};


// Class BendGame.BendObjective
// 0x00E8 (0x0430 - 0x0348)
class ABendObjective : public AActor
{
public:
	class UBendWidgetComponent*                        InWorldIconComponent;                                     // 0x0348(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class USphereComponent*                            ObjectiveTriggerSphereComponent;                          // 0x0350(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UMiniMapLocationComponent*                   ObjectiveMiniMapLocationComponent;                        // 0x0358(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UTextRenderComponent*                        DebugObjectiveOrderComponent;                             // 0x0360(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UTextRenderComponent*                        DebugObjectiveNameComponent;                              // 0x0368(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	struct FName                                       ObjectiveIdentifierID;                                    // 0x0370(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IsMainObjective;                                          // 0x0378(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EObjectiveVisualType>                  ObjectiveVisualType;                                      // 0x0379(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               HideFromJournalWhenCompleted;                             // 0x037A(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x5];                                       // 0x037B(0x0005) MISSED OFFSET
	TArray<class AActor*>                              ControlledCollisionActors;                                // 0x0380(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	int                                                ObjectiveIdentifier;                                      // 0x0390(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                KnownLocationInDataArray;                                 // 0x0394(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               UseGPSRouteMarkerToObjective;                             // 0x0398(0x0001) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	bool                                               UseBreadCrumbSystem;                                      // 0x0399(0x0001) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	bool                                               BreadCrumbSystemCanGoBackwards;                           // 0x039A(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x5];                                       // 0x039B(0x0005) MISSED OFFSET
	TArray<struct FBendObjectiveBreadcrumbsData>       BreadCrumbData;                                           // 0x03A0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	int                                                CurrentBreadCrumbIndex;                                   // 0x03B0(0x0004) (BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	TEnumAsByte<EObjectiveAttachTypes>                 ObjectiveMarkerCurrentType;                               // 0x03B4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	bool                                               BreadCrumbSystemActive;                                   // 0x03B5(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x2];                                       // 0x03B6(0x0002) MISSED OFFSET
	TArray<struct FBendObjectiveAttachData>            AttachmentDataForTypes;                                   // 0x03B8(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	bool                                               InWorldMarkerCounterDisabled;                             // 0x03C8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x7];                                       // 0x03C9(0x0007) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnReachedFinalBreadcrumbPoint;                            // 0x03D0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable)
	class UBendMissionData*                            MissionData;                                              // 0x03E0(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x1C];                                      // 0x03E8(0x001C) MISSED OFFSET
	bool                                               IsIconActive;                                             // 0x0404(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData05[0x3];                                       // 0x0405(0x0003) MISSED OFFSET
	float                                              ObjectiveRegionsSize;                                     // 0x0408(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IsObjectiveActive;                                        // 0x040C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData06[0x3];                                       // 0x040D(0x0003) MISSED OFFSET
	float                                              MarkerDistanceModifier_None;                              // 0x0410(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MarkerDistanceModifier_Pawn;                              // 0x0414(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MarkerDistanceModifier_Bike;                              // 0x0418(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MarkerDistanceModifier_Helicopter;                        // 0x041C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MarkerDistanceModifier_GenericObject;                     // 0x0420(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData07[0x4];                                       // 0x0424(0x0004) MISSED OFFSET
	class UBendUIObjectiveCalloutWidget*               InWorldIcon_CODE;                                         // 0x0428(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendObjective");
		return ptr;
	}


	bool UpdateSphereRadius(float NewRadius);
	bool UpdateObjectiveText(const struct FText& NewText);
	bool UpdateObjectiveStatus(TEnumAsByte<EObjectiveStates> NewState, bool AlsoUpdateProgression);
	bool UpdateObjectiveCounter(int Count, bool IncrementByOne);
	bool UpdateMiniMapMarkerVisibility(bool VisibleOnMap, bool VisibleOnMiniMap);
	void UpdateLocationImage(class UTexture2D* NewImage);
	bool SetNewObjectiveStateInData(TEnumAsByte<EObjectiveStates> NewState);
	bool SetNewObjectiveNameTextInData(const struct FText& NewText);
	bool SetNewObjectiveNameInData(const struct FString& NewName);
	bool HasParentCounter();
	bool HandleObjectiveIcon(bool TurnOn, bool HideDontDestroy);
	bool HandleGPSToObjectiveFunctionality(bool Active, bool StoreSetting);
	bool HandleBreadCrumbFunctionality(bool Active, int OverrideCurrentIndex);
	struct FVector2D GetSideObjectiveStage();
	struct FText GetOriginalObjectiveNameText();
	int GetObjectiveStage();
	struct FText GetObjectiveNameText();
	bool GetIsMainObjective();
	TEnumAsByte<EObjectiveStates> GetCurrentObjectiveState();
	int GetCompletedAutoObjCount();
	bool GetAutoActivateSideObjective();
	bool GetAutoActivateMainObjective();
	bool EnableObjective();
	bool DisableObjective();
	bool ChangeMiniMapMarkerType(bool IsObjectiveRegion, float RegionSize);
	bool CalculateObjectivesDistance();
	void BreadCrumbBeginOverlap(class AActor* TriggerOverlapping, class AActor* ActorOverlapping);
	bool AttachObjectiveToActor(TEnumAsByte<EObjectiveAttachTypes> ObjectiveAttachType, class AActor* ActorToAttachTo, bool Detach);
};


// Class BendGame.BendOpenWorldCloudTypeDescription
// 0x00C8 (0x00F0 - 0x0028)
class UBendOpenWorldCloudTypeDescription : public UDataAsset
{
public:
	struct FGuid                                       UniqueId;                                                 // 0x0028(0x0010) (ZeroConstructor, DuplicateTransient, IsPlainOldData)
	bool                                               Enabled;                                                  // 0x0038(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0039(0x0003) MISSED OFFSET
	unsigned char                                      UseAsSubtractiveMask : 1;                                 // 0x003C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UseMaterial : 1;                                          // 0x003C(0x0001) (BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      RegionTextureGreenChannelIsPrecipitationMask : 1;         // 0x003C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      RegionTextureBlueChannelIsPrecipitationToSnowBlendMask : 1;// 0x003C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      RegionTextureSampledAtCameraPosition : 1;                 // 0x003C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      ScaleColumnFogToPercipitation : 1;                        // 0x003C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData01[0x3];                                       // 0x003D(0x0003) MISSED OFFSET
	class UTexture2D*                                  DensityTexture;                                           // 0x0040(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UMaterialInstance*                           DensityMaterial;                                          // 0x0048(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                DensityTextureTilesX;                                     // 0x0050(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                DensityTextureTilesY;                                     // 0x0054(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               DensityTextureIsSingleChannel;                            // 0x0058(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0059(0x0007) MISSED OFFSET
	class UTexture2D*                                  RegionalDensityScaleTexture;                              // 0x0060(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0068(0x0008) MISSED OFFSET
	struct FVector4                                    RegionalDensityBounds;                                    // 0x0070(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              SpawnRate;                                                // 0x0080(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              SpawnDistance;                                            // 0x0084(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                SpawnDistributionGroupSize;                               // 0x0088(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              SpawnGroupDistribution;                                   // 0x008C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                SpawnCooldownSpawnThreshold;                              // 0x0090(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector2D                                   SpawnCooldownRandomRange;                                 // 0x0094(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MinDensityForWeather;                                     // 0x009C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector2D                                   CloudDenistyScaleRandomRange;                             // 0x00A0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector2D                                   CloudDenistyBiasRandomRange;                              // 0x00A8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector2D                                   CloudSizeRandomRange;                                     // 0x00B0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector2D                                   CloudAspectRandomRange;                                   // 0x00B8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector2D                                   CloudWindInfluenceRandomRange;                            // 0x00C0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector2D                                   CloudRainfallRandomRange;                                 // 0x00C8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector2D                                   CloudSnowfallRandomRange;                                 // 0x00D0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector2D                                   CloudGroundFogRandomRange;                                // 0x00D8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector2D                                   CloudWeatherFogRandomRange;                               // 0x00E0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x8];                                       // 0x00E8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendOpenWorldCloudTypeDescription");
		return ptr;
	}

};


// Class BendGame.BendOpenWorldVOManager
// 0x00F8 (0x0440 - 0x0348)
class ABendOpenWorldVOManager : public AActor
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0348(0x0010) MISSED OFFSET
	class UWorld*                                      m_World;                                                  // 0x0358(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class ABendGameMission*                            BendMissionManager;                                       // 0x0360(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<struct FBendOpenWorldVOData>                AllVOData;                                                // 0x0368(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FBendOpenWorldVOData>                CurrentVOData;                                            // 0x0378(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FBendOpenWorldVOData>                WaitingForTimeVOData;                                     // 0x0388(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FBendOpenWorldVOData>                TempVODataForOrganizing;                                  // 0x0398(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FBendOpenWorldVOData>                FinishedVODataThatFailedToUnlock;                         // 0x03A8(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	int                                                ConversationID;                                           // 0x03B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	bool                                               AllowSkipping;                                            // 0x03BC(0x0001) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	bool                                               ManagerPaused;                                            // 0x03BD(0x0001) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	bool                                               SkipOWVOConvos;                                           // 0x03BE(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x03BF(0x0001) MISSED OFFSET
	TArray<struct FBendOpenWorldVOSpeakerDelay>        SpeakerDelays;                                            // 0x03C0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<int>                                        PausedTokens;                                             // 0x03D0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	int                                                PausedTokenCounter;                                       // 0x03E0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               RFODisabled;                                              // 0x03E4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	bool                                               PlayingVO;                                                // 0x03E5(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x2];                                       // 0x03E6(0x0002) MISSED OFFSET
	float                                              TimerFloat;                                               // 0x03E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FTimerHandle                                NextConvoTimer;                                           // 0x03EC(0x0004) (Edit, BlueprintVisible)
	struct FTimerHandle                                tempTimer;                                                // 0x03F0(0x0004) (Edit, BlueprintVisible)
	struct FTimerHandle                                retryUnlockTimer;                                         // 0x03F4(0x0004) (Edit, BlueprintVisible)
	struct FTimerHandle                                MinuteTimerHandle;                                        // 0x03F8(0x0004) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData03[0x4];                                       // 0x03FC(0x0004) MISSED OFFSET
	TArray<struct FName>                               RowNames;                                                 // 0x0400(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	class UDataTable*                                  VODataTable;                                              // 0x0410(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class USoundClass*                                 RFOSoundClass;                                            // 0x0418(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnOpenWorldConversationFinished;                          // 0x0420(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnOWVOManagerPaused;                                      // 0x0430(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendOpenWorldVOManager");
		return ptr;
	}


	void ToggleOpenWorldVOManager(bool Pause, bool InterruptVO, int* Token);
	void ToggleCanPlayConvos();
	void SkipCurrentConvo();
	void RetryFailedUnlockVO();
	bool RepopulatePlayerPawnInConversations();
	bool RecheckFirstVO();
	void QuickCheck();
	bool PullAndStoreDataTableInfo();
	void PostSaveGameLoaded(bool bIsCheckpoint);
	void PlayNextConversation();
	void PlayerOnBike(class ABendPawn* Character, class AVehiclePawn* Vehicle);
	void PlayerOffBike(class ABendPawn* Character, class AVehiclePawn* Vehicle, TEnumAsByte<EBendVehicleExitReason> ExitReason);
	void PauseEverything();
	void OnPlayVOComplete(class ABendPawn* pPawn, const struct FName& VOName, int Conversation_ID, TEnumAsByte<EDonePlayVocalReason> SuccessOrFail);
	void OnPlayRFO();
	void OnPlayerRespawned(class ABendPlayerController* PlayerController);
	void OnFinishRFO();
	void NewCheck();
	void MissionUnlocked(TEnumAsByte<EMissionIDs> MissionID);
	void MissionStarted(TEnumAsByte<EMissionIDs> MissionID);
	void MissionComplete(TEnumAsByte<EMissionIDs> MissionID);
	bool ManuallyCallConvoNow(const struct FName& RowName);
	bool ManuallyCallConvo(const struct FName& RowName);
	void LeftEncampment(class UBendEncampmentData* Encampment);
	void JobUnlocked(class UJobClassInfo* JobID);
	void JobEnded(class UJobClassInfo* JobID, bool Failed);
	void InsertNewConversation(struct FBendOpenWorldVOData* NewVOToAdd);
	void FastTravelStarted(const struct FName& TravelDestination);
	void FastTravelDone(const struct FName& TravelDestination);
	void FastTimer();
	void DisableRFO();
	void DealWithDemoJumpPoint();
	void CompleteAndUnlockViaVO(const struct FBendOpenWorldVOData& RecentlyFinishedVO);
	void CinematicStarted(const struct FName& CinematicLevel);
	void CinematicEnded(const struct FName& Message);
	bool CheckWaitingVO();
	bool CheckTimeToUnlockPreReq(TArray<TEnumAsByte<EMissionIDs>> MissionData, TArray<class UJobClassInfo*> JobIDs, float TimeToWait, int HourToCall);
	bool CheckMissionUnlockPreReq(TEnumAsByte<EMissionIDs> MissionData);
	bool CheckMissionDataPreReqs(TArray<TEnumAsByte<EMissionIDs>> MissionData);
	bool CheckIfCanPlayVO();
	bool CheckGameplayDatabase(const struct FName& RowName, struct FName* RowName_Completed, struct FName* RowName_Failed);
	bool CheckForAnyNewVO();
	bool CheckAutoFailVO(TEnumAsByte<EMissionIDs> CompleteMissionData, class UJobClassInfo* CompleteJobID, class UJobClassInfo* UnlockJobID, const struct FName& FailVO);
	void CheckAllPreReqs(struct FBendOpenWorldVOData* VOData, bool* Failed, bool* ReturnResult);
	void CancelConvoByName(const struct FName& ConversationToCancel);
	void BindPlayerBinds();
	bool AttemptToUnlockMission(const struct FBendOpenWorldVOData& MissionToUnlockVO);
	bool AttemptToUnlockJob(const struct FBendOpenWorldVOData& JobToUnlockVO);
};


// Class BendGame.BendPairedCounterData
// 0x0010 (0x0038 - 0x0028)
class UBendPairedCounterData : public UDataAsset
{
public:
	TArray<struct FBendCounterAttackData>              CounterAttacks;                                           // 0x0028(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendPairedCounterData");
		return ptr;
	}

};


// Class BendGame.BendAnimalPathFollowingComponent
// 0x0000 (0x0430 - 0x0430)
class UBendAnimalPathFollowingComponent : public UBendPathFollowingComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAnimalPathFollowingComponent");
		return ptr;
	}

};


// Class BendGame.BendFreakerPawn
// 0x0020 (0x29D0 - 0x29B0)
class ABendFreakerPawn : public ABendAIPawn
{
public:
	struct FName                                       LootDropFreakerSubClass;                                  // 0x29B0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              OnFireMoveSpeedMult;                                      // 0x29B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x29BC(0x0004) MISSED OFFSET
	class UClass*                                      AwarenessZoneDataIfBerserk;                               // 0x29C0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x29C8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendFreakerPawn");
		return ptr;
	}


	void HandleDroppedEarPickup(class ABendInventoryPickup* InventoryPickup);
	class ABendInventoryPickup* GenerateLootDrop();
};


// Class BendGame.BendSwarmerPawn
// 0x0020 (0x29F0 - 0x29D0)
class ABendSwarmerPawn : public ABendFreakerPawn
{
public:
	class UAudioComponent*                             grapple_SND;                                              // 0x29D0(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	float                                              DamageFromFlamingGrapple;                                 // 0x29D8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x29DC(0x0004) MISSED OFFSET
	class UClass*                                      IncendiaryTickDamageType;                                 // 0x29E0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x29E8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendSwarmerPawn");
		return ptr;
	}


	void SetSwarmerColors();
};


// Class BendGame.BendTurret
// 0x0000 (0x2740 - 0x2740)
class ABendTurret : public ABendPawn
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendTurret");
		return ptr;
	}

};


// Class BendGame.BendSkeletalMeshArrayData
// 0x00C0 (0x00E8 - 0x0028)
class UBendSkeletalMeshArrayData : public UDataAsset
{
public:
	TArray<struct FBendSkeletalMeshVariationExtraData> VariationExtraData;                                       // 0x0028(0x0010) (Edit, ZeroConstructor)
	TArray<TAssetPtr<class USkeletalMesh>>             MeshArray;                                                // 0x0038(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<TAssetPtr<class UBendSkeletalMeshLook>>     LookArray;                                                // 0x0048(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<struct FBendSkeletalMeshLookEntry>          UnloadedLooks;                                            // 0x0058(0x0010) (ZeroConstructor, Transient)
	TArray<struct FBendSkeletalMeshLookEntry>          LoadingLooks;                                             // 0x0068(0x0010) (ZeroConstructor, Transient)
	TArray<struct FBendSkeletalMeshLookEntry>          AvailableLooks;                                           // 0x0078(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData00[0x34];                                      // 0x0088(0x0034) MISSED OFFSET
	int                                                MinLookCount;                                             // 0x00BC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                MaxLookCount;                                             // 0x00C0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x24];                                      // 0x00C4(0x0024) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendSkeletalMeshArrayData");
		return ptr;
	}


	class UBendSkeletalMeshLook* GetRandomLook();
	class USkeletalMesh* GetRandom();
	class UBendSkeletalMeshLook* GetLook(int Id);
	class USkeletalMesh* Get(int Id);
};


// Class BendGame.BendConditionalSkeletalMeshArrayData
// 0x0038 (0x0120 - 0x00E8)
class UBendConditionalSkeletalMeshArrayData : public UBendSkeletalMeshArrayData
{
public:
	TArray<struct FBendConditionalSkeletalMeshLook>    ConditionalLooks;                                         // 0x00E8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	unsigned char                                      UnknownData00[0x20];                                      // 0x00F8(0x0020) MISSED OFFSET
	class UBendSkeletalMeshLook*                       LoadedConditionalLook;                                    // 0x0118(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendConditionalSkeletalMeshArrayData");
		return ptr;
	}


	class UBendSkeletalMeshLook* GetConditionalLookNow();
};


// Class BendGame.BendVehicleClasses
// 0x0010 (0x0038 - 0x0028)
class UBendVehicleClasses : public UDataAsset
{
public:
	TArray<TAssetPtr<class UClass>>                    VehicleClassList;                                         // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendVehicleClasses");
		return ptr;
	}


	class UClass* GetRandom();
	class UClass* Get(int Id);
};


// Class BendGame.BendPawnClasses
// 0x0010 (0x0038 - 0x0028)
class UBendPawnClasses : public UDataAsset
{
public:
	TArray<TAssetPtr<class UClass>>                    PawnClassList;                                            // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendPawnClasses");
		return ptr;
	}


	class UClass* GetRandom();
	class UClass* Get(int Id);
};


// Class BendGame.BendVehicleClassRef
// 0x0020 (0x0048 - 0x0028)
class UBendVehicleClassRef : public UDataAsset
{
public:
	TAssetPtr<class UClass>                            BendVehicleClass;                                         // 0x0028(0x0020) (Edit, BlueprintVisible)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendVehicleClassRef");
		return ptr;
	}


	class UClass* Get();
};


// Class BendGame.BendPawnClassRef
// 0x0020 (0x0048 - 0x0028)
class UBendPawnClassRef : public UDataAsset
{
public:
	TAssetPtr<class UClass>                            BendPawnClass;                                            // 0x0028(0x0020) (Edit, BlueprintVisible)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendPawnClassRef");
		return ptr;
	}


	class UClass* Get();
};


// Class BendGame.BendPawnSpawnComponent
// 0x0480 (0x06B0 - 0x0230)
class UBendPawnSpawnComponent : public UChildActorComponent
{
public:
	class ABendPawnSpawnLocation*                      m_PawnSpawnLocation;                                      // 0x0230(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DuplicateTransient, IsPlainOldData)
	struct FBendAmbientSpawnType                       m_SpawnType;                                              // 0x0238(0x0418) (Edit, BlueprintVisible, BlueprintReadOnly)
	bool                                               m_ignoreInnerRadius;                                      // 0x0650(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_Important;                                              // 0x0651(0x0001) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	TEnumAsByte<ESpawnImportance>                      m_Importance;                                             // 0x0652(0x0001) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	bool                                               m_DebugIgnoreLosCheck;                                    // 0x0653(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FDefendZoneInfo                             m_defendZoneInfo;                                         // 0x0654(0x0030) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0684(0x0004) MISSED OFFSET
	struct FString                                     m_forceUsePOIType;                                        // 0x0688(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	class ABendPOI*                                    m_OverridePOIToUse;                                       // 0x0698(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FBehaviorParams                             m_BehaviorParameters;                                     // 0x06A0(0x0004) (Edit, BlueprintVisible)
	float                                              m_SpawnChancePct;                                         // 0x06A4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_bUniqueSpawn;                                           // 0x06A8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_CanSpawnDay;                                            // 0x06A9(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_CanSpawnNight;                                          // 0x06AA(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x5];                                       // 0x06AB(0x0005) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendPawnSpawnComponent");
		return ptr;
	}

};


// Class BendGame.BendPerformActionHelper
// 0x0000 (0x0028 - 0x0028)
class UBendPerformActionHelper : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendPerformActionHelper");
		return ptr;
	}


	struct FBendActionSequence STATIC_ConfigureActionSequence(const struct FBendActionSequence& Data, float MainActionLoopingTime);
};


// Class BendGame.BendPhotoModeLogoOffsetData
// 0x0800 (0x0828 - 0x0028)
class UBendPhotoModeLogoOffsetData : public UDataAsset
{
public:
	struct FPhotoModeLogoPositions                     PhotoModeLogoOffsetDefault;                               // 0x0028(0x0100) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FPhotoModeLogoPositions                     PhotoModeLogoOffset4x3;                                   // 0x0128(0x0100) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FPhotoModeLogoPositions                     PhotoModeLogoOffset21x9;                                  // 0x0228(0x0100) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FPhotoModeLogoPositions                     PhotoModeLogoOffsetSquare;                                // 0x0328(0x0100) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FPhotoModeLogoPositions                     PhotoModeLogoOffset4x5;                                   // 0x0428(0x0100) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FPhotoModeLogoPositions                     PhotoModeLogoOffsetChains;                                // 0x0528(0x0100) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FPhotoModeLogoPositions                     PhotoModeLogoOffsetLicensePlate;                          // 0x0628(0x0100) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FPhotoModeLogoPositions                     PhotoModeLogoOffsetNero;                                  // 0x0728(0x0100) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendPhotoModeLogoOffsetData");
		return ptr;
	}

};


// Class BendGame.BendPhysicsCollisionHandler
// 0x0000 (0x0040 - 0x0040)
class UBendPhysicsCollisionHandler : public UPhysicsCollisionHandler
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendPhysicsCollisionHandler");
		return ptr;
	}

};


// Class BendGame.BendPhysicsSurfaceConditionsManager
// 0x0058 (0x03A0 - 0x0348)
class ABendPhysicsSurfaceConditionsManager : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0348(0x0008) MISSED OFFSET
	unsigned char                                      bUseGlobalWetnessAndSnowAccumulationFrictionScales : 1;   // 0x0350(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0351(0x0003) MISSED OFFSET
	float                                              GlobalWetnessFrictionScale;                               // 0x0354(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              WetnessRiseRate;                                          // 0x0358(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              WetnessFallRate;                                          // 0x035C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              WetnessTireFrictionScaleCurvePower;                       // 0x0360(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              WetnessTireDragCurvePower;                                // 0x0364(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              GlobalSnowAccumulationFrictionScale;                      // 0x0368(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              SnowAccumulationRiseRate;                                 // 0x036C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SnowAccumulationFallRate;                                 // 0x0370(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SnowAccumulationTireFrictionScaleCurvePower;              // 0x0374(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SnowAccumulationTireDragCurvePower;                       // 0x0378(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x037C(0x0004) MISSED OFFSET
	class UPhysicalMaterial*                           DeepestSnowSurfaceProperties;                             // 0x0380(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              Wetness;                                                  // 0x0388(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              SnowAccumulation;                                         // 0x038C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x10];                                      // 0x0390(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendPhysicsSurfaceConditionsManager");
		return ptr;
	}


	class ABendPhysicsSurfaceConditionsManager* STATIC_GetBendPhysicsSurfaceConditionsManager();
};


// Class BendGame.BendPhysMatProperty
// 0x0008 (0x0030 - 0x0028)
class UBendPhysMatProperty : public UPhysicalMaterialPropertyBase
{
public:
	TEnumAsByte<EPhysMaterialType>                     MaterialType;                                             // 0x0028(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0029(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendPhysMatProperty");
		return ptr;
	}

};


// Class BendGame.BendPingLocationComponent
// 0x0008 (0x00D8 - 0x00D0)
class UBendPingLocationComponent : public UActorComponent
{
public:
	bool                                               Active;                                                   // 0x00D0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bPingOnce;                                                // 0x00D1(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               ShowQuestionMark;                                         // 0x00D2(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x5];                                       // 0x00D3(0x0005) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendPingLocationComponent");
		return ptr;
	}


	void StopPinging();
	void StartPinging();
	void PingOnce();
	struct FVector GetLocation();
};


// Class BendGame.BendPingWidget
// 0x0048 (0x0290 - 0x0248)
class UBendPingWidget : public UUserWidget
{
public:
	TWeakObjectPtr<class UBendPingLocationComponent>   Component;                                                // 0x0248(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UImage*                                      PingA_Code;                                               // 0x0250(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UImage*                                      PingB_Code;                                               // 0x0258(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UImage*                                      Question_Code;                                            // 0x0260(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TweenPulseAProgress;                                      // 0x0268(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TweenPulseBProgress;                                      // 0x026C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               isTweeningPulseA;                                         // 0x0270(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               isTweeningPulseB;                                         // 0x0271(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0272(0x0002) MISSED OFFSET
	float                                              TweenPulseDuration;                                       // 0x0274(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              BlendExp;                                                 // 0x0278(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               AutoPlay;                                                 // 0x027C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IsOnBike;                                                 // 0x027D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               OnlyPlaySoundOnce;                                        // 0x027E(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x027F(0x0001) MISSED OFFSET
	class USoundCue*                                   TweenPulseCue;                                            // 0x0280(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0288(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendPingWidget");
		return ptr;
	}


	void TweenPulseB();
	void TweenPulseA();
	void StartTweenPulseB();
	void PulseOnce();
};


// Class BendGame.BendPlayerStart
// 0x0000 (0x0378 - 0x0378)
class ABendPlayerStart : public APlayerStart
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendPlayerStart");
		return ptr;
	}

};


// Class BendGame.BendPOI
// 0x00B8 (0x0400 - 0x0348)
class ABendPOI : public AActor
{
public:
	TArray<class ABendPOISlot*>                        m_Slots;                                                  // 0x0348(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	class UClass*                                      m_DefaultSlotBlueprint;                                   // 0x0358(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              m_NearDistance;                                           // 0x0360(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_FarDistance;                                            // 0x0364(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_MaxPriority;                                            // 0x0368(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_TimeBeforeReuse;                                        // 0x036C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FString                                     m_POI_Type;                                               // 0x0370(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	class ABendStateMachine*                           m_pStateMachine;                                          // 0x0380(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      m_bLimitToDefendZone : 1;                                 // 0x0388(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      m_bLimitToPOIType : 1;                                    // 0x0388(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      m_bCanUseUnaware : 1;                                     // 0x0388(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      m_bCanUseSemiAware : 1;                                   // 0x0388(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      m_bCanUseAware : 1;                                       // 0x0388(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      m_bLeaveOnUnaware : 1;                                    // 0x0388(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      m_bLeaveOnSemiAware : 1;                                  // 0x0388(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      m_bLeaveOnAware : 1;                                      // 0x0388(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0389(0x0003) MISSED OFFSET
	TEnumAsByte<EePOITenseType>                        m_eCanUseIfTense;                                         // 0x038C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EePOIUserType>                         m_eDefaultSlotType;                                       // 0x038D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x038E(0x0002) MISSED OFFSET
	struct FScriptMulticastDelegate                    m_UserTakesPOIDelegate;                                   // 0x0390(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    m_UserLeavesPOIDelegate;                                  // 0x03A0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnAutoNavSuccess;                                         // 0x03B0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnAutoNavFailure;                                         // 0x03C0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	TArray<TAssetPtr<class UClass>>                    m_UseConditionClasses;                                    // 0x03D0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	bool                                               DisableTickWhenNoUsers;                                   // 0x03E0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x1F];                                      // 0x03E1(0x001F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendPOI");
		return ptr;
	}


	void SetPriority(float Priority);
	void SetChosenSlot(class ABendPOISlot* Slot);
	bool RequestUsePOI(class AController* User, bool skipTests, bool forceLeavePrevPOI);
	void RequestLeavePOIForAllUsers();
	bool RequestLeavePOI(class AController* User, TEnumAsByte<EePOIReasonForLeaving> reasonForLeaving);
	void OnRequestUsePOI(TEnumAsByte<EePOIUserType> userType, class AController* User, class ABendPOISlot* closestOpenSlot);
	void OnPathComplete(TEnumAsByte<EPathFollowingResult> Result);
	void OnGetPriority(float defaultPriority, TEnumAsByte<EePOIUserType> userType, class AController* User);
	bool IsUsingDefaultSlot();
	bool IsSlotAvailable(TEnumAsByte<EePOIUserType> userType, class AController* User);
	float GetPriority(class AController* User, const struct FString& POIType);
	int GetOccupiedSlots();
	int GetNumOpenSlots(TEnumAsByte<EePOIUserType> userType, class AController* User);
	void ForceLeavePOI(class AController* User, TEnumAsByte<EePOIReasonForLeaving> reasonForLeaving);
	void AddSlot(class ABendPOISlot* NewSlot);
	void AddAndReplaceDefaultSlot(class ABendPOISlot* NewSlot);
};


// Class BendGame.BendNest
// 0x0320 (0x0720 - 0x0400)
class ABendNest : public ABendPOI
{
public:
	TArray<class AVolume*>                             TriggerVolumes;                                           // 0x0400(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FName                                       VolumeDefaultCollisionProfile;                            // 0x0410(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBendNestingZone*                            m_NestingZone;                                            // 0x0418(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FString                                     m_NestID;                                                 // 0x0420(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate)
	bool                                               m_Destroyed;                                              // 0x0430(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0431(0x0007) MISSED OFFSET
	TArray<class UParticleSystem*>                     FireTypeParticleSystems;                                  // 0x0438(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<class UParticleSystem*>                     SmokeTypeParticleSystems;                                 // 0x0448(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	class UJobClassInfo*                               JobsID;                                                   // 0x0458(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UBendAttractorComponent*                     AttractorComponent;                                       // 0x0460(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UBillboardComponent*                         BillboardComponent;                                       // 0x0468(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UAudioComponent*                             FireAudioComponent;                                       // 0x0470(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UAudioComponent*                             AmbientAudioComponent;                                    // 0x0478(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UMiniMapLocationComponent*                   MiniMapLocationComponent;                                 // 0x0480(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UTimelineComponent*                          SmokeStartTimeline;                                       // 0x0488(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UCurveFloat*                                 SmokeStartCurve;                                          // 0x0490(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UTimelineComponent*                          FireStartTimeline;                                        // 0x0498(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UCurveFloat*                                 FireStartCurve;                                           // 0x04A0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UTimelineComponent*                          FireDeathTimeline;                                        // 0x04A8(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UCurveFloat*                                 FireDeathCurve;                                           // 0x04B0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UTimelineComponent*                          SmokeTimeline;                                            // 0x04B8(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UCurveFloat*                                 SmokeCurve;                                               // 0x04C0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UTimelineComponent*                          MinimapTimeline;                                          // 0x04C8(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UCurveFloat*                                 MinimapScaleCurve;                                        // 0x04D0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UCurveFloat*                                 MinimapAlphaCurve;                                        // 0x04D8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MinNoiseSpawnTime;                                        // 0x04E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	float                                              BurningSpawnPercent;                                      // 0x04E4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	float                                              NestDespawnDistance;                                      // 0x04E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x04EC(0x0004) MISSED OFFSET
	class AActor*                                      StructureBox;                                             // 0x04F0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	TArray<class AActor*>                              ObjectsToDestroy;                                         // 0x04F8(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate)
	TArray<struct FTransform>                          FireBaseTransforms;                                       // 0x0508(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate)
	TArray<struct FTransform>                          FireGenericTransforms;                                    // 0x0518(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate)
	TArray<struct FTransform>                          FireWindowTransforms;                                     // 0x0528(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate)
	TArray<class AActor*>                              SmokeLocations;                                           // 0x0538(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate)
	TArray<class UParticleSystemComponent*>            SmokeEmitters;                                            // 0x0548(0x0010) (BlueprintVisible, ExportObject, ZeroConstructor)
	bool                                               NestCompleted;                                            // 0x0558(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               BurningInitiated;                                         // 0x0559(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               FadeInPostProcess;                                        // 0x055A(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               PlayerInPostVolume;                                       // 0x055B(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               InitialSmokeRampUp;                                       // 0x055C(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x055D(0x0003) MISSED OFFSET
	int                                                DestroyIndex;                                             // 0x0560(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                DoorIndex;                                                // 0x0564(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              WorldTimeOnActivation;                                    // 0x0568(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TimeSinceIgnited;                                         // 0x056C(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<class UParticleSystemComponent*>            InitialSpawnedSmokeEmitters;                              // 0x0570(0x0010) (BlueprintVisible, ExportObject, ZeroConstructor)
	TArray<class UParticleSystemComponent*>            SpawnedFireEmitters;                                      // 0x0580(0x0010) (BlueprintVisible, ExportObject, ZeroConstructor)
	TArray<class UParticleSystemComponent*>            SpawnedSmokeEmitters;                                     // 0x0590(0x0010) (BlueprintVisible, ExportObject, ZeroConstructor)
	TArray<class USphereComponent*>                    TheDoorSpheres;                                           // 0x05A0(0x0010) (BlueprintVisible, ExportObject, ZeroConstructor)
	TArray<int>                                        TimeCounter;                                              // 0x05B0(0x0010) (BlueprintVisible, ZeroConstructor)
	class UPawnSensingComponent*                       SensingComponent;                                         // 0x05C0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	TWeakObjectPtr<class ABendNestSpawnLocation>       m_nestSpawnLocation;                                      // 0x05C8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FScriptMulticastDelegate                    NestBurningStarted;                                       // 0x05D0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    NestBurningCompleted;                                     // 0x05E0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    NestFireGoneOut;                                          // 0x05F0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    NestShouldStartSmoke;                                     // 0x0600(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDestroyedDelegate;                                      // 0x0610(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnAllSpawnsCleared;                                       // 0x0620(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	float                                              TotalDeltaTime;                                           // 0x0630(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SmokeClearTime;                                           // 0x0634(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FireClearTime;                                            // 0x0638(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x063C(0x0004) MISSED OFFSET
	class UClass*                                      BurningStatusEffect;                                      // 0x0640(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class AController*                                 NestBurner;                                               // 0x0648(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FireRemoveTime;                                           // 0x0650(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x0654(0x0004) MISSED OFFSET
	class AActor*                                      FireInstigator;                                           // 0x0658(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     NestBurnerLoc;                                            // 0x0660(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x4];                                       // 0x066C(0x0004) MISSED OFFSET
	struct FString                                     NestRegionName;                                           // 0x0670(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FString                                     NestRegionDescription;                                    // 0x0680(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	class UTexture2D*                                  NestRegionImage;                                          // 0x0690(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               NestRegistered;                                           // 0x0698(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               NestFireExtinguished;                                     // 0x0699(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x2];                                       // 0x069A(0x0002) MISSED OFFSET
	float                                              NestBurnSpeedMultiplier;                                  // 0x069C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                NestBurnXP;                                               // 0x06A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     SetBurnStartLocation;                                     // 0x06A4(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<struct FTransform>                          TempFireTransforms;                                       // 0x06B0(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<float>                                      DistanceCheckedArray;                                     // 0x06C0(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<int>                                        FireTypes;                                                // 0x06D0(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	float                                              CurrentDistanceCheckDist;                                 // 0x06E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               OnRegisterCalled;                                         // 0x06E4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0x3];                                       // 0x06E5(0x0003) MISSED OFFSET
	class ABendSpawnLocationBase*                      NestCrowSpawnLocation;                                    // 0x06E8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UBendSphereComponent*                        NestSphereComponent;                                      // 0x06F0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData08[0x10];                                      // 0x06F8(0x0010) MISSED OFFSET
	struct FTimespan                                   TimeOnLastReset;                                          // 0x0708(0x0008) (BlueprintVisible, ZeroConstructor, SaveGame)
	unsigned char                                      UnknownData09[0x10];                                      // 0x0710(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendNest");
		return ptr;
	}


	void TemporaryDestroyNestForChallenge();
	void StartBurningNest();
	void SmokeStartUpdate(float Value);
	void SmokeStartFinished();
	void SmokeInUpdate(float Value);
	void PlayerEndOverlap();
	void PlayerBeginOverlap();
	void OnVolumeTakeDamage(float Damage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void OnNoiseNearNest(class APawn* NoiseMaker, const struct FVector& Location, float Volume);
	void NotifyOnRegister(class ABendNestSpawnLocation* Location);
	void MinimapScaleUpdate(float Value);
	void MinimapAlphaUpdate(float Value);
	void FireStartUpdate(float Value);
	void FireStartFinished();
	void FireImpacted(class AActor* FireStarter, class AController* FireStarterOwner);
	void FireDeathUpdate(float Value);
	void FireDeathFinished();
	void DestroyNest();
	void BurnObjects();
	void ActorHit(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void ActorEndedOverlap(class AActor* OtherActor);
	void ActorBeganOverlap(class AActor* OtherActor);
};


// Class BendGame.BendPOICarlosRing
// 0x0018 (0x0418 - 0x0400)
class ABendPOICarlosRing : public ABendPOI
{
public:
	float                                              RingRadius;                                               // 0x0400(0x0004) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	int                                                NumSlots;                                                 // 0x0404(0x0004) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	bool                                               GenerateSlots;                                            // 0x0408(0x0001) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	bool                                               UseAutoNav;                                               // 0x0409(0x0001) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x040A(0x0002) MISSED OFFSET
	float                                              NavAcceptanceRadius;                                      // 0x040C(0x0004) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	TEnumAsByte<EAIMoveSpeed>                          MoveSpeed;                                                // 0x0410(0x0001) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	TEnumAsByte<EStrafeOverride>                       StrafeOverride;                                           // 0x0411(0x0001) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	bool                                               UseNavRotation;                                           // 0x0412(0x0001) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x0413(0x0001) MISSED OFFSET
	float                                              NavAcceptableAngle;                                       // 0x0414(0x0004) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendPOICarlosRing");
		return ptr;
	}

};


// Class BendGame.BendPOIGore
// 0x0008 (0x0408 - 0x0400)
class ABendPOIGore : public ABendPOI
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0400(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendPOIGore");
		return ptr;
	}


	void SetBody(class ABendPawn* Body);
	class ABendPawn* GetBody();
};


// Class BendGame.BendPOIGoreClassRef
// 0x0020 (0x0048 - 0x0028)
class UBendPOIGoreClassRef : public UDataAsset
{
public:
	TAssetPtr<class UClass>                            BendPOIGoreClass;                                         // 0x0028(0x0020) (Edit, BlueprintVisible)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendPOIGoreClassRef");
		return ptr;
	}


	class UClass* Get();
};


// Class BendGame.BendPOIGoreSector
// 0x0000 (0x0400 - 0x0400)
class ABendPOIGoreSector : public ABendPOI
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendPOIGoreSector");
		return ptr;
	}


	void RemoveGoreLocation();
	void AddGoreLocation();
};


// Class BendGame.BendPOIPatrol
// 0x0038 (0x0438 - 0x0400)
class ABendPOIPatrol : public ABendPOI
{
public:
	struct FScriptMulticastDelegate                    OnPatrolLoopCompleted;                                    // 0x0400(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	float                                              PatrolForHowLong;                                         // 0x0410(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IgnoreAwareness;                                          // 0x0414(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EPatrolPOIType>                        ePatrolType;                                              // 0x0415(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               StartAtClosestSlot;                                       // 0x0416(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               ExitAfterOneCircuit;                                      // 0x0417(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x20];                                      // 0x0418(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendPOIPatrol");
		return ptr;
	}


	bool HasUser();
	class AController* GetCurrentUser();
	void AdvanceToNextSlot();
};


// Class BendGame.BendPOIStrafeAndShoot
// 0x0030 (0x0468 - 0x0438)
class ABendPOIStrafeAndShoot : public ABendPOIPatrol
{
public:
	struct FVector                                     AimAtLocation;                                            // 0x0438(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MinFireTimePerBurst;                                      // 0x0444(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxFireTimePerBurst;                                      // 0x0448(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MinTimeBetweenBursts;                                     // 0x044C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxTimeBetweenBursts;                                     // 0x0450(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ChanceToReloadBetweenBursts;                              // 0x0454(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0458(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendPOIStrafeAndShoot");
		return ptr;
	}

};


// Class BendGame.BendPOISlot
// 0x0130 (0x0478 - 0x0348)
class ABendPOISlot : public AActor
{
public:
	struct FScriptMulticastDelegate                    OnAutoNavSuccess;                                         // 0x0348(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnAutoNavFailure;                                         // 0x0358(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    UserTakesSlotDelegate;                                    // 0x0368(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    UserLeavesSlotDelegate;                                   // 0x0378(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    UserChangesSlotDelegate;                                  // 0x0388(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	TEnumAsByte<EePOIReasonForLeaving>                 LatestReasonForLeaving;                                   // 0x0398(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	TEnumAsByte<EePOIUserType>                         m_eSlotType;                                              // 0x0399(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x039A(0x0006) MISSED OFFSET
	TArray<TEnumAsByte<EAIFactionType>>                m_CustomFactions;                                         // 0x03A0(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	bool                                               m_IsRequestSuccess;                                       // 0x03B0(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_AutoNav;                                                // 0x03B1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_AutoNavDoNotStop;                                       // 0x03B2(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x03B3(0x0001) MISSED OFFSET
	float                                              m_AutoNavAcceptanceRadius;                                // 0x03B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_AutoNavMaxTime;                                         // 0x03B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                m_AutoNavMaxAttempts;                                     // 0x03BC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_AutoNavOnlyCompleteIfGroundMove;                        // 0x03C0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_OverrideSpeed;                                          // 0x03C1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EStrafeOverride>                       m_StrafeOverride;                                         // 0x03C2(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_bUseNavRotation;                                        // 0x03C3(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_bNavRotationPostLoad;                                   // 0x03C4(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x03C5(0x0003) MISSED OFFSET
	struct FBendNavRotationParams                      m_NavRotationParams;                                      // 0x03C8(0x0018) (Edit, BlueprintVisible)
	float                                              m_DefaultMoveSpeed;                                       // 0x03E0(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	TEnumAsByte<EAIMoveSpeed>                          m_AutoNavMoveSpeed;                                       // 0x03E4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x03E5(0x0003) MISSED OFFSET
	float                                              m_MaxSlotTime;                                            // 0x03E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_MaxSlotTimeVariance;                                    // 0x03EC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_MinTimeBetweenUsers;                                    // 0x03F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x03F4(0x0004) MISSED OFFSET
	class ABendStateMachine*                           m_pStateMachine;                                          // 0x03F8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	TAssetPtr<class USkeletalMesh>                     SkeletalMesh;                                             // 0x0400(0x0020) (Edit, BlueprintVisible)
	TAssetPtr<class UAnimationAsset>                   MeshAnim;                                                 // 0x0420(0x0020) (Edit, BlueprintVisible)
	float                                              MeshAnimPosition;                                         // 0x0440(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_fPOITimerStart;                                         // 0x0444(0x0004) (ZeroConstructor, SaveGame, IsPlainOldData)
	float                                              m_fPOITimerEnd;                                           // 0x0448(0x0004) (ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData05[0x2C];                                      // 0x044C(0x002C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendPOISlot");
		return ptr;
	}


	void UserTakesSlot(class AController* User);
	void UserLeavesSlot(TEnumAsByte<EePOIReasonForLeaving> reasonForLeaving);
	void UserChangesSlot(class ABendPOISlot* NewSlot, TEnumAsByte<EePOIReasonForLeaving> reasonForLeaving);
	void SetSlotActive(bool Active);
	void OnUserTakesSlot();
	void OnUserLeavesSlot();
	void OnRequestLeaveSlot();
	void OnPathComplete(TEnumAsByte<EPathFollowingResult> Result);
	void OnBecomeUnaware(TEnumAsByte<EAIAwareState> prevAwareness);
	void OnBecomeSemiAware(TEnumAsByte<EAIAwareState> prevAwareness);
	void OnBecomeAware(TEnumAsByte<EAIAwareState> prevAwareness);
	bool IsSlotOpen(TEnumAsByte<EePOIUserType> userType, class AController* User);
	bool IsSlotActive();
	float GetTimeSinceUse();
	float GetSlotUseTime();
	class AController* GetSlotUserconst();
	class AController* GetSlotUser();
	class ABendPOI* GetPOIconst();
	class ABendPOI* GetPOI();
	bool GetIsLeavingSlot();
	struct FVector GetAutoNavGoal();
	void AdvanceOrLeave(TEnumAsByte<EePOIReasonForLeaving> reasonForLeaving);
};


// Class BendGame.BendPawnSpawnLocation
// 0x0420 (0x0960 - 0x0540)
class ABendPawnSpawnLocation : public ABendSpawnLocationBase
{
public:
	struct FBendAmbientSpawnType                       m_SpawnType;                                              // 0x0540(0x0418) (Edit, BlueprintVisible, BlueprintReadOnly)
	float                                              m_SpawnChancePct;                                         // 0x0958(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_bUniqueSpawn;                                           // 0x095C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x095D(0x0002) MISSED OFFSET
	bool                                               m_bWasKilled;                                             // 0x095F(0x0001) (ZeroConstructor, SaveGame, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendPawnSpawnLocation");
		return ptr;
	}


	void SetSpawnType(const struct FBendAmbientSpawnType& SpawnType);
	void ResetSpawnCount(bool resetToKilled);
	void ResetKillCount();
	void OnFinishedSpawnOnVehicleSeat(class ABendAIController* SpawnedController, class ABendPawn* SpawnedPawn, class AVehiclePawn* SpawnedVehiclePawn);
	int GetSpawnCount();
	int GetKillCount();
	int GetActiveCount();
};


// Class BendGame.XpecSpawnCheck
// 0x0000 (0x0028 - 0x0028)
class UXpecSpawnCheck : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.XpecSpawnCheck");
		return ptr;
	}


	bool STATIC_OffScreenCheckWithRayCast(class ABendPlayerController* PlayerController, const struct FVector& loc, bool drawDebug, class AActor* additionalIgnoreActor);
	bool STATIC_OffScreenCheck(class ABendPlayerController* PlayerController, const struct FTransform& Transform);
	bool STATIC_CanSpawn(class ABendPlayerController* PlayerController, const struct FTransform& Transform);
};


// Class BendGame.XpecAnimationFunctions
// 0x0000 (0x0028 - 0x0028)
class UXpecAnimationFunctions : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.XpecAnimationFunctions");
		return ptr;
	}


	bool STATIC_SyncAnimationPosition(class AActor* pSyncMaster, class AActor* pSyncSlave);
	bool STATIC_SetAnimationPosition(class AActor* pInActor, float fInPosition);
	float STATIC_GetAnimationPosition(class AActor* pInActor);
};


// Class BendGame.XpecEnum
// 0x0000 (0x0028 - 0x0028)
class UXpecEnum : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.XpecEnum");
		return ptr;
	}


	struct FString STATIC_GetWeaponTypeString(TEnumAsByte<EUnaimedAnimMoveStyle> E);
	struct FString STATIC_GetPawnLODEnumName(TEnumAsByte<EXpecPawnLODLevel> E);
};


// Class BendGame.XpecEditorFunctions
// 0x0000 (0x0028 - 0x0028)
class UXpecEditorFunctions : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.XpecEditorFunctions");
		return ptr;
	}


	bool STATIC_SetActorLabel(class AActor* Actor, const struct FString& newActorLabel);
};


// Class BendGame.XpecDummyPawnTrustAnim
// 0x0018 (0x0040 - 0x0028)
class UXpecDummyPawnTrustAnim : public UDataAsset
{
public:
	class UAnimSequenceBase*                           m_pAnimLowTrust;                                          // 0x0028(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAnimSequenceBase*                           m_pAnimMidTrust;                                          // 0x0030(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAnimSequenceBase*                           m_pAnimHighTrust;                                         // 0x0038(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.XpecDummyPawnTrustAnim");
		return ptr;
	}

};


// Class BendGame.XpecBlueprintCommonFunction
// 0x0000 (0x0028 - 0x0028)
class UXpecBlueprintCommonFunction : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.XpecBlueprintCommonFunction");
		return ptr;
	}


	bool STATIC_SetWeaponCurrentAmmoInClip(class ABendPawn* pPawn, TEnumAsByte<EEquippableSlot> EEquippableSlot, int iAmmoNum);
	bool STATIC_ForceFireWeapon(class ABendPawn* pPawn, TEnumAsByte<EEquippableSlot> EEquippableSlot, int iFireRound);
};


// Class BendGame.XpecConversationData
// 0x0018 (0x0040 - 0x0028)
class UXpecConversationData : public UDataAsset
{
public:
	class USoundClass*                                 m_SoundClass;                                             // 0x0028(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<struct FXpecTrustVO>                        m_trustVOList;                                            // 0x0030(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.XpecConversationData");
		return ptr;
	}


	bool FindVONameByTrust(TEnumAsByte<ETrustTier> TrustTier, struct FName* VOName);
};


// Class BendGame.XpecAnimationMap
// 0x0010 (0x0038 - 0x0028)
class UXpecAnimationMap : public UDataAsset
{
public:
	TArray<struct FXpecAnimationData>                  m_animMap;                                                // 0x0028(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.XpecAnimationMap");
		return ptr;
	}


	bool FindAnimationDataByName(const struct FName& GroupName, struct FXpecAnimationData* Data);
};


// Class BendGame.XpecPOIInterface
// 0x0000 (0x0028 - 0x0028)
class UXpecPOIInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.XpecPOIInterface");
		return ptr;
	}


	bool IWeatherChanged(TEnumAsByte<EWeatherType> eOldWeather, TEnumAsByte<EWeatherType> eNewWeather);
	bool ITimeZoneChanged(TEnumAsByte<EXpecTimeZone> eOldTimeZone, TEnumAsByte<EXpecTimeZone> eNewTimeZone);
	TEnumAsByte<EXpecUsePOIResult> IPreorder(class ABendPawn* pUser, class ABendPOISlot* pSlot);
	bool IOnReceiveAnimNotify(const struct FName& EventName, class AActor* pSource);
	bool IOnLeaveSlot(class ABendPawn* pUser, class ABendPOISlot* pSlot);
	bool IOnEnterSlot(class ABendPawn* pUser, class ABendPOISlot* pSlot);
	bool IOnDebugTriggerPOI();
	bool IIsForceHighLOD(int iSN);
	bool IIsDebugMode();
	bool IIsAllowedToUse(class ABendPawn* pUser);
	bool IIsAllowedDummyToUse(TEnumAsByte<EXpecPOIUserType> eUserType, TEnumAsByte<EXpecPOIUserGender> eUserGender, const struct FName& UserPawnName);
	bool IInitialize(class AXpecZoneManager* pZoneManager, class AXpecVOManager* pVOManager, TEnumAsByte<EXpecTimeZone> eTimeZone, TEnumAsByte<EWeatherType> eWeather);
	class AXpecZoneManager* IGetZoneManager();
	TEnumAsByte<EXpecPOIUserType> IGetUserType();
	TEnumAsByte<EXpecPOIUserGender> IGetUserGender();
	class ABendPOISlot* IGetSlotForUser(class ABendPawn* pUser, bool bPreorder, float* fDistance);
	struct FName IGetScenarioName();
	struct FName IGetPOIName();
	float IGetDummySpawnPosition(const struct FName& Name, const struct FVector& cameraPosition, const struct FVector& cameraDirection, float fMinDistance, float fMaxDistance, struct FVector* Position, struct FRotator* Rotation);
	bool IGetDummyInfo(TEnumAsByte<EXpecPOIUserType> eUserType, TEnumAsByte<EXpecPOIUserGender> dummyGender, TEnumAsByte<EXpecVOClass> eUserVOClass, class ABendPOISlot* preOrderedSlot, class USkeletalMeshComponent* dummyMesh, struct FTransform* loopPosition, struct FName* scenarioName, int* commandIndex, struct FName* lowLODAnimGroup, float* fTransitionTime, TEnumAsByte<EUnaimedAnimMoveStyle>* m_eWeaponType);
	class ABendPOISlot* IGetBestSlotForUser(class ABendPawn* pUser, int* iBestSlotIndex, float* fDistance);
	class ABendPOISlot* IGetBestSlotForDummy(const struct FName& UserPawnName, int* iBestSlotIndex);
	bool ICanSpawnDummy(const struct FName& dummyPawnName);
	bool ICancelOrder(class ABendPawn* pUser);
	float ICalculatePriority(class ABendPawn* pUser, class ABendPOISlot** pBestSlot);
	bool IAddDedicatedUser(const struct FName& userName);
};


// Class BendGame.XpecScenarioClientInterface
// 0x0000 (0x0028 - 0x0028)
class UXpecScenarioClientInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.XpecScenarioClientInterface");
		return ptr;
	}


	class AXpecScenarioInstance* ITryResumeScenario(class ABendPawn* pUser, class ABendPOISlot* pSlot);
	bool IScenarioCondition(class AXpecScenarioInstance* pScenario, const struct FName& scenarioName, const struct FName& ActionName, const struct FName& conditionName);
	float IOverrideTimerTime(class AXpecScenarioInstance* pScenario, const struct FName& scenarioName, const struct FName& ActionName, float defaultTimerTime);
	struct FVector IOverrideRotateAlignTarget(class AXpecScenarioInstance* pScenario, const struct FName& scenarioName, const struct FName& ActionName);
	void IOverridePerformActionParameter(class AXpecScenarioInstance* pScenario, const struct FName& scenarioName, const struct FName& ActionName, const struct FName& defaultAnimGroup, const struct FTransform& defaultAnchorTransform, bool defaultUseAnchor, float defaultBlendInTime, float defaultBlendOutTime, float DefaultPlayRate, TEnumAsByte<EUnaimedAnimMoveStyle> defaultWeaponType, struct FName* animGroup, struct FTransform* AnchorTransform, bool* bUseAnchor, float* fBlendInTime, float* fBlendOutTime, float* fPlayRate, TEnumAsByte<EUnaimedAnimMoveStyle>* EWeaponType);
	void IOverrideMoveToParameter(class AXpecScenarioInstance* pScenario, const struct FName& scenarioName, const struct FName& ActionName, float defaultMoveToSpeed, bool defaultApplySpeedMultiply, float defaultRadius, float defaultApproachOuterRadius, bool defaultSlowApproach, struct FTransform* TargetTransform, float* fMoveToSpeed, bool* bApplySpeedMultiply, float* fRadius, float* fApproachOuterRadius, bool* bSlowApproach);
	void IOverrideLookAtParameter(class AXpecScenarioInstance* pScenario, const struct FName& scenarioName, const struct FName& ActionName, bool bDefaultOverrideAngleLimits, const struct FRotator& rDefaultAngleLimitsOverride, TEnumAsByte<EBendCharacterLookPartialSet> eDefaultPartialSet, float fDefaultInterpolationRate, float fDefaultDuration, bool* bOverrideAngleLimits, struct FRotator* rAngleLimitsOverride, TEnumAsByte<EBendCharacterLookPartialSet>* ePartialSet, float* fInterpolationRate, float* fDuration);
	void IOverrideGateParameter(class AXpecScenarioInstance* pScenario, const struct FName& scenarioName, const struct FName& ActionName, int defaultGateMin, int defaultGateMax, int* iGateMin, int* iGateMax);
	float IOverrideDelayParameter(class AXpecScenarioInstance* pScenario, const struct FName& scenarioName, const struct FName& ActionName, float defaultDelayTime);
	bool IOnScenarioSetup(class AXpecScenarioInstance* pScenario, const struct FName& scenarioName);
	bool IOnScenarioCleanup(class AXpecScenarioInstance* pScenario, const struct FName& scenarioName);
	struct FName IOnRunScenario(class AXpecScenarioInstance* pScenario, const struct FName& scenarioName, const struct FName& ActionName, class ABendPawn* pMainActor, const struct FName& defaultScenarioName);
	bool IGrant(float fRewardPercentage, float fCostPercentage);
	struct FName IGetVO(class AXpecScenarioInstance* pScenario, const struct FName& scenarioName, const struct FName& ActionName, class ABendPawn* pActor, int iActorIndex, const struct FName& defaultVOName);
	struct FVector IGetSearchCenterForScenarioActor(class AXpecScenarioInstance* pScenario, const struct FName& scenarioName, int iNewActorIndex);
	int IGetScenarioActorCandidates(class AXpecScenarioInstance* pScenario, const struct FName& scenarioName, TArray<class ABendPawn*>* candidates);
	class AXpecScenarioInstance* IGetNextScenario(class ABendPawn* pUser, class ABendPOISlot* pSlot, const struct FName& lastScenarioName, TEnumAsByte<EXpecScenarioExecuteResult> eLastScenarioResult);
	class AXpecScenarioInstance* IGetFirstScenario(class ABendPawn* pUser, class ABendPOISlot* pSlot);
	TArray<struct FVocalConversationData> IGetConversationData(class AXpecScenarioInstance* pScenario, const struct FName& scenarioName, const struct FName& ActionName, class ABendPawn* pTalkPawn, class ABendPawn* pTalkToPawn);
	struct FTransform IGetAnchorTransform(class AXpecScenarioInstance* pScenario, const struct FName& scenarioName, const struct FName& ActionName, const struct FName& AnimGroupName);
	bool ICanActorJoinScenario(class AXpecScenarioInstance* pScenario, const struct FName& scenarioName, class ABendPawn* pNewActor, int iNewActorIndex);
	bool IAboutToSwitchToLowLOD(class AXpecScenarioInstance* pScenario, class USkeletalMeshComponent* dummyMesh, const struct FName& scenarioName, const struct FName& ActionName);
};


// Class BendGame.XpecTriggerableInterface
// 0x0000 (0x0028 - 0x0028)
class UXpecTriggerableInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.XpecTriggerableInterface");
		return ptr;
	}


	bool IUntrigger(const struct FName& EventName, class AActor* pSource);
	bool ITrigger(const struct FName& EventName, class AActor* pSource);
};


// Class BendGame.XpecLODToPOIInterface
// 0x0000 (0x0028 - 0x0028)
class UXpecLODToPOIInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.XpecLODToPOIInterface");
		return ptr;
	}


	bool IOnLODStateChanged(const struct FXpecLODPawn& pPawnInfo, TEnumAsByte<EXpecPawnLODChangeState> ChangeState);
	bool IIsAllowedSwitchToHighLOD(bool bIsOutOffHighLODQuickSwitchDistance, bool bIsOffScreenCheckPass, bool bIsAnimPlayOver);
	bool IIsAllowedLODInterrupt(class ABendPawn* pPawnToInterrupt);
};


// Class BendGame.XpecDebugComponent
// 0x0020 (0x00F0 - 0x00D0)
class UXpecDebugComponent : public UActorComponent
{
public:
	struct FString                                     directoryName;                                            // 0x00D0(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<class UDataTable*>                          DataTables;                                               // 0x00E0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.XpecDebugComponent");
		return ptr;
	}


	bool UpdateLocationProxyAfterLocationChanged(class ABendLocationProxy* locationProxy);
	bool SetupLocationProxyToReference(class ABendLocationProxy* locationProxy, const struct FLinearColor& Color, const struct FName& locationName, const struct FString& ActorName, struct FBendLocationReference* ref);
	bool SetPOI_M_Name(class AXpecPOI* POI, const struct FName& NewName);
	bool SaveStringToFile(const struct FString& String, const struct FString& FileName);
	bool OnPostEditChangeProperty();
	void GetSoundNamesFromSoundClass(class USoundClass* pSoundClass, TArray<struct FString>* ReturnArray);
	struct FString GetProxyNameInTransitionInfo(const struct FXpecTransitionInfo& transitionInfo);
	struct FString GetActorLevelName(class AActor* Actor);
	bool FindOtherActorsReferenceTheActor(class AActor* InActor, TArray<class AActor*>* OutReferencingActors);
	bool FindActorsImplementTheFunction(const struct FName& FunctionName, TArray<struct FName> blackClassList);
	bool DoesSoundBankContainsVo(class USoundClass* pSoundBank, const struct FString& sVoTag);
	bool CheckPOIHasWrongReward(class AXpecZoneManager* Zone);
};


// Class BendGame.XpecPOI
// 0x00E8 (0x04E8 - 0x0400)
class AXpecPOI : public ABendPOI
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0400(0x0020) MISSED OFFSET
	class UXpecRewardComponent*                        m_pRewardComp;                                            // 0x0420(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class AXpecZoneManager*                            m_pZoneManager;                                           // 0x0428(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class AXpecVOManager*                              m_pVOManager;                                             // 0x0430(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TArray<struct FName>                               m_preorders;                                              // 0x0438(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<struct FName>                               m_dedicatedUsers;                                         // 0x0448(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	class UXpecScenarioManager*                        m_pScenarioManager;                                       // 0x0458(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FName                                       m_name;                                                   // 0x0460(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EXpecPOIUserType>                      m_eUserType;                                              // 0x0468(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EXpecPOIUserGender>                    m_eUserGender;                                            // 0x0469(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               m_bIsEnable;                                              // 0x046A(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_bCanQuickSwitch;                                        // 0x046B(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_bDebugMode;                                             // 0x046C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x046D(0x0003) MISSED OFFSET
	TArray<TEnumAsByte<EWeatherType>>                  m_availableWeathers;                                      // 0x0470(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<TEnumAsByte<EXpecTimeZone>>                 m_availableTimeZones;                                     // 0x0480(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	bool                                               m_bIsCurrentWeatherAvailable;                             // 0x0490(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_bIsCurrentTimeAvailable;                                // 0x0491(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_bShouldAlwaysTick;                                      // 0x0492(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_bResetDummyLoopTransform;                               // 0x0493(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_fCooldown;                                              // 0x0494(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              m_fCooldownRewardScale;                                   // 0x0498(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x049C(0x0004) MISSED OFFSET
	TArray<struct FName>                               m_animGroupNames;                                         // 0x04A0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	unsigned char                                      UnknownData03[0xC];                                       // 0x04B0(0x000C) MISSED OFFSET
	bool                                               m_bOverrideMigrationInterruptionTimer;                    // 0x04BC(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x3];                                       // 0x04BD(0x0003) MISSED OFFSET
	float                                              m_fMigrationInterruptionTimerMin;                         // 0x04C0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              m_fMigrationInterruptionTimerMax;                         // 0x04C4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TArray<struct FName>                               m_orderCompleteCommandList;                               // 0x04C8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	unsigned char                                      UnknownData05[0x10];                                      // 0x04D8(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.XpecPOI");
		return ptr;
	}


	bool ShouldTick();
	bool SetPropVisible(bool bVisible);
	bool RequestDummyPOI(TEnumAsByte<EXpecPOIUserType> eUserType, TEnumAsByte<EXpecPOIUserGender> eUserGender, TEnumAsByte<EXpecVOClass> eUserVOClass, const struct FName& UserPawnName, class ASkeletalMeshActor* dummyMesh, struct FXpecScenarioSave* Save, struct FTransform* dummyTransform);
	void QuickSwitchToLowLOD(int iSN, const struct FTransform& OriginLoopTransform);
	void OnRequestUsePOIInternal(TEnumAsByte<EePOIUserType> userType, class AController* User, class ABendPOISlot* closestOpenSlot);
	void OnGetPriorityInternal(float defaultPriority, TEnumAsByte<EePOIUserType> userType, class AController* User);
	bool IWeatherChanged(TEnumAsByte<EWeatherType> eOldWeather, TEnumAsByte<EWeatherType> eNewWeather);
	bool IUntrigger(const struct FName& EventName, class AActor* pSource);
	class AXpecScenarioInstance* ITryResumeScenario(class ABendPawn* pUser, class ABendPOISlot* pSlot);
	bool ITrigger(const struct FName& EventName, class AActor* pSource);
	bool ITimeZoneChanged(TEnumAsByte<EXpecTimeZone> eOldTimeZone, TEnumAsByte<EXpecTimeZone> eNewTimeZone);
	bool IScenarioCondition(class AXpecScenarioInstance* pScenario, const struct FName& scenarioName, const struct FName& ActionName, const struct FName& conditionName);
	bool IPreserveSlotForDummy(const struct FName& pawnName, class ABendPOISlot* Slot);
	TEnumAsByte<EXpecUsePOIResult> IPreorder(class ABendPawn* pUser, class ABendPOISlot* pSlot);
	float IOverrideTimerTime(class AXpecScenarioInstance* pScenario, const struct FName& scenarioName, const struct FName& ActionName, float defaultTimerTime);
	struct FVector IOverrideRotateAlignTarget(class AXpecScenarioInstance* pScenario, const struct FName& scenarioName, const struct FName& ActionName);
	void IOverridePerformActionParameter(class AXpecScenarioInstance* pScenario, const struct FName& scenarioName, const struct FName& ActionName, const struct FName& defaultAnimGroup, const struct FTransform& defaultAnchorTransform, bool defaultUseAnchor, float defaultBlendInTime, float defaultBlendOutTime, float DefaultPlayRate, TEnumAsByte<EUnaimedAnimMoveStyle> defaultWeaponType, struct FName* animGroup, struct FTransform* AnchorTransform, bool* bUseAnchor, float* fBlendInTime, float* fBlendOutTime, float* fPlayRate, TEnumAsByte<EUnaimedAnimMoveStyle>* EWeaponType);
	void IOverrideMoveToParameter(class AXpecScenarioInstance* pScenario, const struct FName& scenarioName, const struct FName& ActionName, float defaultMoveToSpeed, bool defaultApplySpeedMultiply, float defaultRadius, float defaultApproachOuterRadius, bool defaultSlowApproach, struct FTransform* TargetTransform, float* fMoveToSpeed, bool* bApplySpeedMultiply, float* fRadius, float* fApproachOuterRadius, bool* bSlowApproach);
	void IOverrideLookAtParameter(class AXpecScenarioInstance* pScenario, const struct FName& scenarioName, const struct FName& ActionName, bool bDefaultOverrideAngleLimits, const struct FRotator& rDefaultAngleLimitsOverride, TEnumAsByte<EBendCharacterLookPartialSet> eDefaultPartialSet, float fDefaultInterpolationRate, float fDefaultDuration, bool* bOverrideAngleLimits, struct FRotator* rAngleLimitsOverride, TEnumAsByte<EBendCharacterLookPartialSet>* ePartialSet, float* fInterpolationRate, float* fDuration);
	void IOverrideGateParameter(class AXpecScenarioInstance* pScenario, const struct FName& scenarioName, const struct FName& ActionName, int defaultGateMin, int defaultGateMax, int* iGateMin, int* iGateMax);
	float IOverrideDelayParameter(class AXpecScenarioInstance* pScenario, const struct FName& scenarioName, const struct FName& ActionName, float defaultDelayTime);
	bool IOnScenarioSetup(class AXpecScenarioInstance* pScenario, const struct FName& scenarioName);
	bool IOnScenarioCleanup(class AXpecScenarioInstance* pScenario, const struct FName& scenarioName);
	struct FName IOnRunScenario(class AXpecScenarioInstance* pScenario, const struct FName& scenarioName, const struct FName& ActionName, class ABendPawn* pMainActor, const struct FName& defaultScenarioName);
	bool IOnReceiveAnimNotify(const struct FName& EventName, class AActor* pSource);
	bool IOnPostEditChangeProperty();
	bool IOnLODStateChanged(const struct FXpecLODPawn& pPawnInfo, TEnumAsByte<EXpecPawnLODChangeState> ChangeState);
	bool IOnLeaveSlot(class ABendPawn* pUser, class ABendPOISlot* pSlot);
	bool IOnEnterSlot(class ABendPawn* pUser, class ABendPOISlot* pSlot);
	bool IOnDebugTriggerPOI();
	void InitialWeathers(bool Clear, bool cloudy, bool lightRain, bool lightSnow, bool heavyRain, bool heavySnow);
	void InitialTimeZones(bool morning, bool afternoon, bool evening, bool night);
	bool IIsForceHighLOD(int iSN);
	bool IIsDebugMode();
	bool IIsAllowedToUse(class ABendPawn* pUser);
	bool IIsAllowedSwitchToHighLOD(bool bIsOutOffHighLODQuickSwitchDistance, bool bIsOffScreenCheckPass, bool bIsAnimPlayOver);
	bool IIsAllowedLODInterrupt(class ABendPawn* pPawnToInterrupt);
	bool IIsAllowedDummyToUse(TEnumAsByte<EXpecPOIUserType> eUserType, TEnumAsByte<EXpecPOIUserGender> eUserGender, const struct FName& UserPawnName);
	bool IInitialize(class AXpecZoneManager* pZoneManager, class AXpecVOManager* pVOManager, TEnumAsByte<EXpecTimeZone> eTimeZone, TEnumAsByte<EWeatherType> eWeather);
	bool IGrant(float fRewardPercentage, float fCostPercentage);
	class AXpecZoneManager* IGetZoneManager();
	struct FName IGetVO(class AXpecScenarioInstance* pScenario, const struct FName& scenarioName, const struct FName& ActionName, class ABendPawn* pActor, int iActorIndex, const struct FName& defaultVOName);
	TEnumAsByte<EXpecPOIUserType> IGetUserType();
	TEnumAsByte<EXpecPOIUserGender> IGetUserGender();
	class ABendPOISlot* IGetSlotForUser(class ABendPawn* pUser, bool bPreorder, float* fDistance);
	struct FVector IGetSearchCenterForScenarioActor(class AXpecScenarioInstance* pScenario, const struct FName& scenarioName, int iNewActorIndex);
	struct FName IGetScenarioName();
	int IGetScenarioActorCandidates(class AXpecScenarioInstance* pScenario, const struct FName& scenarioName, TArray<class ABendPawn*>* candidates);
	struct FName IGetPOIName();
	class AXpecScenarioInstance* IGetNextScenario(class ABendPawn* pUser, class ABendPOISlot* pSlot, const struct FName& lastScenarioName, TEnumAsByte<EXpecScenarioExecuteResult> eLastScenarioResult);
	class AXpecScenarioInstance* IGetFirstScenario(class ABendPawn* pUser, class ABendPOISlot* pSlot);
	float IGetDummySpawnPosition(const struct FName& Name, const struct FVector& cameraPosition, const struct FVector& cameraDirection, float fMinDistance, float fMaxDistance, struct FVector* Position, struct FRotator* Rotation);
	bool IGetDummyInfo(TEnumAsByte<EXpecPOIUserType> eUserType, TEnumAsByte<EXpecPOIUserGender> dummyGender, TEnumAsByte<EXpecVOClass> eUserVOClass, class ABendPOISlot* preOrderedSlot, class USkeletalMeshComponent* dummyMesh, struct FTransform* loopPosition, struct FName* scenarioName, int* commandIndex, struct FName* lowLODAnimGroup, float* fTransitionTime, TEnumAsByte<EUnaimedAnimMoveStyle>* m_eWeaponType);
	TArray<struct FVocalConversationData> IGetConversationData(class AXpecScenarioInstance* pScenario, const struct FName& scenarioName, const struct FName& ActionName, class ABendPawn* pTalkPawn, class ABendPawn* pTalkToPawn);
	class ABendPOISlot* IGetBestSlotForUser(class ABendPawn* pUser, int* iBestSlotIndex, float* fDistance);
	class ABendPOISlot* IGetBestSlotForDummy(const struct FName& UserPawnName, int* iBestSlotIndex);
	struct FTransform IGetAnchorTransform(class AXpecScenarioInstance* pScenario, const struct FName& scenarioName, const struct FName& ActionName, const struct FName& AnimGroupName);
	bool ICanSpawnDummy(const struct FName& dummyPawnName);
	bool ICancelOrder(class ABendPawn* pUser);
	bool ICanActorJoinScenario(class AXpecScenarioInstance* pScenario, const struct FName& scenarioName, class ABendPawn* pNewActor, int iNewActorIndex);
	float ICalculatePriority(class ABendPawn* pUser, class ABendPOISlot** pBestSlot);
	bool IAddDedicatedUser(const struct FName& userName);
	bool IAboutToSwitchToLowLOD(class AXpecScenarioInstance* pScenario, class USkeletalMeshComponent* dummyMesh, const struct FName& scenarioName, const struct FName& ActionName);
	bool GetUseCount(int* Count, int* totalCountInZone);
	class ABendPOISlot* GetSlotByPawnName(const struct FName& UserPawnName);
	TArray<struct FName> GetAnimGroupNames();
	bool DetachProp(const struct FName& pawnName, class USkeletalMeshComponent* pMeshToDetach);
	void DebugShowPOIInfo(class ABendAIController* targetAI, bool isFavored);
	void DebugPrintInfo(struct FString* line);
	bool AttachProp(const struct FName& pawnName, TEnumAsByte<EXpecPOIUserType> eUserType, TEnumAsByte<EXpecPOIUserGender> eUserGender, class USkeletalMeshComponent* pMeshToAttach, const struct FName& AttachSocketName);
	void ApplyRewardCooldown(class ABendPawn* pUser, float fCooldown, float fScale);
};


// Class BendGame.XpecScenarioManager
// 0x0020 (0x00F0 - 0x00D0)
class UXpecScenarioManager : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x00D0(0x0018) MISSED OFFSET
	class AXpecZoneManager*                            m_pZoneManager;                                           // 0x00E8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.XpecScenarioManager");
		return ptr;
	}


	TEnumAsByte<EXpecScenarioRequestResult> RequestScenario(const struct FName& Name, class ABendPOI* pClient, class ABendPOISlot* pSlot, class ABendPawn* pMainActor, int iInterruptLevel, class AXpecScenarioInstance* pFromScenario, class AXpecScenarioInstance** pScenarioInstance);
};


// Class BendGame.XpecScenarioActorInterface
// 0x0000 (0x0028 - 0x0028)
class UXpecScenarioActorInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.XpecScenarioActorInterface");
		return ptr;
	}


	bool ISetDefaultActionGroup(const struct FName& GroupName, float fBlendInTime, float fBlendOutTime, bool bUseAnchor);
	bool ISetCurrentScenario(class AXpecScenarioInstance* pScenario, int iActorIndex);
	bool ISetActionLock(bool bLock);
	bool IRotateTo(const struct FXpecRotateToActorData& Data);
	bool IPlayVO(const struct FXpecPlayVOData& Data);
	bool IPlayConversation(const struct FXpecPlayConversationData& Data);
	bool IPerformAction(const struct FXpecPerformActionData& Data);
	bool IOnShowHighLOD();
	bool INextAction(TEnumAsByte<EXpecScenarioCommand> eAction, bool bCancelCurrentAction);
	bool IMoveTo(const struct FXpecMoveToActorData& Data);
	bool ILookAt(const struct FXpecLookAtData& Data);
	bool IIsAllowedToUse(class ABendPawn* pActor);
	bool IInitialize(class AXpecZoneManager* pZoneManager);
	class AXpecScenarioInstance* IGetCurrentScenario();
	bool IFinish(const struct FXpecFinishActionData& Data);
	bool IEnableTurnToIdleInMovement(bool bEnable);
	bool IEnableMoveToIdleAnchor(bool bEnable);
	bool IEnableMoveToIdle(bool bEnable);
	bool IEnableFootLocking(bool bEnable);
	bool IAlignWith(const struct FXpecRotateToActorData& Data);
};


// Class BendGame.XpecPOISlot
// 0x0508 (0x0980 - 0x0478)
class AXpecPOISlot : public ABendPOISlot
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0478(0x0020) MISSED OFFSET
	class ABendPawn*                                   m_pPawn;                                                  // 0x0498(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class ABendAIController*                           m_pController;                                            // 0x04A0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class AXpecScenarioInstance*                       m_pScenario;                                              // 0x04A8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class AXpecZoneManager*                            m_pZoneManager;                                           // 0x04B0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                m_iActorIndex;                                            // 0x04B8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EXpecPOISlotState>                     m_eState;                                                 // 0x04BC(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x04BD(0x0003) MISSED OFFSET
	struct FXpecPerformActionData                      m_action;                                                 // 0x04C0(0x0120) (BlueprintVisible, BlueprintReadOnly)
	struct FXpecPerformActionData                      m_nextAction;                                             // 0x05E0(0x0120) (BlueprintVisible, BlueprintReadOnly)
	struct FXpecMoveToActorData                        m_moveTo;                                                 // 0x0700(0x00A0) (BlueprintVisible, BlueprintReadOnly)
	struct FXpecRotateToActorData                      m_rotateTo;                                               // 0x07A0(0x0050) (BlueprintVisible, BlueprintReadOnly)
	struct FXpecPlayVOData                             m_playVO;                                                 // 0x07F0(0x0038) (BlueprintVisible, BlueprintReadOnly)
	struct FXpecPlayConversationData                   m_playConversation;                                       // 0x0828(0x0040) (BlueprintVisible, BlueprintReadOnly)
	struct FXpecLookAtData                             m_lookAt;                                                 // 0x0868(0x0050) (BlueprintVisible, BlueprintReadOnly)
	struct FXpecFinishActionData                       m_finish;                                                 // 0x08B8(0x0040) (BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData02[0x88];                                      // 0x08F8(0x0088) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.XpecPOISlot");
		return ptr;
	}


	void ReportTurnInPlaceComplete();
	void ReportMoveToResult(TEnumAsByte<EPathFollowingResult> eResult);
	void OnPlayVOComplete(class ABendPawn* pPawn, const struct FName& VOName, int ConversationID, TEnumAsByte<EDonePlayVocalReason> SuccessOrFail);
	void OnPlayConversationComplete(class ABendPawn* pPawn, const struct FName& VOName, int ConversationID, TEnumAsByte<EDonePlayVocalReason> SuccessOrFail);
	void OnPerformActionFail(TEnumAsByte<EPeformActionFailedReason> eReason);
	void OnPerformActionComplete();
	void LeaveSlot();
	bool ITurnInPlaceByAngle(float fAngle);
	bool ISetDefaultActionGroup(const struct FName& GroupName, float fBlendInTime, float fBlendOutTime, bool bUseAnchor);
	bool ISetCurrentScenario(class AXpecScenarioInstance* pScenario, int iActorIndex);
	bool ISetActionLock(bool bLock);
	bool IRotateTo(const struct FXpecRotateToActorData& Data);
	bool IPlayVO(const struct FXpecPlayVOData& Data);
	bool IPlayConversation(const struct FXpecPlayConversationData& Data);
	bool IPerformAction(const struct FXpecPerformActionData& Data);
	bool IOnShowHighLOD();
	bool IOnPostEditChangeProperty();
	bool INextAction(TEnumAsByte<EXpecScenarioCommand> eAction, bool bCancelCurrentAction);
	bool IMoveTo(const struct FXpecMoveToActorData& Data);
	bool ILookAt(const struct FXpecLookAtData& Data);
	bool IIsAllowedToUse(class ABendPawn* pActor);
	bool IInitialize(class AXpecZoneManager* pZoneManager);
	class AXpecScenarioInstance* IGetCurrentScenario();
	bool IFinish(const struct FXpecFinishActionData& Data);
	bool IEnableTurnToIdleInMovement(bool bEnable);
	bool IEnableMoveToIdleAnchor(bool bEnable);
	bool IEnableMoveToIdle(bool bEnable);
	bool IEnableFootLocking(bool bEnable);
	bool IAlignWith(const struct FXpecRotateToActorData& Data);
	void EnterSlot(class ABendAIController* pController, class ABendPawn* pPawn);
};


// Class BendGame.XpecScenarioInstance
// 0x0168 (0x0568 - 0x0400)
class AXpecScenarioInstance : public ABendPOI
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x0400(0x0028) MISSED OFFSET
	TEnumAsByte<EXpecScenarioState>                    m_eState;                                                 // 0x0428(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0429(0x0007) MISSED OFFSET
	TArray<struct FXpecScenarioActorInfo>              m_actors;                                                 // 0x0430(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<TEnumAsByte<EXpecScenarioActionState>>      m_actionStates;                                           // 0x0440(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<class AActor*>                              m_references;                                             // 0x0450(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<class USceneComponent*>                     m_CompReferences;                                         // 0x0460(0x0010) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor)
	class AXpecActionPool*                             m_pActionPool;                                            // 0x0470(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class ABendPOI*                                    m_pClient;                                                // 0x0478(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class AXpecEvent*                                  m_pEvent;                                                 // 0x0480(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UXpecScenarioManager*                        m_pScenarioManager;                                       // 0x0488(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class AXpecZoneManager*                            m_pZoneManager;                                           // 0x0490(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class AXpecScenarioInstance*                       m_pSubScenario;                                           // 0x0498(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class AXpecScenarioInstance*                       m_pReturnScenario;                                        // 0x04A0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class AXpecScenarioInstance*                       m_pHostScenario;                                          // 0x04A8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              m_fTime;                                                  // 0x04B0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              m_fRewardPercentage;                                      // 0x04B4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              m_fCostPercentage;                                        // 0x04B8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0xAC];                                      // 0x04BC(0x00AC) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.XpecScenarioInstance");
		return ptr;
	}


	void SetEvent(const struct FName& EventName, class AXpecScenarioInstance* pFromScenario);
	void Save(int iActorIndex);
	void ReportError(class ABendPawn* pActor, const struct FName& ActionName, TEnumAsByte<EXpecScenarioExecuteResult> eError, const struct FXpecScenarioData& Data);
	void PauseScenarioUpdate(bool bShouldPause);
	void LogToCommandStack(struct FXpecScenarioActorInfo* actorInfo);
	bool IWeatherChanged(TEnumAsByte<EWeatherType> eOldWeather, TEnumAsByte<EWeatherType> eNewWeather);
	bool IUntrigger(const struct FName& EventName, class AActor* pSource);
	bool ITrigger(const struct FName& EventName, class AActor* pSource);
	bool ITimeZoneChanged(TEnumAsByte<EXpecTimeZone> eOldTimeZone, TEnumAsByte<EXpecTimeZone> eNewTimeZone);
	TEnumAsByte<EXpecUsePOIResult> IPreorder(class ABendPawn* pUser, class ABendPOISlot* pSlot);
	bool IOnReceiveAnimNotify(const struct FName& EventName, class AActor* pSource);
	bool IOnLeaveSlot(class ABendPawn* pUser, class ABendPOISlot* pSlot);
	bool IOnEnterSlot(class ABendPawn* pUser, class ABendPOISlot* pSlot);
	bool IOnDebugTriggerPOI();
	void Interrupt(class ABendPawn* pActor, TEnumAsByte<EXpecScenarioExecuteResult> eReason, bool bRecursive);
	bool IIsForceHighLOD(int iSN);
	bool IIsDebugMode();
	bool IIsAllowedToUse(class ABendPawn* pUser);
	bool IIsAllowedDummyToUse(TEnumAsByte<EXpecPOIUserType> eUserType, TEnumAsByte<EXpecPOIUserGender> eUserGender, const struct FName& UserPawnName);
	bool IInitialize(class AXpecZoneManager* pZoneManager, class AXpecVOManager* pVOManager, TEnumAsByte<EXpecTimeZone> eTimeZone, TEnumAsByte<EWeatherType> eWeather);
	class AXpecZoneManager* IGetZoneManager();
	TEnumAsByte<EXpecPOIUserType> IGetUserType();
	TEnumAsByte<EXpecPOIUserGender> IGetUserGender();
	class ABendPOISlot* IGetSlotForUser(class ABendPawn* pUser, bool bPreorder, float* fDistance);
	struct FName IGetScenarioName();
	struct FName IGetPOIName();
	float IGetDummySpawnPosition(const struct FName& Name, const struct FVector& cameraPosition, const struct FVector& cameraDirection, float fMinDistance, float fMaxDistance, struct FVector* Position, struct FRotator* Rotation);
	bool IGetDummyInfo(TEnumAsByte<EXpecPOIUserType> eUserType, TEnumAsByte<EXpecPOIUserGender> dummyGender, TEnumAsByte<EXpecVOClass> eUserVOClass, class ABendPOISlot* preOrderedSlot, class USkeletalMeshComponent* dummyMesh, struct FTransform* loopPosition, struct FName* scenarioName, int* commandIndex, struct FName* lowLODAnimGroup, float* fTransitionTime, TEnumAsByte<EUnaimedAnimMoveStyle>* m_eWeaponType);
	class ABendPOISlot* IGetBestSlotForUser(class ABendPawn* pUser, int* iBestSlotIndex, float* fDistance);
	class ABendPOISlot* IGetBestSlotForDummy(const struct FName& UserPawnName, int* iBestSlotIndex);
	bool ICanSpawnDummy(const struct FName& dummyPawnName);
	bool ICancelOrder(class ABendPawn* pUser);
	float ICalculatePriority(class ABendPawn* pUser, class ABendPOISlot** pBestSlot);
	bool IAddDedicatedUser(const struct FName& userName);
	float GetTimerRemainingTime(const struct FName& EventName);
	TEnumAsByte<EXpecScenarioExecuteResult> GetResult(int iActorIndex);
	class ABendPOISlot* GetActorSlot(int iActorIndex);
	void GetActorCommandStack(class ABendPawn* pPawn, struct FString* line);
	class ABendPawn* GetActor(int iActorIndex);
	void DebugPrintInfo(struct FString* line);
	void ClearEvent(const struct FName& EventName, class AXpecScenarioInstance* pFromScenario);
	bool BindReference(const struct FName& referenceName, class AActor* pReference);
	bool BindComponentReference(const struct FName& referenceName, class USceneComponent* pCompReference);
};


// Class BendGame.BendPOIDebugComponent
// 0x0000 (0x00D0 - 0x00D0)
class UBendPOIDebugComponent : public UActorComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendPOIDebugComponent");
		return ptr;
	}


	void Clear();
	void AddDrawTarget(class AActor* Actor, const struct FLinearColor& LineColor, unsigned char DepthPriorityGroup, float Thickness);
};


// Class BendGame.BendEventPOISlot
// 0x0000 (0x0478 - 0x0478)
class ABendEventPOISlot : public ABendPOISlot
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendEventPOISlot");
		return ptr;
	}

};


// Class BendGame.BendPOIAnimSlot
// 0x0488 (0x0900 - 0x0478)
class ABendPOIAnimSlot : public ABendPOISlot
{
public:
	unsigned char                                      bCanBeMeleeAttacked : 1;                                  // 0x0478(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bCanBeGrappled : 1;                                       // 0x0478(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bCanGrapple : 1;                                          // 0x0478(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bCanBeStealthKilled : 1;                                  // 0x0478(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bCanBePairKilled : 1;                                     // 0x0478(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bBlockHitReactions : 1;                                   // 0x0478(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bBlockDeathForceRagdoll : 1;                              // 0x0478(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bHoldLastFrameWhenChainingToNextAnim : 1;                 // 0x0478(0x0001) (Edit)
	unsigned char                                      bEnableHeadLook : 1;                                      // 0x0479(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x6];                                       // 0x047A(0x0006) MISSED OFFSET
	struct FName                                       AnimSlotName;                                             // 0x0480(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DefaultBlendIn;                                           // 0x0488(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DefaultBlendOut;                                          // 0x048C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DefaultBlendOutTriggerTime;                               // 0x0490(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DefaultPlayRate;                                          // 0x0494(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CancelAnimBlendOut;                                       // 0x0498(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x049C(0x0004) MISSED OFFSET
	struct FName                                       AnchorReferenceBoneName;                                  // 0x04A0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<struct FBendPOIAnimSet>                     AnimVariations;                                           // 0x04A8(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FBendPOIAnimSetTuning                       TuningValues;                                             // 0x04B8(0x0024)
	TEnumAsByte<EePOIAnimType>                         EnterAnimType;                                            // 0x04DC(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x04DD(0x0003) MISSED OFFSET
	struct FName                                       EnterGroupName;                                           // 0x04E0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<struct FBendAnimSequenceData>               EnterSequenceList;                                        // 0x04E8(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	bool                                               EnterAnchored;                                            // 0x04F8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               EnterAnchorAffectsTranslation;                            // 0x04F9(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               EnterGroundFixup;                                         // 0x04FA(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               EnterIgnoreCollision;                                     // 0x04FB(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EBendPerformActionCollisionMode>       EnterCollisionMode;                                       // 0x04FC(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               EnterForceHolster;                                        // 0x04FD(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x2];                                       // 0x04FE(0x0002) MISSED OFFSET
	int                                                EnterNumRetries;                                          // 0x0500(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               EnterNavToAnchorOffset;                                   // 0x0504(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EePOIAnimType>                         LoopAnimType;                                             // 0x0505(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x2];                                       // 0x0506(0x0002) MISSED OFFSET
	struct FName                                       LoopGroupName;                                            // 0x0508(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<struct FBendAnimSequenceData>               LoopSequenceList;                                         // 0x0510(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	bool                                               LoopAnchored;                                             // 0x0520(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               LoopAnchorAffectsTranslation;                             // 0x0521(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               LoopGroundFixup;                                          // 0x0522(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               LoopIgnoreCollision;                                      // 0x0523(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EBendPerformActionCollisionMode>       LoopCollisionMode;                                        // 0x0524(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               LoopForceHolster;                                         // 0x0525(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x2];                                       // 0x0526(0x0002) MISSED OFFSET
	int                                                LoopNumRetries;                                           // 0x0528(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               LoopToNextAnim;                                           // 0x052C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x3];                                       // 0x052D(0x0003) MISSED OFFSET
	int                                                LoopNumMax;                                               // 0x0530(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EePOIAnimType>                         ExitAnimType;                                             // 0x0534(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0x3];                                       // 0x0535(0x0003) MISSED OFFSET
	struct FName                                       ExitGroupName;                                            // 0x0538(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<struct FBendAnimSequenceData>               ExitSequenceList;                                         // 0x0540(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	bool                                               ExitAnchored;                                             // 0x0550(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               ExitAnchorAffectsTranslation;                             // 0x0551(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               ExitGroundFixup;                                          // 0x0552(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               ExitIgnoreCollision;                                      // 0x0553(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EBendPerformActionCollisionMode>       ExitCollisionMode;                                        // 0x0554(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               ExitForceHolster;                                         // 0x0555(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData08[0x2];                                       // 0x0556(0x0002) MISSED OFFSET
	int                                                ExitNumRetries;                                           // 0x0558(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               SkipExitIfThreatened;                                     // 0x055C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EePOIAnimType>                         FastExitAnimType;                                         // 0x055D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData09[0x2];                                       // 0x055E(0x0002) MISSED OFFSET
	struct FName                                       FastExitGroupName;                                        // 0x0560(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<struct FBendAnimSequenceData>               FastExitSequenceList;                                     // 0x0568(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	bool                                               FastExitAnchored;                                         // 0x0578(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               FastExitAnchorAffectsTranslation;                         // 0x0579(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               FastExitGroundFixup;                                      // 0x057A(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               FastExitIgnoreCollision;                                  // 0x057B(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EBendPerformActionCollisionMode>       FastExitCollisionMode;                                    // 0x057C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               FastExitForceHolster;                                     // 0x057D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData10[0x2];                                       // 0x057E(0x0002) MISSED OFFSET
	struct FScriptMulticastDelegate                    FirstAnimStarted;                                         // 0x0580(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    FirstAnimComplete;                                        // 0x0590(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    FirstAnimFailed;                                          // 0x05A0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    EnterAnimStarted;                                         // 0x05B0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    EnterAnimComplete;                                        // 0x05C0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    EnterAnimFailed;                                          // 0x05D0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    LoopAnimStarted;                                          // 0x05E0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    LoopAnimComplete;                                         // 0x05F0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    LoopAnimFailed;                                           // 0x0600(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ExitAnimStarted;                                          // 0x0610(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ExitAnimComplete;                                         // 0x0620(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ExitAnimFailed;                                           // 0x0630(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData11[0x2C0];                                     // 0x0640(0x02C0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendPOIAnimSlot");
		return ptr;
	}


	void OnLoopFail(TEnumAsByte<EPeformActionFailedReason> eReason);
	void OnLoopComplete();
	void OnLoopActionLooping(float TimeRemaining);
	void OnLoopActionFail(TEnumAsByte<EPeformActionFailedReason> eReason);
	void OnLoopActionComplete();
	void OnExitFail(TEnumAsByte<EPeformActionFailedReason> eReason);
	void OnExitComplete();
	void OnExitActionFail(TEnumAsByte<EPeformActionFailedReason> eReason);
	void OnExitActionComplete();
	void OnEnterFail(TEnumAsByte<EPeformActionFailedReason> eReason);
	void OnEnterComplete();
	void OnEnterActionFail(TEnumAsByte<EPeformActionFailedReason> eReason);
	void OnEnterActionComplete();
};


// Class BendGame.BendPOIGoreSlot
// 0x0018 (0x0918 - 0x0900)
class ABendPOIGoreSlot : public ABendPOIAnimSlot
{
public:
	float                                              OuterThreatDist;                                          // 0x0900(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              InnerThreatDist;                                          // 0x0904(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0908(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendPOIGoreSlot");
		return ptr;
	}


	void OnUserTargetChanged(class ABendAIController* OwnerController, class ABendPawn* PreviousTarget, class ABendPawn* NewTarget);
	void OnUserTakeDamage(float Damage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
};


// Class BendGame.BendPrecipitationManager
// 0x0458 (0x07A0 - 0x0348)
class ABendPrecipitationManager : public AActor
{
public:
	float                                              WetnessRate;                                              // 0x0348(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              WaterAccumulationRate;                                    // 0x034C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SnowAccumulationRate;                                     // 0x0350(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              WetnessDryingRate;                                        // 0x0354(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              WaterDryingRate;                                          // 0x0358(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SnowMeltingRate;                                          // 0x035C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FogWetnessRate;                                           // 0x0360(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              EmbersIntensity;                                          // 0x0364(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DustMoteIntensity;                                        // 0x0368(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CharacterSnowHalflife;                                    // 0x036C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CharacterWetnessHalflife;                                 // 0x0370(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CharacterSnowWetnessAccumulation;                         // 0x0374(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CharacterSnowRadialHalflife;                              // 0x0378(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CharacterWetnessRadialHalflife;                           // 0x037C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CharacterWaterLevelFastReductionRate;                     // 0x0380(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CharacterWaterLevelSlowReductionRate;                     // 0x0384(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CharacterWaterLevelRadialReduction;                       // 0x0388(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CharacterMudMovementAccumulationRateInWet;                // 0x038C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CharacterMudMovementAccumulationRateInPuddles;            // 0x0390(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CharacterMudDissipationRate;                              // 0x0394(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CharacterSlushMovementAccumulationRateInSnow;             // 0x0398(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CharacterSlushDissipationRate;                            // 0x039C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bOverride_GroundSettings : 1;                             // 0x03A0(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x03A1(0x0003) MISSED OFFSET
	float                                              WetnessOverride;                                          // 0x03A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              WaterAccumulationOverride;                                // 0x03A8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SnowAccumulationOverride;                                 // 0x03AC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<class UObject*>                             DynamicSystemReferences;                                  // 0x03B0(0x0010) (ZeroConstructor, Transient)
	TArray<class UBendOpenWorldCloudTypeDescription*>  CloudTypes;                                               // 0x03C0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<struct FGuid>                               CloudStates_Keys;                                         // 0x03D0(0x0010) (ZeroConstructor, DuplicateTransient, SaveGame)
	TArray<struct FBendOpenWorldCloudTypeState>        CloudStates_Values;                                       // 0x03E0(0x0010) (ZeroConstructor, DuplicateTransient, SaveGame)
	unsigned char                                      UnknownData01[0x10];                                      // 0x03F0(0x0010) MISSED OFFSET
	float                                              GlobalWindSimulationSpeedConstant;                        // 0x0400(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              WindSpeed;                                                // 0x0404(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               SampleWeatherDataDynamically;                             // 0x0408(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bResetWeatherAccumulation;                                // 0x0409(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bFirstRunInGame;                                          // 0x040A(0x0001) (ZeroConstructor, DuplicateTransient, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData02[0x1];                                       // 0x040B(0x0001) MISSED OFFSET
	float                                              BlueprintAdvanceToTime;                                   // 0x040C(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              BlueprintAdvanceTime;                                     // 0x0410(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               ResumeFromSaveGame;                                       // 0x0414(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0415(0x0003) MISSED OFFSET
	class UTexture2D*                                  RegionTexture;                                            // 0x0418(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector4                                    RegionTextureBounds;                                      // 0x0420(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              InterpolatedRainfallIntensity;                            // 0x0430(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	float                                              InterpolatedSnowfallIntensity;                            // 0x0434(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	float                                              InterpolatedGroundFogIntensity;                           // 0x0438(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	float                                              InterpolatedColumnFogIntensity;                           // 0x043C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	float                                              InterpolatedGroundWetness;                                // 0x0440(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	float                                              InterpolatedGroundPuddleCover;                            // 0x0444(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	float                                              InterpolatedGroundSnow;                                   // 0x0448(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	float                                              InterpolatedCloudCover;                                   // 0x044C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	float                                              InterpolatedRegionTextureR;                               // 0x0450(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	float                                              InterpolatedRegionTextureG;                               // 0x0454(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	float                                              InterpolatedRegionTextureB;                               // 0x0458(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	float                                              InterpolatedRegionTextureA;                               // 0x045C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	float                                              InterpolatedRainfallIntensity_BlendRate;                  // 0x0460(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              InterpolatedSnowfallIntensity_BlendRate;                  // 0x0464(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              InterpolatedGroundFogIntensity_BlendRate;                 // 0x0468(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              InterpolatedColumnFogIntensity_BlendRate;                 // 0x046C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              InterpolatedGroundWetness_BlendRate;                      // 0x0470(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              InterpolatedGroundPuddleCover_BlendRate;                  // 0x0474(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              InterpolatedGroundSnow_BlendRate;                         // 0x0478(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              InterpolatedCloudCover_BlendRate;                         // 0x047C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              InterpolatedRegionTextureR_BlendRate;                     // 0x0480(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              InterpolatedRegionTextureG_BlendRate;                     // 0x0484(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              InterpolatedRegionTextureB_BlendRate;                     // 0x0488(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              InterpolatedRegionTextureA_BlendRate;                     // 0x048C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              SlowTickInterval;                                         // 0x0490(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              OffsetParticleFG;                                         // 0x0494(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              OffsetParticleMG;                                         // 0x0498(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              OffsetParticleBG;                                         // 0x049C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              OffsetParticleScreen;                                     // 0x04A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Wetness;                                                  // 0x04A4(0x0004) (Edit, ZeroConstructor, EditConst, SaveGame, IsPlainOldData)
	float                                              WaterAccumulation;                                        // 0x04A8(0x0004) (Edit, ZeroConstructor, EditConst, SaveGame, IsPlainOldData)
	float                                              SnowAccumulation;                                         // 0x04AC(0x0004) (Edit, ZeroConstructor, EditConst, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData04[0x188];                                     // 0x04B0(0x0188) MISSED OFFSET
	class UCurveFloat*                                 BaseTemperature;                                          // 0x0638(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 DayLevel;                                                 // 0x0640(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CameraVelocityDampingFactor;                              // 0x0648(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     PlayerPositionPrevious;                                   // 0x064C(0x000C) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              RainIntensity;                                            // 0x0658(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SnowIntensity;                                            // 0x065C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     PlayerVelocity;                                           // 0x0660(0x000C) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     LevelWind;                                                // 0x066C(0x000C) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData05[0x8];                                       // 0x0678(0x0008) MISSED OFFSET
	struct FTransform                                  ParticleFG;                                               // 0x0680(0x0030) (Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData)
	struct FTransform                                  ParticleMG;                                               // 0x06B0(0x0030) (Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData)
	struct FTransform                                  ParticleBG;                                               // 0x06E0(0x0030) (Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData)
	int                                                Stage;                                                    // 0x0710(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     CameraForward;                                            // 0x0714(0x000C) (ZeroConstructor, Transient, IsPlainOldData)
	struct FTransform                                  CameraTransform;                                          // 0x0720(0x0030) (Transient, IsPlainOldData)
	struct FTransform                                  ParticleScreen;                                           // 0x0750(0x0030) (Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData)
	float                                              secondsPassed;                                            // 0x0780(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              soundTemperature;                                         // 0x0784(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              soundDayLevel;                                            // 0x0788(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EWeatherType>                          oldWeatherType;                                           // 0x078C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               weatherChanged;                                           // 0x078D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData06[0x2];                                       // 0x078E(0x0002) MISSED OFFSET
	struct FScriptMulticastDelegate                    weatherHasChanged;                                        // 0x0790(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendPrecipitationManager");
		return ptr;
	}


	void UpdateParticlePrecipitation(class UParticleSystemComponent* ParticleComponent, const struct FTransform& Transform, const struct FVector& Wind, float intensity);
	void UpdateComponentActivation(class USceneComponent* Component, bool ShouldBeActive);
	void SlowTick(float DeltaSeconds);
	void SetWetness(float InWetness);
	void SetWaterAccumulation(float Accumulation);
	void SetSnowAccumulation(float Accumulation);
	void SetPause(bool InPause);
	void SetGroundSetting(float Wetness, float WaterAccumulation, float SnowAccumulation);
	void SetCloudTime(float inMinutes);
	void ResetWeatherAccumulationAndParticles();
	void ResetWeatherAccumulation();
	void ReceiveBendEditorTick(float DeltaSeconds);
	void PerFrameCameraUpdate(float DeltaSeconds, bool bDebug);
	float GetWetness();
	float GetWaterAccumulation();
	float GetSnowAccumulation();
	class ABendPrecipitationManager* STATIC_GetPrecipitationManagerFromContext(class UObject* WorldContext);
	class ABendPrecipitationManager* STATIC_GetPrecipitationManager();
	void AdvanceCloudTimeMinutes(float inMinutes);
};


// Class BendGame.BendPrerequisiteAnimCategoryData
// 0x0010 (0x0038 - 0x0028)
class UBendPrerequisiteAnimCategoryData : public UDataAsset
{
public:
	TArray<TEnumAsByte<EBendAnimCategory>>             PrerequsiteAnimCategories;                                // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendPrerequisiteAnimCategoryData");
		return ptr;
	}

};


// Class BendGame.BendPRI
// 0x0018 (0x03E8 - 0x03D0)
class ABendPRI : public APlayerState
{
public:
	bool                                               bHasStartedPlaying;                                       // 0x03D0(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x03D1(0x0003) MISSED OFFSET
	int                                                PersistentID;                                             // 0x03D4(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	int                                                Deaths;                                                   // 0x03D8(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	int                                                MonsterKills;                                             // 0x03DC(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x03E0(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendPRI");
		return ptr;
	}


	void SetCurrentPawn(class ABendPlayerPawn* PlayerPawn);
};


// Class BendGame.BendProjectileMovementComponent
// 0x0028 (0x01B0 - 0x0188)
class UBendProjectileMovementComponent : public UProjectileMovementComponent
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x0188(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendProjectileMovementComponent");
		return ptr;
	}

};


// Class BendGame.BendProjectile
// 0x1E98 (0x21E0 - 0x0348)
class ABendProjectile : public AActor
{
public:
	unsigned char                                      UnknownData00[0x1170];                                    // 0x0348(0x1170) MISSED OFFSET
	struct FProjectileData                             ProjectileConfig;                                         // 0x14B8(0x0270) (Edit, DisableEditOnInstance)
	TArray<class ABendPawn*>                           PawnsHit;                                                 // 0x1728(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	unsigned char                                      UnknownData01[0x28];                                      // 0x1738(0x0028) MISSED OFFSET
	struct FWeaponDataOverride                         WeaponConfigOverride;                                     // 0x1760(0x08E0) (Edit, DisableEditOnInstance)
	float                                              LifespanAtRest;                                           // 0x2040(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               UsesTracer;                                               // 0x2044(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x2045(0x0003) MISSED OFFSET
	float                                              TracerRadiusScale;                                        // 0x2048(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<EInventoryAmmoID>                      AmmoID;                                                   // 0x204C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x204D(0x0003) MISSED OFFSET
	class UParticleSystemComponent*                    ProjectilePSC;                                            // 0x2050(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UParticleSystemComponent*                    ProjectileSmokePSC;                                       // 0x2058(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UBendProjectileCollisionComponent*           CollisionComp;                                            // 0x2060(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	float                                              ImpactSoundLoudness;                                      // 0x2068(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<EBendSoundEventType>                   ImpactSoundType;                                          // 0x206C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x3];                                       // 0x206D(0x0003) MISSED OFFSET
	class UBendWidgetComponent*                        ExplosionWidget;                                          // 0x2070(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	float                                              ThrowableIgnoreWaterDepth;                                // 0x2078(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData05[0x2C];                                      // 0x207C(0x002C) MISSED OFFSET
	class UBendProjectileMovementComponent*            MovementComp;                                             // 0x20A8(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	TWeakObjectPtr<class AController>                  MyController;                                             // 0x20B0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bExploded;                                                // 0x20B8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData06[0x10F];                                     // 0x20B9(0x010F) MISSED OFFSET
	float                                              IconTriggerRadiusOverride;                                // 0x21C8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              IconTriggerRadiusMultiplier;                              // 0x21CC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              RockHighlightExtraDuration;                               // 0x21D0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData07[0x4];                                       // 0x21D4(0x0004) MISSED OFFSET
	class UBendSphereComponent*                        BendSphereComp;                                           // 0x21D8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendProjectile");
		return ptr;
	}


	bool WasFiredWhileInScopeMode();
	bool WasFiredWhileInFocusMode();
	void OnTriggerEndOverlap();
	void OnTriggerBeginOverlap();
	void OnImpact(const struct FHitResult& HitResult);
	void OnExploded();
	void OnEnteredWater();
	void OnBounce(const struct FHitResult& HitResult, const struct FVector& ImpactVelocity);
	bool IsProjectileInEncampment();
	class ABendWeapon* GetWeaponThatFiredIt();
	float GetMinExplosionRadius();
	float GetMaxExplosionRadius();
	float GetImpactSoundLoudness(TEnumAsByte<EPhysicalSurface> SurfaceType);
	class UClass* GetExplosionDamageType();
	class UClass* GetDamageType();
	int GetCurrentPenetrationValue();
	bool GetCanTriggerBearTraps();
	bool GetCanIgniteNests();
	bool GetCanExplodeExplosives();
	void ForceImpact(class AActor* impactedActor);
	void ForceExplode();
	void ForceChangeProjectilePenetrationValue(int NewValue);
	void Explode(const struct FHitResult& Impact);
	void DisableProjectile(bool Disable);
	void CheckDLCRingEffectsOnProjectile();
};


// Class BendGame.BendProjectileCollisionComponent
// 0x0000 (0x0600 - 0x0600)
class UBendProjectileCollisionComponent : public USphereComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendProjectileCollisionComponent");
		return ptr;
	}

};


// Class BendGame.BendPropLightRigBase
// 0x01F8 (0x0540 - 0x0348)
class ABendPropLightRigBase : public ABendLightRigBase
{
public:
	TEnumAsByte<ETypeLightIntensityPreset>             LightIntensityPreset;                                     // 0x0348(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ETypePropRigColorOffset>               PropRigColorOffset;                                       // 0x0349(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ETypePropFlickering>                   FlickerStyle;                                             // 0x034A(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ETypeTimeOfDay>                        TimeOfDaySetting;                                         // 0x034B(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BaseLightIntensity;                                       // 0x034C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FlickerLightIntensity;                                    // 0x0350(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              VoxelBaseLightIntensity;                                  // 0x0354(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              VoxelFlickerLightIntensity;                               // 0x0358(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FLinearColor                                LightColor;                                               // 0x035C(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              LightColorTemperature;                                    // 0x036C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FLinearColor                                LightCardColor;                                           // 0x0370(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              LightCardIntensity;                                       // 0x0380(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                VolumeConeColor;                                          // 0x0384(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              VolumeConeIntensity;                                      // 0x0394(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              VolumetricConeNearStart;                                  // 0x0398(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               AlwaysOnInEditor;                                         // 0x039C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x039D(0x0003) MISSED OFFSET
	int                                                RandomTurnOnPercent;                                      // 0x03A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               GenRandomLightOnOff;                                      // 0x03A4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x03A5(0x0003) MISSED OFFSET
	int                                                RandomIntensityVariancePercent;                           // 0x03A8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               GenRandomLightIntensity;                                  // 0x03AC(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               ResetLightIntensityOffsets;                               // 0x03AD(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x2];                                       // 0x03AE(0x0002) MISSED OFFSET
	float                                              RandomIntensityOffset;                                    // 0x03B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              RandomFlickeringIntensityOffset;                          // 0x03B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              RandomTemperatureOffset;                                  // 0x03B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              VoxelRandomIntensityOffset;                               // 0x03BC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              LightCardRandomIntensityOffset;                           // 0x03C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              VolumeConeRandomIntensityOffset;                          // 0x03C4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              RandomLightPostGlowIntensityOffset;                       // 0x03C8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                EmissiveColor;                                            // 0x03CC(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               UseLightTemperatureForEmissive;                           // 0x03DC(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x03DD(0x0003) MISSED OFFSET
	float                                              emissiveMult;                                             // 0x03E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              EmissivePower;                                            // 0x03E4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              EmissiveMin;                                              // 0x03E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                LightPostGlowColor;                                       // 0x03EC(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              LightPostGlowMult;                                        // 0x03FC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              LightPostCameraDirectionOffset;                           // 0x0400(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x0404(0x0004) MISSED OFFSET
	class USpotLightComponent*                         PropSpot;                                                 // 0x0408(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class USceneComponent*                             LightCardSceneComp;                                       // 0x0410(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class USceneComponent*                             VolumeConeSceneComp;                                      // 0x0418(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class USceneComponent*                             LightPostGlowSceneComp;                                   // 0x0420(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	bool                                               IsElectricRig;                                            // 0x0428(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               PowerEnabled;                                             // 0x0429(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x2];                                       // 0x042A(0x0002) MISSED OFFSET
	float                                              TimeOfDayAdjustment;                                      // 0x042C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               CinematicOverrideOff;                                     // 0x0430(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x7];                                       // 0x0431(0x0007) MISSED OFFSET
	TArray<struct FCinCinematicPropOverride>           TurnOffDuringTheseCinematics;                             // 0x0438(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	unsigned char                                      UnknownData07[0xF8];                                      // 0x0448(0x00F8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendPropLightRigBase");
		return ptr;
	}


	void UpdateTimeOfDay(float NewTimeOfDayAdjustment);
	void UpdateLightList();
	void UpdateLightCardLocation(float Distance, class UStaticMeshComponent* lightCard, class USpotLightComponent* SpotLight);
	void UpdateFlickering(float CurveValue);
	void TurnOnPostCinematicEvent(const struct FName& CinematicName);
	void TurnOnLights();
	void TurnOffPreCinematicEvent(const struct FName& CinematicName);
	void TurnOffLights();
	bool IsFlickeringLightRig();
	float GetVoxelLightIntensity();
	float GetVoxelFlickerIntensity();
	float GetVolumeConeIntensity();
	float GetLightTemperature();
	float GetLightPostGlowIntensity();
	float GetLightIntensity();
	struct FLinearColor GetLightCardColor();
	float GetFlickerIntensity();
	struct FLinearColor GetEmissive();
	void CheckWorldPowerSettings();
	void CheckForUtilitiesUpdate();
};


// Class BendGame.BendPropRigTicker
// 0x0090 (0x00B8 - 0x0028)
class UBendPropRigTicker : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0028(0x0010) MISSED OFFSET
	class UCurveFloat*                                 LowFreqFlickerCurve;                                      // 0x0038(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UCurveFloat*                                 HighFreqFlickerCurve;                                     // 0x0040(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UCurveFloat*                                 SpookyFreqFlickerCurve;                                   // 0x0048(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UCurveFloat*                                 AWIFreqFlickerCurve;                                      // 0x0050(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UCurveFloat*                                 CustomFreqFlickerCurve;                                   // 0x0058(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TimePassed;                                               // 0x0060(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0064(0x0004) MISSED OFFSET
	TArray<TWeakObjectPtr<class ABendPropLightRigBase>> FlickeringPropLightRigs;                                  // 0x0068(0x0010) (ZeroConstructor, Transient)
	TArray<TWeakObjectPtr<class ABendPropLightRigBase>> PropLightRigs;                                            // 0x0078(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData02[0x30];                                      // 0x0088(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendPropRigTicker");
		return ptr;
	}


	void UpdateTimeOfDayLights(int StartIndex, int NumRigsUpdate);
	void UpdateFlickeringLights(float DeltaTime, int StartIndex, int NumRigsUpdate);
	void UpdateAllRigsTOD();
	void SetForceLightsOn(bool newStatus);
	void RemoveFlickeringLightReference(class ABendPropLightRigBase* PropRigRef);
	void OnHourChanged(int Hour);
	float GetCurrentTODAdjustment();
	class UBendPropRigTicker* STATIC_GetBendPropRigTicker();
	void CheckWorldState();
	void AddLightRigReference(class ABendPropLightRigBase* PropRigRef);
};


// Class BendGame.BendRegionActor
// 0x0060 (0x03E8 - 0x0388)
class ABendRegionActor : public AVolume
{
public:
	struct FText                                       RegionName;                                               // 0x0388(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly)
	class UMiniMapLocationComponent*                   MinimapComponent;                                         // 0x03A0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	TArray<class UBendEncampmentData*>                 Encampments;                                              // 0x03A8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<class UBendNestingZone*>                    Nests;                                                    // 0x03B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<class UBendBunkerData*>                     Bunkers;                                                  // 0x03C8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<class UBendNeroCheckpointData*>             NeroCheckpoints;                                          // 0x03D8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendRegionActor");
		return ptr;
	}


	float GetCompletionPercentage();
	void ActorLeavingVolume(class AActor* Other);
	void ActorEnteredVolume(class AActor* Other);
};


// Class BendGame.BendVehicleRespawnLoc
// 0x0000 (0x0348 - 0x0348)
class ABendVehicleRespawnLoc : public AActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendVehicleRespawnLoc");
		return ptr;
	}

};


// Class BendGame.BendRespawnLoc
// 0x0020 (0x0368 - 0x0348)
class ABendRespawnLoc : public AActor
{
public:
	bool                                               bOverrideSpawnRadii;                                      // 0x0348(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0349(0x0003) MISSED OFFSET
	float                                              ActivateTriggerRadius;                                    // 0x034C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              RespawnSafetyRadius;                                      // 0x0350(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bIsWaterRespawnLoc;                                       // 0x0354(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0355(0x0003) MISSED OFFSET
	class ABendVehicleRespawnLoc*                      VehicleRespawnLoc;                                        // 0x0358(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	class UBendSphereComponent*                        BendSphereComp;                                           // 0x0360(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendRespawnLoc");
		return ptr;
	}


	void OnTriggerEndOverlap();
	bool HasVehicleRespawnLoc();
	class ABendVehicleRespawnLoc* GetVehicleRespawnLoc();
};


// Class BendGame.BendRespawnLoc2
// 0x0018 (0x0360 - 0x0348)
class ABendRespawnLoc2 : public AActor
{
public:
	struct FName                                       RespawnPointName;                                         // 0x0348(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ERegions>                              RespawnRegion;                                            // 0x0350(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsEnabled;                                               // 0x0351(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x0352(0x0006) MISSED OFFSET
	class ABendVehicleRespawnLoc*                      VehicleRespawnLoc;                                        // 0x0358(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendRespawnLoc2");
		return ptr;
	}


	void SetLocActive(bool bActive);
	void OnEnterLocation();
	bool HasVehicleRespawnLoc();
};


// Class BendGame.BendRideVehicleComponent
// 0x0170 (0x0240 - 0x00D0)
class UBendRideVehicleComponent : public UActorComponent
{
public:
	TWeakObjectPtr<class AVehiclePawn>                 VehiclePawn;                                              // 0x00D0(0x0008) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x00D8(0x0008) MISSED OFFSET
	struct FRuntimeFloatCurve                          DamageVsCrashSpeed;                                       // 0x00E0(0x0080) (Edit)
	struct FScriptMulticastDelegate                    OnRiderFellOffVehicle;                                    // 0x0160(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0170(0x0004) MISSED OFFSET
	float                                              ExitVehicleSideProbeRadius;                               // 0x0174(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ExitVehicleSideProbeHeight;                               // 0x0178(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ExitVehicleSideProbeDistance;                             // 0x017C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bDrawDebugExitVehicleProbe;                               // 0x0180(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0181(0x0003) MISSED OFFSET
	struct FMotoRamFalloffInfo                         RamFalloffSettings;                                       // 0x0184(0x0010) (Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                               bConsumeFuelIfDriver;                                     // 0x0194(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0xAB];                                      // 0x0195(0x00AB) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendRideVehicleComponent");
		return ptr;
	}


	bool UnReserveSeat();
	bool SwitchSeat(const struct FName& InSeatName);
	bool ShouldFallOffVehicle();
	bool ShouldConsumeFuel();
	void SetRamFalloffSettings(const struct FMotoRamFalloffInfo& Settings);
	void SetFallOffImpulseThreshold(float impulseThreshold);
	void SetFallOffAngleThreshold(float angleThreshold);
	void SetEarlyExitVehiclePickup(bool bEarlyExit);
	void SetDrivingSkillLevel(int DrivingSkillLevel);
	void SetConsumeFuelIfDriver(bool bConsumeFuel);
	void SetCanFallOffVehicle(bool bEnable);
	void SetCanExitVehicle(bool bCanExit);
	bool ReserveSeat(class AVehiclePawn* InVehiclePawn, const struct FName& InSeatName, bool bSetUpEntryAnchor);
	void OnRep_VehiclePawn();
	void OnFinishedExitingSeat_Deprecated();
	void OnFinishedEnteringSeat_Deprecated();
	void OnAnimNotifyVehiclePickupEarlyExit(bool bEarlyExit);
	bool IsOccupyingOrTryingToOccupyDriverSeat();
	bool IsInVehicle();
	bool IsDriver();
	float GetVisualSteeringNeg1To1();
	struct FTransform GetVehicleSocketTransform(const struct FName& InSocketName);
	class USkeletalMeshComponent* GetVehicleSkeletalMeshComponent();
	class UBendVehicleSeatsComponent* GetVehicleSeatsComponent();
	class UBendMovementComp_VehicleNoDrive* GetVehicleMovementComponent();
	float GetVehicleForwardSpeed();
	int GetTargetGear();
	float GetSteeringNeg1To1();
	TEnumAsByte<EVehicleRiderState> GetRiderState();
	class AVehiclePawn* GetReservedVehicle();
	struct FMotoRamFalloffInfo GetRamFalloffSettings();
	float GetLeanAngleNeg1To1();
	float GetLeanAngle();
	int GetDrivingSkillLevel(TEnumAsByte<EBendVehicleRoadSurfaceType> RoadSurfaceType);
	int GetCurrentGear();
	bool GetCanFallOffVehicle();
	bool GetCanExitVehicle();
	bool ExitVehicleWithAnim_Deprecated();
	bool EnterVehicleWithAnim_Deprecated(class AVehiclePawn* VehiclePawn, const struct FName& SeatName);
};


// Class BendGame.BendPlayerRideVehicleComponent
// 0x0010 (0x0250 - 0x0240)
class UBendPlayerRideVehicleComponent : public UBendRideVehicleComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0240(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendPlayerRideVehicleComponent");
		return ptr;
	}

};


// Class BendGame.BendRoadEdgeRVO
// 0x0038 (0x0380 - 0x0348)
class ABendRoadEdgeRVO : public AActor
{
public:
	float                                              NumCylinders;                                             // 0x0348(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CylinderRadius;                                           // 0x034C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CylinderHeight;                                           // 0x0350(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              OffsetFromRoadEdge;                                       // 0x0354(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SpaceBetweenCylinders;                                    // 0x0358(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FirstAheadDistance;                                       // 0x035C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AvoidanceConsiderationRadius;                             // 0x0360(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1C];                                      // 0x0364(0x001C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendRoadEdgeRVO");
		return ptr;
	}

};


// Class BendGame.BendRoadRenderingComponent
// 0x0010 (0x05E0 - 0x05D0)
class UBendRoadRenderingComponent : public UPrimitiveComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x05D0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendRoadRenderingComponent");
		return ptr;
	}

};


// Class BendGame.BendRoadSplineManager
// 0x0028 (0x0370 - 0x0348)
class ABendRoadSplineManager : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0348(0x0008) MISSED OFFSET
	TArray<class UClass*>                              mSplineBlockersClasses;                                   // 0x0350(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<class ABendSplineBlocker*>                  mSplineBlockers;                                          // 0x0360(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendRoadSplineManager");
		return ptr;
	}


	void UpdateAStarBlockStatus();
	class ABendSplineBlocker* GetBendSplineBlocker(const struct FString& IDName);
	class ABendRoadSplineManager* STATIC_GetBendRoadSplineManager();
};


// Class BendGame.BendSavePlayerProfile
// 0x0238 (0x02F0 - 0x00B8)
class UBendSavePlayerProfile : public USaveGame
{
public:
	struct FScriptMulticastDelegate                    OnProfileEntryChanged;                                    // 0x00B8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	int                                                Version;                                                  // 0x00C8(0x0004) (ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00CC(0x0004) MISSED OFFSET
	struct FDateTime                                   SaveDateTime;                                             // 0x00D0(0x0008) (ZeroConstructor, SaveGame)
	unsigned char                                      UnknownData01[0x8];                                       // 0x00D8(0x0008) MISSED OFFSET
	struct FPlayerSaveProfileCategory                  Audio;                                                    // 0x00E0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FPlayerSaveProfileCategory                  Controller;                                               // 0x00F0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FPlayerSaveProfileCategory                  Display;                                                  // 0x0100(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FPlayerSaveProfileCategory                  Game;                                                     // 0x0110(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FPlayerSaveProfileCategory                  Language;                                                 // 0x0120(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FPlayerSaveProfileCategory                  Menu;                                                     // 0x0130(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly)
	bool                                               HasPlayedIntroductionCinematic;                           // 0x0140(0x0001) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	bool                                               Debug_UXTestingBuildActive;                               // 0x0141(0x0001) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	bool                                               HasBeatenGameOnHardMode;                                  // 0x0142(0x0001) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData02[0x5];                                       // 0x0143(0x0005) MISSED OFFSET
	TArray<struct FName>                               LoadingTips;                                              // 0x0148(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame)
	TArray<struct FName>                               DLCLoadingTips;                                           // 0x0158(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame)
	TEnumAsByte<ERegions>                              PlayerRegion;                                             // 0x0168(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData03[0x7];                                       // 0x0169(0x0007) MISSED OFFSET
	TArray<struct FBendPhotoModePostPreset>            PhotoModePresets;                                         // 0x0170(0x0010) (Edit, BlueprintVisible, ZeroConstructor, SaveGame)
	TArray<struct FAudioFormatDynamicRangeDef>         FormatDynamicRanges;                                      // 0x0180(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FSavePlayerProfileVehicleDetails            VehicleDetails;                                           // 0x0190(0x0020) (SaveGame)
	struct FSavePlayerProfileLastBikeLoadout           LastBikeLoadout;                                          // 0x01B0(0x0050) (SaveGame)
	struct FDLCSaveData                                DLCSaveData;                                              // 0x0200(0x00D0) (SaveGame)
	bool                                               bHandledFirstBootDisplay;                                 // 0x02D0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, EditConst, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData04[0x7];                                       // 0x02D1(0x0007) MISSED OFFSET
	TArray<struct FPlayerSerializeProfileEntry>        ModifiedEntries;                                          // 0x02D8(0x0010) (ZeroConstructor, SaveGame)
	class UBendGameplayDatabase*                       ProfileDatabase;                                          // 0x02E8(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendSavePlayerProfile");
		return ptr;
	}


	bool StepProfileMenuEntry(int Direction, struct FPlayerSaveProfileMenuEntry* Entry);
	bool SetProfileMenuEntry(TEnumAsByte<EPlayerSaveProfileType> Type, struct FPlayerSaveProfileMenuEntry* OutEntry);
	void SetDirty();
	void SetDifficulty(TEnumAsByte<EGameDifficulty> Difficulty);
	void SetBeatenGameOnHardMode();
	bool SaveProfile();
	void RequestProfileSave();
	void RemoveTipFromQueue(const struct FName& LoadingTipRowName);
	void RemoveDLCTipFromQueue(const struct FName& LoadingTipRowName);
	bool IsValid();
	bool IsControllerVibrationEnabled();
	struct FPlayerSaveProfileEntry GetProfileEntryBP(TEnumAsByte<EPlayerSaveProfileType> Type);
	int GetProfileEntryAsInt(TEnumAsByte<EPlayerSaveProfileType> Type);
	float GetProfileEntryAsFloat(TEnumAsByte<EPlayerSaveProfileType> Type);
	bool GetProfileEntryAsBool(TEnumAsByte<EPlayerSaveProfileType> Type);
	class UBendGameplayDatabase* GetProfileDatabase();
	class UBendSavePlayerProfile* STATIC_GetPlayerSaveProfile();
	void GetLastBikeTheme(struct FGameplayTag* Paint, struct FGameplayTag* Body, struct FGameplayTag* Tank);
	TArray<struct FGameplayTag> GetLastBikeParts();
	TEnumAsByte<EGameDifficulty> GetDifficulty();
	void ExecuteProfileSave();
	void ClearAllTips(const struct FName& LoadingTipRowName);
	void ClearAllDLCTips(const struct FName& LoadingTipRowName);
	bool ApplyProfileMenuEntryDefaults(struct FPlayerSaveProfileMenuEntry* Entry);
	bool ApplyProfileMenuEntry(const struct FPlayerSaveProfileMenuEntry& Entry);
	void ApplyProfile(TEnumAsByte<EProfileOption> Type);
	void ApplyControllerProfile(class APlayerController* PlayerController);
	void AddTipToQueue(const struct FName& LoadingTipRowName);
	void AddDLCTipToQueue(const struct FName& LoadingTipRowName);
};


// Class BendGame.BendScriptedEncounter
// 0x0020 (0x0378 - 0x0358)
class ABendScriptedEncounter : public ALevelScriptActor
{
public:
	class UBendDynamicConversationGroup*               DynamicConversationGroup;                                 // 0x0358(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x18];                                      // 0x0360(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendScriptedEncounter");
		return ptr;
	}


	void TerminateDynamicConversationGroup();
	void StartEncounter();
	void StartDynamicConversationGroup();
	void SetNPCVisibility(class UBendScriptedEncounterUserController* UserController, bool bNewVisibility);
	void SetExtractionGroup(class UBendExtractionGroup* ExtractionGroup);
	void SetAllNPCsVisibility(bool bNewVisibility);
	void RequestSpawnAndTeleport(class ABendScriptedEncounterSpawn* Spawn, class AActor* TeleportTarget);
	void RequestSpawn(class ABendScriptedEncounterSpawn* Spawn);
	void OnUserKilled(class UBendScriptedEncounterUserController* Controller);
	void OnUserBecomeUnawareInternal(class ABendAIController* AIController, TEnumAsByte<EAIAwareState> PreviousAwareness);
	void OnUserBecomeSemiAwareInternal(class ABendAIController* AIController, TEnumAsByte<EAIAwareState> PreviousAwareness);
	void OnUserBecomeAwareInternal(class ABendAIController* AIController, TEnumAsByte<EAIAwareState> PreviousAwareness);
	void OnUserAwarenessChanged(int SpawnIndex, class UBendScriptedEncounterUserController* Controller, TEnumAsByte<EAIAwareState> Awareness, TEnumAsByte<EAIAwareState> PreviousAwareness);
	void OnSpawnedInternal(class ABendAIController* Controller, class ABendPawn* Pawn, class ABendSpawnLocationBase* spawnLoc);
	void OnSpawned(class ABendScriptedEncounterSpawn* Spawn, int SpawnIndex, class UBendScriptedEncounterUserController* Controller);
	void OnKilledInternal(class ABendPawn* Pawn, class ABendSpawnLocationBase* spawnLoc);
	void OnGlobalAwarenessChanged(TEnumAsByte<EAIAwareState> NewAwareness);
	void EndEncounter();
	void DespawnUser(class UBendScriptedEncounterUserController* UserController);
	void DespawnAllUsers();
};


// Class BendGame.BendScriptedEncounterRoleComponent
// 0x0008 (0x00D8 - 0x00D0)
class UBendScriptedEncounterRoleComponent : public UActorComponent
{
public:
	TEnumAsByte<EScriptedEncounterRoleEnum>            Role;                                                     // 0x00D0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00D1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendScriptedEncounterRoleComponent");
		return ptr;
	}

};


// Class BendGame.BendScriptedEncounterUserController
// 0x0040 (0x0110 - 0x00D0)
class UBendScriptedEncounterUserController : public UActorComponent
{
public:
	class ABendAIController*                           BendAIController;                                         // 0x00D0(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class ABendPawn*                                   BendPawn;                                                 // 0x00D8(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FScriptMulticastDelegate                    UserLeavesPOIDelegate;                                    // 0x00E0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    UserStoppedDelegate;                                      // 0x00F0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0100(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendScriptedEncounterUserController");
		return ptr;
	}


	void OnStopped(class ABendPOI* CompletedPOI, class ABendAIController* BendAIController);
	void OnLeavesPOI(class ABendPOI* CompletedPOI, class ABendAIController* BendAIController);
	bool IsPawnAlive();
};


// Class BendGame.BendSectorDataManager
// 0x0080 (0x03C8 - 0x0348)
class ABendSectorDataManager : public AActor
{
public:
	struct FTimespan                                   CorpseLifespan;                                           // 0x0348(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	int                                                MaxCorpsesPerSector;                                      // 0x0350(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0354(0x0004) MISSED OFFSET
	TArray<struct FCorpseTypeData>                     CorpseTypeData;                                           // 0x0358(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	unsigned char                                      UnknownData01[0x60];                                      // 0x0368(0x0060) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendSectorDataManager");
		return ptr;
	}


	void UpdateCorpseEntryMesh(class ABendSearchBody* SearchBody, class USkeletalMesh* ReplacementSkeletalMesh);
	void SetCorpseEntryHiddenInGame(class ABendSearchBody* SearchBody, bool Hidden);
	void RemoveTrap(class ABendTrap* Trap);
	void RemoveCorpsesInArea(const struct FVector& Center, float Radius, bool bIncludeUnloadedSectors);
	void RemoveBolt(class ABendInventoryPickup* Bolt);
	bool HasPendingCorpses();
	void AddBolt(class ABendInventoryPickup* Bolt);
};


// Class BendGame.BendSmoothSwapParticleSystemComponent
// 0x0050 (0x0120 - 0x00D0)
class UBendSmoothSwapParticleSystemComponent : public UActorComponent
{
public:
	struct FName                                       IntensityFloatParameterName;                              // 0x00D0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       IntensityVectorParameterName;                             // 0x00D8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x20];                                      // 0x00E0(0x0020) MISSED OFFSET
	TArray<TWeakObjectPtr<class UParticleSystemComponent>> ParticleArray;                                            // 0x0100(0x0010) (ExportObject, ZeroConstructor, Transient)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0110(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendSmoothSwapParticleSystemComponent");
		return ptr;
	}


	void SetWorldTransform(const struct FTransform& NewTransform, bool bSweep);
	void SetVectorParameter(const struct FName& ParameterName, const struct FVector& Param);
	void SetTemplate(class UParticleSystem* NewTemplate, const struct FVector& Location);
	void SetFloatParameter(const struct FName& ParameterName, float Param);
};


// Class BendGame.BendSkeletalMeshComponent
// 0x0310 (0x12A0 - 0x0F90)
class UBendSkeletalMeshComponent : public USkeletalMeshComponent
{
public:
	class UBendAnimHelperRigData*                      HelperRigData;                                            // 0x0F90(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UBendAnimBlueprintMessenger*                 AnimMessenger;                                            // 0x0F98(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	class UBendAnimBlueprintMessengerInternal*         AnimMessengerInternal;                                    // 0x0FA0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	class UBendAnimIKManager*                          IKManager;                                                // 0x0FA8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0FB0(0x0008) MISSED OFFSET
	struct FBendAnimIKSettings                         IKSettings;                                               // 0x0FB8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0FB9(0x0007) MISSED OFFSET
	struct FBendIKEffectSettings                       IKEffectSettings;                                         // 0x0FC0(0x01A0) (Edit)
	TAssetPtr<class UClass>                            AnimBlueprintGeneratedClassAsset;                         // 0x1160(0x0020) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData02[0x120];                                     // 0x1180(0x0120) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendSkeletalMeshComponent");
		return ptr;
	}


	void SuppressAnchorDriven(bool bSuppress);
	void PlaySurfaceImpactFX(TEnumAsByte<EPhysicalSurface> SurfaceType, const struct FName& FXName, const struct FName& SocketName, float Volume);
	class UBendAnimIKManager* GetIKManager();
};


// Class BendGame.BendCharacterSkeletalMeshComponent
// 0x02C0 (0x1560 - 0x12A0)
class UBendCharacterSkeletalMeshComponent : public UBendSkeletalMeshComponent
{
public:
	float                                              SpeedDifferenceMinumum;                                   // 0x12A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bListenForRagdollDamage;                                  // 0x12A4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x12A5(0x0003) MISSED OFFSET
	int                                                CenterOfMassAveragesArraySize;                            // 0x12A8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TimeBeforeIgnored;                                        // 0x12AC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              RagdollKillHeight;                                        // 0x12B0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              RagdollKillAngle;                                         // 0x12B4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinimumRagdollHeightDamage;                               // 0x12B8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               ForceOffBikeAfterHeight;                                  // 0x12BC(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x12BD(0x0003) MISSED OFFSET
	float                                              HeightToForceOffBike;                                     // 0x12C0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               ForceOffBikeAfterTime;                                    // 0x12C4(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x12C5(0x0003) MISSED OFFSET
	float                                              TimeToForceOffBike;                                       // 0x12C8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              IgnoreRagdollDamageFromBikeDelay;                         // 0x12CC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               ShouldCheckForInstantKill;                                // 0x12D0(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x7];                                       // 0x12D1(0x0007) MISSED OFFSET
	struct FRuntimeFloatCurve                          RagdollDamageCurve;                                       // 0x12D8(0x0080) (Edit, DisableEditOnInstance)
	struct FRuntimeFloatCurve                          RagdollHeightDifferenceDamageCurve;                       // 0x1358(0x0080) (Edit, DisableEditOnInstance)
	TArray<struct FString>                             BodyNamesToIgnore;                                        // 0x13D8(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	unsigned char                                      UnknownData04[0x164];                                     // 0x13E8(0x0164) MISSED OFFSET
	float                                              MaxAnchoringCatchupSpeed;                                 // 0x154C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x10];                                      // 0x1550(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendCharacterSkeletalMeshComponent");
		return ptr;
	}


	bool SetRagdoll(bool bSet);
	void ResetBodiesPostRagdoll();
	void PrepareBodiesForExitVehicleRagdoll();
	void OnHitCallback(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	bool IsInRagdoll();
	void FreezeRagdoll(bool bFreeze);
};


// Class BendGame.XpecDummySkeletalMeshComponent
// 0x0000 (0x1560 - 0x1560)
class UXpecDummySkeletalMeshComponent : public UBendCharacterSkeletalMeshComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.XpecDummySkeletalMeshComponent");
		return ptr;
	}

};


// Class BendGame.BendEquippableItemSkeletalMeshComponent
// 0x0010 (0x12B0 - 0x12A0)
class UBendEquippableItemSkeletalMeshComponent : public UBendSkeletalMeshComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x12A0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendEquippableItemSkeletalMeshComponent");
		return ptr;
	}

};


// Class BendGame.BendVehicleSkeletalMeshComponent
// 0x00A0 (0x1340 - 0x12A0)
class UBendVehicleSkeletalMeshComponent : public UBendSkeletalMeshComponent
{
public:
	unsigned char                                      UnknownData00[0xA0];                                      // 0x12A0(0x00A0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendVehicleSkeletalMeshComponent");
		return ptr;
	}

};


// Class BendGame.BendSky
// 0x0140 (0x0488 - 0x0348)
class ABendSky : public AActor
{
public:
	float                                              MoonPhase;                                                // 0x0348(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x034C(0x0004) MISSED OFFSET
	TArray<class UStaticMeshComponent*>                E3HideMesh;                                               // 0x0350(0x0010) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance)
	TArray<class UStaticMeshComponent*>                E3Shot01;                                                 // 0x0360(0x0010) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance)
	TArray<class UStaticMeshComponent*>                E3Shot06;                                                 // 0x0370(0x0010) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance)
	TArray<class UStaticMeshComponent*>                E3Shot09;                                                 // 0x0380(0x0010) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance)
	int                                                E3ShotNumber;                                             // 0x0390(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                E3ActiveShot;                                             // 0x0394(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<class UStaticMeshComponent*>                E3DefaultSky;                                             // 0x0398(0x0010) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance)
	float                                              TickRate;                                                 // 0x03A8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               PrintDebugInfo;                                           // 0x03AC(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x03AD(0x0003) MISSED OFFSET
	struct FLinearColor                                SunHorizonTint;                                           // 0x03B0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               UseCustomSkyDome;                                         // 0x03C0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x03C1(0x0007) MISSED OFFSET
	class UMaterialInstance*                           PaintedSkyMaterial;                                       // 0x03C8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              UpdateTime;                                               // 0x03D0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MoonDistance;                                             // 0x03D4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FLinearColor                                WorldManSunColor;                                         // 0x03D8(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              WorldManSunIntensity;                                     // 0x03E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     WorldManSunDirection;                                     // 0x03EC(0x000C) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class ABendWorldManager*                           WorldManager;                                             // 0x03F8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class ULightComponent*                             MoonLight;                                                // 0x0400(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class ULightComponent*                             SunLight;                                                 // 0x0408(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	int                                                WorldDaysGone;                                            // 0x0410(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                CurrentDay;                                               // 0x0414(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                MoonPhaseSwitchTime;                                      // 0x0418(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                WorldCurrentTime;                                         // 0x041C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              GlobalLightDirectionOffset;                               // 0x0420(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              GlobalLightDirectionOffsetTicker;                         // 0x0424(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<class ULightComponent*>                     WorldLightComponents;                                     // 0x0428(0x0010) (Edit, BlueprintVisible, ExportObject, ZeroConstructor)
	bool                                               AllowOffsetWorldLightDirections;                          // 0x0438(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x7];                                       // 0x0439(0x0007) MISSED OFFSET
	class UMaterialParameterCollection*                StarfieldOpacityMaterialCollection;                       // 0x0440(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UStaticMeshComponent*                        CustomSky_CODE;                                           // 0x0448(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class USceneComponent*                             DynamicSky_CODE;                                          // 0x0450(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class USceneComponent*                             Moon_CODE;                                                // 0x0458(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class USceneComponent*                             SkyDome_CODE;                                             // 0x0460(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class USceneComponent*                             V4SkyDome_CODE;                                           // 0x0468(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UMaterialInstance*                           CustomSkyDefault;                                         // 0x0470(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UMaterialParameterCollection*                BendSkyCollection;                                        // 0x0478(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UMaterialParameterCollection*                TimeWeatherCollection;                                    // 0x0480(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendSky");
		return ptr;
	}


	bool TickFrequency(float InTickRate, float DeltaSeconds);
	void ResetWorldLightDirections();
	void OffsetWorldLightDirections();
	void ManageWorldLightingOffsets();
	TArray<class ULightComponent*> GetWorldLights();
	void EnableCustomSky(class UMaterialInstance* CustomSkyMaterial);
	void DisableCustomSky();
};


// Class BendGame.BendSkyProfileManager
// 0x00C0 (0x0408 - 0x0348)
class ABendSkyProfileManager : public AActor
{
public:
	class UTextRenderComponent*                        TextLabel_CodeReference;                                  // 0x0348(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	TWeakObjectPtr<class AActor>                       ActiveProfile;                                            // 0x0350(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MinChangeTime;                                            // 0x0358(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxChangeTime;                                            // 0x035C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ProfileInterpolationRate;                                 // 0x0360(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ActiveMipFogTransitionDistance;                           // 0x0364(0x0004) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	float                                              ActiveDistanceScale;                                      // 0x0368(0x0004) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	float                                              ActiveMieScatterTerm;                                     // 0x036C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	float                                              ActiveRayleighScaleTerm;                                  // 0x0370(0x0004) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	float                                              ActiveMieScaleTerm;                                       // 0x0374(0x0004) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	float                                              ActiveMieDirectionTerm;                                   // 0x0378(0x0004) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	float                                              ActiveReferenceAltitudeMeters;                            // 0x037C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	float                                              ActiveAltitudeScale;                                      // 0x0380(0x0004) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	struct FVector                                     ActiveRayleighScatterTerm;                                // 0x0384(0x000C) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	struct FLinearColor                                ActiveSunColor;                                           // 0x0390(0x0010) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	struct FLinearColor                                ActiveCloudLightingTint;                                  // 0x03A0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	class ABendDefaultSkyProfile*                      DefaultProfile;                                           // 0x03B0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<class ABendDefaultSkyProfile*>              AvailableProfiles;                                        // 0x03B8(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	float                                              ProfileInterpolationCurrent;                              // 0x03C8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	float                                              ProfileTimer;                                             // 0x03CC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	float                                              ProfileTimerDelta;                                        // 0x03D0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	float                                              ProfileTimeLimit;                                         // 0x03D4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	float                                              ProfileTimerRateScale;                                    // 0x03D8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              InterpolationDelta;                                       // 0x03DC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class ABendDefaultSkyProfile*                      ActiveProfileCasted;                                      // 0x03E0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UPostProcessComponent*                       ActivePostComponent;                                      // 0x03E8(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	TArray<class UPostProcessComponent*>               OldPostComponents;                                        // 0x03F0(0x0010) (Edit, BlueprintVisible, ExportObject, ZeroConstructor)
	float                                              DeltaTime;                                                // 0x0400(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0404(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendSkyProfileManager");
		return ptr;
	}


	float UpdateProfileTimer();
	void UpdateManagerValues();
	void UpdateManager();
	void SetTextLabel(const struct FString& Text, const struct FLinearColor& Color);
	void SetProfileValues();
	void ResetManager();
	void PickNewMissionProfile();
	void PickNewAmbientProfile();
	TArray<class ABendDefaultSkyProfile*> FindAvailableProfiles();
	void DetermineActiveProfile();
	void DebugPrints(float TextTimeOnScreen);
	bool AllowedTickConditions();
};


// Class BendGame.BendAmbientSpawnBox
// 0x0490 (0x09D0 - 0x0540)
class ABendAmbientSpawnBox : public ABendSpawnLocationBase
{
public:
	TWeakObjectPtr<class ABendAmbientSpawnArea>        m_SpawnArea;                                              // 0x0540(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	struct FBendFNameDropdown                          LoadoutOverrideFromSpawnArea;                             // 0x0548(0x0018) (Edit, DisableEditOnTemplate)
	struct FBendAmbientSpawnType                       SpawnAreaSpawnType;                                       // 0x0560(0x0418)
	class UBoxComponent*                               SpawnBoxComponent;                                        // 0x0978(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	int                                                m_MaxSpawns;                                              // 0x0980(0x0004) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0984(0x0004) MISSED OFFSET
	TArray<struct FBendAmbientSpawnType>               m_ForceSpawnTypes;                                        // 0x0988(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	bool                                               bFailIfNoNav;                                             // 0x0998(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bProjectSpawnLocationToNavMesh;                           // 0x0999(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x17];                                      // 0x099A(0x0017) MISSED OFFSET
	bool                                               IsInBuilding;                                             // 0x09B1(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x2];                                       // 0x09B2(0x0002) MISSED OFFSET
	int                                                m_iKilledCount;                                           // 0x09B4(0x0004) (ZeroConstructor, SaveGame, IsPlainOldData)
	int                                                m_iMaxTotalSpawns;                                        // 0x09B8(0x0004) (ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData03[0x14];                                      // 0x09BC(0x0014) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAmbientSpawnBox");
		return ptr;
	}


	void UpdateTypePercentages();
	void UpdateSpawnTypes(bool resetDesiredSpawns);
	void SetMaxSpawns(int MaxSpawns, bool resetDesiredSpawns);
	void SetForceSpawnTypes(TArray<struct FBendAmbientSpawnType> newTypes);
	void ResetSpawnCount(bool resetToKilled);
	void ResetKillCount();
	void OnFinishedSpawnOnVehicleSeat(class ABendAIController* SpawnedController, class ABendPawn* SpawnedPawn, class AVehiclePawn* SpawnedVehiclePawn);
	int GetSpawnCount();
	int GetKillCount();
	int GetActiveCount();
};


// Class BendGame.BendAmbientPopulationSpawnBox
// 0x0000 (0x09D0 - 0x09D0)
class ABendAmbientPopulationSpawnBox : public ABendAmbientSpawnBox
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAmbientPopulationSpawnBox");
		return ptr;
	}

};


// Class BendGame.BendNestSpawnLocation
// 0x04F0 (0x0A30 - 0x0540)
class ABendNestSpawnLocation : public ABendSpawnLocationBase
{
public:
	class UBendNestingZone*                            m_NestingZone;                                            // 0x0540(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<TWeakObjectPtr<class ABendAmbientSpawnArea>> m_SpawnAreas;                                             // 0x0548(0x0010) (Edit, ZeroConstructor)
	struct FString                                     m_NestID;                                                 // 0x0558(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate)
	int                                                m_NestCapacity;                                           // 0x0568(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData)
	int                                                m_InitialNestersCount;                                    // 0x056C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                m_NumToKeepInNest;                                        // 0x0570(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              m_BurningForcedAwareDuration;                             // 0x0574(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UClass*                                      BurningStatusEffect;                                      // 0x0578(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               DisableDefendZoneWhenBurned;                              // 0x0580(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0581(0x0007) MISSED OFFSET
	struct FBendAmbientSpawnType                       m_DefaultSpawnType;                                       // 0x0588(0x0418) (Edit, BlueprintVisible, BlueprintReadOnly)
	TArray<struct FBendNestSpawnType>                  m_SpawnTypes;                                             // 0x09A0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	class UBoxComponent*                               SpawnBoxComponent;                                        // 0x09B0(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnBurnedSpawned;                                          // 0x09B8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData01[0x18];                                      // 0x09C8(0x0018) MISSED OFFSET
	struct FTimespan                                   TimeOnLastReset;                                          // 0x09E0(0x0008) (BlueprintVisible, ZeroConstructor, SaveGame)
	unsigned char                                      UnknownData02[0x24];                                      // 0x09E8(0x0024) MISSED OFFSET
	bool                                               m_bNestDestroyed;                                         // 0x0A0C(0x0001) (ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData03[0x23];                                      // 0x0A0D(0x0023) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendNestSpawnLocation");
		return ptr;
	}


	int GetRemainingNestSlots();
	int GetCurrentNestingCount();
};


// Class BendGame.BendLootNewtSpawnLocation
// 0x0070 (0x09D0 - 0x0960)
class ABendLootNewtSpawnLocation : public ABendPawnSpawnLocation
{
public:
	struct FInventoryStorageWeapon                     StolenWeapon;                                             // 0x0960(0x0050) (SaveGame)
	struct FInventoryIDDetails                         StolenItem;                                               // 0x09B0(0x000C) (SaveGame)
	unsigned char                                      UnknownData00[0x4];                                       // 0x09BC(0x0004) MISSED OFFSET
	TArray<struct FBendLocationReference>              HidingLocations;                                          // 0x09C0(0x0010) (Edit, BlueprintVisible, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendLootNewtSpawnLocation");
		return ptr;
	}


	void OnWeaponAdded(class ABendWeapon* Weapon);
};


// Class BendGame.BendScriptedEncounterSpawn
// 0x0020 (0x0980 - 0x0960)
class ABendScriptedEncounterSpawn : public ABendPawnSpawnLocation
{
public:
	class UBendScriptedEncounterUserController*        ScriptedEncounterUserController;                          // 0x0960(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UBendScriptedEncounterRoleComponent*         ScriptedEncounterRoleComponent;                           // 0x0968(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UBendDynamicConversationComponent*           BendDynamicConversationComponent;                         // 0x0970(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UBendExtractionGroupComponent*               BendExtractionGroupComponent;                             // 0x0978(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendScriptedEncounterSpawn");
		return ptr;
	}

};


// Class BendGame.XpecBase
// 0x0000 (0x0348 - 0x0348)
class AXpecBase : public AActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.XpecBase");
		return ptr;
	}


	bool IOnPostEditChangeProperty();
};


// Class BendGame.XpecActionPool
// 0x01C0 (0x0508 - 0x0348)
class AXpecActionPool : public AActor
{
public:
	TArray<struct FXpecAnimSequenceData>               m_actions;                                                // 0x0348(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	class UDataTable*                                  m_POIAnimationSetTable;                                   // 0x0358(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UDataTable*                                  m_DefaultAnimationSetTable;                               // 0x0360(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_bIncludeAllAnimations;                                  // 0x0368(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0369(0x0007) MISSED OFFSET
	TArray<struct FName>                               m_AdditionalGroupNames;                                   // 0x0370(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<class UAnimSequenceBase*>                   m_idleUnarmed;                                            // 0x0380(0x0010) (BlueprintVisible, BlueprintReadOnly, EditFixedSize, ZeroConstructor)
	TArray<class UAnimSequenceBase*>                   m_idleOneHandedPistol;                                    // 0x0390(0x0010) (BlueprintVisible, BlueprintReadOnly, EditFixedSize, ZeroConstructor)
	TArray<class UAnimSequenceBase*>                   m_idleTwoHandedLongGun;                                   // 0x03A0(0x0010) (BlueprintVisible, BlueprintReadOnly, EditFixedSize, ZeroConstructor)
	TArray<class UAnimSequenceBase*>                   m_idleRightHandMelee;                                     // 0x03B0(0x0010) (BlueprintVisible, BlueprintReadOnly, EditFixedSize, ZeroConstructor)
	TArray<class UAnimSequenceBase*>                   m_idleOneHandedThrowing;                                  // 0x03C0(0x0010) (BlueprintVisible, BlueprintReadOnly, EditFixedSize, ZeroConstructor)
	TArray<class UAnimSequenceBase*>                   m_idleTrap;                                               // 0x03D0(0x0010) (BlueprintVisible, BlueprintReadOnly, EditFixedSize, ZeroConstructor)
	TArray<class UAnimSequenceBase*>                   m_idleOneHandedHeavyObject;                               // 0x03E0(0x0010) (BlueprintVisible, BlueprintReadOnly, EditFixedSize, ZeroConstructor)
	TArray<class UAnimSequenceBase*>                   m_drawOneHandedPistol;                                    // 0x03F0(0x0010) (BlueprintVisible, BlueprintReadOnly, EditFixedSize, ZeroConstructor)
	TArray<class UAnimSequenceBase*>                   m_drawTwoHandedLongGun;                                   // 0x0400(0x0010) (BlueprintVisible, BlueprintReadOnly, EditFixedSize, ZeroConstructor)
	TArray<class UAnimSequenceBase*>                   m_drawRightHandMelee;                                     // 0x0410(0x0010) (BlueprintVisible, BlueprintReadOnly, EditFixedSize, ZeroConstructor)
	TArray<class UAnimSequenceBase*>                   m_drawOneHandedThrowing;                                  // 0x0420(0x0010) (BlueprintVisible, BlueprintReadOnly, EditFixedSize, ZeroConstructor)
	TArray<class UAnimSequenceBase*>                   m_drawTrap;                                               // 0x0430(0x0010) (BlueprintVisible, BlueprintReadOnly, EditFixedSize, ZeroConstructor)
	TArray<class UAnimSequenceBase*>                   m_drawOneHandedHeavyObject;                               // 0x0440(0x0010) (BlueprintVisible, BlueprintReadOnly, EditFixedSize, ZeroConstructor)
	TArray<class UAnimSequenceBase*>                   m_holsterOneHandedPistol;                                 // 0x0450(0x0010) (BlueprintVisible, BlueprintReadOnly, EditFixedSize, ZeroConstructor)
	TArray<class UAnimSequenceBase*>                   m_holsterTwoHandedLongGun;                                // 0x0460(0x0010) (BlueprintVisible, BlueprintReadOnly, EditFixedSize, ZeroConstructor)
	TArray<class UAnimSequenceBase*>                   m_holsterRightHandMelee;                                  // 0x0470(0x0010) (BlueprintVisible, BlueprintReadOnly, EditFixedSize, ZeroConstructor)
	TArray<class UAnimSequenceBase*>                   m_holsterOneHandedThrowing;                               // 0x0480(0x0010) (BlueprintVisible, BlueprintReadOnly, EditFixedSize, ZeroConstructor)
	TArray<class UAnimSequenceBase*>                   m_holsterTrap;                                            // 0x0490(0x0010) (BlueprintVisible, BlueprintReadOnly, EditFixedSize, ZeroConstructor)
	TArray<class UAnimSequenceBase*>                   m_holsterOneHandedHeavyObject;                            // 0x04A0(0x0010) (BlueprintVisible, BlueprintReadOnly, EditFixedSize, ZeroConstructor)
	unsigned char                                      UnknownData01[0x58];                                      // 0x04B0(0x0058) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.XpecActionPool");
		return ptr;
	}


	bool Initialize();
	void AddDefaultAnimSequence(const struct FXpecAnimSequenceData& Sequence);
};


// Class BendGame.XpecZoneManager
// 0x0218 (0x0560 - 0x0348)
class AXpecZoneManager : public AXpecBase
{
public:
	class UXpecNeedComponent*                          m_pNeedComp;                                              // 0x0348(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UXpecScenarioManager*                        m_pScenarioMgr;                                           // 0x0350(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class AXpecEventManager*                           m_pEventMgr;                                              // 0x0358(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class AXpecActionPool*                             m_pActionPool;                                            // 0x0360(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       m_ZoneID;                                                 // 0x0368(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TArray<class ABendPOI*>                            m_POIs;                                                   // 0x0370(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<class ABendPawnSpawnLocation*>              m_Spawners;                                               // 0x0380(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<struct FName>                               m_events;                                                 // 0x0390(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<class AActor*>                              m_triggerableObjects;                                     // 0x03A0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	float                                              m_fActivationRadius;                                      // 0x03B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x03B4(0x0004) MISSED OFFSET
	class AXpecVOManager*                              m_pVOManager;                                             // 0x03B8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<struct FContentionGroupInfo>                m_ContentionGroupInfos;                                   // 0x03C0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<struct FBendLocationReference>              m_EventPawnTargets;                                       // 0x03D0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<struct FName>                               m_friendZoneNames;                                        // 0x03E0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	class UDataTable*                                  m_favoredPOIInfoTable;                                    // 0x03F0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FScriptMulticastDelegate                    EventOnZoneActivate;                                      // 0x03F8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    EventOnZoneDeactivate;                                    // 0x0408(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0418(0x0004) MISSED OFFSET
	TEnumAsByte<EXpecTimeZone>                         m_eCurrentTimeZone;                                       // 0x041C(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               m_bActive;                                                // 0x041D(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               m_bInAlert;                                               // 0x041E(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x1];                                       // 0x041F(0x0001) MISSED OFFSET
	TArray<struct FXpecFavoredPOIForPawn>              m_favoredPOIInfos;                                        // 0x0420(0x0010) (BlueprintVisible, ZeroConstructor)
	unsigned char                                      UnknownData03[0x128];                                     // 0x0430(0x0128) MISSED OFFSET
	class UXpecPOICount*                               m_POICount;                                               // 0x0558(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.XpecZoneManager");
		return ptr;
	}


	TEnumAsByte<EXpecUsePOIResult> UsePOI(class ABendPOI* pPOI, const struct FName& Name, int iInterruptLevel);
	void StartContentionGroupCoolDown(class ABendPOI* pTargetPOI);
	int SetupEvents(TArray<struct FXpecEventDesc>* outputEvents);
	void SetNeedValue(const struct FName& Name, float fValue);
	void SetContentionGroupIsUsing(class ABendPOI* pRequestedPOI, bool bIsUsing);
	bool RequestSwitchLODLevel(class ABendPOI* pRequestedPOI, const struct FName& RequestedPawnName, TEnumAsByte<EXpecPawnLODLevel> eNewLevel);
	bool OnZoneDeactivate();
	bool OnZoneActivate();
	void OnWeatherChanged(TEnumAsByte<EWeatherType> ePreviousWeather, TEnumAsByte<EWeatherType> eCurrentWeather);
	void OnTimeZoneChanged(TEnumAsByte<EXpecTimeZone> ePreviousTimeZone, TEnumAsByte<EXpecTimeZone> eCurrentTimeZone);
	void OnAIAwarenessChanged(TEnumAsByte<EAIAwareState> currentAwareness, TEnumAsByte<EAIAwareState> PreviousAwareness);
	int LoadFavoredPOIInfos();
	void InitNeed(const struct FName& Name, float FMin, float FMax, float fValue, class UCurveFloat* pWeightTbl);
	int GetPOIs(TEnumAsByte<EXpecPOIUserType> eType, TEnumAsByte<EXpecPOIUserGender> eGender, TArray<class ABendPOI*>* POIs);
	int GetPawns(TEnumAsByte<EXpecPOIUserType> eType, TEnumAsByte<EXpecPOIUserGender> eGender, TArray<class ABendPawn*>* pawns);
	TArray<struct FTransform> GetNearbyWaypointsFromMigrationPath(const struct FVector& loc);
	class ABendPOI* FindPOI(const struct FName& Name);
	TEnumAsByte<EXpecUsePOIResult> FindPawnUsePOI(class ABendPOI* pPOI, class ABendPawn* pDesignatePawn, class ABendPawn** pUserPawn);
	class ABendPawn* FindPawn(const struct FName& Name);
	void DebugPrintInfo(struct FString* line);
	bool CheckIsLockedInContentionGroup(class ABendPOI* pRequestedPOI);
	bool CheckContentionGroupIsUsing(class ABendPOI* pRequestedPOI);
	bool CheckContentionGroupIsInCoolDown(class ABendPOI* pRequestedPOI);
	void BroadcastEvent(class ABendPOI* pSourcePOI, class AActor* pSource, const struct FName& EventName, float fRadius);
	int ApplyRewardCost(float fRewardPercentage, float fCostPercentage, class UXpecRewardComponent* pRewardComp);
	void AddNeedValue(const struct FName& Name, float fValue);
	bool ActivatePOICinematicMode(class ABendPOI* pPOI, bool bActivate);
};


// Class BendGame.XpecSpawnerInterface
// 0x0000 (0x0028 - 0x0028)
class UXpecSpawnerInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.XpecSpawnerInterface");
		return ptr;
	}

};


// Class BendGame.XpecPawnSpawnLocation
// 0x0090 (0x09F0 - 0x0960)
class AXpecPawnSpawnLocation : public ABendPawnSpawnLocation
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0960(0x0008) MISSED OFFSET
	struct FName                                       spawnerID;                                                // 0x0968(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EXpecPOIUserType>                      pawnType;                                                 // 0x0970(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EXpecPOIUserGender>                    pawnGender;                                               // 0x0971(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EXpecVOClass>                          pawnSoundClass;                                           // 0x0972(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x5];                                       // 0x0973(0x0005) MISSED OFFSET
	struct FXpecSpawnerInfo                            spawnerInfo;                                              // 0x0978(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)
	class AXpecPopulation*                             population;                                               // 0x0988(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class AXpecZoneManager*                            zoneManager;                                              // 0x0990(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class ABendPawn*                                   SpawnedPawn;                                              // 0x0998(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                sn;                                                       // 0x09A0(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              lodSwitchDistance;                                        // 0x09A4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              alwaysFullPawnDistance;                                   // 0x09A8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EXpecPawnLODPriority>                  highLODPriority;                                          // 0x09AC(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0xB];                                       // 0x09AD(0x000B) MISSED OFFSET
	float                                              delayRevive;                                              // 0x09B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x09BC(0x0004) MISSED OFFSET
	class UDataTable*                                  m_SpawnerTable;                                           // 0x09C0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x28];                                      // 0x09C8(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.XpecPawnSpawnLocation");
		return ptr;
	}


	bool UpdateLOD(class APawn* PlayerPawn, TEnumAsByte<EXpecTimeZone> currentTimeZone);
	void StartReviveDelay();
	void SetNeedUpdateLOD(bool needUpdate);
	void SetAlert(bool inAlert);
	void ResetLODBoxUpdate();
	bool RequestSpawn(TEnumAsByte<EXpecTimeZone> eTimeZone);
	bool IsActivate();
	class AXpecZoneManager* IGetZoneManager();
	int IGetSN();
	TEnumAsByte<EXpecPOIUserType> IGetPawnType();
	struct FName IGetPawnName();
	TEnumAsByte<EXpecPawnLODPriority> IGetHighLODPriority();
	TAssetPtr<class USoundClass> GetVOClassC(TEnumAsByte<EXpecVOClass> Index);
	bool GetNeedUpdateLOD();
	void GetAssetsAIC(TEnumAsByte<EXpecPOIUserType> Index, TEnumAsByte<EAIFactionType> FactionType, TAssetPtr<class UClass>* Controller, TAssetPtr<class UBehaviorTree>* BehaviourTree);
	void Deactivate();
	bool CanSpawnInTimeZone(TEnumAsByte<EXpecTimeZone> eTimeZone);
	bool Activate(TEnumAsByte<EXpecTimeZone> eTimeZone);
};


// Class BendGame.BendVehiclePawnSpawnLocation
// 0x0060 (0x05A0 - 0x0540)
class ABendVehiclePawnSpawnLocation : public ABendSpawnLocationBase
{
public:
	TAssetPtr<class UClass>                            m_VehiclePawnClass;                                       // 0x0540(0x0020) (Edit, BlueprintVisible)
	class UBendVehiclePartsDatabase*                   m_VehiclePartsDatabase;                                   // 0x0560(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	class UBendVehiclePartsDatabase*                   m_VehiclePartsDatabaseOverride;                           // 0x0568(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UClass*                                      m_LoadedVehiclePawn;                                      // 0x0570(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TArray<class UBendVehicleMeshAttachmentSpecs*>     m_LoadedVehicleParts;                                     // 0x0578(0x0010) (ZeroConstructor, Transient)
	struct FScriptMulticastDelegate                    OnVehicleSpawned;                                         // 0x0588(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               m_bVehiclePartsDatabaseOverride;                          // 0x0598(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0599(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendVehiclePawnSpawnLocation");
		return ptr;
	}

};


// Class BendGame.BendSplineBlocker
// 0x0028 (0x0370 - 0x0348)
class ABendSplineBlocker : public AActor
{
public:
	struct FString                                     mIDName;                                                  // 0x0348(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FSplineBlockerSegmentInfo>           mSegmentList;                                             // 0x0358(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	bool                                               mBlocked;                                                 // 0x0368(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0369(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendSplineBlocker");
		return ptr;
	}


	void UnblockSegments(bool bAutoUpdate);
	bool GetIsBlocked();
	void BlockSegments(bool bAutoUpdate);
};


// Class BendGame.BendSplinePath
// 0x0010 (0x0358 - 0x0348)
class ABendSplinePath : public AActor
{
public:
	class UBendSplineComponent*                        SplineComponent;                                          // 0x0348(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	bool                                               bStopAtEnd;                                               // 0x0350(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0351(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendSplinePath");
		return ptr;
	}

};


// Class BendGame.BendSprinkler
// 0x0038 (0x0380 - 0x0348)
class ABendSprinkler : public AActor
{
public:
	class UBendSphereComponent*                        SprinklerOverlapSphereComponent;                          // 0x0348(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class USkeletalMeshComponent*                      SKSprinklerDriverArm_CodeReference;                       // 0x0350(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UStaticMeshComponent*                        SMSprinklerHead_CodeReference;                            // 0x0358(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UParticleSystemComponent*                    P_Sprinkler_CodeReference;                                // 0x0360(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UAudioComponent*                             AudioComp_CodeReference;                                  // 0x0368(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	float                                              RotationRate;                                             // 0x0370(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              RotationDegrees;                                          // 0x0374(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               ShouldBeOn;                                               // 0x0378(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0379(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendSprinkler");
		return ptr;
	}


	void TurnOn();
	void TurnOff();
	void ToggleActive();
	void OnEndOverlap();
	void OnBeginOverlap();
	void InitializeCodeReferences();
	bool GetIsActive();
};


// Class BendGame.BendAnimState_Cover
// 0x0000 (0x00B0 - 0x00B0)
class UBendAnimState_Cover : public UBendAnimState_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAnimState_Cover");
		return ptr;
	}

};


// Class BendGame.BendAnimState_Damage
// 0x0008 (0x00B8 - 0x00B0)
class UBendAnimState_Damage : public UBendAnimState_Base
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x00B0(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAnimState_Damage");
		return ptr;
	}

};


// Class BendGame.BendAnimState_DodgeMiss
// 0x0000 (0x00B0 - 0x00B0)
class UBendAnimState_DodgeMiss : public UBendAnimState_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAnimState_DodgeMiss");
		return ptr;
	}

};


// Class BendGame.BendAnimState_FlightMovement
// 0x0000 (0x00B0 - 0x00B0)
class UBendAnimState_FlightMovement : public UBendAnimState_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAnimState_FlightMovement");
		return ptr;
	}

};


// Class BendGame.BendAnimState_Grapple
// 0x0000 (0x00B0 - 0x00B0)
class UBendAnimState_Grapple : public UBendAnimState_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAnimState_Grapple");
		return ptr;
	}

};


// Class BendGame.BendAnimState_GroundMovement
// 0x0000 (0x00B0 - 0x00B0)
class UBendAnimState_GroundMovement : public UBendAnimState_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAnimState_GroundMovement");
		return ptr;
	}

};


// Class BendGame.BendAnimState_Ladder
// 0x0000 (0x00B0 - 0x00B0)
class UBendAnimState_Ladder : public UBendAnimState_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAnimState_Ladder");
		return ptr;
	}

};


// Class BendGame.BendAnimState_MeleeAttack
// 0x0180 (0x0230 - 0x00B0)
class UBendAnimState_MeleeAttack : public UBendAnimState_Base
{
public:
	class UClass*                                      WeaponClass;                                              // 0x00B0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<struct FMeleeMove>                          MeleeMoves;                                               // 0x00B8(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FName                                       StartMoveName;                                            // 0x00C8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               AutoTargetEnabled;                                        // 0x00D0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00D1(0x0003) MISSED OFFSET
	float                                              AutoTargetMaxAngle;                                       // 0x00D4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AutoTargetMaxDistance;                                    // 0x00D8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MinStaminaPercentageForDeathKill;                         // 0x00DC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PlayRateMinStamina;                                       // 0x00E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PlayRateMaxStamina;                                       // 0x00E4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FBendMeleeAttacks                           DefaultAnimations;                                        // 0x00E8(0x0120) (Edit, DisableEditOnInstance)
	TArray<struct FBendMeleeAttacks>                   MeleeAttackAnimations;                                    // 0x0208(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData01[0x18];                                      // 0x0218(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAnimState_MeleeAttack");
		return ptr;
	}


	bool TryQuickReleaseMove();
	bool TryNextMeleeMove();
};


// Class BendGame.BendAnimState_Perching
// 0x0000 (0x00B0 - 0x00B0)
class UBendAnimState_Perching : public UBendAnimState_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAnimState_Perching");
		return ptr;
	}

};


// Class BendGame.BendAnimState_Ragdoll
// 0x0008 (0x00B8 - 0x00B0)
class UBendAnimState_Ragdoll : public UBendAnimState_Base
{
public:
	float                                              RagdollBlendOutTime;                                      // 0x00B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00B4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAnimState_Ragdoll");
		return ptr;
	}

};


// Class BendGame.BendAnimState_RagdollGetup
// 0x0000 (0x00B0 - 0x00B0)
class UBendAnimState_RagdollGetup : public UBendAnimState_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAnimState_RagdollGetup");
		return ptr;
	}

};


// Class BendGame.BendAnimState_Swimming
// 0x0008 (0x00B8 - 0x00B0)
class UBendAnimState_Swimming : public UBendAnimState_Base
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x00B0(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAnimState_Swimming");
		return ptr;
	}

};


// Class BendGame.BendAnimState_Vehicle
// 0x0008 (0x00B8 - 0x00B0)
class UBendAnimState_Vehicle : public UBendAnimState_Base
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x00B0(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAnimState_Vehicle");
		return ptr;
	}

};


// Class BendGame.BendStateMachineComponent
// 0x0010 (0x0240 - 0x0230)
class UBendStateMachineComponent : public UChildActorComponent
{
public:
	class UClass*                                      m_StateMachineClass;                                      // 0x0230(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class ABendStateMachine*                           m_StateMachine;                                           // 0x0238(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DuplicateTransient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendStateMachineComponent");
		return ptr;
	}

};


// Class BendGame.BendStaticHelpers
// 0x0000 (0x0028 - 0x0028)
class UBendStaticHelpers : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendStaticHelpers");
		return ptr;
	}


	TArray<struct FTraversalEdge> STATIC_SortCrowEdgesByDistance(TArray<struct FTraversalEdge> Range, const struct FVector& Position, bool bAscending);
	struct FTraversalEdge STATIC_SelectRandomCrowEdge(TArray<struct FTraversalEdge> Range);
	struct FTraversalEdge STATIC_SelectClosestCrowEdge(TArray<struct FTraversalEdge> Range, const struct FVector& Position, bool bInverse);
	void STATIC_SafeDestroy(class UObject* ToDestroy);
	TArray<class ABendPOI*> STATIC_POIsInDefendZone(TArray<class ABendPOI*> Range, const struct FDefendZoneInfo& Zone, bool bOnlyPrimaryZone, bool bInverse);
	TArray<class ABendPOI*> STATIC_POIsInArea(TArray<class ABendPOI*> Range, const struct FVector& Center, float Radius, bool bInverse);
	class UActorComponent* STATIC_GetComponentByClass(class AActor* Actor, class UClass* ComponentClass);
	struct FTransform STATIC_GenerateTransformFromTraversalEdge(const struct FTraversalEdge& Edge, bool Rotated180);
	TArray<class ABendPOI*> STATIC_FindPOIsInRange(const struct FVector& Center, float Radius);
	TArray<class ABendPOI*> STATIC_FindPOIsInDefendZone(const struct FDefendZoneInfo& Zone, bool bOnlyPrimaryZone);
	TArray<struct FTraversalEdge> STATIC_FindCrowEdgesInDefendZone(const struct FDefendZoneInfo& defendZone, bool bOnlyPrimaryZone);
	TArray<struct FTraversalEdge> STATIC_FindCrowEdgesInArea(const struct FVector& Center, float Radius);
	TArray<struct FTraversalEdge> STATIC_CrowEdgesInDefendZone(TArray<struct FTraversalEdge> Range, const struct FDefendZoneInfo& Zone, bool bOnlyPrimaryZone, bool bInverse);
	TArray<struct FTraversalEdge> STATIC_CrowEdgesInArea(TArray<struct FTraversalEdge> Range, const struct FVector& Center, float Radius, bool bInverse);
};


// Class BendGame.BendStaticMeshArrayData
// 0x0010 (0x0038 - 0x0028)
class UBendStaticMeshArrayData : public UDataAsset
{
public:
	TArray<TAssetPtr<class UStaticMesh>>               StaticMeshArray;                                          // 0x0028(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendStaticMeshArrayData");
		return ptr;
	}


	bool RemoveAtIndex(int Index);
	class UStaticMesh* GetMeshAtIndex(int Index);
	int GetArraySize();
	int GetArrayLastIndex();
	bool ContainsWeak(TAssetPtr<class UStaticMesh> StaticMesh);
	bool Contains(class UStaticMesh* StaticMesh);
};


// Class BendGame.BendStoryLineData
// 0x17B8 (0x17E0 - 0x0028)
class UBendStoryLineData : public UDataAsset
{
public:
	struct FBendStoryLinesData                         StoryLines[0x1D];                                         // 0x0028(0x00D0) (Edit)
	bool                                               ForceUpdateAllToCurentData;                               // 0x17B8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x17B9(0x0007) MISSED OFFSET
	class UDataTable*                                  MissionDataTable;                                         // 0x17C0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UDataTable*                                  JobDataTable;                                             // 0x17C8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TArray<struct FString>                             AllKeyDataStrings;                                        // 0x17D0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendStoryLineData");
		return ptr;
	}


	struct FBendStoryLineRewards GetRewardDataFromStoryLineInfo(TEnumAsByte<EStoryLines> StoryLineID, const struct FGameplayTag& AssetToCheckAgainst, TAssetPtr<class UTexture2D>* CoverImage);
	struct FBendStoryLinesBasicDataForUI GetBasicStoryLineDataFromID(TEnumAsByte<EStoryLines> StoryLineID, bool WillDisplayRewardIfCompleted);
	TArray<struct FBendStoryLinesBasicDataForUI> GetBasicStoryLineDataForUI(class UBendMissionData* MissionData, class UJobClassInfo* JobData, bool WillDisplayRewardIfCompleted);
	TArray<struct FBendStoryLinesForScripting> GetAllStoryLines(bool OnlyIncludeDiscovered);
	TArray<struct FBendStoryLinesBasicDataForUI> GetAllStoryLineRewardsAtReferencedCount(const struct FBendStoryLinesBasicDataForUI& ReferencedStoryLine);
};


// Class BendGame.BendStreamingManager
// 0x00F8 (0x0120 - 0x0028)
class UBendStreamingManager : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	struct FStreamableManager                          StreamManager;                                            // 0x0030(0x00A0)
	unsigned char                                      UnknownData01[0x50];                                      // 0x00D0(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendStreamingManager");
		return ptr;
	}


	void Unload(TAssetPtr<class UObject> Target);
	bool RequestAsyncLoadBPCallback(TAssetPtr<class UObject> Target, const struct FScriptDelegate& DelegateToCall);
	void RequestAsyncLoadArrayBPCallback(const struct FBendAsyncObjectLoadList& Targets, const struct FScriptDelegate& DelegateToCall);
	class UBendStreamingManager* STATIC_Get();
	void BPDelegateReturned(TAssetPtr<class UObject> Target);
};


// Class BendGame.BendStreamingOverrideActor
// 0x0048 (0x0390 - 0x0348)
class ABendStreamingOverrideActor : public AActor
{
public:
	struct FStreamingOverrideSettings                  StreamingOverrideData;                                    // 0x0348(0x0040) (Edit, BlueprintVisible, BlueprintReadOnly)
	bool                                               bAlreadyExecutedEndPlay;                                  // 0x0388(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0389(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendStreamingOverrideActor");
		return ptr;
	}


	void RemoveStreamOverrideSettings();
	void LatentExecuteSettings();
	void HandleOnVolumeOverlapEnd(class AActor* TriggerSelf, class AActor* OtherActor);
	void HandleOnVolumeOverlapBegin(class AActor* TriggerSelf, class AActor* OtherActor);
	void ExecuteStreamOverrideSettings();
};


// Class BendGame.BendStreamingOverrideManager
// 0x0020 (0x0368 - 0x0348)
class ABendStreamingOverrideManager : public AActor
{
public:
	struct FScriptMulticastDelegate                    OnPerformActionOnStreamingLevelsUpdated;                  // 0x0348(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	TArray<struct FStreamingOverrideAction>            ActiveStreamingOverrideActions;                           // 0x0358(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendStreamingOverrideManager");
		return ptr;
	}


	void RestoreStreamGroupToPreviousValue(struct FStreamingOverrideCommand* CommandToWalkBack);
	void RestoreAllStreamingDistances();
	void RemoveStreamingOverrideCommands(class ABendStreamingOverrideActor* OverrideOwner);
	void RemoveAllStreamingOverrides();
	void PerformActionOnStreamingLevels(struct FStreamingOverrideSettings* StreamOverrideSettings);
	void ExecuteStreamingOverrideCommands(class ABendStreamingOverrideActor* OverrideOwner, struct FStreamingOverrideSettings* StreamOverrideSettings);
	void ExecuteSetStreamingDistance(const struct FString& StreamingCommand);
	void ExecuteRestoreStreamingDistance(const struct FString& StreamingCommand);
	void ExecuteConsoleCommand(const struct FString& ConsoleCommand);
	void ClearActionOnStreamingLevels(struct FStreamingOverrideSettings* StreamOverrideSettings);
};


// Class BendGame.BendSurfaceType
// 0x0200 (0x0548 - 0x0348)
class ABendSurfaceType : public AActor
{
public:
	TEnumAsByte<EPhysicalSurface>                      TypeOfSurface;                                            // 0x0348(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<EPhysicalSurface>                      TypeOfSurfaceWhenWet;                                     // 0x0349(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<EPhysicalSurface>                      TypeOfSurfaceWhenSnowCovered;                             // 0x034A(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<EBendVehicleRoadSurfaceType>           RoadSurfaceType;                                          // 0x034B(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x034C(0x0004) MISSED OFFSET
	struct FSurfaceTypeFxData_Simple                   VehicleBodyImpactFX;                                      // 0x0350(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FSurfaceTypeFxData_Simple                   VehicleBodyGrindingFX;                                    // 0x0358(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FSurfaceTypeFxData_Simple                   VehicleTireRollingFX;                                     // 0x0360(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FSurfaceTypeFxData_Simple                   VehicleTireSlippingFX;                                    // 0x0368(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FSurfaceTypeFxData_Simple                   VehicleTireSlidingFX;                                     // 0x0370(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FSurfaceTypeFxData_Simple                   VehicleTireRollingWetFX;                                  // 0x0378(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FSurfaceTypeFxData_Simple                   VehicleTireSlippingWetFX;                                 // 0x0380(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FSurfaceTypeFxData_Simple                   VehicleTireSlidingWetFX;                                  // 0x0388(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FSurfaceTypeFxData_Simple                   VehicleTireSplashingFX;                                   // 0x0390(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FSurfaceTypeFxData_Simple                   VehicleBodySplashingFX;                                   // 0x0398(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FSurfaceTypeFxData_Simple                   VehicleTireRollingSnowFX;                                 // 0x03A0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FSurfaceTypeFxData_Simple                   VehicleTireSlippingSnowFX;                                // 0x03A8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FSurfaceTypeFxData_Simple                   VehicleTireSlidingSnowFX;                                 // 0x03B0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FSurfaceTypeTireMarkData                    TireMarkData;                                             // 0x03B8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class USoundBase*                                  VehicleRoadNoiseSoundFX;                                  // 0x03C8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBendVehicleGroundSurfaceBumpiness*          VehicleGroundSurfaceBumpiness;                            // 0x03D0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FSurfaceTypeFxData_Simple                   CharacterBodySplashingFX;                                 // 0x03D8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FSurfaceTypeFxData_Simple                   CharacterFootSplashingFX;                                 // 0x03E0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<struct FString>                             ValidSoundBankNames;                                      // 0x03E8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FSurfaceTypeFxData>                  SurfaceTypeFXs;                                           // 0x03F8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TMap<struct FName, class USoundCue*>               SoundCueMap;                                              // 0x0408(0x0050) (ZeroConstructor)
	TMap<struct FName, class USoundCue*>               PlayerSoundCueMap;                                        // 0x0458(0x0050) (ZeroConstructor)
	TMap<struct FName, class USoundCue*>               FriendSoundCueMap;                                        // 0x04A8(0x0050) (ZeroConstructor)
	TMap<struct FName, class UParticleSystem*>         ParticleMap;                                              // 0x04F8(0x0050) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendSurfaceType");
		return ptr;
	}

};


// Class BendGame.BendSurfaceTypeManager
// 0x22F0 (0x2318 - 0x0028)
class UBendSurfaceTypeManager : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0028(0x0010) MISSED OFFSET
	TMap<TEnumAsByte<EPhysicalSurface>, class ABendSurfaceType*> ToSurfaceType;                                            // 0x0038(0x0050) (ZeroConstructor)
	unsigned char                                      UnknownData01[0x2290];                                    // 0x0088(0x2290) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendSurfaceTypeManager");
		return ptr;
	}


	void PlaySurfaceImpactFX(class USkeletalMeshComponent* SkeletalMesh, TEnumAsByte<EPhysicalSurface> SurfaceType, const struct FName& FXName, bool IsPlayer, const struct FVector& Location, float Volume);
	void PlayImpactFX(class UObject* WorldContext, bool IsPlayer, const struct FVector& Location, class USoundCue* SndCueSurface, class UParticleSystem* ParticleSurface, class USoundCue* SndCuePuddle, class UParticleSystem* ParticlePuddle, float Volume, const struct FString& SurfaceTypeName);
	struct FString GetSurfaceTypeName(TEnumAsByte<EPhysicalSurface> SurfaceType);
	class UBendSurfaceTypeManager* STATIC_GetBendSurfaceTypeManager();
	class ABendSurfaceType* BendGetSurfaceType_GivenSurfaceConditions(TEnumAsByte<EPhysicalSurface> SurfaceType, float WetnessThreshold0To1);
	class ABendSurfaceType* BendGetSurfaceType(TEnumAsByte<EPhysicalSurface> SurfaceType);
	class USoundCue* BendGetSoundCue(TEnumAsByte<EPhysicalSurface> SurfaceType, const struct FName& FXName, bool bIsPlayer, bool bFallbackToDefault);
	class UParticleSystem* BendGetParticle(TEnumAsByte<EPhysicalSurface> SurfaceType, const struct FName& FXName);
	struct FString BendGetEnumName(class UEnum* enumType, int idx);
	struct FSurfaceTypeDecal BendGetDecal(TEnumAsByte<EPhysicalSurface> SurfaceType, const struct FName& FXName, const struct FName& DecalKey);
};


// Class BendGame.BendTireMarkComponent
// 0x0020 (0x00F0 - 0x00D0)
class UBendTireMarkComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x00D0(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendTireMarkComponent");
		return ptr;
	}


	class UDecalComponent* AddTireMarkDecal(class UBendMovementComp_VehicleNoDrive* MovementComponent, int WheelIndex, class ABendSurfaceType* SurfaceTypeData, const struct FVector& StartLocation, const struct FVector& EndLocation, float TireWidth, float LifeSpan);
};


// Class BendGame.BendTrackingMinimapMarker_BP
// 0x0030 (0x0378 - 0x0348)
class ABendTrackingMinimapMarker_BP : public AActor
{
public:
	bool                                               AlphaLowered;                                             // 0x0348(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0349(0x0007) MISSED OFFSET
	class UTimelineComponent*                          MyTimeline;                                               // 0x0350(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UCurveFloat*                                 FloatCurve;                                               // 0x0358(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  MapRegionTexture;                                         // 0x0360(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UMiniMapLocationComponent*                   MinimapLocation_CODE;                                     // 0x0368(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0370(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendTrackingMinimapMarker_BP");
		return ptr;
	}


	void UpdateObjectAlpha(float NewAlpha);
	void TimelineCallback(float Val);
	void SetIsFootprint(bool IsFootprint);
	void Enable_DisableMarker(bool enable, float RegionSize, bool OnlyForMinimap);
};


// Class BendGame.BendAutoTraversalNavLink
// 0x0000 (0x0450 - 0x0450)
class ABendAutoTraversalNavLink : public ABendTraversalNavLink
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAutoTraversalNavLink");
		return ptr;
	}

};


// Class BendGame.BendTriggerVolume
// 0x0020 (0x03A8 - 0x0388)
class ABendTriggerVolume : public AVolume
{
public:
	struct FScriptMulticastDelegate                    OnActorBeginOverlapReturnSelf;                            // 0x0388(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnActorEndOverlapReturnSelf;                              // 0x0398(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendTriggerVolume");
		return ptr;
	}

};


// Class BendGame.BendTutorialCloseInterface
// 0x0000 (0x0028 - 0x0028)
class UBendTutorialCloseInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendTutorialCloseInterface");
		return ptr;
	}


	void OnTutorialClosed();
};


// Class BendGame.BendTutorialManager
// 0x0020 (0x0048 - 0x0028)
class UBendTutorialManager : public UObject
{
public:
	TArray<struct FBendTutorialSimple>                 SimpleTutorials;                                          // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FBendTutorialMultiLine>              MultiTutorials;                                           // 0x0038(0x0010) (Edit, BlueprintVisible, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendTutorialManager");
		return ptr;
	}


	void ReleaseTutorialImage(const struct FName& TutorialName);
	int GetUnlockedTutorials(bool GetAllTutorials, TArray<struct FBendTutorialSimple>* OutTutorials);
	bool GetSimpleTutorial(const struct FName& TutorialName, struct FBendTutorialSimple* OutTutorial);
	bool GetMultiTutorial(const struct FName& TutorialName, struct FBendTutorialMultiLine* OutTutorial);
	bool CacheTutorialImage(const struct FName& TutorialName);
};


// Class BendGame.BendTutorialMultiData
// 0x0050 (0x0078 - 0x0028)
class UBendTutorialMultiData : public UDataAsset
{
public:
	struct FText                                       Title;                                                    // 0x0028(0x0018) (Edit, BlueprintVisible)
	TArray<struct FText>                               Subtitles;                                                // 0x0040(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FText>                               Description;                                              // 0x0050(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<class UTexture2D*>                          Images;                                                   // 0x0060(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	bool                                               bTutorialDisplayed;                                       // 0x0070(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0071(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendTutorialMultiData");
		return ptr;
	}

};


// Class BendGame.BendTutorialSimpleData
// 0x0038 (0x0060 - 0x0028)
class UBendTutorialSimpleData : public UDataAsset
{
public:
	struct FText                                       Title;                                                    // 0x0028(0x0018) (Edit, BlueprintVisible)
	struct FText                                       Description;                                              // 0x0040(0x0018) (Edit, BlueprintVisible)
	bool                                               bTutorialDisplayed;                                       // 0x0058(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0059(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendTutorialSimpleData");
		return ptr;
	}

};


// Class BendGame.BendUIFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UBendUIFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendUIFunctionLibrary");
		return ptr;
	}


	TEnumAsByte<EHudWeaponWidgetSlot> STATIC_WeaponTypeToSlot(TEnumAsByte<EWeaponType> WeaponType);
	void STATIC_TweenVectorParameter(class UObject* WorldContextObject, class UMaterialInstanceDynamic* MaterialInstanceDynamic, float Duration, const struct FLinearColor& ValueFrom, const struct FLinearColor& ValueTo, bool* IsTweening, struct FName* ParameterName, float* Progress);
	void STATIC_TweenTranslation(class UObject* WorldContextObject, class UBorder* Border, float Duration, const struct FVector2D& From, const struct FVector2D& To, bool* IsTweening, float* Progress);
	void STATIC_TweenScalarParameter(class UObject* WorldContextObject, float Duration, class UMaterialInstanceDynamic* MaterialInstanceDynamic, float Start, float End, TEnumAsByte<EEasingFunc> Easing, float* Progress, struct FName* ParameterName);
	void STATIC_TweenColor(class UObject* WorldContextObject, class UBorder* Border, float Duration, const struct FLinearColor& ColorFrom, const struct FLinearColor& ColorTo, TEnumAsByte<EEasingFunc> EaseType, bool* IsTweening, float* Progress);
	void STATIC_TweenCollapseHeight(bool IsTweening, class USizeBox* SizeBox, float Frame, float Speed, float Height, float* FrameOut, bool* IsTweeningOut);
	void STATIC_TweenAlignment(class UObject* WorldContextObject, class UCanvasPanelSlot* Slot, float Duration, const struct FVector2D& From, const struct FVector2D& To, bool* IsTweening, float* Progress);
	struct FVector2D STATIC_SmoothPosition2D(const struct FVector2D& TargetPosition, const struct FVector2D& PreviousPosition, float Speed);
	void STATIC_SetWidgetToActorPosition(class UObject* WorldContextObject, const struct FVector& WorldLocation, class UWidget* WidgetRef, bool Centered, struct FVector2D* ScreenPosition, bool* WithinViewport);
	void STATIC_SetIconGridBGs(TArray<class UTexture2D*> ImageBGs, int Columns, int Rows, class UGridPanel* GridPanel);
	void STATIC_PerformSwipeCheck(const struct FVector2D& Start, const struct FVector2D& End, TEnumAsByte<ESwipeResult>* Result, TEnumAsByte<ESwipeDirection>* Direction, float* angle);
	float STATIC_NormalizeAngle(class UObject* WorldContextObject, float angle);
	bool STATIC_IsTutorialUnlocked(class UObject* WorldContextObject, const struct FName& TutorialName, bool SetUnlockedIfLocked);
	float STATIC_IncrementProgress(class UObject* WorldContextObject, float Duration, float* Progress);
	struct FText STATIC_GetWorldTimeFriendly(class UObject* WorldContextObject);
	void STATIC_GetUIColor(TEnumAsByte<EUI_Color_Names> Name, struct FLinearColor* Color, struct FSlateColor* SlateColor);
	struct FBendTutorialSimple STATIC_GetSimpleTutorialDetails(const struct FName& TutorialName);
	struct FBendTutorialMultiLine STATIC_GetMultiTutorialDetails(const struct FName& TutorialName);
	class UTexture2D* STATIC_GetButtonTextureByMarkup(class UDataTable* DataTable, const struct FString& Markup, class UTexture2D* DefaultTexture, bool* IsMashing);
	class UTexture2D* STATIC_GetButtonTextureByEnum(class UDataTable* DataTable, TEnumAsByte<EControllerInputButton> Button, class UTexture2D* DefaultTexture, struct FVector2D* Dimensions);
	int STATIC_GetAmmoCount(class ABendPlayerController* PlayerController, class ABendWeapon* Weapon);
	struct FVector2D STATIC_FollowActorInScreenSpace(class AActor* Actor, const struct FName& SocketName, const struct FVector& Offset, class ABendPlayerController* PlayerController, bool SmoothMotion, const struct FVector2D& PreviousPosition, class USceneComponent* OverrideComponent);
	struct FLinearColor STATIC_EaseLinearColor(class UObject* WorldContextObject, TEnumAsByte<EEasingFunc> Function, float Alpha, const struct FLinearColor& SourceColor, const struct FLinearColor& DestinationColor);
	class UHudMissionTimerWidget* STATIC_ActivateObjectiveMeter(class UObject* WorldContextObject, class UTexture2D* Icon, float Time, bool Inverted);
};


// Class BendGame.InventoryPartStorage
// 0x0018 (0x0068 - 0x0050)
class UInventoryPartStorage : public UInventoryStorage
{
public:
	TEnumAsByte<EInventoryBaseType>                    PartStorageType;                                          // 0x0050(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x17];                                      // 0x0051(0x0017) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.InventoryPartStorage");
		return ptr;
	}


	bool ContainsPart(const struct FInventoryPart& Part);
	bool AddPart(const struct FInventoryPart& Part);
};


// Class BendGame.BikeTheme
// 0x00A0 (0x00C8 - 0x0028)
class UBikeTheme : public UObject
{
public:
	unsigned char                                      UnknownData00[0x80];                                      // 0x0028(0x0080) MISSED OFFSET
	TArray<class UMaterialInstance*>                   Materials;                                                // 0x00A8(0x0010) (ZeroConstructor, Transient)
	TArray<class UTexture2D*>                          Decals;                                                   // 0x00B8(0x0010) (ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BikeTheme");
		return ptr;
	}


	void OnTank(const struct FName& SkinKey);
	void OnPaint(const struct FName& SkinKey);
	void OnBody(const struct FName& SkinKey);
};


// Class BendGame.InventoryBikeMaterials
// 0x00D8 (0x0100 - 0x0028)
class UInventoryBikeMaterials : public UDataAsset
{
public:
	class UBikeTheme*                                  CurrentBikeTheme;                                         // 0x0028(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x28];                                      // 0x0030(0x0028) MISSED OFFSET
	TArray<struct FInventoryBikeSkinDef>               PartSkins;                                                // 0x0058(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<struct FInventoryMaterialGroup>             MaterialGroups;                                           // 0x0068(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<struct FInventoryBikePartDecal>             DecalDefs;                                                // 0x0078(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<struct FInventoryBikeSkin>                  Skins;                                                    // 0x0088(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	struct FName                                       TankDecalEnableParamName;                                 // 0x0098(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       TankDecalMatParamName;                                    // 0x00A0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       TankDecalTintMatParamName;                                // 0x00A8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x50];                                      // 0x00B0(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.InventoryBikeMaterials");
		return ptr;
	}


	bool UnlockSkin(const struct FGameplayTag& Tag);
	void TryToApplyTheme(class UBikeTheme* BikeTheme);
	bool IsSkinUnlocked(const struct FGameplayTag& Tag);
	bool FreeBikeSkin(const struct FName& SkinKey);
	bool ContainsSkin(const struct FGameplayTag& Tag);
	struct FName CacheBikeSkin(const struct FGameplayTag& SkinTag, const struct FInventoryBikePartCustomDecal& Decal, class AVehiclePawn* Vehicle, const struct FScriptDelegate& OnSkinLoaded);
	void ApplyBikeTheme(const struct FGameplayTag& PaintTag, const struct FGameplayTag& BodyTag, const struct FGameplayTag& TankTag, class AVehiclePawn* Vehicle);
	bool ApplyBikeSkin(const struct FName& SkinKey, class AVehiclePawn* Vehicle);
};


// Class BendGame.InventoryBikePartStorage
// 0x0078 (0x00E0 - 0x0068)
class UInventoryBikePartStorage : public UInventoryPartStorage
{
public:
	TArray<struct FInventoryBikePartStorageEquipSlot>  EquipSlots;                                               // 0x0068(0x0010) (ZeroConstructor, Transient)
	TArray<struct FGameplayTag>                        UnlockedSkinTags;                                         // 0x0078(0x0010) (BlueprintVisible, ZeroConstructor, Transient)
	class UInventoryBikeMaterials*                     BikeMaterials;                                            // 0x0088(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0090(0x0010) MISSED OFFSET
	struct FGameplayTag                                Stored_EquippedSkinTagParts;                              // 0x00A0(0x0008) (Edit, BlueprintVisible, Transient, DisableEditOnInstance)
	struct FGameplayTag                                Stored_EquippedSkinTagChassis;                            // 0x00A8(0x0008) (Edit, BlueprintVisible, Transient, DisableEditOnInstance)
	struct FGameplayTag                                Stored_EquippedSkinTagTank;                               // 0x00B0(0x0008) (Edit, BlueprintVisible, Transient, DisableEditOnInstance)
	struct FInventoryBikePartCustomDecal               CustomDecal;                                              // 0x00B8(0x0018) (BlueprintVisible, SaveGame)
	struct FScriptMulticastDelegate                    OnBikePartEquipDelegate;                                  // 0x00D0(0x0010) (ZeroConstructor, Transient, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.InventoryBikePartStorage");
		return ptr;
	}


	bool UnlockSkin(const struct FGameplayTag& Tag);
	bool IsSkinUnlocked(const struct FGameplayTag& Tag);
	bool IsSkinEquipped();
	void GuidQuery(const struct FGameplayTagQuery& Query, TArray<struct FInventoryGuidSlot>* OutGuids);
	struct FInventoryPart GetEquippedPartOfType(TEnumAsByte<EMotorcyclePartType> PartType);
	TArray<class UInventoryItem*> GetAllUnlockedSkinsInventoryItems();
	TArray<class UInventoryItem*> GetAllBikeItemParts();
	bool EquipPartFromInventoryItem(class UInventoryItemMotorcyclePart* ItemPart, class AVehiclePawn* Vehicle);
	void EquipDefaultParts();
	bool EquipBikePart(const struct FInventoryPart& Part, class AVehiclePawn* Vehicle);
	void ApplyToVehicle(class AVehiclePawn* Vehicle);
	void ApplyBikeSkin(const struct FGameplayTag& SkinTag, int SkinIndex);
	void AddVehiclePartsToStorage(class AVehiclePawn* Vehicle);
	bool AddPartFromInventoryItem(class UInventoryItemMotorcyclePart* ItemPart);
	void AddDefaultParts();
};


// Class BendGame.BendUnlockData
// 0x0040 (0x0068 - 0x0028)
class UBendUnlockData : public UDataAsset
{
public:
	TArray<struct FUnlockableSkill>                    UnlockableSkills;                                         // 0x0028(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FUnlockableWeapon>                   UnlockableWeapons;                                        // 0x0038(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FUnlockableBikePart>                 UnlockableBikeParts;                                      // 0x0048(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FUnlockableBikeSkin>                 UnlockableBikeSkins;                                      // 0x0058(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendUnlockData");
		return ptr;
	}

};


// Class BendGame.BendUnlockManager
// 0x0028 (0x0050 - 0x0028)
class UBendUnlockManager : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	class UBendUnlockData*                             UnlockableData;                                           // 0x0030(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x18];                                      // 0x0038(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendUnlockManager");
		return ptr;
	}


	void UnlockEntitlements();
	class UBendUnlockManager* STATIC_GetUnlockManager();
	bool EquipBikePartUnlocks();
};


// Class BendGame.BendBrightnessCondition
// 0x0008 (0x0040 - 0x0038)
class UBendBrightnessCondition : public UBendUseCondition
{
public:
	float                                              MinBrightness;                                            // 0x0038(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxBrightness;                                            // 0x003C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBrightnessCondition");
		return ptr;
	}

};


// Class BendGame.BendGameDBCondition
// 0x0048 (0x0080 - 0x0038)
class UBendGameDBCondition : public UBendUseCondition
{
public:
	TEnumAsByte<EGameDatabaseCategory>                 VarCategory;                                              // 0x0038(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0039(0x0007) MISSED OFFSET
	struct FName                                       VarName;                                                  // 0x0040(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EGameDataType>                         VarType;                                                  // 0x0048(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bNot;                                                     // 0x0049(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EeGameDBComparison>                    CompareMethod;                                            // 0x004A(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               BoolValue;                                                // 0x004B(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                IntValue;                                                 // 0x004C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FloatValue;                                               // 0x0050(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0054(0x0004) MISSED OFFSET
	struct FString                                     StringValue;                                              // 0x0058(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FVector                                     VectorValue;                                              // 0x0068(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              VectorRadius;                                             // 0x0074(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bResultIfNotFound;                                        // 0x0078(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0079(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendGameDBCondition");
		return ptr;
	}

};


// Class BendGame.BendMaxSpawnCount_Condition
// 0x0008 (0x0040 - 0x0038)
class UBendMaxSpawnCount_Condition : public UBendUseCondition
{
public:
	TEnumAsByte<EAIFactionType>                        Faction;                                                  // 0x0038(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0039(0x0003) MISSED OFFSET
	int                                                SpawnLimit;                                               // 0x003C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendMaxSpawnCount_Condition");
		return ptr;
	}

};


// Class BendGame.BendNumberOfSpawnsCondition
// 0x0010 (0x0048 - 0x0038)
class UBendNumberOfSpawnsCondition : public UBendUseCondition
{
public:
	TEnumAsByte<EAIFactionType>                        Faction;                                                  // 0x0038(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0039(0x0003) MISSED OFFSET
	int                                                NumberToCompareAgainst;                                   // 0x003C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EComparison>                           CompareType;                                              // 0x0040(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0041(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendNumberOfSpawnsCondition");
		return ptr;
	}

};


// Class BendGame.BendOnlyOnceCondition
// 0x0008 (0x0040 - 0x0038)
class UBendOnlyOnceCondition : public UBendUseCondition
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0038(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendOnlyOnceCondition");
		return ptr;
	}

};


// Class BendGame.BendOrCondition
// 0x0010 (0x0048 - 0x0038)
class UBendOrCondition : public UBendUseCondition
{
public:
	TArray<TAssetPtr<class UClass>>                    OrConditionClasses;                                       // 0x0038(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendOrCondition");
		return ptr;
	}

};


// Class BendGame.BendSingleSpawnType_Condition
// 0x0008 (0x0040 - 0x0038)
class UBendSingleSpawnType_Condition : public UBendUseCondition
{
public:
	TEnumAsByte<EAIFactionType>                        Faction;                                                  // 0x0038(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0039(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendSingleSpawnType_Condition");
		return ptr;
	}

};


// Class BendGame.BendSpawnLimitCondition
// 0x0008 (0x0040 - 0x0038)
class UBendSpawnLimitCondition : public UBendUseCondition
{
public:
	bool                                               Important;                                                // 0x0038(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ESpawnImportance>                      importance;                                               // 0x0039(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x003A(0x0002) MISSED OFFSET
	int                                                SpawnsNeeded;                                             // 0x003C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendSpawnLimitCondition");
		return ptr;
	}

};


// Class BendGame.BendSpawnRate_Condition
// 0x0008 (0x0040 - 0x0038)
class UBendSpawnRate_Condition : public UBendUseCondition
{
public:
	int                                                HoursNeededToPass;                                        // 0x0038(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<EAIFactionType>                        Faction;                                                  // 0x003C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x003D(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendSpawnRate_Condition");
		return ptr;
	}

};


// Class BendGame.BendSpawnRateControl_Condition
// 0x0020 (0x0058 - 0x0038)
class UBendSpawnRateControl_Condition : public UBendUseCondition
{
public:
	float                                              TimeTillRespawnRangeMultiplyer;                           // 0x0038(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TimeTillRespawnBasedOnSeconds;                            // 0x003C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<EAIFactionType>                        Faction;                                                  // 0x0040(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0041(0x0003) MISSED OFFSET
	float                                              Level15Multiplier;                                        // 0x0044(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              Level25Multiplier;                                        // 0x0048(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              Level35Multiplier;                                        // 0x004C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                BlockerLimit;                                             // 0x0050(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0054(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendSpawnRateControl_Condition");
		return ptr;
	}

};


// Class BendGame.BendSpawnRateP2_Condition
// 0x0008 (0x0040 - 0x0038)
class UBendSpawnRateP2_Condition : public UBendUseCondition
{
public:
	TEnumAsByte<EAIFactionType>                        Faction;                                                  // 0x0038(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0039(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendSpawnRateP2_Condition");
		return ptr;
	}

};


// Class BendGame.BendTypeAvailInPool_Condition
// 0x0008 (0x0040 - 0x0038)
class UBendTypeAvailInPool_Condition : public UBendUseCondition
{
public:
	TEnumAsByte<EAIFactionType>                        Faction;                                                  // 0x0038(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0039(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendTypeAvailInPool_Condition");
		return ptr;
	}

};


// Class BendGame.BendWeatherCondition
// 0x0010 (0x0048 - 0x0038)
class UBendWeatherCondition : public UBendUseCondition
{
public:
	TArray<TEnumAsByte<EWeatherType>>                  WeatherItems;                                             // 0x0038(0x0010) (Edit, BlueprintVisible, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendWeatherCondition");
		return ptr;
	}

};


// Class BendGame.CategoryMenuWidgetSelectionInterface
// 0x0000 (0x0028 - 0x0028)
class UCategoryMenuWidgetSelectionInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.CategoryMenuWidgetSelectionInterface");
		return ptr;
	}


	bool IOnCategorySelectionModified(int Index, bool IsSelected);
	bool IOnCategorySelected(int Index, bool IsSelected);
};


// Class BendGame.CategoryMenuEntryWidget
// 0x0028 (0x0270 - 0x0248)
class UCategoryMenuEntryWidget : public UUserWidget
{
public:
	struct FScriptMulticastDelegate                    OnHover;                                                  // 0x0248(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnClick;                                                  // 0x0258(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	int                                                CursorPosition;                                           // 0x0268(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	unsigned char                                      bDisabled : 1;                                            // 0x026C(0x0001) (Edit, BlueprintVisible, Transient, EditConst)
	unsigned char                                      UnknownData00[0x3];                                       // 0x026D(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.CategoryMenuEntryWidget");
		return ptr;
	}


	void SetText(const struct FText& Text);
	void SetSelected(bool IsSelected);
	void SetDisabled(bool IsDisabled);
};


// Class BendGame.CategoryMenuWidget
// 0x0050 (0x03A0 - 0x0350)
class UCategoryMenuWidget : public UBaseMenuWidget
{
public:
	TScriptInterface<class UCategoryMenuWidgetSelectionInterface> SelectionInterface;                                       // 0x0350(0x0010) (Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnCategorySelectionModifed;                               // 0x0360(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnCategoryActivated;                                      // 0x0370(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	int                                                CategoryIndex;                                            // 0x0380(0x0004) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	int                                                MaxCategoryIndex;                                         // 0x0384(0x0004) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      bCategorySelected : 1;                                    // 0x0388(0x0001) (BlueprintVisible, Transient)
	unsigned char                                      bEnableCategoryWrap : 1;                                  // 0x0388(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0389(0x0007) MISSED OFFSET
	TArray<class UCategoryMenuEntryWidget*>            CategoryWidgets;                                          // 0x0390(0x0010) (BlueprintVisible, ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.CategoryMenuWidget");
		return ptr;
	}


	void SetCategoryActivated(bool Activated);
	void SetCategory(int Index);
	bool IsCategorySelected();
	void InitializeCategoryText(TArray<struct FText> Text);
	class UCategoryMenuEntryWidget* GetEntryWidget(int Index);
	int GetCategory();
	void ForceSelection(int Index);
	void DeactivateSelectedCategory();
};


// Class BendGame.DLCChallengeCompleteMenu
// 0x0040 (0x0390 - 0x0350)
class UDLCChallengeCompleteMenu : public UBaseMenuWidget
{
public:
	struct FGameplayTag                                ChallengeKey;                                             // 0x0350(0x0008) (BlueprintVisible, BlueprintReadOnly)
	int                                                ChallengeScore;                                           // 0x0358(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x035C(0x0004) MISSED OFFSET
	TArray<int>                                        SubChallengeScores;                                       // 0x0360(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	struct FText                                       FailureReason;                                            // 0x0370(0x0018) (BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0388(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.DLCChallengeCompleteMenu");
		return ptr;
	}


	void SetChallengeData(const struct FGameplayTag& Key, int InChallengeScore, TArray<int> InSubChallengeScores);
	void OnFailure();
	void OnChallengeData();
	void FailChallenge(const struct FGameplayTag& Key, const struct FText& Reason);
};


// Class BendGame.InputInteractWidget
// 0x0030 (0x0380 - 0x0350)
class UInputInteractWidget : public UBaseMenuWidget
{
public:
	float                                              ProgressPercent;                                          // 0x0350(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0354(0x0004) MISSED OFFSET
	TArray<class UTexture2D*>                          ButtonTextures;                                           // 0x0358(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FName                                       ProgressScalarName;                                       // 0x0368(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	class UMaterialInstanceDynamic*                    DynamicMaterialInstance;                                  // 0x0370(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0378(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.InputInteractWidget");
		return ptr;
	}


	void SetProgressPercent(float Percent);
	void SetInteractDetails(const struct FActorInteractDetails& Details);
	void OverrideFollowLocation(const struct FVector& NewVector);
};


// Class BendGame.MapMenuWidget1
// 0x0050 (0x03A0 - 0x0350)
class UMapMenuWidget1 : public UBaseMenuWidget
{
public:
	TEnumAsByte<EMapMenuState>                         State;                                                    // 0x0350(0x0001) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	TEnumAsByte<EMapZoom>                              MapZoom;                                                  // 0x0351(0x0001) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0352(0x0002) MISSED OFFSET
	float                                              MapZoomZeroToOne;                                         // 0x0354(0x0004) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	class UMapMenuCursorWidget*                        CursorWidget;                                             // 0x0358(0x0008) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	class UUserWidget*                                 PlayerPingWidget;                                         // 0x0360(0x0008) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	class UUserWidget*                                 DebugWidget;                                              // 0x0368(0x0008) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	struct FLinearColor                                BackgroundColor;                                          // 0x0370(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UImage*                                      TheMapImage;                                              // 0x0380(0x0008) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	float                                              PS4MapScrollSpeed;                                        // 0x0388(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              Win64MapScrollSpeed;                                      // 0x038C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0390(0x0004) MISSED OFFSET
	float                                              TravelFadeOutTime;                                        // 0x0394(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                FocusLocationIndex;                                       // 0x0398(0x0004) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      bDisableFog : 1;                                          // 0x039C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bDisableNestFastTravel : 1;                               // 0x039C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bSnapToFocusLocations : 1;                                // 0x039C(0x0001) (Edit, BlueprintVisible, DisableEditOnInstance)
	unsigned char                                      InfoPanelVisible : 1;                                     // 0x039C(0x0001) (BlueprintVisible, Transient)
	unsigned char                                      UnknownData02[0x3];                                       // 0x039D(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.MapMenuWidget1");
		return ptr;
	}


	void SnapToMinimapLocation(class UMiniMapLocationComponent* MapLocation);
	void SetMapZoom(float InZoom);
	void SetMapState(TEnumAsByte<EMapMenuState> InState);
	void SetInfoPanelVisible(bool IsVisible, bool ShouldAnimate);
	void SetAlphaFade(float FadeAlpha);
	void RegisterMapLocation(class UMapLocation* MapLocation, TEnumAsByte<EMiniMapLocation> Type, bool RegisterLocation);
	void OnZoomChanged(TEnumAsByte<EMapZoom> ZoomType, float ZoomValueZeroToOne);
	void OnUpdateFogOfWar();
	void OnSynchronizePropertiesEvent();
	void OnMarkerSelectionChange(const struct FMapMarkerWidgetDetails& Details);
	struct FVector2D GetSectorPosition(const struct FIntPoint& MapSector);
	struct FVector GetCurrentWorldPosition();
	struct FVector2D GetCurrentScale();
	int GetCurrentMipLevel();
	void ExecuteFastTravel(const struct FTransform& PlayerTransform, const struct FTransform& BikeTransform);
	void DrawMapTiles(struct FPaintContext* InContext);
};


// Class BendGame.PopupControllerDisconnectWidget
// 0x0000 (0x0450 - 0x0450)
class UPopupControllerDisconnectWidget : public UPopupMenuWidget
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.PopupControllerDisconnectWidget");
		return ptr;
	}

};


// Class BendGame.SaveGameMenu
// 0x0040 (0x0390 - 0x0350)
class USaveGameMenu : public UBaseMenuWidget
{
public:
	struct FScriptMulticastDelegate                    OnSaveSelected;                                           // 0x0350(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnSaveCancelled;                                          // 0x0360(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	TEnumAsByte<ESaveMenuMode>                         MenuMode;                                                 // 0x0370(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0371(0x0007) MISSED OFFSET
	TArray<struct FSaveGameMenuItemData>               Data;                                                     // 0x0378(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0388(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.SaveGameMenu");
		return ptr;
	}


	void RequestSaveData();
	void RequestLoadData();
	void OnData(TArray<struct FSaveGameMenuItemData> InData);
	bool IsSaveEmpty(int Index);
	int GetSavesCount();
	struct FString GetFileNameByIndex(int Index);
};


// Class BendGame.TutorialWidgetBase
// 0x0020 (0x0370 - 0x0350)
class UTutorialWidgetBase : public UBaseMenuWidget
{
public:
	struct FScriptMulticastDelegate                    OnTutorialClosed;                                         // 0x0350(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      bPauseOnOpen : 1;                                         // 0x0360(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bWidgetHidden : 1;                                        // 0x0360(0x0001) (Edit, BlueprintVisible, Transient, EditConst)
	unsigned char                                      UnknownData00[0xF];                                       // 0x0361(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.TutorialWidgetBase");
		return ptr;
	}

};


// Class BendGame.TutorialWidget
// 0x0010 (0x0380 - 0x0370)
class UTutorialWidget : public UTutorialWidgetBase
{
public:
	unsigned char                                      bRequiresInputComponent : 1;                              // 0x0370(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0xF];                                       // 0x0371(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.TutorialWidget");
		return ptr;
	}


	void Dismiss(bool bWasDismissedByPlayer);
};


// Class BendGame.BendPerformanceMonitor
// 0x0070 (0x0318 - 0x02A8)
class UBendPerformanceMonitor : public UBendUserWidget
{
public:
	float                                              CurrentFrameTime;                                         // 0x02A8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MedianFrameTime;                                          // 0x02AC(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              CurrentGPUTime;                                           // 0x02B0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MedianGPUTime;                                            // 0x02B4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2C];                                      // 0x02B8(0x002C) MISSED OFFSET
	int                                                TestIndex;                                                // 0x02E4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x30];                                      // 0x02E8(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendPerformanceMonitor");
		return ptr;
	}


	void Stop();
	void RestoreOriginal();
	void PreAutodetect();
	void PostAutodetect(const struct FPerfTest& Optimized);
	void OnAutodetectCancelled();
	void Monitor();
	void AutodetectSettings(float InTargetFPS, float InMinimumResolutionScale);
	void ApplyPreset(const struct FPerfTest& InPreset);
};


// Class BendGame.BendVehicleAlwaysTickComponent
// 0x0028 (0x00F8 - 0x00D0)
class UBendVehicleAlwaysTickComponent : public UActorComponent
{
public:
	struct FScriptMulticastDelegate                    OnTriggerDistanceTutorial;                                // 0x00D0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               ShouldCheckDistanceTutorial;                              // 0x00E0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00E1(0x0003) MISSED OFFSET
	int                                                DistanceBeforeLostBikeTutorial;                           // 0x00E4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x10];                                      // 0x00E8(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendVehicleAlwaysTickComponent");
		return ptr;
	}

};


// Class BendGame.BendVehicleAvoidanceComponent
// 0x0010 (0x00E0 - 0x00D0)
class UBendVehicleAvoidanceComponent : public UActorComponent
{
public:
	float                                              mDetectionRadius;                                         // 0x00D0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              mTimeBetweenInRangeUpdates;                               // 0x00D4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x00D8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendVehicleAvoidanceComponent");
		return ptr;
	}

};


// Class BendGame.BendVehicleDriveData
// 0x0020 (0x0048 - 0x0028)
class UBendVehicleDriveData : public UDataAsset
{
public:
	float                                              TireFrictionScale;                                        // 0x0028(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TireLoadFilter_MinNormalisedLoad_New;                     // 0x002C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TireLoadFilter_MaxNormalisedLoad;                         // 0x0030(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TireLoadFilter_MaxFilteredNormalisedLoad;                 // 0x0034(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxRegularBrakeTorque;                                    // 0x0038(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxRegularHandBrakeTorque;                                // 0x003C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUseSurfaceConditions : 1;                                // 0x0040(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bUseAutoDrifting : 1;                                     // 0x0040(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bUseRoadSurfaceTypeAndDriverSkillInfo : 1;                // 0x0040(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bUseTireDrag : 1;                                         // 0x0040(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bLimitSteeringInputAccordingToCurrentLeanAngle : 1;       // 0x0040(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bUseTrueThrottle : 1;                                     // 0x0040(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bAllowFulllDrifting : 1;                                  // 0x0040(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bCancelFullDriftImmediatelyOnInputReleased : 1;           // 0x0040(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bUpdateBalanceAndLeanEverySubstep : 1;                    // 0x0041(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x6];                                       // 0x0042(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendVehicleDriveData");
		return ptr;
	}

};


// Class BendGame.BendVehicleFuelComponent
// 0x00C8 (0x0198 - 0x00D0)
class UBendVehicleFuelComponent : public UActorComponent
{
public:
	float                                              FuelCapacity;                                             // 0x00D0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FuelRemaining;                                            // 0x00D4(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               DLCRingFuelBuffActive;                                    // 0x00D8(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00D9(0x0003) MISSED OFFSET
	float                                              DLCRingFuelBuffModifier;                                  // 0x00DC(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bUseRPMvsGPM;                                             // 0x00E0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x00E1(0x0007) MISSED OFFSET
	struct FRuntimeFloatCurve                          RPMvsGPM;                                                 // 0x00E8(0x0080) (Edit, BlueprintVisible)
	float                                              DistancePerFuelAmount;                                    // 0x0168(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BoostFuelConsumptionMultiplier;                           // 0x016C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnFuelReached50Percent;                                   // 0x0170(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnFuelReached0Percent;                                    // 0x0180(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0190(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendVehicleFuelComponent");
		return ptr;
	}


	void SetFuelRemainingGallons(float FuelRemainingGallons);
	void SetFuelRemaining0To1(float FuelRemaining0To1);
	float GetMaxFuelConsumptionRateGpm();
	float GetFuelRemainingGallons();
	float GetFuelRemaining0To1();
	float GetFuelConsumptionRateGpm_GivenRpm(float Rpm);
	void FillUpFuel();
};


// Class BendGame.BendVehicleGroundSurfaceBumpiness
// 0x0010 (0x0038 - 0x0028)
class UBendVehicleGroundSurfaceBumpiness : public UDataAsset
{
public:
	TArray<struct FBendVehicleGroundSufaceBumpinessLayer> Layers;                                                   // 0x0028(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendVehicleGroundSurfaceBumpiness");
		return ptr;
	}

};


// Class BendGame.BendVehicleEngineSpecs
// 0x0090 (0x0150 - 0x00C0)
class UBendVehicleEngineSpecs : public UBendVehicleMeshAttachmentSpecs
{
public:
	float                                              MaxSpeed;                                                 // 0x00C0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUseRPMvsGPM;                                             // 0x00C4(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00C5(0x0003) MISSED OFFSET
	struct FRuntimeFloatCurve                          RPMvsGPM;                                                 // 0x00C8(0x0080) (Edit, DisableEditOnInstance)
	float                                              FuelConsumption;                                          // 0x0148(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x014C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendVehicleEngineSpecs");
		return ptr;
	}


	float GetMaxSpeed();
	float GetFuelConsumption();
};


// Class BendGame.BendVehicleFuelTankSpecs
// 0x0008 (0x00C8 - 0x00C0)
class UBendVehicleFuelTankSpecs : public UBendVehicleMeshAttachmentSpecs
{
public:
	float                                              FuelCapacity;                                             // 0x00C0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00C4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendVehicleFuelTankSpecs");
		return ptr;
	}


	float GetFuelCapacity();
};


// Class BendGame.BendVehicleNitrousSpecs
// 0x0020 (0x00E0 - 0x00C0)
class UBendVehicleNitrousSpecs : public UBendVehicleMeshAttachmentSpecs
{
public:
	float                                              MaxSpeed;                                                 // 0x00C0(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              MaxSpeedScale;                                            // 0x00C4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DepletionRate;                                            // 0x00C8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              RechargeRate;                                             // 0x00CC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MinReserveRequiredForActivation0To1;                      // 0x00D0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MinTimeBetweenActivations;                                // 0x00D4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FuelConsumptionMultiplier;                                // 0x00D8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00DC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendVehicleNitrousSpecs");
		return ptr;
	}


	float GetMaxSpeedScale();
	float GetDepletionRate();
};


// Class BendGame.BendVehicleStorageSpecs
// 0x0008 (0x00C8 - 0x00C0)
class UBendVehicleStorageSpecs : public UBendVehicleMeshAttachmentSpecs
{
public:
	int                                                StorageCapacity;                                          // 0x00C0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00C4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendVehicleStorageSpecs");
		return ptr;
	}


	int GetStorageCapacity();
};


// Class BendGame.BendVehiclePartLoadoutEntry
// 0x0040 (0x0068 - 0x0028)
class UBendVehiclePartLoadoutEntry : public UObject
{
public:
	class UClass*                                      Part;                                                     // 0x0028(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FBendMeshMaterialVariationData_Struct       MaterialVariations;                                       // 0x0030(0x0020) (Edit)
	struct FBendVehiclePartLoadout_Range               Dirt;                                                     // 0x0050(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FBendVehiclePartLoadout_Range               Mud;                                                      // 0x0058(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FBendVehiclePartLoadout_Range               Rust;                                                     // 0x0060(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendVehiclePartLoadoutEntry");
		return ptr;
	}

};


// Class BendGame.BendVehiclePartLoadouts
// 0x0018 (0x0040 - 0x0028)
class UBendVehiclePartLoadouts : public UDataAsset
{
public:
	unsigned char                                      bToggleToRefresh : 1;                                     // 0x0028(0x0001) (Edit, Transient)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0029(0x0007) MISSED OFFSET
	TArray<struct FBendVehiclePartLoadout_Tier>        Tiers;                                                    // 0x0030(0x0010) (Edit, ZeroConstructor, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendVehiclePartLoadouts");
		return ptr;
	}

};


// Class BendGame.BendVehiclePartsDatabase
// 0x0020 (0x0048 - 0x0028)
class UBendVehiclePartsDatabase : public UDataAsset
{
public:
	TArray<struct FBendVehiclePartUpgradeVersions>     Database;                                                 // 0x0028(0x0010) (Edit, EditFixedSize, ZeroConstructor)
	class UClass*                                      VehiclePartsRandomizerClass;                              // 0x0038(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0040(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendVehiclePartsDatabase");
		return ptr;
	}


	int GetNumParts(TEnumAsByte<EMotorcyclePartType> Type);
	class UBendVehicleMeshAttachmentSpecs* GetAttachmentSpecs(TEnumAsByte<EMotorcyclePartType> Type, int Index);
	void CacheParts(bool CacheItems);
};


// Class BendGame.BendVehiclePartSkeletalMeshComponent
// 0x0010 (0x0FA0 - 0x0F90)
class UBendVehiclePartSkeletalMeshComponent : public USkeletalMeshComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0F90(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendVehiclePartSkeletalMeshComponent");
		return ptr;
	}

};


// Class BendGame.BendVehiclePartStaticMeshComponent
// 0x0000 (0x0700 - 0x0700)
class UBendVehiclePartStaticMeshComponent : public UStaticMeshComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendVehiclePartStaticMeshComponent");
		return ptr;
	}

};


// Class BendGame.BendVehicleSeatsComponent
// 0x0048 (0x0118 - 0x00D0)
class UBendVehicleSeatsComponent : public UActorComponent
{
public:
	TArray<struct FBendSeatSetup>                      SeatSetups;                                               // 0x00D0(0x0010) (Edit, ZeroConstructor)
	class AVehiclePawn*                                OwningVehicle;                                            // 0x00E0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              RiderSpringMaxExtent;                                     // 0x00E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bIsPlayerRidable : 1;                                     // 0x00EC(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bTempUndoSeatMangleRotation : 1;                          // 0x00EC(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x2B];                                      // 0x00ED(0x002B) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendVehicleSeatsComponent");
		return ptr;
	}


	bool UnReserveSeat(class AActor* Rider, const struct FName& SeatName);
	bool SetUpEntryAnchor(class AActor* Rider);
	bool ReserveSeat(class AActor* Rider, const struct FName& SeatName);
	void RemoveRider(class AActor* RiderActor);
	bool IsDriverSeat(const struct FName& SeatName);
	TEnumAsByte<EVehicleRiderState> GetRiderState(class AActor* RiderActor);
	class ABendPawn* GetRiderBendPawn(const struct FName& SeatName);
	class AActor* GetRiderActor(const struct FName& SeatName);
	int GetNumRiders();
	int GetNumPassengers();
	class AActor* GetFirstRiderActor();
	class ABendPawn* GetDriverOrIncomingDriver_BendPawn();
	class AActor* GetDriverOrIncomingDriver();
	class ABendPawn* GetDriverBendPawn();
	class AActor* GetDriver();
	bool CanSeatBeReservedBy(class AActor* Rider, const struct FName& SeatName);
	bool CanSeatBeOccupiedBy(class AActor* Rider, const struct FName& SeatName);
	bool AddRider(class AActor* RiderActor, const struct FName& SeatName);
};


// Class BendGame.BendVehicleSkillGlobalSetup
// 0x0020 (0x0048 - 0x0028)
class UBendVehicleSkillGlobalSetup : public UDataAsset
{
public:
	TArray<float>                                      Required_XP_ForLevel;                                     // 0x0028(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<float>                                      XPForSurfaceType;                                         // 0x0038(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendVehicleSkillGlobalSetup");
		return ptr;
	}

};


// Class BendGame.BendVehicleSkillInfo
// 0x0010 (0x0038 - 0x0028)
class UBendVehicleSkillInfo : public UDataAsset
{
public:
	TArray<struct FBendVehicleSkillInfoForSkillLevel>  SkillInfo;                                                // 0x0028(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditFixedSize, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendVehicleSkillInfo");
		return ptr;
	}

};


// Class BendGame.BendVehicleTireParticlesComponent
// 0x0180 (0x0250 - 0x00D0)
class UBendVehicleTireParticlesComponent : public UActorComponent
{
public:
	struct FRotator                                    LocalRotation;                                            // 0x00D0(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00DC(0x0004) MISSED OFFSET
	struct FName                                       IntensityFloatParameterName;                              // 0x00E0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       IntensityVectorParameterName;                             // 0x00E8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              WetParticlesActivationThreshold0To1;                      // 0x00F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SnowParticlesActivationThreshold0To1;                     // 0x00F4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              RollingSpeedNormalizer;                                   // 0x00F8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              RollingParticlesActivationThreshold;                      // 0x00FC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FFloatInterval                              RollingWaterDepthInputRange;                              // 0x0100(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FFloatInterval                              RollingWaterDepthIntensityMultiplier;                     // 0x0108(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              RollingWaterDepthMax;                                     // 0x0110(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SlippingSpeedNormalizer;                                  // 0x0114(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SlippingParticlesActivationThreshold0To1;                 // 0x0118(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FFloatInterval                              SlippingWaterDepthInputRange;                             // 0x011C(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FFloatInterval                              SlippingWaterDepthIntensityMultiplier;                    // 0x0124(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SlippingWaterDepthMax;                                    // 0x012C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SlidingSpeedNormalizerSideways;                           // 0x0130(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SlidingSpeedNormalizerForwards;                           // 0x0134(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SlidingParticlesActivationThreshold;                      // 0x0138(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FFloatInterval                              SlidingWaterDepthInputRange;                              // 0x013C(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FFloatInterval                              SlidingWaterDepthIntensityMultiplier;                     // 0x0144(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SlidingWaterDepthMax;                                     // 0x014C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              NormalizedTireLoadNormalizer;                             // 0x0150(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FBendTireEffect                             SplashingTire;                                            // 0x0154(0x003C) (Edit, BlueprintVisible)
	struct FBendTireEffect                             SplashingBody;                                            // 0x0190(0x003C) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData01[0x4];                                       // 0x01CC(0x0004) MISSED OFFSET
	TArray<class UBendSmoothSwapParticleSystemComponent*> RollingParticleComponents;                                // 0x01D0(0x0010) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient)
	TArray<class UBendSmoothSwapParticleSystemComponent*> SlippingParticleComponents;                               // 0x01E0(0x0010) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient)
	TArray<class UBendSmoothSwapParticleSystemComponent*> SlidingParticleComponents;                                // 0x01F0(0x0010) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient)
	TArray<class UBendSmoothSwapParticleSystemComponent*> SplashingParticleComponents;                              // 0x0200(0x0010) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient)
	unsigned char                                      UnknownData02[0x40];                                      // 0x0210(0x0040) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendVehicleTireParticlesComponent");
		return ptr;
	}

};


// Class BendGame.BendVehicleUtilities
// 0x0000 (0x0028 - 0x0028)
class UBendVehicleUtilities : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendVehicleUtilities");
		return ptr;
	}


	bool STATIC_SpawnPawnOnVehicle(class UClass* PawnClass, class UClass* VehicleClass, const struct FVector& Location, const struct FRotator& Rotation);
};


// Class BendGame.BendVehicleWheel
// 0x0010 (0x0108 - 0x00F8)
class UBendVehicleWheel : public UVehicleWheel
{
public:
	unsigned char                                      bAllowVisualWheelToDeviateFromPhysicalWheel : 1;          // 0x00F8(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00F9(0x0003) MISSED OFFSET
	float                                              SuspensionMaxRaise_Visual;                                // 0x00FC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              SuspensionMaxDrop_Visual;                                 // 0x0100(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0104(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendVehicleWheel");
		return ptr;
	}


	struct FVector GetVisualSuspensionOffsetAsVector();
	struct FVector GetSuspensionOffsetAsVector();
};


// Class BendGame.BendVocalFXType
// 0x0028 (0x0370 - 0x0348)
class ABendVocalFXType : public AActor
{
public:
	TEnumAsByte<EeNPCVoiceTypes>                       TypeOfVocalFX;                                            // 0x0348(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0349(0x0007) MISSED OFFSET
	TArray<class USoundClass*>                         SoundClasses;                                             // 0x0350(0x0010) (Edit, ZeroConstructor)
	TArray<struct FVocalFXTypeData>                    VocalFXTypes;                                             // 0x0360(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendVocalFXType");
		return ptr;
	}


	bool STATIC_IsInConversation(class ABendPawn* BendPawn);
	float STATIC_GetVoicePitch(class ABendPawn* pPawn);
	class USoundClass* STATIC_GetBankSoundClass(class ABendPawn* Pawn);
	void STATIC_BendStopVocal(class ABendPawn* BendPawn);
	void STATIC_BendStopConversation(int ConversationUID);
	void STATIC_BendStopAllConversations();
	void STATIC_BendResumeInterruptedConversation();
	void STATIC_BendResumeConversation(int ConversationUID);
	void STATIC_BendPlayVocalFromSoundName(class ABendPawn* pPawn, const struct FName& SoundName, const struct FName& AttachPointName, float Priority, bool PlayWhenDead, float VolumeMultiplier, float PitchMultiplier);
	void STATIC_BendPlayVocalFromBlueprintSoundNameDebugAnimNotifyOnly(class USoundClass* SoundClass, TEnumAsByte<EeNPCVoiceTypes> TypeSpeaking, const struct FName& SoundName);
	void STATIC_BendPlayVocalFromBlueprintFXNameDebugAnimNotifyOnly(class USoundClass* SoundClass, TEnumAsByte<EeNPCVoiceTypes> TypeSpeaking, const struct FName& FXName);
	void STATIC_BendPlayVocalFromBlueprintFXName(class ABendPawn* pPawn, const struct FName& FXName, const struct FName& AttachPointName, float Priority, bool PlayWhenDead, float VolumeMultiplier, float PitchMultiplier);
	void STATIC_BendPlayVocal(class ABendPawn* pPawn, class USoundClass* pSoundClass, const struct FName& SoundName, const struct FName& AttachPointName, float Priority, bool PlayWhenDead, float VolumeMultiplier, float PitchMultiplier, float PawnsPitch);
	void STATIC_BendPlayRandomVocal(class ABendPawn* Pawn, class USoundClass* SoundClass, const struct FName& AttachPointName, float Priority, bool PlayWhenDead, float VolumeMultiplier, float PitchMultiplier);
	void STATIC_BendPlayPOIVOByName(class ABendPawn* Pawn, const struct FName& POIType, const struct FName& EventName, const struct FName& AttachPointName, float Priority, bool PlayWhenDead, float VolumeMultiplier, float PitchMultiplier);
	void STATIC_BendPlayPOIVO(class ABendPawn* Pawn, TEnumAsByte<EePOIType> POIType, TEnumAsByte<EePOIStateForVO> EventName, TEnumAsByte<EeRepeatRulesVO> RepeatRule, float Priority, const struct FName& AttachPointName, bool PlayWhenDead, float VolumeMultiplier, float PitchMultiplier);
	bool STATIC_BendPlayEventVOWithResponse(class ABendPawn* Pawn, const struct FName& Event, class UAnimSequenceBase* Animation, float Priority, bool PlayWhenDead, class UAnimSequenceBase* ResponderAnimation, int AutoPawnResponderRadius, TArray<class ABendPawn*>* PawnResponders);
	bool STATIC_BendPlayEventVO_NoDelegate(class ABendPawn* Pawn, const struct FName& EventName, float Priority, bool PlayWhenDead);
	bool STATIC_BendPlayEventVO(class ABendPawn* Pawn, const struct FName& EventName, const struct FScriptDelegate& OnDonePlayingVODelegate, float Priority, bool PlayWhenDead);
	void STATIC_BendPlayCurrentStateVocal(class ABendPawn* pPawn, const struct FName& SoundName, const struct FName& AttachPointName, float Priority, bool PlayWhenDead, float VolumeMultiplier, float PitchMultiplier);
	int STATIC_BendPlayConversationWithChild_NoDelegate(class USoundClass* SoundClass, TArray<struct FVocalConversationData> ConversationData, TArray<struct FVocalConversationData> ChildConversationData, float MaxPauseBetweenLines, float MinPauseBetweenLines, int NumSecondsAllowRepeat, bool LoopConversation, bool ShouldDuckSounds, bool ShouldUnduckSounds, float Priority, float MaxWaitTimeInQueue, bool UseInterruptSystem, bool CheckThreatsBeforePlaying, bool CheckThreatsBeforeResuming, bool InterruptWhenShooting, bool InterruptWhenMeleeing, bool PlayResumeVO, bool StopIfInterrupted, bool AllowOneLineConversationToPlayOver);
	int STATIC_BendPlayConversationWithChild(class USoundClass* SoundClass, TArray<struct FVocalConversationData> ConversationData, TArray<struct FVocalConversationData> ChildConversationData, const struct FScriptDelegate& OnDonePlayingVODelegate, float MaxPauseBetweenLines, float MinPauseBetweenLines, int NumSecondsAllowRepeat, bool LoopConversation, bool ShouldDuckSounds, bool ShouldUnduckSounds, float Priority, float MaxWaitTimeInQueue, bool UseInterruptSystem, bool CheckThreatsBeforePlaying, bool CheckThreatsBeforeResuming, bool InterruptWhenShooting, bool InterruptWhenMeleeing, bool PlayResumeVO, bool StopIfInterrupted, bool AllowOneLineConversationToPlayOver);
	int STATIC_BendPlayConversation_NoDelegate(class USoundClass* SoundClass, TArray<struct FVocalConversationData> ConversationData, float MaxPauseBetweenLines, float MinPauseBetweenLines, int NumSecondsAllowRepeat, bool LoopConversation, bool ShouldDuckSounds, bool ShouldUnduckSounds, float Priority, float MaxWaitTimeInQueue, bool UseInterruptSystem, bool CheckThreatsBeforePlaying, bool CheckThreatsBeforeResuming, bool InterruptWhenShooting, bool InterruptWhenMeleeing, bool PlayResumeVO, bool StopIfInterrupted, bool AllowOneLineConversationToPlayOver);
	int STATIC_BendPlayConver(class USoundClass* SoundClass, TArray<struct FVocalConversationData> ConversationData, const struct FScriptDelegate& OnDonePlayingVODelegate, float MaxPauseBetweenLines, float MinPauseBetweenLines, int NumSecondsAllowRepeat, bool LoopConversation, bool ShouldDuckSounds, bool ShouldUnduckSounds, float Priority, float MaxWaitTimeInQueue, bool UseInterruptSystem, bool CheckThreatsBeforePlaying, bool CheckThreatsBeforeResuming, bool InterruptWhenShooting, bool InterruptWhenMeleeing, bool PlayResumeVO, bool StopIfInterrupted, bool AllowOneLineConversationToPlayOver);
	void STATIC_BendPauseConversation(int ConversationUID);
	void STATIC_BendInterruptConversation(int ConversationUID, class ABendPawn* InterrupterPawn, TArray<struct FVocalConversationData> InterruptVOData, TArray<struct FVocalConversationData> ResumeByInterrupterVOData, TArray<struct FVocalConversationData> ResumeByOtherVOData, TEnumAsByte<EConversationInterruptReason> Reason);
	float STATIC_BendGetPlayingVocalTimeLeft(class ABendPawn* pPawn);
	float STATIC_BendGetPlayingVocalPlaybackTime(class ABendPawn* pPawn);
	float STATIC_BendGetPlayingVocalDuration(class ABendPawn* pPawn);
	float STATIC_BendGetConversationTotalDuration(int ConversationUID);
	bool STATIC_BendCanPlayEventVO(class ABendPawn* Pawn, const struct FName& EventName, bool DoDebugOutput, float Priority);
};


// Class BendGame.BendWarningGroup
// 0x0058 (0x0080 - 0x0028)
class UBendWarningGroup : public UObject
{
public:
	struct FScriptMulticastDelegate                    OnWarningRequestedDelegate;                               // 0x0028(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnMainSoldierChangedDelegate;                             // 0x0038(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnWarningStoppedDelegate;                                 // 0x0048(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class ABendPawn*                                   CurrentTarget;                                            // 0x0058(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FBendWarningMemberInfo                      MainSoldier;                                              // 0x0060(0x000C) (BlueprintVisible)
	unsigned char                                      UnknownData00[0x4];                                       // 0x006C(0x0004) MISSED OFFSET
	TArray<struct FBendWarningMemberInfo>              MemberList;                                               // 0x0070(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendWarningGroup");
		return ptr;
	}


	void UpdateStatus(class UBendWarningGroupComponent* Component, float DistanceToTarget);
	void StopWarning(class UBendWarningGroupComponent* Component);
	void StartWarning(class ABendPawn* Requester, class ABendPawn* Target);
	bool IsWarningPending();
	bool IsTargetFarAway(float AcceptableDistance);
	bool IsMainSoldier(class UBendWarningGroupComponent* Component);
	void GetMemberPawns(TArray<class ABendPawn*>* Output);
	class UBendWarningGroup* STATIC_CreateBendWarningGroup();
	void ApplyForMainSoldier(class UBendWarningGroupComponent* Component);
};


// Class BendGame.BendWarningGroupComponent
// 0x0028 (0x00F8 - 0x00D0)
class UBendWarningGroupComponent : public UActorComponent
{
public:
	struct FScriptMulticastDelegate                    JoinGroupDelegate;                                        // 0x00D0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    LeaveGroupDelegate;                                       // 0x00E0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class UBendWarningGroup*                           CurrentWarningGroup;                                      // 0x00F0(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendWarningGroupComponent");
		return ptr;
	}


	void LeaveGroup();
	void JoinGroup(class UBendWarningGroup* NewWarningGroup);
	class UBendWarningGroup* GetGroup();
};


// Class BendGame.BendWarningGroupComponentHelpers
// 0x0000 (0x0028 - 0x0028)
class UBendWarningGroupComponentHelpers : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendWarningGroupComponentHelpers");
		return ptr;
	}


	void STATIC_StopWarningGroup(TArray<class AController*> WarningMembers);
	void STATIC_StartWarningGroup(class UBendWarningGroup* WarningGroup, TArray<class AController*> WarningMembers);
};


// Class BendGame.BendAnimalWarningGroupComponent
// 0x0008 (0x0100 - 0x00F8)
class UBendAnimalWarningGroupComponent : public UBendWarningGroupComponent
{
public:
	int                                                MinDetectedFriendsToStopWarning;                          // 0x00F8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                MaxWaitingTimeForResponseInSeconds;                       // 0x00FC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAnimalWarningGroupComponent");
		return ptr;
	}


	void OnWarningStopped();
};


// Class BendGame.BlindfireTargetSelectWidget
// 0x0008 (0x0250 - 0x0248)
class UBlindfireTargetSelectWidget : public UUserWidget
{
public:
	TEnumAsByte<EBlindfireTargetSelect>                IconType;                                                 // 0x0248(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0249(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BlindfireTargetSelectWidget");
		return ptr;
	}


	void UpdateSelectionIcon();
	void ShowSoftTargetIcon();
};


// Class BendGame.BendPlayerWeapon_Manager
// 0x0030 (0x0178 - 0x0148)
class UBendPlayerWeapon_Manager : public UBendWeapon_Manager
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0148(0x0018) MISSED OFFSET
	TArray<struct FBendAnimMirrorTagPairFName>         SocketsToMirror;                                          // 0x0160(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	float                                              QueuedFireThresholdTime;                                  // 0x0170(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0174(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendPlayerWeapon_Manager");
		return ptr;
	}

};


// Class BendGame.BendWeaponOverlapComponent
// 0x0010 (0x0610 - 0x0600)
class UBendWeaponOverlapComponent : public UCapsuleComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0600(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendWeaponOverlapComponent");
		return ptr;
	}

};


// Class BendGame.BendWeaponPartLaserBeam
// 0x0010 (0x0CB8 - 0x0CA8)
class ABendWeaponPartLaserBeam : public ABendWeaponPart
{
public:
	class UStaticMeshComponent*                        LaserPointer;                                             // 0x0CA8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0CB0(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendWeaponPartLaserBeam");
		return ptr;
	}


	void SetLaserBeamVisible(bool Visible);
	void OnReloadStarted();
	void OnReloadFinished();
	void OnBoneTransformFinalized();
	bool IsLaserBeamVisible();
};


// Class BendGame.BendWeaponRepairInterface
// 0x0000 (0x0028 - 0x0028)
class UBendWeaponRepairInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendWeaponRepairInterface");
		return ptr;
	}


	bool IOnRepaired();
	int IGetRepairCost();
	bool ICanEverBeRepaired();
	bool ICanBeRepaired();
};


// Class BendGame.BendWeaponUpgradeInterface
// 0x0000 (0x0028 - 0x0028)
class UBendWeaponUpgradeInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendWeaponUpgradeInterface");
		return ptr;
	}


	bool ISetTier(TEnumAsByte<EWeaponMeleeTier> Tier);
	int IGetUpgradeCost();
	TEnumAsByte<EWeaponMeleeTier> IGetTier();
	bool ICanUpgrade();
};


// Class BendGame.BendWeatherLevelScriptActor
// 0x0008 (0x0360 - 0x0358)
class ABendWeatherLevelScriptActor : public ALevelScriptActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0358(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendWeatherLevelScriptActor");
		return ptr;
	}


	void OnWeatherChangeRequest(const struct FName& TimeAndWeatherID);
};


// Class BendGame.BendWeatherListenerBase
// 0x0010 (0x0358 - 0x0348)
class ABendWeatherListenerBase : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0348(0x0008) MISSED OFFSET
	bool                                               ShouldUpdateWindIntensity;                                // 0x0350(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0351(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendWeatherListenerBase");
		return ptr;
	}

};


// Class BendGame.BendWidgetComponentManager
// 0x0058 (0x03A0 - 0x0348)
class ABendWidgetComponentManager : public AActor
{
public:
	unsigned char                                      UnknownData00[0x58];                                      // 0x0348(0x0058) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendWidgetComponentManager");
		return ptr;
	}


	void OnWidgetUnloaded(class UBendWidgetComponent* WidgetComponent);
	void OnWidgetLoaded(class UBendWidgetComponent* WidgetComponent);
	void OnDependentActorEndPlay(class AActor* DependentActor);
	void OnDependentActorBeginPlay(class AActor* DependentActor);
};


// Class BendGame.BendWindGust
// 0x0108 (0x0450 - 0x0348)
class ABendWindGust : public AActor
{
public:
	unsigned char                                      UnknownData00[0x50];                                      // 0x0348(0x0050) MISSED OFFSET
	class UClass*                                      ImpactTemplate;                                           // 0x0398(0x0008) (Net, ZeroConstructor, IsPlainOldData)
	TArray<struct FWGParticleFxData>                   WGParticleFXs;                                            // 0x03A0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	class UBendWindGustMovementComponent*              MovementComp;                                             // 0x03B0(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class USphereComponent*                            CollisionComp;                                            // 0x03B8(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class ABendExplosionEffect*                        ExplosionTemplate;                                        // 0x03C0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       ProjectileFXAttachPoint;                                  // 0x03C8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UParticleSystem*                             ProjectileFX;                                             // 0x03D0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bRenderFXBasedOnSurfaceNormal;                            // 0x03D8(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x03D9(0x0007) MISSED OFFSET
	class UParticleSystemComponent*                    ProjectilePSC;                                            // 0x03E0(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData02[0x18];                                      // 0x03E8(0x0018) MISSED OFFSET
	struct FVector                                     OffsetFromListenPosition;                                 // 0x0400(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinNumSecBetweenParticleSpawnAtLowestIntensity;           // 0x040C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxNumSecBetweenParticleSpawnAtLowestIntensity;           // 0x0410(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinNumSecBetweenParticleSpawnAtHighestIntensity;          // 0x0414(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxNumSecBetweenParticleSpawnAtHighestIntensity;          // 0x0418(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxParticleSpawnDistance;                                 // 0x041C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x30];                                      // 0x0420(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendWindGust");
		return ptr;
	}


	void SetInitValues(const struct FVector& Direction, float Speed, float intensity, bool IsGroundWet);
};


// Class BendGame.BendWindGustMovementComponent
// 0x0000 (0x0120 - 0x0120)
class UBendWindGustMovementComponent : public UMovementComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendWindGustMovementComponent");
		return ptr;
	}

};


// Class BendGame.BendWindowBase
// 0x0000 (0x0348 - 0x0348)
class ABendWindowBase : public AActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendWindowBase");
		return ptr;
	}


	void EnableEdges();
	void DisableEdges();
};


// Class BendGame.BendWireCanAlarm
// 0x0008 (0x0350 - 0x0348)
class ABendWireCanAlarm : public AActor
{
public:
	bool                                               Tripped;                                                  // 0x0348(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData)
	bool                                               Cut;                                                      // 0x0349(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x034A(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendWireCanAlarm");
		return ptr;
	}

};


// Class BendGame.BendWorldEdgeChildComponent
// 0x0070 (0x02A0 - 0x0230)
class UBendWorldEdgeChildComponent : public UChildActorComponent
{
public:
	bool                                               SafeToCollect;                                            // 0x0230(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               NeverTick;                                                // 0x0231(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x0232(0x0006) MISSED OFFSET
	class ABendWorldEdge*                              WorldEdge;                                                // 0x0238(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector                                     Position1;                                                // 0x0240(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector                                     Position2;                                                // 0x024C(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               CustomNormals;                                            // 0x0258(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0259(0x0007) MISSED OFFSET
	TArray<struct FVector>                             Normals;                                                  // 0x0260(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TAssetPtr<class UBendClimbStateDataBase>           ClimbStateData;                                           // 0x0270(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly)
	bool                                               PlayerClimbable;                                          // 0x0290(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               climbable;                                                // 0x0291(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               guardRail;                                                // 0x0292(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               FlipNormals;                                              // 0x0293(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               ladderEdge;                                               // 0x0294(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               windowEdge;                                               // 0x0295(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bRoofEdge;                                                // 0x0296(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ELadderRungType>                       LadderRungType;                                           // 0x0297(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               CrowsCanPerch;                                            // 0x0298(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               DestructibleEdge;                                         // 0x0299(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bSkipAutoNavLinkCreation;                                 // 0x029A(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x5];                                       // 0x029B(0x0005) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendWorldEdgeChildComponent");
		return ptr;
	}


	void SetWindowEdge(bool NewWindowEdge);
	void SetSkipAutoNavLinkCreation(bool NewSkipAutoNavLinkCreation);
	void SetRoofEdge(bool NewRoofEdge);
	void SetPlayerClimbable(bool NewPlayerClimbable);
	void SetLadderRungType(TEnumAsByte<ELadderRungType> NewLadderRungType);
	void SetLadderEdge(bool NewLadderEdge);
	void SetGuardrail(bool NewGuardrail);
	void SetCrowsCanPerch(bool NewCrowsCanPerch);
	void SetClimbable(bool NewClimbable);
	void FlipEdgeDirection();
};


// Class BendGame.BendWorldEdgeComponent
// 0x0010 (0x05E0 - 0x05D0)
class UBendWorldEdgeComponent : public UPrimitiveComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x05D0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendWorldEdgeComponent");
		return ptr;
	}

};


// Class BendGame.BendWorldEdgeData
// 0x0028 (0x0370 - 0x0348)
class ABendWorldEdgeData : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0348(0x0008) MISSED OFFSET
	TArray<struct FTraversalEdge>                      Edges;                                                    // 0x0350(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst)
	TArray<struct FEdgeEntry>                          EdgeEntries;                                              // 0x0360(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendWorldEdgeData");
		return ptr;
	}

};


// Class BendGame.BendWorldInfo
// 0x0010 (0x04F8 - 0x04E8)
class ABendWorldInfo : public AWorldSettings
{
public:
	int                                                ItemsNeededToWin;                                         // 0x04E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x04EC(0x0004) MISSED OFFSET
	class UBendMapInfo*                                MapInfo;                                                  // 0x04F0(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendWorldInfo");
		return ptr;
	}

};


// Class BendGame.BendXPEC_Util_LerpToTarget_BP
// 0x0090 (0x03D8 - 0x0348)
class ABendXPEC_Util_LerpToTarget_BP : public AActor
{
public:
	TArray<class UObject*>                             m_LerpTargets;                                            // 0x0348(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<TEnumAsByte<EXPEC_Enum_LerpType>>           m_TargetLerpTypes;                                        // 0x0358(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FTransform>                          m_OriginTransforms;                                       // 0x0368(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FTransform>                          m_TargetTransforms;                                       // 0x0378(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<float>                                      m_TargetLerpAlphas;                                       // 0x0388(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<float>                                      m_TargetLerpInTime;                                       // 0x0398(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<bool>                                       m_EnableDebugInfo;                                        // 0x03A8(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class UObject*>                             m_PenddingRemoveLerpTargets;                              // 0x03B8(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<TEnumAsByte<EXPEC_Enum_LerpType>>           m_PenddingRemoveLerpTypes;                                // 0x03C8(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendXPEC_Util_LerpToTarget_BP");
		return ptr;
	}


	void UpdateLerpToTargetFlow(float Tick);
	void UpdateLerpToTargetAlpha(int LerpIndex, float Alpha);
	void RemoveLerpToTargetVariables(int RemoveLerpIndex);
	float LerpToTarget(class UObject* LerpTarget, const struct FTransform& OriginTransform, const struct FTransform& TargetTransform, float TargetLerpAlpha, float TargetLerpInTime, TEnumAsByte<EXPEC_Enum_LerpType> TargetLerpType, bool EnableDebugInfo, float Tick, bool* NeedToRemove);
	void GetLerpToTargetVariables(int Index, float TargetLerpAlpha, float TargetLerpInTime, struct FTransform* OriginTransform, struct FTransform* TargetTransform, TEnumAsByte<EXPEC_Enum_LerpType>* TargetLerpType, bool* EnableDebugInfo);
	int FindLerpToTargetIndex_CODE(class UObject* LerpTarget, TEnumAsByte<EXPEC_Enum_LerpType> LerpType);
	void CancelLerpToTarget_CODE(class UObject* LerpTarget, TEnumAsByte<EXPEC_Enum_LerpType> LerpType);
};


// Class BendGame.BlindfireTargetWidget
// 0x0000 (0x0248 - 0x0248)
class UBlindfireTargetWidget : public UUserWidget
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BlindfireTargetWidget");
		return ptr;
	}


	void SetAccuracy(float AccuracyScale);
};


// Class BendGame.BlueprintNoise
// 0x0000 (0x0028 - 0x0028)
class UBlueprintNoise : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BlueprintNoise");
		return ptr;
	}


	struct FVector STATIC_Hammersley2D(int Size, int Index);
};


// Class BendGame.BlueprintTextureNodes
// 0x0000 (0x0028 - 0x0028)
class UBlueprintTextureNodes : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BlueprintTextureNodes");
		return ptr;
	}


	int STATIC_TextureIndex(int SizeX, int SizeY, int BytesPerPixel, float U, float V, int InTextureChannel);
	TArray<unsigned char> STATIC_TextureData(class UTexture2D* InTexture, int* SizeX, int* SizeY, int* BytesPerPixel);
};


// Class BendGame.BTDecorator_CustomCompare
// 0x0060 (0x00C8 - 0x0068)
class UBTDecorator_CustomCompare : public UBTDecorator
{
public:
	TEnumAsByte<ECustomBlackBoardEntryComparison>      Operator;                                                 // 0x0068(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0069(0x0007) MISSED OFFSET
	struct FBlackboardKeySelector                      BlackboardKeyA;                                           // 0x0070(0x0028) (Edit)
	struct FBlackboardKeySelector                      BlackboardKeyB;                                           // 0x0098(0x0028) (Edit)
	float                                              Buffer;                                                   // 0x00C0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00C4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BTDecorator_CustomCompare");
		return ptr;
	}

};


// Class BendGame.BTDecorator_Timer
// 0x0028 (0x0090 - 0x0068)
class UBTDecorator_Timer : public UBTDecorator
{
public:
	struct FBlackboardKeySelector                      BlackboardKey;                                            // 0x0068(0x0028) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BTDecorator_Timer");
		return ptr;
	}

};


// Class BendGame.CollectiblesMenuAudioHelper
// 0x00A0 (0x00C8 - 0x0028)
class UCollectiblesMenuAudioHelper : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnSoundFinishedPlaying;                                   // 0x0030(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class UAudioComponent*                             AudioComponent;                                           // 0x0040(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, Transient, EditConst, InstancedReference, IsPlainOldData)
	TAssetPtr<class USoundCue>                         QueuedSound;                                              // 0x0048(0x0020) (Edit, BlueprintVisible, Transient, EditConst)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0068(0x0010) MISSED OFFSET
	TMap<uint32_t, class USoundCue*>                   LoadedSoundMap;                                           // 0x0078(0x0050) (ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.CollectiblesMenuAudioHelper");
		return ptr;
	}


	bool StopSound();
	bool PlaySound(TAssetPtr<class USoundCue> SoundCueAsset);
	void OnSoundLoaded(TAssetPtr<class USoundCue> SoundCueAsset);
	void OnSoundFinishedCallback();
	bool IsSoundPlaying();
	class UCollectiblesMenuAudioHelper* STATIC_GetCollectibleAudioHelper();
	void STATIC_DestroyCollectibleAudioHelper();
};


// Class BendGame.ComponentLibrary
// 0x0000 (0x0028 - 0x0028)
class UComponentLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.ComponentLibrary");
		return ptr;
	}


	void STATIC_SetInstanceTransform(class USceneComponent* InstancedStaticMeshComponent, const struct FTransform& InTransform, int Index);
	void STATIC_SetInstanceRenderStateDirty(class USceneComponent* InstancedStaticMeshComponent);
	void STATIC_MarkInstanceRenderTransformDirty(class USceneComponent* InstancedStaticMeshComponent);
	void STATIC_ListComponentChildren(class USceneComponent* AttachParent, TArray<class USceneComponent*>* OutComponentList);
	struct FTransform STATIC_GetInstancePosition(class USceneComponent* InstancedStaticMeshComponent, int Index);
	int STATIC_GetInstanceCount(class USceneComponent* InstancedStaticMeshComponent);
	void STATIC_CastInstancedStaticMeshComponent(class USceneComponent* SceneComponent, class UInstancedStaticMeshComponent** OutComponent);
	void STATIC_ApplyInstanceWorldOffset(class USceneComponent* InstancedStaticMeshComponent, const struct FVector& InOffset);
};


// Class BendGame.CrowdManagerActor
// 0x0A78 (0x0DC0 - 0x0348)
class ACrowdManagerActor : public AActor
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0348(0x0018) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnAnyCrowdAlerted;                                        // 0x0360(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	int                                                MostRecentlyDamaged_InstanceBodyIndex;                    // 0x0370(0x0004) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0xC];                                       // 0x0374(0x000C) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnDied;                                                   // 0x0380(0x0010) (ZeroConstructor, Transient, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnCrowdMemberDied_NEW;                                    // 0x0390(0x0010) (ZeroConstructor, Transient, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnSpawned;                                                // 0x03A0(0x0010) (ZeroConstructor, Transient, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBeginEatFreshPrey;                                      // 0x03B0(0x0010) (ZeroConstructor, Transient, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBulletDamageFromPlayer;                                 // 0x03C0(0x0010) (ZeroConstructor, Transient, InstancedReference, BlueprintAssignable)
	class UDamageType*                                 DefaultDamageType;                                        // 0x03D0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UBendCrowdSetup*                             Setup;                                                    // 0x03D8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UBendAISetup*                                AISetup;                                                  // 0x03E0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UStaticMeshComponent*                        StaticMeshComponent_Kinematic;                            // 0x03E8(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class ABendCrowdGroupGlobal*                       DefaultGroup;                                             // 0x03F0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TArray<class UCrowdSkeletalMeshComponent*>         m_actorArray;                                             // 0x03F8(0x0010) (ExportObject, ZeroConstructor, Transient)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0408(0x0008) MISSED OFFSET
	struct FBendCrowdFullFledgedPawnManager            FullFledgedPawnManager;                                   // 0x0410(0x0180) (Transient)
	unsigned char                                      UnknownData03[0x30];                                      // 0x0590(0x0030) MISSED OFFSET
	TArray<class UBendCrowdMiniMapLocationComponent*>  MiniMapLocationComponentArray;                            // 0x05C0(0x0010) (ExportObject, ZeroConstructor, Transient)
	TArray<class UParticleSystemComponent*>            FireParticleArray;                                        // 0x05D0(0x0010) (ExportObject, ZeroConstructor, Transient)
	TArray<TAssetPtr<class USkeletalMesh>>             ValidatedMeshVariationSet;                                // 0x05E0(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData04[0x10];                                      // 0x05F0(0x0010) MISSED OFFSET
	TArray<TWeakObjectPtr<class ABendCrowdGroup>>      CrowdGroupArray;                                          // 0x0600(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData05[0x2E8];                                     // 0x0610(0x02E8) MISSED OFFSET
	class USceneComponent*                             CrowdManagerSceneComponent;                               // 0x08F8(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UBendCrowdImmobileStaticMeshComponent*       CrowdManagerImmobileStaticMeshComponent;                  // 0x0900(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UBendCrowdAnimManager*                       AnimManager;                                              // 0x0908(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData06[0x8];                                       // 0x0910(0x0008) MISSED OFFSET
	class UBendCrowdAudioManager*                      AudioManagerComponent;                                    // 0x0918(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UBendCrowdTickReceiverComponent*             TickReceiverComponent_DuringPhysics;                      // 0x0920(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UBendCrowdTickReceiverComponent*             TickReceiverComponent_PostPhysics;                        // 0x0928(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UBendCrowdTickReceiverComponent*             TickReceiverComponent_PostUpdateWork;                     // 0x0930(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UBendCrowdTickReceiverComponent*             TickReceiverComponent_LastDemotable;                      // 0x0938(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData07[0x8];                                       // 0x0940(0x0008) MISSED OFFSET
	TArray<class USkeletalMesh*>                       LoadedSkeletalMeshStrongReferences;                       // 0x0948(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData08[0x468];                                     // 0x0958(0x0468) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.CrowdManagerActor");
		return ptr;
	}


	void UpdateOnFinishedSendingAllEndOfFrameUpdates();
	void StopStatusEffectsOfType(const struct FBendCrowdMemberHandle& CrowdMemberHandle, TEnumAsByte<EStatusEffects> Type);
	void SetStreamingDistanceMultiplier(float StreamingDistanceMultiplier);
	void SetMaxCrowdMembersActiveToDefault();
	void SetMaxCrowdMembersActive(int MaxActive);
	void SetLodLimits(int MinLOD, int MaxLod);
	void STATIC_SetCrowdWaypointSequence(class ABendCrowdGroup* Group, class ABendAIWaypointSequence* WaypointSequence);
	void SetCrowdPromotionMode(TEnumAsByte<EBendCrowdPromotionMode> Mode);
	void SetCrowdMembersRenderCustomDepth(bool bSetRenderCustomDepth);
	void SetCrowdCinematicMode(bool bInCinematicMode);
	class APawn* RequestPromoteCrowdMember_Immediate(const struct FBendCrowdMemberHandle& CrowdMemberHandle, float ForcedPromotionTime, float ForcedPromotionMaxDist);
	void OnWorldEdgeChanged(const struct FTraversalEdge& ChangedEdge);
	void OnPlayerRespawned(class ABendPlayerController* PlayerController);
	void OnMissionEnding(TEnumAsByte<EMissionIDs> MissionID);
	void OnDlcChallengeRetry(TEnumAsByte<EMissionIDs> MissionID);
	void OnDLCChallengeQuit(TEnumAsByte<EMissionIDs> MissionID);
	void OnCrowdMemberDied(float ActualDamage, class AController* Killer, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, const struct FName& BoneName, const struct FVector& Momentum, class UDamageType* DamageType, class AActor* DamageCauser);
	int GetMaxCrowdMembersActive();
	class ABendCrowdGroup* GetDefaultGroup();
	bool GetClosestIndividualHordeMembersPositions(const struct FVector& fromThisPos, TArray<struct FVector>* listOfPos);
	bool GetClosestHordesCenterPosition(const struct FVector& fromThisPos, struct FVector* hordePos);
	class ACrowdManagerActor* STATIC_GetBendCrowdManager();
	void GenerateCrowdMember(const struct FTransform& Transform, class ABendCrowdGroup* Group);
	void ForceCrowdDifficultyHardOrHarder(bool bForce);
	void DestroyController(class ABendCrowdController* Controller);
	void DestroyAwarenessZone(const struct FBendCrowdAwarenessZoneId& AwarenessZoneId);
	void DestroyAllCrowdMembers();
	class ABendCrowdController* CreateCrowdControllerSingleMember(const struct FBendCrowdMemberHandle& ControlledCrowdMember);
	class ABendCrowdController* CreateCrowdController();
	void CreateAwarenessZoneNEW(class UClass* DataClass, const struct FVector& WorldLocation, class USceneComponent* AttachParent, struct FBendCrowdAwarenessZoneId* AwarenessZoneId);
	void CreateAwarenessZoneForGroupsNEW(class UClass* DataClass, TArray<class ABendCrowdGroup*> GroupsToAlert, const struct FVector& WorldLocation, class USceneComponent* AttachParent, struct FBendCrowdAwarenessZoneId* AwarenessZoneId);
	void STATIC_CreateAwarenessZoneForGroups(class UClass* DataClass, TArray<class ABendCrowdGroup*> GroupsToAlert, const struct FVector& WorldLocation, class USceneComponent* AttachParent, struct FBendCrowdAwarenessZoneId* AwarenessZoneId);
	void STATIC_CreateAwarenessZone(class UClass* DataClass, const struct FVector& WorldLocation, class USceneComponent* AttachParent, struct FBendCrowdAwarenessZoneId* AwarenessZoneId);
	bool AreAnyCrowdMembersFrenzied();
	void AllGroups_SetWaypointSequence(class ABendAIWaypointSequence* WaypointSequence);
	void AllGroups_SetPOI(class UBendCrowdPOIComponent* InPOI);
	void AllGroups_RemoveExclusionaryFocus(class AActor* Focus);
	void AllGroups_RemoveAllExclusionaryFocuses();
	void AllGroups_ForceIgnoreAll(bool bForce);
	void AllGroups_AddExclusionaryFocus(class AActor* Focus);
	void AddStatusEffect(const struct FBendCrowdMemberHandle& CrowdMemberHandle, class UClass* Effect, class AActor* EffectOwner, class AController* EffectInstigator, float DamageRate, float Duration);
};


// Class BendGame.BendCrowdManager
// 0x0000 (0x0DC0 - 0x0DC0)
class ABendCrowdManager : public ACrowdManagerActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendCrowdManager");
		return ptr;
	}

};


// Class BendGame.CrowdSkeletalMeshActor
// 0x0000 (0x0388 - 0x0388)
class ACrowdSkeletalMeshActor : public ASkeletalMeshActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.CrowdSkeletalMeshActor");
		return ptr;
	}

};


// Class BendGame.CrowdSkeletalMeshComponent
// 0x0060 (0x0FF0 - 0x0F90)
class UCrowdSkeletalMeshComponent : public USkeletalMeshComponent
{
public:
	unsigned char                                      UnknownData00[0x60];                                      // 0x0F90(0x0060) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.CrowdSkeletalMeshComponent");
		return ptr;
	}

};


// Class BendGame.DLCChallengeHUDWidget
// 0x0008 (0x0250 - 0x0248)
class UDLCChallengeHUDWidget : public UUserWidget
{
public:
	int                                                ViewportZOrder;                                           // 0x0248(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x024C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.DLCChallengeHUDWidget");
		return ptr;
	}


	void UpdateChallengeTime(const struct FTimespan& CurrentTime, bool bUseLargeTimer);
	void UpdateChallengeScore(float Points);
	void SubobjectiveComplete(int Id, bool bFailed);
	void SetTime(bool bVisible, const struct FTimespan& Time);
	void SetCountdownTime(bool bVisible, const struct FTimespan& TotalTime, const struct FTimespan& RemainingTime);
	void SetChallengeSkills(TArray<struct FBendSkill> Skills);
	bool IsScoreMeterVisible();
	void DisplaySubobjective(const struct FText& Title, int Id);
	void DisplaySubChallengeAward(int Index, TEnumAsByte<EDLCChallengeRank> SubChallengeRank, bool bNew);
	void DisplayPatchAward(const struct FText& Title, const struct FText& SubTitle, TEnumAsByte<EDLCChallengeRank> ChallengeRank);
	void DisplayChallenge(TEnumAsByte<EDLCChallengeType> ChallengeType, const struct FText& Title, const struct FText& SubTitle, float GoldPoints, float SilverPoints, float BronzePoints, int NumSubobjectives);
	void DisplayAltScore(const struct FText& Title, int Value, bool bVisible);
	void ContinueToResults();
	void ChallengeComplete(const struct FDLCCompleteChallengeData& CompleteChallengeData);
};


// Class BendGame.DLCGameplayStatics
// 0x0008 (0x0030 - 0x0028)
class UDLCGameplayStatics : public UBlueprintFunctionLibrary
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.DLCGameplayStatics");
		return ptr;
	}


	void STATIC_UnequipRingB();
	void STATIC_UnequipRingA();
	void STATIC_UnequipItemBP(const struct FGameplayTag& Key);
	void STATIC_UnequipCharacter();
	void STATIC_UnequipBikeSkin();
	void STATIC_SetTimeBP(bool bVisible, int Time);
	void STATIC_SetOwnedItemLevelBP(const struct FGameplayTag& Key, int Value);
	void STATIC_SetChallengeScoreBP(const struct FGameplayTag& Key, int Value, TEnumAsByte<EDLCScoreSubmissionResult>* Result);
	void STATIC_ResetAllItemsBP();
	void STATIC_ResetAllChallengesBP();
	bool STATIC_IsRingEquippedBP(const struct FGameplayTag& Key);
	void STATIC_IsItemUnlockedBP(const struct FGameplayTag& Key, int Level, TEnumAsByte<EDLCDataFetchResult>* Result, bool* IsUnlocked, int* UnlockRank);
	bool STATIC_IsItemEquippedBBP(const struct FGameplayTag& Key);
	bool STATIC_IsCharacterEquippedBP(const struct FGameplayTag& Key);
	bool STATIC_IsChallengeUnlockedBP(const struct FGameplayTag& Key);
	bool STATIC_IsBikeSkinEquippedBP(const struct FGameplayTag& Key);
	bool STATIC_HasPlayedAnyChallenges();
	void STATIC_GiveAllItemsBP();
	int STATIC_GetWeeklyChallengeLoadoutIndex();
	void STATIC_GetSubChallengeDataBP(const struct FGameplayTag& Key, TEnumAsByte<EDLCDataFetchResult>* Result, struct FSubChallengeData* Subchallenge);
	int STATIC_GetShopPointsForRankBP(TEnumAsByte<EDLCChallengeRank> Rank);
	int STATIC_GetShopPoints();
	int STATIC_GetShopPointDisplayModifierBP();
	void STATIC_GetScoreModifierDataBP(const struct FGameplayTag& Key, TEnumAsByte<EDLCDataFetchResult>* Result, struct FScoreModifierData* ScoreModifier);
	void STATIC_GetScoreEventDataBP(const struct FGameplayTag& Key, TEnumAsByte<EDLCDataFetchResult>* Result, struct FScoreEventData* ScoreEvent);
	void STATIC_GetRingValueBP(const struct FGameplayTag& Key, TEnumAsByte<EDLCDataFetchResult>* Result, float* Value);
	void STATIC_GetRingSecondaryValueBP(const struct FGameplayTag& Key, TEnumAsByte<EDLCDataFetchResult>* Result, float* Value);
	void STATIC_GetRingDataBP(const struct FGameplayTag& Key, TEnumAsByte<EDLCDataFetchResult>* Result, struct FRingData* Ring);
	int STATIC_GetReputationForRankBP(TEnumAsByte<EDLCChallengeRank> Rank);
	int STATIC_GetReputationDisplayModifierBP();
	int STATIC_GetReputation();
	int STATIC_GetRankForReputation(int Reputation);
	void STATIC_GetRankDataBP(const struct FGameplayTag& Key, TEnumAsByte<EDLCDataFetchResult>* Result, struct FRankData* Rank);
	int STATIC_GetRank();
	void STATIC_GetPatchValueBP(const struct FGameplayTag& Key, TEnumAsByte<EDLCDataFetchResult>* Result, float* Value, int* AtlasID);
	void STATIC_GetPatchSecondaryValueBP(const struct FGameplayTag& Key, TEnumAsByte<EDLCDataFetchResult>* Result, float* Value, int* AtlasID);
	struct FGameplayTag STATIC_GetPatchForChallengeBP(const struct FGameplayTag& ChallengeTag);
	void STATIC_GetPatchDataBP(const struct FGameplayTag& Key, TEnumAsByte<EDLCDataFetchResult>* Result, struct FPatchData* Patch);
	int STATIC_GetOwnedItemLevelBP(const struct FGameplayTag& Key);
	struct FGameplayTag STATIC_GetEquippedRingBBP();
	struct FGameplayTag STATIC_GetEquippedRingABP();
	struct FGameplayTag STATIC_GetEquippedCharacterBP();
	struct FGameplayTag STATIC_GetEquippedBikeSkinBP();
	struct FDLCSaveData STATIC_GetDLCSaveDataBP(TEnumAsByte<EDLCDataFetchResult>* Result);
	class UDLCMetaManager* STATIC_GetDLCMetaManagerBP(TEnumAsByte<EDLCDataFetchResult>* Result);
	class ABendLeaderboardManager* STATIC_GetDLCLeaderboardManagerBP(TEnumAsByte<EDLCDataFetchResult>* Result);
	class UDLCDataAsset* STATIC_GetDLCDataAssetBP(TEnumAsByte<EDLCDataFetchResult>* Result);
	struct FText STATIC_GetDisplayValueBP(int Value, TEnumAsByte<EDLCValueDisplayType> DisplayType);
	void STATIC_GetDisplayDataBP(const struct FGameplayTag& Key, TEnumAsByte<EDLCDataFetchResult>* Result, struct FDisplayData* Display);
	void STATIC_GetDisplayAssetsBP(const struct FGameplayTag& Key, int Level, TEnumAsByte<EDLCDataFetchResult>* Result, TAssetPtr<class UTexture2D>* Icon, TAssetPtr<class UTexture2D>* Image);
	void STATIC_GetCharacterValueBP(const struct FGameplayTag& Key, TEnumAsByte<EDLCDataFetchResult>* Result, float* Value);
	void STATIC_GetCharacterDataBP(const struct FGameplayTag& Key, TEnumAsByte<EDLCDataFetchResult>* Result, struct FCharacterData* Character);
	void STATIC_GetChallengeTypeColorBP(TEnumAsByte<EDLCChallengeType> Type, struct FLinearColor* Primary, struct FLinearColor* Secondary);
	int STATIC_GetChallengeScoreBP(const struct FGameplayTag& Key);
	TEnumAsByte<EDLCChallengeRank> STATIC_GetChallengeRankForScoreBP(const struct FGameplayTag& Tag, int Score);
	void STATIC_GetChallengeRankColorBP(TEnumAsByte<EDLCChallengeRank> Rank, struct FLinearColor* Color);
	void STATIC_GetChallengeRankBP(const struct FGameplayTag& Key, TEnumAsByte<EDLCDataFetchResult>* Result, TEnumAsByte<EDLCChallengeRank>* Value);
	void STATIC_GetChallengeDataBP(const struct FGameplayTag& Key, TEnumAsByte<EDLCDataFetchResult>* Result, struct FChallengeData* CHALLENGE, TArray<struct FSubChallengeData>* SubChallenges);
	void STATIC_GetBikeSkinValueBP(const struct FGameplayTag& Key, TEnumAsByte<EDLCDataFetchResult>* Result, float* Value);
	void STATIC_GetBikeSkinDataBP(const struct FGameplayTag& Key, TEnumAsByte<EDLCDataFetchResult>* Result, struct FBikeSkinData* BikeSkin);
	TArray<struct FGameplayTag> STATIC_GetAllSubChallengeTagsBP();
	TArray<struct FGameplayTag> STATIC_GetAllScoreModifierTagsBP();
	TArray<struct FGameplayTag> STATIC_GetAllScoreEventTagsBP();
	TArray<struct FGameplayTag> STATIC_GetAllRingTagsBP();
	TArray<struct FGameplayTag> STATIC_GetAllRankTagsBP();
	TArray<struct FGameplayTag> STATIC_GetAllPatchTagsBP();
	TArray<struct FGameplayTag> STATIC_GetAllOwnedBikeSkinsTagsBP();
	TArray<struct FGameplayTag> STATIC_GetAllCharacterTagsBP();
	TArray<struct FGameplayTag> STATIC_GetAllChallengeTagsBP();
	TArray<struct FGameplayTag> STATIC_GetAllBikeSkinTagsBP();
	void STATIC_FailChallengeBP(const struct FGameplayTag& Key, const struct FText& Reason);
	void STATIC_EquipRingBBP(const struct FGameplayTag& Key, TEnumAsByte<EDLCDataFetchResult>* Result);
	void STATIC_EquipRingABP(const struct FGameplayTag& Key, TEnumAsByte<EDLCDataFetchResult>* Result);
	void STATIC_EquipCharacterBP(const struct FGameplayTag& Key, TEnumAsByte<EDLCDataFetchResult>* Result);
	void STATIC_EquipBikeSkinBP(const struct FGameplayTag& Key, TEnumAsByte<EDLCDataFetchResult>* Result);
	void STATIC_DispatchSubChallengeEventBP(int Index, const struct FGameplayTag& Key, class AActor* Instigator, int Value, int Total);
	void STATIC_DispatchScoreEventBP(const struct FText& Title, class AActor* Instigator, int Value, int Total, int Combo, const struct FGameplayTag& ScoreEventTag);
	void STATIC_DisableSubChallengeBP(int Index, const struct FGameplayTag& Key);
	void STATIC_CompleteChallengeBP(const struct FGameplayTag& Key, int ChallengeScore, TArray<int> SubChallengeScores);
	void STATIC_CompleteAllChallengesBP();
	void STATIC_BeginChallengeBP(const struct FGameplayTag& Key);
};


// Class BendGame.DLCGridItemWidget
// 0x0050 (0x0298 - 0x0248)
class UDLCGridItemWidget : public UUserWidget
{
public:
	bool                                               bIsBlank;                                                 // 0x0248(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bNeverSelectable;                                         // 0x0249(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x024A(0x0002) MISSED OFFSET
	int                                                Index;                                                    // 0x024C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnClick;                                                  // 0x0250(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnHover;                                                  // 0x0260(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnHold;                                                   // 0x0270(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FName                                       Key;                                                      // 0x0280(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FGameplayTag                                Tag;                                                      // 0x0288(0x0008) (BlueprintVisible, BlueprintReadOnly)
	bool                                               bSelected;                                                // 0x0290(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0291(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.DLCGridItemWidget");
		return ptr;
	}


	void SetSelected(bool bIsSelected);
	void SetKey(const struct FName& Value);
	void Invalidate();
};


// Class BendGame.DLCGridWidget
// 0x0048 (0x01A8 - 0x0160)
class UDLCGridWidget : public UGridPanel
{
public:
	struct FScriptMulticastDelegate                    OnSelectionChanged;                                       // 0x0160(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDataChanged;                                            // 0x0170(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData00[0x28];                                      // 0x0180(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.DLCGridWidget");
		return ptr;
	}


	bool SetSelectedIndex(int Value);
	void SetData(TArray<struct FDLCGridWidgetData> InData);
	int Rows();
	void InvalidateData();
	void GetSelectedLocation(int* Column, int* Row);
	int GetSelectedIndex();
	bool CursorUp();
	bool CursorRight();
	bool CursorLeft();
	bool CursorDown();
	int Columns();
};


// Class BendGame.DLCLeaderboardList
// 0x0040 (0x0288 - 0x0248)
class UDLCLeaderboardList : public UUserWidget
{
public:
	class UPanelWidget*                                ListPanel;                                                // 0x0248(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ELeaderboardType>                      LeaderboardType;                                          // 0x0250(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EBendLeaderboardID>                    LeaderboardId;                                            // 0x0251(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0252(0x0002) MISSED OFFSET
	int                                                PlayerRank;                                               // 0x0254(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x30];                                      // 0x0258(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.DLCLeaderboardList");
		return ptr;
	}


	void SetPageIndex(int Value);
	void SetLeaderboard(TEnumAsByte<EBendLeaderboardID> Id, TEnumAsByte<ELeaderboardType> Type);
	void SetData(TArray<struct FBendRankInfo> InData);
	void OnPlayerScoreRecieved(TEnumAsByte<EBendLeaderboardID> Id);
	void OnGlobalLeaderboardReceived(TEnumAsByte<EBendLeaderboardID> Id);
	void OnFriendsLeaderboardReceived(TEnumAsByte<EBendLeaderboardID> Id);
	void InvalidateRank(int Rank);
	void Invalidate();
	int GetPageIndex();
	int GetPageCount();
	int GetItemCount();
};


// Class BendGame.DLCLeaderboardListItem
// 0x0020 (0x0268 - 0x0248)
class UDLCLeaderboardListItem : public UUserWidget
{
public:
	struct FString                                     DisplayName;                                              // 0x0248(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	int                                                Score;                                                    // 0x0258(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                Rank;                                                     // 0x025C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsPlayer;                                                // 0x0260(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0261(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.DLCLeaderboardListItem");
		return ptr;
	}


	void Invalidate();
};


// Class BendGame.DLCMenuPage
// 0x0038 (0x0280 - 0x0248)
class UDLCMenuPage : public UUserWidget
{
public:
	float                                              RequiredHoldTime;                                         // 0x0248(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x14];                                      // 0x024C(0x0014) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnConfirmAction;                                          // 0x0260(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnCancelAction;                                           // 0x0270(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.DLCMenuPage");
		return ptr;
	}


	void RecieveUp();
	void RecieveTriangleHoldUpdate(float Value);
	void RecieveTriangleHeld();
	void RecieveTriangle();
	void RecieveSquareHoldUpdate(float Value);
	void RecieveSquareHeld();
	void RecieveSquare();
	void RecieveRight();
	void RecieveR2();
	void RecieveR1();
	void RecieveLeft();
	void RecieveL2();
	void RecieveL1();
	void RecieveDown();
	void RecieveCrossHoldUpdate(float Value);
	void RecieveCrossHeld();
	void RecieveCross();
	void RecieveCircleHoldUpdate(float Value);
	void RecieveCircleHeld();
	void RecieveCircle();
	void OnTriangleHold(float Time);
	void OnSquareHold(float Time);
	void OnCrossHold(float Time);
	void OnCircleHold(float Time);
	void FlushHeldInput();
};


// Class BendGame.DLCUIManager
// 0x0050 (0x0398 - 0x0348)
class ADLCUIManager : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0348(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnPostChallengeCompleteRetry;                             // 0x0350(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPostChallengeCompleteQuit;                              // 0x0360(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class UClass*                                      ChallengeHUDClass;                                        // 0x0370(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UDLCChallengeHUDWidget*                      ChallengeHUD;                                             // 0x0378(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FGameplayTag                                ActiveChallengeTag;                                       // 0x0380(0x0008) (BlueprintVisible, BlueprintReadOnly)
	int                                                InitialChallengeShopPoints;                               // 0x0388(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                InitialChallengeReputation;                               // 0x038C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                InitialGlobalReputation;                                  // 0x0390(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                InitialGlobalRank;                                        // 0x0394(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.DLCUIManager");
		return ptr;
	}


	void UpdateChallengeScore(int Points);
	void SetTime(bool bVisible, const struct FTimespan& Time);
	void SetHudVisible(bool bVisible);
	void SetDashboardVisible(bool bVisible);
	void SetCountdownTime(bool bVisible, const struct FTimespan& TotalTime, const struct FTimespan& RemainingTime);
	void SetChallengeSkills(TArray<struct FBendSkill> Skills);
	void ReceiveChallengeComplete(const struct FDLCCompleteChallengeData& CompleteChallengeData);
	bool IsPauseBlockedByHUD();
	bool IsHudVisible();
	bool InitializeChallengeHUD();
	class ADLCUIManager* STATIC_GetDLCUIManager();
	class UDLCChallengeHUDWidget* GetChallengeHUD();
	void FailSubChallenge(int Index, const struct FGameplayTag& Key);
	void FailChallenge(const struct FGameplayTag& Key, const struct FText& Reason);
	void DispatchSubChallengeEvent(int Index, const struct FGameplayTag& Key, class AActor* EventInstigator, int Value, int Total);
	void DispatchScoreEvent(const struct FText& Title, class AActor* EventInstigator, int Value, int Total, int Combo, const struct FGameplayTag& ScoreEventTag);
	void DispatchAltScoreEvent(const struct FText& Title, int Value, bool bVisible);
	void DisableSubChallenge(int Index, const struct FGameplayTag& Key);
	void DestroyChallengeHUD();
	void ContinueToResults();
	void CompleteSubChallenge(int Index, const struct FGameplayTag& Key);
	void CompleteChallenge(const struct FGameplayTag& Key, int ChallengeScore, TArray<int> SubChallengeScores, const struct FTimespan& TotalTime);
	void BeginChallenge(const struct FGameplayTag& Key);
};


// Class BendGame.DLCUnlockedItemsManager
// 0x0048 (0x0390 - 0x0348)
class ADLCUnlockedItemsManager : public AActor
{
public:
	unsigned char                                      UnknownData00[0x38];                                      // 0x0348(0x0038) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnCharSkinApplied;                                        // 0x0380(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.DLCUnlockedItemsManager");
		return ptr;
	}


	void SetRings();
	void SetPatchs(class UMaterialInstanceDynamic* DynamicMaterialInstance);
	void SetCharSkin(bool isDefault);
	void SetBikeSkin();
	void ResetCharBind(TEnumAsByte<EMissionIDs> MissionID);
	void ResetChar();
	class ADLCUnlockedItemsManager* STATIC_GetDLCUnlockedItemsManager();
	void ApplyPatches(class ABendPlayerPawn* PlayerPawn, class USkeletalMeshComponent* playerMesh);
	void ApplyDLCItemsBind(TEnumAsByte<EMissionIDs> MissionID);
	void ApplyDLCItems();
};


// Class BendGame.DynamicAssetSpawner
// 0x0000 (0x0348 - 0x0348)
class ADynamicAssetSpawner : public AActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.DynamicAssetSpawner");
		return ptr;
	}


	void SetStartAwake(class UStaticMeshComponent* Component, bool NewStartAwake);
	void SetMobility_Spawner(class USceneComponent* SceneComponent, TEnumAsByte<EComponentMobility> NewMobility);
	void SetCanEverAffectNavigation(class UStaticMeshComponent* Component, bool NewCanEverAffectNavigation);
};


// Class BendGame.BendHangingDynamicProp
// 0x0050 (0x0398 - 0x0348)
class ABendHangingDynamicProp : public ADynamicAssetSpawner
{
public:
	class UBendSphereComponent*                        OverlapSphere;                                            // 0x0348(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UStaticMeshComponent*                        HangingMeshComp;                                          // 0x0350(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UMaterialParameterCollection*                TimeWeatherCollection;                                    // 0x0358(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       ParameterName;                                            // 0x0360(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              WindMultiplier;                                           // 0x0368(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               CableDroop;                                               // 0x036C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x036D(0x0003) MISSED OFFSET
	class UStaticMesh*                                 HangingCableMesh;                                         // 0x0370(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<struct FHungActorData>                      HangingCableStructure;                                    // 0x0378(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	bool                                               DeaconNearby;                                             // 0x0388(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0389(0x0003) MISSED OFFSET
	float                                              DownVectorLength;                                         // 0x038C(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                RandomSeedForCableSineWave;                               // 0x0390(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0394(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendHangingDynamicProp");
		return ptr;
	}


	void EndOverlap();
	void BeginOverlap();
};


// Class BendGame.FlickeringSpotLightComponent
// 0x00B0 (0x0520 - 0x0470)
class UFlickeringSpotLightComponent : public USpotLightComponent
{
public:
	struct FBendRuntimeFloatCurve                      FlickeringIntensityCurve;                                 // 0x0470(0x0088) (Edit)
	bool                                               RepeatFlickeringCycle;                                    // 0x04F8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               PlayOnceFlickeringCycle;                                  // 0x04F9(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x04FA(0x0002) MISSED OFFSET
	float                                              BaseIntensity;                                            // 0x04FC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FlickeringIntensity;                                      // 0x0500(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CurveSpeed;                                               // 0x0504(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CurveOffset;                                              // 0x0508(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x14];                                      // 0x050C(0x0014) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.FlickeringSpotLightComponent");
		return ptr;
	}


	void UpdateLightFlickering(float CurveValue);
	float TickLightFlickering(float DeltaTime);
	void SetupFlickering();
};


// Class BendGame.FocusModeIconManager
// 0x0068 (0x03B0 - 0x0348)
class AFocusModeIconManager : public AActor
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0348(0x0018) MISSED OFFSET
	class UClass*                                      AdvertiseWidgetClass;                                     // 0x0360(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x48];                                      // 0x0368(0x0048) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.FocusModeIconManager");
		return ptr;
	}


	void OnFocusModeToggle(bool EnteredFocusMode);
	void OnFocusFadingFinished();
};


// Class BendGame.FogOfWar
// 0x00C8 (0x0410 - 0x0348)
class AFogOfWar : public AActor
{
public:
	class UTexture2D*                                  DataTexture;                                              // 0x0348(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UTextureRenderTarget2D*                      RenderTarget;                                             // 0x0350(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	struct FVector                                     WorldSectorsMin;                                          // 0x0358(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     WorldSectorsMax;                                          // 0x0364(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<class UBendBunkerData*>                     AmbushZones;                                              // 0x0370(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	class UMaterialInterface*                          Material;                                                 // 0x0380(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UTexture2D*                                  MaskTexture;                                              // 0x0388(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UTexture2D*                                  BrushTexture;                                             // 0x0390(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x78];                                      // 0x0398(0x0078) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.FogOfWar");
		return ptr;
	}


	struct FVector2D WorldLocationToPixel(const struct FVector& InWorldLocation);
	void TextureUpdated();
	bool IsWorldLocationInFog(const struct FVector& InWorldLocation);
	bool IsPixelFilled(int X, int Y);
	class UMaterialInstanceDynamic* GetDynamicMaterialInstance();
	struct FVector2D FillPixelFromWorldLocation(const struct FVector& InWorldLocation);
	void FillPixel(int X, int Y);
	void DataSaved();
	void DataLoaded();
	void CopyDataToTexture();
	void CopyDataToRenderTarget(const struct FVector2D& ScreenSize, TEnumAsByte<EBlendMode> BlendMode);
	void ClearPixel(int X, int Y);
	void ClearData(const struct FColor& Color);
};


// Class BendGame.FootIKController
// 0x0038 (0x0108 - 0x00D0)
class UFootIKController : public UActorComponent
{
public:
	float                                              LeftFootIKWeight;                                         // 0x00D0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              RightFootIKWeight;                                        // 0x00D4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	struct FVector                                     LeftFootIKPosition;                                       // 0x00D8(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	struct FVector                                     RightFootIKPosition;                                      // 0x00E4(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	struct FVector                                     LeftFootRaycastOffset;                                    // 0x00F0(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     RightFootRaycastOffset;                                   // 0x00FC(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.FootIKController");
		return ptr;
	}

};


// Class BendGame.GameCheatMenu
// 0x0050 (0x0398 - 0x0348)
class AGameCheatMenu : public AActor
{
public:
	struct FScriptMulticastDelegate                    OnCheatActivatedDelegate;                                 // 0x0348(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData00[0x20];                                      // 0x0358(0x0020) MISSED OFFSET
	TArray<struct FGameDebugMenuEntry>                 DebugMenus;                                               // 0x0378(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class UGameDebugOption*>                    GameDebugOptions;                                         // 0x0388(0x0010) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.GameCheatMenu");
		return ptr;
	}


	void ZoomToLocation(const struct FVector& Location);
	void ToggleCheatMenu();
	void HideCheatMenu();
	class AWorldDebugMenu* GetWorldDebugMenu();
	void ConsoleCommandCallback(const struct FString& Command);
};


// Class BendGame.GameDebugMenu
// 0x0020 (0x0368 - 0x0348)
class AGameDebugMenu : public AActor
{
public:
	struct FString                                     DebugMenuName;                                            // 0x0348(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FName>                               DebugFunctionNames;                                       // 0x0358(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.GameDebugMenu");
		return ptr;
	}


	class ABendPlayerPawn* GetPlayerPawn();
	class UPlayerInventoryComponent* GetPlayerInventory();
	class ABendPlayerController* GetPlayerController();
	class ABendHUD* GetBendHUD();
	void AddWeaponToInventory(TEnumAsByte<EInventoryWeaponID> WeaponID);
};


// Class BendGame.WorldDebugMenu
// 0x0000 (0x0368 - 0x0368)
class AWorldDebugMenu : public AGameDebugMenu
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.WorldDebugMenu");
		return ptr;
	}


	void ZoomToLocation(const struct FVector& Location);
	void SetOrthographic(bool IsOrthographic);
	void MapRenderSectors(TArray<struct FString> Sectors);
	void MapRenderSectorRange(int SectorYStart, int SectorXStart, int SectorYEnd, int SectorXEnd);
};


// Class BendGame.GameDebugOption
// 0x0028 (0x00F8 - 0x00D0)
class UGameDebugOption : public UActorComponent
{
public:
	unsigned char                                      bPrefixOptionsWithName : 1;                               // 0x00D0(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00D1(0x0007) MISSED OFFSET
	TArray<struct FDebugOptionDetails>                 GameDebugOptions;                                         // 0x00D8(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	unsigned char                                      UnknownData01[0x10];                                      // 0x00E8(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.GameDebugOption");
		return ptr;
	}


	void SetCallbackDelegate(class UObject* TheObject, const struct FString& FunctionName, const struct FString& DebugOptionName);
	int GetDebugOptionIntValue(int Index);
	float GetDebugOptionFloatValue(int Index);
};


// Class BendGame.GridMenuItem
// 0x0058 (0x02A0 - 0x0248)
class UGridMenuItem : public UUserWidget
{
public:
	bool                                               bIsBlank;                                                 // 0x0248(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bNeverSelectable;                                         // 0x0249(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x024A(0x0002) MISSED OFFSET
	int                                                Index;                                                    // 0x024C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnClick;                                                  // 0x0250(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnHover;                                                  // 0x0260(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPress;                                                  // 0x0270(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnHold;                                                   // 0x0280(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0290(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.GridMenuItem");
		return ptr;
	}


	void SyncCursor();
};


// Class BendGame.GridMenuPage
// 0x0000 (0x0248 - 0x0248)
class UGridMenuPage : public UUserWidget
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.GridMenuPage");
		return ptr;
	}

};


// Class BendGame.HudNotificationItemWidget
// 0x0018 (0x0260 - 0x0248)
class UHudNotificationItemWidget : public UUserWidget
{
public:
	TEnumAsByte<ENotification>                         NotificationType;                                         // 0x0248(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0249(0x0003) MISSED OFFSET
	unsigned char                                      bNotificationDisplayed : 1;                               // 0x024C(0x0001) (Edit, BlueprintVisible, Transient)
	unsigned char                                      bNotificationsPaused : 1;                                 // 0x024C(0x0001) (Edit, BlueprintVisible, Transient)
	unsigned char                                      UnknownData01[0x3];                                       // 0x024D(0x0003) MISSED OFFSET
	TArray<struct FNotificationDetails>                NotificationQueue;                                        // 0x0250(0x0010) (Edit, BlueprintVisible, ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.HudNotificationItemWidget");
		return ptr;
	}


	bool RemoveCurrentNotification();
	void OnNotificationAdded();
	int NumNotifications();
	bool HasPendingNotification();
	bool CanInterruptCurrentNotification();
	void AddNotification(const struct FNotificationDetails& Details);
};


// Class BendGame.HudNotificationWidget
// 0x0018 (0x0260 - 0x0248)
class UHudNotificationWidget : public UUserWidget
{
public:
	TArray<class UHudNotificationItemWidget*>          NotificationWidgets;                                      // 0x0248(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst)
	unsigned char                                      NotificationsPaused : 1;                                  // 0x0258(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0259(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.HudNotificationWidget");
		return ptr;
	}


	void SetNotificationsPaused(bool Paused);
	class UHudNotificationItemWidget* GetNotificationWidget(TEnumAsByte<ENotification> Type);
	bool AddNotification(const struct FNotificationDetails& Details);
};


// Class BendGame.HudWeapon
// 0x0188 (0x03D0 - 0x0248)
class UHudWeapon : public UUserWidget
{
public:
	bool                                               WeaponData;                                               // 0x0248(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0249(0x0007) MISSED OFFSET
	TArray<class UImage*>                              WeaponIcons;                                              // 0x0250(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	class ABendWeapon*                                 CurrentWeapon;                                            // 0x0260(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                AmmoMeterAngle;                                           // 0x0268(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<EUMGSequencePlayMode>                  PlayMode;                                                 // 0x026C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x026D(0x0003) MISSED OFFSET
	float                                              PreviousHealth;                                           // 0x0270(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PreviousMaxHealth;                                        // 0x0274(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               WeaponInventoryVisible;                                   // 0x0278(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0279(0x0003) MISSED OFFSET
	float                                              PreviousStamina;                                          // 0x027C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FDateTime                                   PlayerStatsStartTime;                                     // 0x0280(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	struct FTimerHandle                                DamageTimer;                                              // 0x0288(0x0004) (Edit, BlueprintVisible, DisableEditOnInstance)
	struct FLinearColor                                ImageRed;                                                 // 0x028C(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FLinearColor                                ImageWhite;                                               // 0x029C(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x02AC(0x0004) MISSED OFFSET
	struct FSlateColor                                 TextRed;                                                  // 0x02B0(0x0028) (Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSlateColor                                 TextWhite;                                                // 0x02D8(0x0028) (Edit, BlueprintVisible, DisableEditOnInstance)
	int                                                RangedHitCount;                                           // 0x0300(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x0304(0x0004) MISSED OFFSET
	class ABendPawn*                                   CurrentTarget;                                            // 0x0308(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UHudWidget*                                  Parent;                                                   // 0x0310(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CurrentHealth;                                            // 0x0318(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CurrentStamina;                                           // 0x031C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               ADS;                                                      // 0x0320(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               HealthBuffActive;                                         // 0x0321(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               StaminaBuffActive;                                        // 0x0322(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               FocusBuffActive;                                          // 0x0323(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               HealthWarningVisible;                                     // 0x0324(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               AttributeAwardVisible;                                    // 0x0325(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData05[0x2];                                       // 0x0326(0x0002) MISSED OFFSET
	float                                              AwardStartTime;                                           // 0x0328(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AwardEndTime;                                             // 0x032C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AwardFinalValue;                                          // 0x0330(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               AnimatingAward;                                           // 0x0334(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData06[0x3];                                       // 0x0335(0x0003) MISSED OFFSET
	class ABendWeapon*                                 EquippedWeapon;                                           // 0x0338(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class ABendWeapon*                                 HolsteredWeapon;                                          // 0x0340(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class ABendWeapon*                                 MeleeWeapon;                                              // 0x0348(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               HideWeaponUI;                                             // 0x0350(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData07[0x7];                                       // 0x0351(0x0007) MISSED OFFSET
	TArray<struct FName>                               QuickMenuActions;                                         // 0x0358(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	bool                                               HideDpadUI;                                               // 0x0368(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData08[0x3];                                       // 0x0369(0x0003) MISSED OFFSET
	struct FTimerHandle                                DPadTimerHandle;                                          // 0x036C(0x0004) (Edit, BlueprintVisible, DisableEditOnInstance)
	float                                              TimeToKeepDpadUp;                                         // 0x0370(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData09[0x4];                                       // 0x0374(0x0004) MISSED OFFSET
	class UMaterialInstanceDynamic*                    ProgressCircle_MI;                                        // 0x0378(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               MedkitsAvailable;                                         // 0x0380(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               DetonatorAvailable;                                       // 0x0381(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData10[0x6];                                       // 0x0382(0x0006) MISSED OFFSET
	class UTextBlock*                                  Player_Health_Value_CODE;                                 // 0x0388(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UProgressBar*                                Health_CODE;                                              // 0x0390(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UProgressBar*                                Stamina_CODE;                                             // 0x0398(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UProgressBar*                                AdrenalineMeter_CODE;                                     // 0x03A0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBorder*                                     Supplies_CODE;                                            // 0x03A8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UImage*                                      HealthBroken_CODE;                                        // 0x03B0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UImage*                                      HealthBrokenPattern_CODE;                                 // 0x03B8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<EWidgetVisibilityOverride>             WeaponVisibilityOverride;                                 // 0x03C0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<EWidgetVisibilityOverride>             HealthVisibilityOverride;                                 // 0x03C1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<EWidgetVisibilityOverride>             StaminaVisibilityOverride;                                // 0x03C2(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<EWidgetVisibilityOverride>             AdrenalineVisibilityOverride;                             // 0x03C3(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<EWidgetVisibilityOverride>             SuppliesVisibilityOverride;                               // 0x03C4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData11[0xB];                                       // 0x03C5(0x000B) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.HudWeapon");
		return ptr;
	}


	void UpdateStamina(float Stamina);
	void UpdateHealthStamina();
	void UpdateHealth(float Health);
	void ShowHealthAndStamina();
	void DisplayHealthAndStamina(bool State);
	void CheckStamina(bool* Changed, float* Stamina);
	void CheckHealth(bool* Changed, float* Health);
};


// Class BendGame.InputMenuWidget
// 0x0028 (0x0270 - 0x0248)
class UInputMenuWidget : public UUserWidget
{
public:
	struct FKey                                        InputKey;                                                 // 0x0248(0x0018) (Edit, BlueprintVisible)
	unsigned char                                      bInputEnabled : 1;                                        // 0x0260(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst)
	unsigned char                                      bFlushInput : 1;                                          // 0x0260(0x0001) (Edit, BlueprintVisible, Transient, EditConst)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0261(0x0007) MISSED OFFSET
	class UPlayerInput*                                PlayerInput;                                              // 0x0268(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.InputMenuWidget");
		return ptr;
	}


	void SetInpuEnabled(bool IsEnabled);
	bool IsInputEnabled();
	bool InputKeyPressed();
};


// Class BendGame.InteractComponent
// 0x0098 (0x0168 - 0x00D0)
class UInteractComponent : public UActorComponent
{
public:
	struct FScriptDelegate                             OnInteractBeginDelegate;                                  // 0x00D0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, InstancedReference)
	struct FScriptDelegate                             OnInteractEndDelegate;                                    // 0x00E0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, InstancedReference)
	struct FScriptMulticastDelegate                    OnInteractBlockedByEnemyAware;                            // 0x00F0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FVector                                     PlayerLastPosition;                                       // 0x0100(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x010C(0x0004) MISSED OFFSET
	class AActor*                                      OwnerInteractRef;                                         // 0x0110(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bInteractable : 1;                                        // 0x0118(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst)
	unsigned char                                      bInteractInUse : 1;                                       // 0x0118(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst)
	unsigned char                                      bInteractHasFocus : 1;                                    // 0x0118(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst)
	unsigned char                                      SkipAllChecks : 1;                                        // 0x0118(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      CanUseInBlackScreen : 1;                                  // 0x0118(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      CanUseOnBike : 1;                                         // 0x0118(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      CanUseSprinting : 1;                                      // 0x0118(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      CanUseWhenAnyAware : 1;                                   // 0x0118(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      DoLOSCheckToLocation : 1;                                 // 0x0119(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      LastLOSCheck : 1;                                         // 0x0119(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData01[0x2];                                       // 0x011A(0x0002) MISSED OFFSET
	float                                              EnemyNearDist;                                            // 0x011C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              EnemyAwareDist;                                           // 0x0120(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              EnemyTargetingDist;                                       // 0x0124(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      HasSentFailureMessageOnAwareSinceInteractable : 1;        // 0x0128(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0129(0x0007) MISSED OFFSET
	TArray<TEnumAsByte<EBendPawnBodyType>>             BodyTypesCheckLOSAgainst;                                 // 0x0130(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FVector                                     OverrideLocation;                                         // 0x0140(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x014C(0x0004) MISSED OFFSET
	TArray<TEnumAsByte<EBendAnimStates>>               StatesAllowedToInteract;                                  // 0x0150(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TEnumAsByte<EInteractManagerTypeToUse>             InteractManagerToUse;                                     // 0x0160(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x7];                                       // 0x0161(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.InteractComponent");
		return ptr;
	}


	void SetInteractCurrentlyUsing(bool IsUsing);
	void SetInteractable(bool Interactable);
	void ResetLOSVariables();
	void InteractLostFocus();
	void InteractGainFocus();
	struct FVector GetInteractLocation();
	bool CanRecieveFocus();
};


// Class BendGame.InteractManager
// 0x0010 (0x00E0 - 0x00D0)
class UInteractManager : public UActorComponent
{
public:
	TArray<TWeakObjectPtr<class UInteractComponent>>   InteractComponents;                                       // 0x00D0(0x0010) (ExportObject, ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.InteractManager");
		return ptr;
	}


	void ForceResetLOSChecksOnAllInteracts();
};


// Class BendGame.InventoryGameplayStatics
// 0x0008 (0x0030 - 0x0028)
class UInventoryGameplayStatics : public UBlueprintFunctionLibrary
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.InventoryGameplayStatics");
		return ptr;
	}


	void STATIC_SpawnWeaponLatentDelegate(class UObject* WorldContextObject, const struct FGameplayTag& WeaponTag, const struct FScriptDelegate& OnSpawned, const struct FLatentActionInfo& LatentInfo);
	void STATIC_SpawnWeaponLatent(class UObject* WorldContextObject, const struct FGameplayTag& WeaponTag, const struct FLatentActionInfo& LatentInfo, class ABendWeapon** ReturnWeapon);
	void STATIC_SetInventoryItemStat(TEnumAsByte<EInventoryItemStat> Type, float Value, float ValuePercent, struct FInventoryItemStats* Stats);
	bool STATIC_PawnUseConsumable(class ABendPlayerPawn* Pawn, class UInventoryItemConsumable* Item);
	class ABendInventoryPickup* STATIC_PawnDropItem(class ABendPlayerPawn* Pawn, class UInventoryItem* Item, int ItemCount);
	void STATIC_PawnCraftRecipe(class ABendPlayerPawn* Pawn, class UInventoryItemRecipe* Recipe, int ItemCount);
	void STATIC_PawnCraftItem(class ABendPlayerPawn* Pawn, class UInventoryItem* Item, int ItemCount);
	class UInventoryWeaponPartStorage* STATIC_GetPlayerWeaponPartStorage(class UObject* WorldContextObject);
	class UPlayerInventoryComponent* STATIC_GetPlayerInventoryComponent(class UObject* WorldContextObject);
	class UInventoryEquipmentStorage* STATIC_GetPlayerEquipmentStorage(class UObject* WorldContextObject);
	class UInventoryBikePartStorage* STATIC_GetPlayerBikePartStorage(class UObject* WorldContextObject);
	int STATIC_GetInventoryItemStatIndex(TEnumAsByte<EInventoryItemStat> Type, const struct FInventoryItemStats& Stats);
	float STATIC_GetInventoryItemStat(TEnumAsByte<EInventoryItemStat> Type, const struct FInventoryItemStats& Stats);
	bool STATIC_FreeInventoryItemAssets(const struct FGameplayTag& ItemTag);
	void STATIC_Debug_AddWeaponToInventory(const struct FGameplayTag& Tag, int Quantity);
	bool STATIC_CacheInventoryItemAssets(const struct FGameplayTag& ItemTag);
	bool STATIC_AreInventoryGuidsEqual(const struct FInventoryGuid& GuidA, const struct FInventoryGuid& GuidB);
	bool STATIC_AddRecipeComponents(class UPlayerInventoryComponent* PlayerInv, class UInventoryItem* ItemRecipe, int Count);
};


// Class BendGame.InventoryItemActor
// 0x0088 (0x03D0 - 0x0348)
class AInventoryItemActor : public AActor
{
public:
	struct FScriptMulticastDelegate                    OnChangedAsset;                                           // 0x0348(0x0010) (Edit, BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FInventoryStorageItemBase                   Item;                                                     // 0x0358(0x0010) (Edit, BlueprintVisible, Transient, EditConst)
	struct FInventoryStorageWeapon                     StorageWeapon;                                            // 0x0368(0x0050) (Edit, BlueprintVisible, Transient, EditConst)
	TArray<class ABendWeaponPart*>                     WeaponParts;                                              // 0x03B8(0x0010) (Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst)
	class UStaticMeshComponent*                        Mesh;                                                     // 0x03C8(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.InventoryItemActor");
		return ptr;
	}


	void SetStorageWeapon(const struct FInventoryStorageWeapon& DisplayWeapon);
	void SetItem(class UInventoryItem* DisplayItem);
};


// Class BendGame.InventoryItemManager
// 0x0318 (0x0340 - 0x0028)
class UInventoryItemManager : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0028(0x0010) MISSED OFFSET
	TArray<struct FInventoryBaseTypeData>              BaseTypeData;                                             // 0x0038(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	struct FInventoryManagerItems                      Items;                                                    // 0x0048(0x0278) (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst)
	class UClass*                                      ItemTagSetsSubClass;                                      // 0x02C0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UInventoryTextureTagLibraryMgr*              TextureTagMgr;                                            // 0x02C8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x50];                                      // 0x02D0(0x0050) MISSED OFFSET
	class UDataTable*                                  StatsDataTable;                                           // 0x0320(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UInventoryBikeMaterials*                     BikeMaterials;                                            // 0x0328(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x10];                                      // 0x0330(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.InventoryItemManager");
		return ptr;
	}


	int NumBikePartsOfType(TEnumAsByte<EMotorcyclePartType> PartType);
	class UInventoryTextureTagLibraryMgr* STATIC_GetTextureTagManager();
	TArray<struct FGameplayTag> STATIC_GetRecipesUsingItem(const struct FGameplayTag& Tag);
	class UInventoryItem* STATIC_GetItemFromFromIDDetails(const struct FInventoryIDDetails& Details);
	class UInventoryItem* STATIC_GetItemByTag(const struct FGameplayTag& Tag);
	class UInventoryItemManager* STATIC_GetInventoryItemManager();
	class UInventoryItemAmmo* STATIC_GetAmmoItem(TEnumAsByte<EInventoryAmmoID> AmmoID);
	class UInventoryItem* STATIC_FindItemByTypeAndIndex(int Type, int Index);
	class UInventoryItem* STATIC_FindItemByTag(const struct FGameplayTag& Tag);
	class UInventoryItem* STATIC_FindItemByKey(int Key);
	class UInventoryItem* STATIC_FindItemByInventoryTypeAndIndex(TEnumAsByte<EInventoryBaseType> Type, int Index);
	class UInventoryItemMotorcyclePart* BikePartByTag(const struct FGameplayTag& Tag);
	class UInventoryItemMotorcyclePart* BikePartByID(TEnumAsByte<EMotorcyclePartType> PartType, int PartID);
};


// Class BendGame.InventoryItemTagSets
// 0x0048 (0x0070 - 0x0028)
class UInventoryItemTagSets : public UDataAsset
{
public:
	TArray<struct FInventoryItemTagSet>                WeaponTagSets;                                            // 0x0028(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      bDisplayTestContainerResults : 1;                         // 0x0038(0x0001) (Edit, BlueprintVisible, Transient, DisableEditOnInstance)
	unsigned char                                      bDisplayTestTagResults : 1;                               // 0x0038(0x0001) (Edit, BlueprintVisible, Transient, DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0039(0x0007) MISSED OFFSET
	struct FInventoryTagContainer                      TestTagContainer;                                         // 0x0040(0x0028) (Edit, BlueprintVisible, Transient, DisableEditOnInstance)
	struct FGameplayTag                                TestTag;                                                  // 0x0068(0x0008) (Edit, BlueprintVisible, Transient, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.InventoryItemTagSets");
		return ptr;
	}

};


// Class BendGame.InventoryItemWidget
// 0x0050 (0x0298 - 0x0248)
class UInventoryItemWidget : public UUserWidget
{
public:
	class UInventoryItem*                              InventoryItem;                                            // 0x0248(0x0008) (Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	class UImage*                                      ImageBgMaterialRef;                                       // 0x0250(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                ItemSlotCount;                                            // 0x0258(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	int                                                ItemCost;                                                 // 0x025C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	TArray<TEnumAsByte<EInventoryItemWidgetBadgeIcon>> BadgeIcons;                                               // 0x0260(0x0010) (Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst)
	struct FInventoryMenuCraftRecipe                   CraftRecipe;                                              // 0x0270(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst)
	unsigned char                                      bInitialSync : 1;                                         // 0x0290(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst)
	unsigned char                                      bSelected : 1;                                            // 0x0290(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst)
	unsigned char                                      bDisabled : 1;                                            // 0x0290(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst)
	unsigned char                                      bDirty : 1;                                               // 0x0290(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst)
	unsigned char                                      bHideItemCount : 1;                                       // 0x0290(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0291(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.InventoryItemWidget");
		return ptr;
	}


	void SyncSlotCount();
	void SyncItemCount(int Count);
	void SyncItem(bool ContainsItem);
	bool SyncBadgeIcon(TEnumAsByte<EInventoryItemWidgetBadge> InBadgeType, TEnumAsByte<EInventoryItemWidgetBadgeIcon> InBadgeIcon);
	void SetStorageItem(const struct FInventoryStorageItem& StorageItem);
	void SetState_Selected();
	void SetState_Disabled();
	void SetState_Default();
	void SetSelected(bool Selected);
	void SetRecipeCraftState(TEnumAsByte<ERecipeCraftState> InRecipeState);
	void SetItemBgTexture(class UTexture2D* Texture);
	void SetInventoryItem(class UInventoryItem* InItem, int InCount, bool SyncWidget);
	void SetBadgeIcon(TEnumAsByte<EInventoryItemWidgetBadge> InBadgeType, TEnumAsByte<EInventoryItemWidgetBadgeIcon> InBadgeIcon);
	bool ItemUsedInRecipes();
	TEnumAsByte<EInventoryBaseType> ItemType();
	class UTexture2D* ItemTexture();
	struct FText ItemName();
	struct FText ItemDescription();
	int ItemCount();
	class UInventoryItem* GetItemBP();
	bool ContainsItemWithValidCount();
	bool ContainsItem();
};


// Class BendGame.InventoryMenuDetailsWidget
// 0x0000 (0x0248 - 0x0248)
class UInventoryMenuDetailsWidget : public UUserWidget
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.InventoryMenuDetailsWidget");
		return ptr;
	}


	void SetMenuSlot(const struct FInventoryMenuSlotBase& Item);
	void SetItem(class UInventoryItem* Item);
};


// Class BendGame.InventoryEquipmentAmmoSlot
// 0x0068 (0x0098 - 0x0030)
class UInventoryEquipmentAmmoSlot : public UInventorySlot
{
public:
	TEnumAsByte<EInventoryAmmoID>                      AmmoID;                                                   // 0x0030(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0031(0x0007) MISSED OFFSET
	struct FText                                       SlotName;                                                 // 0x0038(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	class UInventoryItemAmmo*                          AmmoItem;                                                 // 0x0050(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FInventoryStorageGuidItem                   InventoryItem;                                            // 0x0058(0x0040) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.InventoryEquipmentAmmoSlot");
		return ptr;
	}

};


// Class BendGame.InventoryEquipmentSlot
// 0x00E0 (0x0110 - 0x0030)
class UInventoryEquipmentSlot : public UInventorySlot
{
public:
	TEnumAsByte<EInventoryEquipmentSlot>               SlotID;                                                   // 0x0030(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0031(0x0007) MISSED OFFSET
	struct FText                                       SlotName;                                                 // 0x0038(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FInventoryItemTagCount                      DefaultItem;                                              // 0x0050(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FInventoryStorageWeapon                     StorageWeapon;                                            // 0x0068(0x0050)
	struct FInventoryStorageGuidItem                   EquipmentItem;                                            // 0x00B8(0x0040)
	TArray<struct FInventoryStorageWeapon>             ThrownWeapons;                                            // 0x00F8(0x0010) (ZeroConstructor)
	class UInventoryAmmoStorage*                       AmmoStorage;                                              // 0x0108(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.InventoryEquipmentSlot");
		return ptr;
	}


	int SetWeapon(class UInventoryWeaponItem* Weapon, int ItemCount);
	int SetStorageWeapon(const struct FInventoryStorageWeapon& Weapon);
	void RemoveWeapon();
};


// Class BendGame.InventoryLootSlot
// 0x0048 (0x0078 - 0x0030)
class UInventoryLootSlot : public UInventorySlot
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0030(0x0008) MISSED OFFSET
	struct FInventoryStorageGuidItem                   InventoryItem;                                            // 0x0038(0x0040) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.InventoryLootSlot");
		return ptr;
	}

};


// Class BendGame.InventoryPouchSlot
// 0x0000 (0x0030 - 0x0030)
class UInventoryPouchSlot : public UInventorySlot
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.InventoryPouchSlot");
		return ptr;
	}

};


// Class BendGame.InventoryAmmoStorage
// 0x0010 (0x0060 - 0x0050)
class UInventoryAmmoStorage : public UInventoryStorage
{
public:
	TArray<struct FInventoryEquipmentAmmoSlotEntry>    AmmoEntries;                                              // 0x0050(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.InventoryAmmoStorage");
		return ptr;
	}


	void SetThrownAmmoCapacity(int MaxCapacity);
	void SetAmmoCount(TEnumAsByte<EInventoryAmmoID> AmmoID, int Count);
	void SetAmmoCapacity(TEnumAsByte<EInventoryAmmoID> AmmoID, int MaxCapacity);
	class UInventoryEquipmentAmmoSlot* GetAmmoSlot(TEnumAsByte<EInventoryAmmoID> AmmoID);
	bool AmmoFull(TEnumAsByte<EInventoryAmmoID> AmmoID);
	int AmmoCount(TEnumAsByte<EInventoryAmmoID> AmmoID);
	int AmmoCapacity(TEnumAsByte<EInventoryAmmoID> AmmoID);
	int AdjustCount(TEnumAsByte<EInventoryAmmoID> AmmoID, int Count);
};


// Class BendGame.InventoryBikeStorage
// 0x0020 (0x0070 - 0x0050)
class UInventoryBikeStorage : public UInventoryStorage
{
public:
	struct FInventoryBikeStorageAmmo                   BikeAmmo;                                                 // 0x0050(0x0010) (Edit, BlueprintVisible)
	TArray<struct FAmmoTagToAmmoID>                    AmmoIDsByTag;                                             // 0x0060(0x0010) (Edit, BlueprintVisible, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.InventoryBikeStorage");
		return ptr;
	}


	void TakeAmmoFromBike(const struct FGameplayTag& BikeAmmoTag, TEnumAsByte<EInventoryAmmoID> WeaponAmmoID);
	void SetBikeAmmoStorageCapacity(const struct FGameplayTag& BikeAmmoTag, int Count);
	void ReturnBikeAmmo_MerchantOnly(const struct FInventoryBikeStorageAmmo& Ammo);
	void PutAmmoOnTheBike(const struct FGameplayTag& AmmoTag, int Count);
	int MaxAmmoCount(const struct FGameplayTag& Tag);
	struct FGameplayTag GetGenericAmmoTagFromAmmoID(TEnumAsByte<EInventoryAmmoID> AmmoID);
	struct FInventoryBikeStorageAmmo GetCurrentBikeAmmo();
	void FillBikeAmmo();
	bool DoesBikeHaveAnyAmmo();
	int CurrentAmmoCount(const struct FGameplayTag& Tag);
	int CountToFillAmmo(const struct FGameplayTag& Tag);
	bool ContainsAmmoTag(const struct FGameplayTag& Tag);
	bool CanPlayerHoldMoreAmmo();
	bool CanBikeStoreAmmo();
	int AdjustBikeAmmo(const struct FGameplayTag& Tag, int Count);
};


// Class BendGame.InventoryCollectibleStorage
// 0x0050 (0x00A0 - 0x0050)
class UInventoryCollectibleStorage : public UInventoryStorage
{
public:
	unsigned char                                      UnknownData00[0x50];                                      // 0x0050(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.InventoryCollectibleStorage");
		return ptr;
	}


	bool UnlockCollectible(TEnumAsByte<EInventoryCollectibleID> CollectibleID);
	void SetNewBadgeDisplayed(TEnumAsByte<EInventoryCollectibleID> CollectibleID);
	bool DisplayNewBadge(TEnumAsByte<EInventoryCollectibleID> CollectibleID);
	bool DiscoveredCollectibleID(TEnumAsByte<EInventoryCollectibleID> CollectibleID);
	bool DiscoveredCollectible(class UInventoryItemCollectible* Collectible);
};


// Class BendGame.InventoryEquipmentStorage
// 0x0088 (0x00D8 - 0x0050)
class UInventoryEquipmentStorage : public UInventoryStorage
{
public:
	struct FInventoryEquipmentLocker                   Locker;                                                   // 0x0050(0x0020) (BlueprintVisible, BlueprintReadOnly)
	int                                                MaxUnlockableWeapons;                                     // 0x0070(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0074(0x0004) MISSED OFFSET
	struct FGameplayTagQuery                           ThrownWeaponTagQuery;                                     // 0x0078(0x0048) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	class UInventoryAmmoStorage*                       AmmoStorage;                                              // 0x00C0(0x0008) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x10];                                      // 0x00C8(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.InventoryEquipmentStorage");
		return ptr;
	}


	int WeaponTypeMaxCount(TEnumAsByte<EWeaponType> Type);
	int WeaponTypeCount(TEnumAsByte<EWeaponType> Type);
	void SyncPawnWeaponStates(class ABendPlayerPawn* Player);
	void SetThrowRockDisabled(bool IsDisabled);
	void SetStorageWeapon(TEnumAsByte<EInventoryEquipmentSlot> Slot, const struct FInventoryStorageWeapon& Weapon);
	void RemoveInventoryWeaponFromLocker(class UInventoryWeaponItem* InventoryWeapon);
	bool RemoveAllAmmoFromLockerWeapon(const struct FGameplayTag& WeaponTag);
	bool OnWeaponPartRemoved(class ABendWeapon* Weapon, class ABendWeaponPart* Part);
	bool MoveEquipSlotToLocker(TEnumAsByte<EInventoryEquipmentSlot> Slot, bool DontRemoveWeapon);
	bool IsPartGuidEquipped(const struct FInventoryGuid& Guid);
	struct FInventoryStorageWeapon GetStorageWeaponBP(TEnumAsByte<EInventoryEquipmentSlot> Slot);
	void GetStorageWeapon(TEnumAsByte<EInventoryEquipmentSlot> Slot, struct FInventoryStorageWeapon* OutWeapon);
	int GetLockerWeaponAmmoCount(const struct FGameplayTag& WeaponTag);
	int GetLockerSlotFromWeapon(const struct FGameplayTag& WeaponTag);
	class UInventoryEquipmentSlot* GetEquipmentSlot(TEnumAsByte<EInventoryEquipmentSlot> Slot);
	bool DoesLockerContainWeapon(const struct FGameplayTag& WeaponTag);
	TEnumAsByte<EWeaponSocketLocation> CheckWhatSlotWeaponWillBeRemovedFrom(class UInventoryWeaponItem* pWeapon);
	void AddInventoryWeaponToLocker(class UInventoryWeaponItem* InventoryWeapon);
	bool AddAmmoToLockerWeapon(const struct FGameplayTag& WeaponTag, int AmmoToAdd);
};


// Class BendGame.InventoryMissionStorage
// 0x0008 (0x0058 - 0x0050)
class UInventoryMissionStorage : public UInventoryStorage
{
public:
	int                                                MaxSlots;                                                 // 0x0050(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0054(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.InventoryMissionStorage");
		return ptr;
	}

};


// Class BendGame.InventoryPouchStorage
// 0x0000 (0x0050 - 0x0050)
class UInventoryPouchStorage : public UInventoryStorage
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.InventoryPouchStorage");
		return ptr;
	}

};


// Class BendGame.InventoryRecipeStorage
// 0x0098 (0x00E8 - 0x0050)
class UInventoryRecipeStorage : public UInventoryStorage
{
public:
	struct FScriptMulticastDelegate                    OnDiscovered;                                             // 0x0050(0x0010) (ZeroConstructor, Transient, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnCraftable;                                              // 0x0060(0x0010) (ZeroConstructor, Transient, InstancedReference, BlueprintAssignable)
	float                                              MinTimeBetweenCraftableRecipeBroadcasts;                  // 0x0070(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x64];                                      // 0x0074(0x0064) MISSED OFFSET
	TArray<struct FInventoryStorageRecipeItem>         RecipeItems;                                              // 0x00D8(0x0010) (BlueprintVisible, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.InventoryRecipeStorage");
		return ptr;
	}


	bool SetRecipeDiscovered(TEnumAsByte<EInventoryRecipeID> RecipeID);
	void SetNewBadgeDisplayed(class UInventoryItemRecipe* Recipe);
	void OnRecipeCrafted(TEnumAsByte<EInventoryRecipeID> RecipeID);
	bool IsRecipeDiscovered(TEnumAsByte<EInventoryRecipeID> RecipeID);
	bool HasUnlockedRecipeUsingItem(const struct FGameplayTag& RecipeItemTag);
	int GetRecipeCraftCount(TEnumAsByte<EInventoryRecipeID> RecipeID);
	void GetMenuCraftRecipes(TArray<struct FInventoryMenuCraftRecipe>* OutMenuRecipes);
	void GetMenuCraftRecipeForItem(const struct FGameplayTag& CraftItemTag, TArray<struct FInventoryMenuCraftRecipe>* OutMenuRecipes);
	void GetMenuCraftRecipeByTag(const struct FGameplayTag& RecipeTag, struct FInventoryMenuCraftRecipe* OutMenuRecipe);
	bool DisplayNewBadge(class UInventoryItemRecipe* Recipe);
	void Debug_DiscoverAllRecipes();
};


// Class BendGame.InventoryWeaponPartStorage
// 0x0028 (0x0078 - 0x0050)
class UInventoryWeaponPartStorage : public UInventoryStorage
{
public:
	TArray<struct FInventoryItemTagCount>              WeaponPartLimits;                                         // 0x0050(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	int                                                MaxCount;                                                 // 0x0060(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0064(0x0004) MISSED OFFSET
	TArray<struct FInventoryStorageWeaponPart>         Parts;                                                    // 0x0068(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.InventoryWeaponPartStorage");
		return ptr;
	}


	bool RemoveGuid(const struct FInventoryGuid& Guid);
	void PartsForBendWeapon(class ABendWeapon* Weapon, TArray<struct FInventoryStorageWeaponPart>* OutParts);
	void OnWeaponPartLoaded(const struct FInventoryGuid& PartGuid);
	float GetWeaponPartHealthFromItem(class UInventoryItem* WeaponPartItem);
	bool DetachPartFromWeapon(class ABendWeapon* Weapon, const struct FInventoryGuid& Guid);
	bool DetachHardPointFromWeapon(class ABendWeapon* Weapon, TEnumAsByte<EWeaponHardPoint> HardPoint);
	bool AttachPartToWeapon(class ABendWeapon* Weapon, const struct FInventoryGuid& Guid);
	bool AttachPartIDToWeapon(class ABendWeapon* Weapon, TEnumAsByte<EWeaponPartID> WeaponPartID);
};


// Class BendGame.InventoryTextureTagLibrary
// 0x0018 (0x0040 - 0x0028)
class UInventoryTextureTagLibrary : public UDataAsset
{
public:
	TEnumAsByte<EInventoryBaseType>                    InventoryType;                                            // 0x0028(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EInventoryItemTextureTag>              Type;                                                     // 0x0029(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x002A(0x0006) MISSED OFFSET
	TArray<struct FInventoryTextureTagPair>            Textures;                                                 // 0x0030(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.InventoryTextureTagLibrary");
		return ptr;
	}


	class UTexture2D* TextureFromTag(const struct FGameplayTag& Tag);
	bool TextureAssetFromTag(const struct FGameplayTag& Tag, TAssetPtr<class UTexture2D>* OutAsset);
	bool TextureAssetFromItem(class UInventoryItem* Item, TAssetPtr<class UTexture2D>* OutAsset);
	void ReleaseTexture(class UInventoryItem* Item, int RefCount);
	void ReleaseCachedTextures();
	class UTexture2D* GetItemTexture(class UInventoryItem* Item);
	void CacheTextures();
	void CacheTexture(class UInventoryItem* Item, int RefCount);
};


// Class BendGame.InventoryTextureTagLibraryMgr
// 0x00B0 (0x00D8 - 0x0028)
class UInventoryTextureTagLibraryMgr : public UDataAsset
{
public:
	TArray<struct FInventoryTextureTagLibrarySet>      TextureSets;                                              // 0x0028(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	unsigned char                                      UnknownData00[0xA0];                                      // 0x0038(0x00A0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.InventoryTextureTagLibraryMgr");
		return ptr;
	}


	void ReleaseCachedTextures(TEnumAsByte<EInventoryItemTextureTag> Type);
	void GetTextureLatent(class UObject* WorldContextObject, TEnumAsByte<EInventoryItemTextureTag> Type, class UInventoryItem* Item, const struct FLatentActionInfo& LatentInfo, class UTexture2D** ReturnTexture);
	class UTexture2D* GetItemTexture(TEnumAsByte<EInventoryItemTextureTag> Type, class UInventoryItem* Item);
	bool ContainsTexture(TEnumAsByte<EInventoryItemTextureTag> Type, class UInventoryItem* Item);
	void CacheTextures(TEnumAsByte<EInventoryItemTextureTag> Type);
};


// Class BendGame.JournalEntryList
// 0x00D0 (0x0318 - 0x0248)
class UJournalEntryList : public UUserWidget
{
public:
	class UScrollBox*                                  ContentBox;                                               // 0x0248(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UClass*                                      ListItemClass;                                            // 0x0250(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FJournalEntryData                           EmptyStateEntry;                                          // 0x0258(0x0070) (Edit, BlueprintVisible, BlueprintReadOnly)
	bool                                               bCollapseHeaders;                                         // 0x02C8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x02C9(0x0003) MISSED OFFSET
	int                                                PageSize;                                                 // 0x02CC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnSelectionChanged;                                       // 0x02D0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	int                                                SelectedIndex;                                            // 0x02E0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x02E4(0x0004) MISSED OFFSET
	class UJournalListItem*                            SelectedItem;                                             // 0x02E8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TArray<struct FJournalEntryData>                   Data;                                                     // 0x02F0(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<class UJournalListItem*>                    ListItems;                                                // 0x0300(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0310(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.JournalEntryList");
		return ptr;
	}


	void SetSelectedIndex(int Value);
	void SetEntryVisibility(bool bShowActive, bool bShowCompleted, bool bShowLocked);
	void SetData(TArray<struct FJournalEntryData> Value);
	bool ScrollUp();
	bool ScrollDown();
	bool PageUp();
	bool PageDown();
	void OnlyShowCompletedEntries();
	void OnlyShowActiveEntries();
	void OnData();
};


// Class BendGame.JournalListItem
// 0x0078 (0x02C0 - 0x0248)
class UJournalListItem : public UUserWidget
{
public:
	struct FJournalEntryData                           Data;                                                     // 0x0248(0x0070) (BlueprintVisible, BlueprintReadOnly)
	bool                                               bIsSelected;                                              // 0x02B8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x02B9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.JournalListItem");
		return ptr;
	}


	void SetSelected(bool Value);
	void SetData(const struct FJournalEntryData& Value);
	void OnSelected();
	void OnDeselected();
	void OnData();
};


// Class BendGame.LandscapeQueries
// 0x0000 (0x0028 - 0x0028)
class ULandscapeQueries : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.LandscapeQueries");
		return ptr;
	}


	bool STATIC_HitRoad(class UPrimitiveComponent* HitComponent, const struct FVector& Location, float Padding);
};


// Class BendGame.LightRigFlickerInterface
// 0x0000 (0x0028 - 0x0028)
class ULightRigFlickerInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.LightRigFlickerInterface");
		return ptr;
	}


	struct FBendLightFlicker GetFlickerStruct_NEW();
};


// Class BendGame.MapLocation
// 0x0060 (0x0088 - 0x0028)
class UMapLocation : public UObject
{
public:
	TWeakObjectPtr<class UMiniMapLocationComponent>    mLocationComponent;                                       // 0x0028(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, Transient, EditConst, InstancedReference, IsPlainOldData)
	class UMiniMapLocationComponent*                   Component;                                                // 0x0030(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, Transient, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x50];                                      // 0x0038(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.MapLocation");
		return ptr;
	}


	bool UseSimpleMapInfoDisplay();
	struct FVector Position();
	bool IsWaypointLocation();
	bool IsObjectiveRegion();
	bool IsNestZoneLocation();
	bool IsFastTravelLocation();
	bool IsBunkerLocation();
	struct FLinearColor IconTextureColor();
	class UTexture2D* IconTexture();
	class UMiniMapLocationComponent* GetMiniMapLocationComponent();
	class UTexture2D* GetLocationTexture();
	struct FString GetLocationName();
	struct FString GetLocationDescription();
	bool DisplayOnMiniMap();
	bool ContainsValidNavPath(bool IncludeVisibleCheck);
	void CacheLocationTexture(bool FreeCache);
};


// Class BendGame.MapWidgetComponent
// 0x0010 (0x0600 - 0x05F0)
class UMapWidgetComponent : public UBendMaterialBillboardComponent
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x05F0(0x0004) MISSED OFFSET
	int                                                SavedTranslucentSortPriority;                             // 0x05F4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	int                                                ZOrder;                                                   // 0x05F8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x05FC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.MapWidgetComponent");
		return ptr;
	}


	void SetOverrideTranslucentSortPriority(int OverrideValue, bool Enabled);
	bool RequiresRegionImage();
	void PostInitialize();
	void OnWaypointLocationRemoved();
	void OnRemoved();
	bool GetNotify();
	class UMiniMapLocationComponent* GetMiniMapLocationComponent();
	bool ExecuteMapSelectionInterface_OnSelected();
};


// Class BendGame.Map3D
// 0x03D8 (0x0720 - 0x0348)
class AMap3D : public AActor
{
public:
	struct FScriptMulticastDelegate                    OnCloseDelegate;                                          // 0x0348(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData00[0x78];                                      // 0x0358(0x0078) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnMapClose;                                               // 0x03D0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnMarkerHovered;                                          // 0x03E0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class UMaterialInterface*                          MapMaterial;                                              // 0x03F0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UMaterialInstanceDynamic*                    MapMID;                                                   // 0x03F8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	class UMaterialInterface*                          ObjectiveRegionMaterial;                                  // 0x0400(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UStaticMeshComponent*                        MapMeshRef;                                               // 0x0408(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	int                                                MinDepthIndex;                                            // 0x0410(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                MaxDepthIndex;                                            // 0x0414(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CurrentTileU;                                             // 0x0418(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CurrentTileV;                                             // 0x041C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                CurrentDepthIndex;                                        // 0x0420(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     CurrentMapLocation;                                       // 0x0424(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              LastX;                                                    // 0x0430(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              LastY;                                                    // 0x0434(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              LastMapScale;                                             // 0x0438(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DefaultZoom;                                              // 0x043C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ZoomLimitIn;                                              // 0x0440(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ZoomLimitOut;                                             // 0x0444(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MeshSize;                                                 // 0x0448(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MapZoom;                                                  // 0x044C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MoveScale;                                                // 0x0450(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ZoomScale;                                                // 0x0454(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DragScale;                                                // 0x0458(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FOV;                                                      // 0x045C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MapZPos;                                                  // 0x0460(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AxisThresholdPan;                                         // 0x0464(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AxisThresholdZoom;                                        // 0x0468(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     ScrollBoundsMin;                                          // 0x046C(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     ScrollBoundsMax;                                          // 0x0478(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0484(0x0004) MISSED OFFSET
	struct FMapTile3D                                  BlankTile;                                                // 0x0488(0x0048) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	TArray<struct FMapTile3D>                          MapTiles;                                                 // 0x04D0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FVector2D>                           MapPerimeterPoly;                                         // 0x04E0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      bDisableFog : 1;                                          // 0x04F0(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bDisableNestFastTravel : 1;                               // 0x04F0(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData02[0x3];                                       // 0x04F1(0x0003) MISSED OFFSET
	bool                                               ValidUpScroll;                                            // 0x04F4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               ValidRightScroll;                                         // 0x04F5(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               ValidZooming;                                             // 0x04F6(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x1];                                       // 0x04F7(0x0001) MISSED OFFSET
	class USoundCue*                                   ScrollingCue;                                             // 0x04F8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class USoundCue*                                   ZoomingCue;                                               // 0x0500(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class USoundCue*                                   WaypointPlacedCue;                                        // 0x0508(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class USoundCue*                                   WaypointRemovedCue;                                       // 0x0510(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UAudioComponent*                             ScrollingSound;                                           // 0x0518(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UAudioComponent*                             ZoomingSound;                                             // 0x0520(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class AMapWaypointMarker*                          MissionWaypointMarker;                                    // 0x0528(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class AMapWaypointMarker*                          FastTravelWaypointMarker;                                 // 0x0530(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class AMapWaypointMarker*                          UserWaypointMarker;                                       // 0x0538(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UMapWidgetComponent*                         LastSelectedWidget;                                       // 0x0540(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UMapWidgetComponent*                         CursorSelectedWidget;                                     // 0x0548(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	struct FMapMarkerWidgetDetails                     SelectedMarkerDetails;                                    // 0x0550(0x00D0) (BlueprintVisible, BlueprintReadOnly, Transient)
	unsigned char                                      UnknownData04[0x100];                                     // 0x0620(0x0100) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.Map3D");
		return ptr;
	}


	void WorldToMapLocation(const struct FVector& InWorldLocation, struct FVector* OutMapLocation);
	void WorldToMap(const struct FVector& InWorldLocation, struct FVector* OutMapLocation);
	void UpdateVisibility();
	void UpdatePlayerLocation();
	void UpdateFogOfWar();
	void UnloadTileTextures(int DepthIndex);
	bool SetWaypointMarker(const struct FVector& WorldLocation);
	void SetPanFromWorldLocation(const struct FVector& InWorldLocation, float InZoom);
	void SetMarkerDetails(class UMapWidgetComponent* Widget);
	void SetMapWidgetLocationFromWorld(class UMapWidgetComponent* Widget, const struct FVector& WorldPosition);
	void SetMapOpened(bool Opened);
	void ScreenToWorld(const struct FVector2D& InScreen, struct FVector* OutWorld);
	void OnWaypointPathUpdated(TEnumAsByte<EMapWaypointMarker3D> WaypointMarkerType);
	void OnWaypointMarkerPlaced(const struct FVector& PlayerLocation, const struct FVector& MarkerLocation);
	void OnTileTextureLoaded(int TileIndex);
	void OnMouseMoveAbs(const struct FVector2D& InScreenLocation);
	void OnMouseMove(const struct FVector& InWorldLocation);
	void OnMouseHoverAbs(const struct FVector2D& InScreenLocation);
	void OnMouseHover(const struct FVector& InWorldLocation);
	void OnMouseDragStart();
	void OnMouseDragEnd();
	void OnMarkerSelectionChange(const struct FMapMarkerWidgetDetails& Details);
	void OnLocationInputSelection(class UMapLocation* Location);
	void OnInputChanged();
	void NormalizedScreenToWorld(const struct FVector2D& InScreen, struct FVector* OutWorld);
	void MissionComplete(TEnumAsByte<EMissionIDs> MissionID);
	void MapToWorldLocation(const struct FVector& InMapLocation, struct FVector* OutWorldLocation);
	void LoadTileTextures(int DepthIndex);
	void LoadTileTextureAtIndex(int TileIndex);
	bool IsPointInPolygon2D(const struct FVector2D& Point, TArray<struct FVector2D> Verts);
	bool IsMapInputDisabled();
	void InputMoveUpKey(float AxisValue);
	void InputMoveUpGamepad(float AxisValue);
	void InputMoveRightKey(float AxisValue);
	void InputMoveRightGamepad(float AxisValue);
	void InputMoveLeftKey(float AxisValue);
	void InputMoveDownKey(float AxisValue);
	void InputAxisZoomGamepad(float AxisValue);
	void InputAxisMoveRight(float AxisValue);
	void InputAxisMoveForward(float AxisValue);
	void InputAxisMapZoomOutKey(float AxisValue);
	void InputAxisMapZoomInKey(float AxisValue);
	void InputAxisMapZoom(float InAxisValue);
	void InputAxisLookUp(float AxisValue);
	void InitializeLocations();
	TArray<struct FPathPoint> GetWaypointPathPoints(TEnumAsByte<EMapWaypointMarker3D> WaypointMarkerType);
	TArray<struct FPathPoint> GetWaypointPathLocations(TEnumAsByte<EMapWaypointMarker3D> WaypointMarkerType, bool Simplify, float Epsilon);
	struct FVector GetWaypointEndLocation(TEnumAsByte<EMapWaypointMarker3D> WaypointMarkerType);
	struct FVector GetUserWaypointEndLocation();
	void GetTextureAtDepthAndUV(int DepthIndex, float U, float V, float OffsetU, float OffsetV, bool bForceUseBlank, class UTexture2D** TileTexture, float* OutU, float* OutV);
	void GetScrollBounds(bool bMapSpace, struct FVector* MinBounds, struct FVector* MaxBounds);
	class UMaterialInterface* GetObjectiveRegionMaterial();
	void GetMarkerAtWorldLocation(const struct FVector& InWorldLocation, class UMapLocation** OutMapLocation, class UMapWidgetComponent** OutMapWidgetComponent, float* OutDistance);
	void GetMarkerAtScreenLocation(const struct FVector2D& InScreenLocation, class UMapLocation** OutMapLocation, class UMapWidgetComponent** OutMapWidgetComponent, float* OutDistance);
	struct FVector GetFastTravelWaypointEndLocation();
	struct FVector GetCursorWorldLocation();
	void GetClosestLocation2D(const struct FVector2D& CursorScreenLocaion, float ThreasholdDistance, class UMapLocation** Location, class UMapWidgetComponent** OutWidget, float* Distance);
	void GetClosestLocation(const struct FVector& CursorWorldLocaion, float ThresholdDistance, class UMapLocation** Location, class UMapWidgetComponent** Widget, float* Distance);
	bool DebugToggleTiles();
	bool DebugToggleFogOfWar();
	void DebugTeleportToLocation(const struct FVector& Location);
	class UMapWidgetComponent* CreateLocationWidget(class UMapLocation* Location, int ZOrder);
	void ClearUserWaypointMarker();
};


// Class BendGame.MapLocationActor
// 0x0008 (0x0350 - 0x0348)
class AMapLocationActor : public AActor
{
public:
	class UMiniMapLocationComponent*                   MiniMapLocationComponent;                                 // 0x0348(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.MapLocationActor");
		return ptr;
	}

};


// Class BendGame.MerchantActor
// 0x0010 (0x0360 - 0x0350)
class AMerchantActor : public AMapLocationActor
{
public:
	class UMerchantComponent*                          MerchantComponent;                                        // 0x0350(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class USceneComponent*                             SceneComp;                                                // 0x0358(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.MerchantActor");
		return ptr;
	}

};


// Class BendGame.BendBunkerActor
// 0x0010 (0x0480 - 0x0470)
class ABendBunkerActor : public AMapLocationFastTravelActor
{
public:
	class UBendBunkerData*                             BunkerData;                                               // 0x0470(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UMaterialInstanceDynamic*                    BunkerFogMID;                                             // 0x0478(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendBunkerActor");
		return ptr;
	}

};


// Class BendGame.BendEncampmentActor
// 0x0040 (0x04B0 - 0x0470)
class ABendEncampmentActor : public AMapLocationFastTravelActor
{
public:
	float                                              FastTravelTrustThreshold;                                 // 0x0470(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0474(0x0004) MISSED OFFSET
	class UBendEncampmentData*                         EncampmentData;                                           // 0x0478(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TArray<class AActor*>                              OverlapSphereActors;                                      // 0x0480(0x0010) (Edit, ZeroConstructor, DisableEditOnTemplate)
	TArray<struct FName>                               LevelsToUnload;                                           // 0x0490(0x0010) (Edit, ZeroConstructor, DisableEditOnTemplate)
	int                                                EncampmentSpawnLimit;                                     // 0x04A0(0x0004) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	unsigned char                                      UnknownData01[0xC];                                       // 0x04A4(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendEncampmentActor");
		return ptr;
	}


	void LeavingRange();
	void EnteredRange();
	void ActorLeavingVolume(class AActor* Other);
	void ActorEnteredVolume(class AActor* Other);
};


// Class BendGame.BendNeroCheckpointLoctationActor
// 0x0010 (0x0480 - 0x0470)
class ABendNeroCheckpointLoctationActor : public AMapLocationFastTravelActor
{
public:
	class UBendNeroCheckpointData*                     CheckpointData;                                           // 0x0470(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0478(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendNeroCheckpointLoctationActor");
		return ptr;
	}

};


// Class BendGame.MapLocationMgr
// 0x0138 (0x0480 - 0x0348)
class AMapLocationMgr : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0348(0x0008) MISSED OFFSET
	struct FMapWaypointMarkerMgr                       WaypointMarkerMgr;                                        // 0x0350(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData01[0xE8];                                      // 0x0368(0x00E8) MISSED OFFSET
	TArray<struct FMapLocationList>                    MapLocations;                                             // 0x0450(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst)
	TArray<class UBendPingLocationComponent*>          PingComponents;                                           // 0x0460(0x0010) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, EditConst)
	unsigned char                                      UnknownData02[0x10];                                      // 0x0470(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.MapLocationMgr");
		return ptr;
	}


	void GetPingLocations(TArray<class UBendPingLocationComponent*>* OutLocations);
	void GetMiniMapLocations(TArray<class UMapLocation*>* OutLocations);
	class AMapLocationMgr* STATIC_GetMapLocationMgr();
};


// Class BendGame.MapMenuCursorWidget
// 0x0020 (0x0268 - 0x0248)
class UMapMenuCursorWidget : public UUserWidget
{
public:
	struct FVector2D                                   CursorHalfDims;                                           // 0x0248(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FBox2D                                      CursorBox;                                                // 0x0250(0x0014) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0264(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.MapMenuCursorWidget");
		return ptr;
	}

};


// Class BendGame.MapMenuSelectionInterface
// 0x0000 (0x0028 - 0x0028)
class UMapMenuSelectionInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.MapMenuSelectionInterface");
		return ptr;
	}


	void IOnSelected();
};


// Class BendGame.Menu3D
// 0x00A8 (0x03F0 - 0x0348)
class AMenu3D : public AActor
{
public:
	struct FLinearColor                                BackgroundColor;                                          // 0x0348(0x0010) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              FlickAngle;                                               // 0x0358(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x035C(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnCloseDelegate;                                          // 0x0360(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData01[0x80];                                      // 0x0370(0x0080) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.Menu3D");
		return ptr;
	}


	void SetMenuOpened(bool Opened);
	void RequestClose();
	void OpenMenu();
	void OnMenuOpened();
	void OnMenuClosed();
	bool IsMenuActive();
	void InputFlickUp();
	void InputFlickRight();
	void InputFlickLeft();
	void InputFlickDown();
	void InputFlick(float GestureAngle);
	void EnableMenuInput(class APlayerController* PlayerController);
	void DisableMenuInput(class APlayerController* PlayerController);
	bool CanActivateMenu();
};


// Class BendGame.MenuInteract
// 0x0338 (0x0468 - 0x0130)
class UMenuInteract : public UContentWidget
{
public:
	class USlateWidgetStyleAsset*                      Style;                                                    // 0x0130(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData)
	struct FButtonStyle                                WidgetStyle;                                              // 0x0138(0x02A8) (Edit, BlueprintVisible)
	struct FLinearColor                                ColorAndOpacity;                                          // 0x03E0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                BackgroundColor;                                          // 0x03F0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EButtonClickMethod>                    ClickMethod;                                              // 0x0400(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EButtonTouchMethod>                    TouchMethod;                                              // 0x0401(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               IsFocusable;                                              // 0x0402(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x5];                                       // 0x0403(0x0005) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnClicked;                                                // 0x0408(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPressed;                                                // 0x0418(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnReleased;                                               // 0x0428(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnHovered;                                                // 0x0438(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnUnhovered;                                              // 0x0448(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0458(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.MenuInteract");
		return ptr;
	}


	void SetStyle(const struct FButtonStyle& InStyle);
	void SetColorAndOpacity(const struct FLinearColor& InColorAndOpacity);
	void SetBackgroundColor(const struct FLinearColor& InBackgroundColor);
	bool IsPressed();
};


// Class BendGame.MerchantInventory
// 0x0270 (0x0298 - 0x0028)
class UMerchantInventory : public UDataAsset
{
public:
	TArray<struct FMerchantStockItem>                  Items;                                                    // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FMerchantStockWeapon>                Weapons;                                                  // 0x0038(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FMerchantStockAmmo>                  Ammo;                                                     // 0x0048(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FMerchantStockItem>                  Parts;                                                    // 0x0058(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FMechanicMerchantParts                      BikeParts;                                                // 0x0068(0x0230) (Edit, BlueprintVisible)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.MerchantInventory");
		return ptr;
	}


	void ResetAllSaveGameCounts();
	void GetItems(struct FMerchantItems* OutItems);
};


// Class BendGame.MerchantComponent
// 0x0058 (0x0128 - 0x00D0)
class UMerchantComponent : public UActorComponent
{
public:
	struct FName                                       MerchantID;                                               // 0x00D0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FText                                       MerchantName;                                             // 0x00D8(0x0018) (Edit, BlueprintVisible)
	TEnumAsByte<EMerchantType>                         MerchantType;                                             // 0x00F0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EAIFactionType>                        Faction;                                                  // 0x00F1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x00F2(0x0006) MISSED OFFSET
	TArray<float>                                      ItemSellCostFactionModifiers;                             // 0x00F8(0x0010) (Edit, BlueprintVisible, EditFixedSize, ZeroConstructor)
	TArray<float>                                      ItemBuyCostFactionModifiers;                              // 0x0108(0x0010) (Edit, BlueprintVisible, EditFixedSize, ZeroConstructor)
	class UMerchantInventory*                          MerchantInventoryData;                                    // 0x0118(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0120(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.MerchantComponent");
		return ptr;
	}


	void CacheInventoryAssets(bool CacheItems);
};


// Class BendGame.BendAIMiniMapLocationComponent
// 0x0008 (0x0210 - 0x0208)
class UBendAIMiniMapLocationComponent : public UMiniMapLocationComponent
{
public:
	class ABendAIController*                           AIController;                                             // 0x0208(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendAIMiniMapLocationComponent");
		return ptr;
	}


	bool ShouldAlwaysShowArrow();
	bool IsTargetingPlayer();
	bool IsSearching();
	bool IsPlayerEnemyAndNotPassive();
	bool IsPlayerEnemy();
	bool IsPassive();
	bool IsCrowdCluster();
	struct FRotator GetViewRotation();
	class APawn* GetPawn();
	float GetAwarenessValue();
	TEnumAsByte<EAIAwareState> GetAwareness();
};


// Class BendGame.BendCrowdMiniMapLocationComponent
// 0x0020 (0x0230 - 0x0210)
class UBendCrowdMiniMapLocationComponent : public UBendAIMiniMapLocationComponent
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0210(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendCrowdMiniMapLocationComponent");
		return ptr;
	}

};


// Class BendGame.MotoCombatData
// 0x0040 (0x0068 - 0x0028)
class UMotoCombatData : public UDataAsset
{
public:
	struct FMotoCombatInfo                             MotorcycleCobatSettings;                                  // 0x0028(0x0040) (Edit, BlueprintVisible, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.MotoCombatData");
		return ptr;
	}

};


// Class BendGame.MotoCombatVOData
// 0x0018 (0x0040 - 0x0028)
class UMotoCombatVOData : public UDataAsset
{
public:
	struct FMotoCombatVOInfo                           MotorcycleCombatVO;                                       // 0x0028(0x0018) (Edit, BlueprintVisible, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.MotoCombatVOData");
		return ptr;
	}

};


// Class BendGame.MotoRamFalloffData
// 0x0010 (0x0038 - 0x0028)
class UMotoRamFalloffData : public UDataAsset
{
public:
	struct FMotoRamFalloffInfo                         MotorcycleFalloffSettings;                                // 0x0028(0x0010) (Edit, BlueprintVisible, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.MotoRamFalloffData");
		return ptr;
	}

};


// Class BendGame.MudActor
// 0x00D8 (0x0420 - 0x0348)
class AMudActor : public AActor
{
public:
	class ALandscape*                                  Landscape;                                                // 0x0348(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  DynamicHeightfield;                                       // 0x0350(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UTexture2D*                                  OriginalHeightfield;                                      // 0x0358(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FMudParameters                              MudParameters;                                            // 0x0360(0x0014) (Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0374(0x0004) MISSED OFFSET
	TArray<class AActor*>                              Carvers;                                                  // 0x0378(0x0010) (Edit, ZeroConstructor)
	struct FCarverParameters                           CarverParameters;                                         // 0x0388(0x000C) (Edit)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0394(0x0004) MISSED OFFSET
	class AActor*                                      Water;                                                    // 0x0398(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FWaterParameters                            WaterParameters;                                          // 0x03A0(0x0010) (Edit)
	unsigned char                                      UnknownData02[0x70];                                      // 0x03B0(0x0070) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.MudActor");
		return ptr;
	}

};


// Class BendGame.NewGamePlus
// 0x0000 (0x0028 - 0x0028)
class UNewGamePlus : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.NewGamePlus");
		return ptr;
	}


	void STATIC_UnlockNGPWeapons(TArray<struct FGameplayTag> WeaponTags, TArray<struct FGameplayTag> WeaponPartsTags, bool AddTaser);
	void STATIC_UnlockNGPSkills(TArray<struct FGameplayTag> SkillTags, int UnspentPoints);
	void STATIC_UnlockNGPBikeSkins(TArray<struct FGameplayTag> BikeSkinTags);
	void STATIC_UnlockNGPBikeParts(TArray<struct FGameplayTag> BikePartTags);
	void STATIC_SetNGPTrophies(TArray<struct FTrophyCarryOverData> TrophyData);
	void STATIC_SetNGPStats(int Health, int Focus, int Stamina, int PlayerXP);
	void STATIC_SetNGPRecipes(TArray<struct FGameplayTag> RecipeTags);
	void STATIC_SetNGPPlayerBikeSkin(TArray<struct FGameplayTag> BikeSkinTagsInOrder);
	void STATIC_SetNGPEncampmentStats(TArray<struct FEncampmentCarryOverData> PreviousEncampmentsData);
	void STATIC_SetNGPCollectibles(TArray<TEnumAsByte<EInventoryCollectibleID>> DiscoveredCollectibles);
	void STATIC_SetNGPBikeCustomization(TArray<struct FGameplayTag> BikePartTags);
	TArray<struct FGameplayTag> STATIC_GetEquippedBikeParts();
};


// Class BendGame.OptionList
// 0x0040 (0x0288 - 0x0248)
class UOptionList : public UUserWidget
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0248(0x0020) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnOptionSelected;                                         // 0x0268(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnMenuChangeAllowed;                                      // 0x0278(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.OptionList");
		return ptr;
	}


	void SynchronizeOptionValues();
	void StepSelectedOptionForward();
	void StepSelectedOptionBackward();
	void SetSelectedOption(class UOptionValueControl* InWidget);
	void SetSelectedIndex(int InIndex);
	void SelectPreviousOption();
	void SelectNextOption();
	void ResetToDefaults();
	TEnumAsByte<EOptionListReply> RequestMenuChange();
	int Num();
	int GetSelectedIndex();
	void ClickSelectedOption();
	void ClearSelectedOption();
};


// Class BendGame.OptionValueControl
// 0x00E8 (0x0330 - 0x0248)
class UOptionValueControl : public UUserWidget
{
public:
	struct FScriptMulticastDelegate                    OnValueChanged;                                           // 0x0248(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnItemSelected;                                           // 0x0258(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnItemClicked;                                            // 0x0268(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FText                                       DisplayName;                                              // 0x0278(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate)
	struct FText                                       Description;                                              // 0x0290(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate)
	struct FText                                       LockedReason;                                             // 0x02A8(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate)
	TEnumAsByte<EOptionWrapStyle>                      WrapStyle;                                                // 0x02C0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x02C1(0x0007) MISSED OFFSET
	TArray<struct FText>                               DisplayValues;                                            // 0x02C8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate)
	TArray<struct FText>                               DisplayValueDescriptions;                                 // 0x02D8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate)
	float                                              DisplayMultiplier;                                        // 0x02E8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	float                                              MinimumValue;                                             // 0x02EC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	float                                              MaximumValue;                                             // 0x02F0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	float                                              StepSize;                                                 // 0x02F4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x02F8(0x0004) MISSED OFFSET
	float                                              Range;                                                    // 0x02FC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	int                                                Steps;                                                    // 0x0300(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData02[0x2C];                                      // 0x0304(0x002C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.OptionValueControl");
		return ptr;
	}


	bool StepForward();
	bool StepBackward();
	void SetValueRange(float InMinimumValue, float InMaximumValue, float InStepSize);
	void SetStepValue(int InValue);
	void SetSelected(bool bSelected);
	void SetLocked(bool bLocked, const struct FText& Reason);
	void SetIntValue(int InValue);
	void SetGradientValue(float InValue);
	void SetFloatValue(float InValue);
	void SetDisplayValues(TArray<struct FText> InDisplayValues);
	void SetDisplayValueDescriptions(TArray<struct FText> InDisplayValueDescriptions);
	void SetBoolValue(bool InValue);
	void OnUnlocked();
	void OnSelected();
	void OnLocked();
	void OnDeselected();
	void OnClicked();
	struct FText GetTextValue();
	int GetStepValue();
	int GetIntValue();
	float GetGradientValue();
	float GetFloatValue();
	struct FText GetDisplayValueDescription();
	struct FText GetDisplayValue();
	bool GetBoolValue();
	void Click();
	bool CanStepForward();
	bool CanStepBackward();
};


// Class BendGame.PickupCCD
// 0x0000 (0x00D0 - 0x00D0)
class UPickupCCD : public UActorComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.PickupCCD");
		return ptr;
	}

};


// Class BendGame.PlayerBlueprintLibrary
// 0x0000 (0x0028 - 0x0028)
class UPlayerBlueprintLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.PlayerBlueprintLibrary");
		return ptr;
	}


	void STATIC_SetSpawnPlayerBike(class UObject* WorldContextObject, bool spawnFlag);
	bool STATIC_GetSpawnPlayerBikeFlag(class UObject* WorldContextObject);
};


// Class BendGame.PlayerDataManager
// 0x0018 (0x0040 - 0x0028)
class UPlayerDataManager : public UObject
{
public:
	class UBendSavePlayerProfile*                      PlayerProfile;                                            // 0x0028(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UBendGameplayDatabase*                       GameplayDatabase;                                         // 0x0030(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0038(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.PlayerDataManager");
		return ptr;
	}


	void STATIC_ResetGameplayDatabase();
};


// Class BendGame.PlayerInventoryComponent
// 0x0170 (0x0240 - 0x00D0)
class UPlayerInventoryComponent : public UActorComponent
{
public:
	TArray<struct FName>                               InspectedWeapons;                                         // 0x00D0(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame)
	struct FScriptMulticastDelegate                    OnPlayerDiscoverRecipeDelegate;                           // 0x00E0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPlayerRecipeCraftableDelegate;                          // 0x00F0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPlayerDiscoverCollectibleDelegate;                      // 0x0100(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnInventoryModifiedDelegate;                              // 0x0110(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class UAudioComponent*                             WeaponWheelLoadAudioComp;                                 // 0x0120(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	bool                                               OverrideNextMeleeWeaponForce;                             // 0x0128(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0129(0x0007) MISSED OFFSET
	TArray<class UInventoryStorage*>                   Storage;                                                  // 0x0130(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient)
	TArray<class UClass*>                              StorageClass;                                             // 0x0140(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FInventoryTagStoragePair>            TagStorageOverrides;                                      // 0x0150(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	struct FInventoryItemCache                         CachedItems;                                              // 0x0160(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst, SaveGame)
	TArray<int>                                        DiscoveredItemKeys;                                       // 0x0188(0x0010) (ZeroConstructor, SaveGame)
	unsigned char                                      UnknownData01[0x50];                                      // 0x0198(0x0050) MISSED OFFSET
	class UInventoryCollectibleStorage*                InternalCollectibleStorage;                               // 0x01E8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x50];                                      // 0x01F0(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.PlayerInventoryComponent");
		return ptr;
	}


	class UInventoryWeaponPartStorage* WeaponPartStorage();
	class ABendWeapon* WeaponFromSlot(TEnumAsByte<EInventoryEquipmentSlot> SlotType);
	void UnlockRecipeByTag(const struct FGameplayTag& RecipeTag);
	void UnlockRecipe(TEnumAsByte<EInventoryRecipeID> RecipeID);
	void UnlockCollectible(TEnumAsByte<EInventoryCollectibleID> CollectibleID);
	bool StoreAndRemoveAllInventory(bool RemoveRock, bool RemoveKnife, bool RemoveTaser);
	class UInventoryStorage* StorageForItem(class UInventoryItem* Item);
	void StopPlayWeaponWheelLoadSound();
	void StartPlayWeaponWheelLoadSound(class USoundCue* SoundToBePlayed);
	void SetTutorialUnlocked(const struct FName& TutorialName);
	void SetMissionItemTag(const struct FGameplayTag& ItemTag, bool IsMissionItem);
	void SetMissionItem(class UInventoryItem* Item, bool IsMissionItem);
	void SetItemDiscovered(const struct FGameplayTag& ItemTag);
	void SetAmmoMaxCount(TEnumAsByte<EInventoryAmmoID> AmmoID, int MaxCount);
	void SetAmmoCount(TEnumAsByte<EInventoryAmmoID> AmmoID, int ItemCount);
	void RestorePlayerWeapons();
	void RemoveWeapons();
	void RemoveWeaponByType(TEnumAsByte<EWeaponType> Type);
	int RemoveScrapCount(int Count);
	int RemoveItemByTag(const struct FInventoryItemTag& ItemTag, int ItemCount);
	int RemoveItem(class UInventoryItem* Item, int ItemCount);
	bool RegisterMissionItemPostPickup(class UInventoryItem* Item);
	class UInventoryRecipeStorage* RecipeStorage();
	class ABendWeapon* PlayerWeaponFromGuid(const struct FInventoryGuid& InGuid);
	void OnRecipeDiscovered(class UInventoryItemRecipe* Recipe);
	void OnRecipeCraftable(class UInventoryItemRecipe* Recipe);
	void OnInventoryChange(const struct FInventoryOperation& StorageOp);
	void OnCollectibleDiscovered(class UInventoryItemCollectible* Collectible);
	class UInventoryLootStorage* LootStorage();
	int ItemTagQuery(const struct FGameplayTagQuery& Query, TArray<struct FInventoryStorageItemBase>* OutItems);
	bool IsTutorialUnlocked(const struct FName& TutorialName);
	bool IsMissionItemTag(const struct FGameplayTag& ItemTag);
	bool IsMissionItem(class UInventoryItem* Item);
	void InspectWeapon(const struct FGameplayTag& WeaponTag);
	bool HasUnlockedCollectible(TEnumAsByte<EInventoryCollectibleID> CollectibleID);
	bool HasDiscoveredItem(const struct FGameplayTag& ItemTag);
	void GuidQuery(const struct FGameplayTagQuery& Query, TArray<struct FInventoryGuidSlot>* OutGuids);
	bool GiveBackStoredInventoryAndKeepCurrentEquipment();
	bool GiveBackStoredInventory();
	class UInventoryStorage* GetStorage(TEnumAsByte<EInventoryItemStorage> Type);
	int GetScrapCount();
	TArray<struct FGameplayTag> GetNewWeapons();
	int GetItemCountForTagArray(TArray<struct FInventoryItemTag> ItemTags);
	int GetItemCountByTag(const struct FInventoryItemTag& ItemTag);
	int GetItemCount(class UInventoryItem* Item);
	int GetAmmoMaxCount(TEnumAsByte<EInventoryAmmoID> AmmoID);
	int GetAmmoCount(TEnumAsByte<EInventoryAmmoID> AmmoID);
	void EmptyInventory();
	bool CraftRecipe(const struct FGameplayTag& RecipeTag);
	class UInventoryCollectibleStorage* CollectibleStorage();
	bool CanStoreItem(class UInventoryItem* Item);
	bool CanCraftRecipe(const struct FGameplayTag& RecipeTag);
	class UInventoryBikeStorage* BikeStorage();
	class UInventoryBikePartStorage* BikePartStorage();
	class UInventoryAmmoStorage* AmmoStorage();
	int AdjustScrapCount(int Count);
	int AdjustAmmo(TEnumAsByte<EInventoryAmmoID> AmmoID, int ItemCount);
	int AddWeapon(TEnumAsByte<EInventoryWeaponID> WeaponID, int ItemCount, bool AfterAsyncLoad_CallAddWeapon);
	TEnumAsByte<EInventoryStorageQueryResult> AddItemQuery(class UInventoryItem* Item, int ItemCount, int* OutCountAdded);
	int AddItemByTag(const struct FInventoryItemTag& ItemTag, int ItemCount);
	int AddItem(class UInventoryItem* Item, int ItemCount);
};


// Class BendGame.PreviewWheel
// 0x0068 (0x02B0 - 0x0248)
class UPreviewWheel : public UUserWidget
{
public:
	int                                                SlotIndex;                                                // 0x0248(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x024C(0x0004) MISSED OFFSET
	struct FText                                       WeaponName;                                               // 0x0250(0x0018) (BlueprintVisible, BlueprintReadOnly)
	TAssetPtr<class UTexture2D>                        WeaponIcon;                                               // 0x0268(0x0020) (BlueprintVisible, BlueprintReadOnly)
	int                                                Ammo;                                                     // 0x0288(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                Capacity;                                                 // 0x028C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TArray<TAssetPtr<class UTexture2D>>                SlotIcons;                                                // 0x0290(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<class UInventoryWeaponItem*>                Slots;                                                    // 0x02A0(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.PreviewWheel");
		return ptr;
	}


	void SelectSlot(int InSlot);
	void OnShow();
	void OnHide();
	void Hide();
};


// Class BendGame.RadialPanel
// 0x0020 (0x0150 - 0x0130)
class URadialPanel : public UPanelWidget
{
public:
	float                                              AngleSize;                                                // 0x0130(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              AngleOffset;                                              // 0x0134(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              Radius;                                                   // 0x0138(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x14];                                      // 0x013C(0x0014) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.RadialPanel");
		return ptr;
	}


	void SetRadius(float InRadius);
	void SetAngleSize(float InAngleSize);
	void SetAngleOffset(float InAngleOffset);
	class URadialPanelSlot* AddChildToRadialPanel(class UWidget* Content);
};


// Class BendGame.RadialPanelSlot
// 0x0018 (0x0050 - 0x0038)
class URadialPanelSlot : public UPanelSlot
{
public:
	struct FSlateChildSize                             Size;                                                     // 0x0038(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly)
	TEnumAsByte<EHorizontalAlignment>                  RadialAlignment;                                          // 0x0040(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0041(0x0003) MISSED OFFSET
	float                                              RadialOffset;                                             // 0x0044(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0048(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.RadialPanelSlot");
		return ptr;
	}


	void SetSize(const struct FSlateChildSize& InSize);
	void SetRadialOffset(float InRadialOffset);
	void SetRadialAlignment(TEnumAsByte<EHorizontalAlignment> InRadialAlignment);
};


// Class BendGame.RunPOIBlueprintProxy
// 0x0078 (0x00A0 - 0x0028)
class URunPOIBlueprintProxy : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnUserLeavesPOI;                                          // 0x0030(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnUserStopped;                                            // 0x0040(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData01[0x50];                                      // 0x0050(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.RunPOIBlueprintProxy");
		return ptr;
	}


	void OnUserStoppedInternal();
	void OnUserLeavesPOIInternal();
};


// Class BendGame.StopUserSequenceBlueprintProxy
// 0x0028 (0x0050 - 0x0028)
class UStopUserSequenceBlueprintProxy : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnUserStopped;                                            // 0x0030(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0040(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.StopUserSequenceBlueprintProxy");
		return ptr;
	}


	void OnUserStoppedInternal();
};


// Class BendGame.ScriptedEncounterLibrary
// 0x0000 (0x0028 - 0x0028)
class UScriptedEncounterLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.ScriptedEncounterLibrary");
		return ptr;
	}


	class UStopUserSequenceBlueprintProxy* STATIC_CreateStopUserSequenceProxy(class UBendScriptedEncounterUserController* ControllerIn);
	class UStartConversationBlueprintProxy* STATIC_CreateStartConversationProxy(class AActor* Requester, class UClass* ConversationDataClass);
	class URunPOIBlueprintProxy* STATIC_CreateRunPOIProxy(class UBendScriptedEncounterUserController* ControllerIn, class ABendPOI* BendPOI);
};


// Class BendGame.SecurityCamera_BP
// 0x0020 (0x0368 - 0x0348)
class ASecurityCamera_BP : public AActor
{
public:
	class UPrimitiveComponent*                         SearchLightMesh_CODE;                                     // 0x0348(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	bool                                               Enabled;                                                  // 0x0350(0x0001) (Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0351(0x0003) MISSED OFFSET
	float                                              AmountCameraRotatesFromCenterPosition;                    // 0x0354(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               HasBeenShotDown;                                          // 0x0358(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0359(0x0003) MISSED OFFSET
	float                                              NextRotation;                                             // 0x035C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TimeBetweenRotations;                                     // 0x0360(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FTimerHandle                                TimerHandle_ResetRotation;                                // 0x0364(0x0004) (Edit, BlueprintVisible, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.SecurityCamera_BP");
		return ptr;
	}


	void ResetTimer();
	void DisableCamera();
};


// Class BendGame.SlateInputInteractComponent
// 0x0080 (0x0150 - 0x00D0)
class USlateInputInteractComponent : public UActorComponent
{
public:
	struct FActorInteractDetails                       InteractDetails;                                          // 0x00D0(0x0070) (Edit, BlueprintVisible)
	class USlateInputInteract*                         InputInteract;                                            // 0x0140(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	class UBendWidgetComponent*                        InteractWidget3D;                                         // 0x0148(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.SlateInputInteractComponent");
		return ptr;
	}


	void SetInteractWidget3D(class UBendWidgetComponent* Widget3D);
	void SetInteractProgress(float Progress);
	void SetInteractDetails(const struct FActorInteractDetails& Details);
	void ResetInteractProgress();
	void ReleaseInteract();
	void OnInteractEnd(TEnumAsByte<EInputInteractState> InteractState);
	float InteractProgress();
	bool InteractInProgress();
	class UBendWidgetComponent* GetInteractWidget3D();
	class UInputInteractWidget* GetInteractWidget();
	void DisplayInteract();
	void BeginInteract();
};


// Class BendGame.StartConversationBlueprintProxy
// 0x0078 (0x00A0 - 0x0028)
class UStartConversationBlueprintProxy : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    TerminateDelegate;                                        // 0x0030(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class UBendDynamicConversation*                    DynamicConversation;                                      // 0x0040(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x58];                                      // 0x0048(0x0058) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.StartConversationBlueprintProxy");
		return ptr;
	}


	void OnDynamicConversationTerminated(class UBendDynamicConversation* DynamicConversation);
};


// Class BendGame.StaticMeshActorSMP
// 0x0000 (0x0358 - 0x0358)
class AStaticMeshActorSMP : public AStaticMeshActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.StaticMeshActorSMP");
		return ptr;
	}


	void SetParticleSystemTemplate_SMP(class UParticleSystemComponent* ParticleSystemComponent, class UParticleSystem* NewTemplate);
	void SetMobility_SMP(class USceneComponent* SceneComponent, TEnumAsByte<EComponentMobility> NewMobility);
};


// Class BendGame.BendStunStatusEffect
// 0x0000 (0x0068 - 0x0068)
class UBendStunStatusEffect : public UStatusEffect
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.BendStunStatusEffect");
		return ptr;
	}

};


// Class BendGame.StealthMeterWedge
// 0x0098 (0x02E0 - 0x0248)
class UStealthMeterWedge : public UUserWidget
{
public:
	class UMaterialInstanceDynamic*                    DMI;                                                      // 0x0248(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               HasNpc;                                                   // 0x0250(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0251(0x0007) MISSED OFFSET
	struct FName                                       ColorName;                                                // 0x0258(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IsTweeningColor;                                          // 0x0260(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0261(0x0003) MISSED OFFSET
	float                                              TweenColorProgress;                                       // 0x0264(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TweenColorDuration;                                       // 0x0268(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FLinearColor                                TweenColorFrom;                                           // 0x026C(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FLinearColor                                TweenColorTo;                                             // 0x027C(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FLinearColor                                LastTargetColor;                                          // 0x028C(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x029C(0x0004) MISSED OFFSET
	struct FName                                       AngleName;                                                // 0x02A0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IsTweeningRotation;                                       // 0x02A8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x02A9(0x0003) MISSED OFFSET
	float                                              TweenRotationProgress;                                    // 0x02AC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TweenRotationDuration;                                    // 0x02B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TweenRotationFrom;                                        // 0x02B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TweenRotationTo;                                          // 0x02B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x02BC(0x0004) MISSED OFFSET
	struct FName                                       HatchName;                                                // 0x02C0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IsTweeningHatch;                                          // 0x02C8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData05[0x3];                                       // 0x02C9(0x0003) MISSED OFFSET
	float                                              TweenHatchProgress;                                       // 0x02CC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TweenHatchDuration;                                       // 0x02D0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TweenHatchFrom;                                           // 0x02D4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TweenHatchTo;                                             // 0x02D8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              Awareness;                                                // 0x02DC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.StealthMeterWedge");
		return ptr;
	}


	void UpdateAwareness(float NewAwareness);
	void SetColor(const struct FLinearColor& Color, float Durastion);
	void ResetAwareness();
};


// Class BendGame.StealthMeterNavWidget
// 0x0008 (0x0250 - 0x0248)
class UStealthMeterNavWidget : public UUserWidget
{
public:
	bool                                               bIsOnBike;                                                // 0x0248(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	bool                                               bIsInEncampment;                                          // 0x0249(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x024A(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.StealthMeterNavWidget");
		return ptr;
	}

};


// Class BendGame.StealthMeterEntry
// 0x0118 (0x0360 - 0x0248)
class UStealthMeterEntry : public UUserWidget
{
public:
	int                                                MaxIconSize;                                              // 0x0248(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                FriendlyNPCIconSize;                                      // 0x024C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                EnemyNPCIconSize;                                         // 0x0250(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PerimeterMax;                                             // 0x0254(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PerimeterHideAll;                                         // 0x0258(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IsOnBike;                                                 // 0x025C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IsInEncampment;                                           // 0x025D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IsBuddy;                                                  // 0x025E(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IsFriendly;                                               // 0x025F(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IsHarmlessAnimal;                                         // 0x0260(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0261(0x0007) MISSED OFFSET
	class UMapLocation*                                MapLocationRef;                                           // 0x0268(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UBendAIMiniMapLocationComponent*             NPCRef;                                                   // 0x0270(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UImage*                                      Marker_CODE;                                              // 0x0278(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UImage*                                      View_CODE;                                                // 0x0280(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UImage*                                      Arrow_CODE;                                               // 0x0288(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UWidget*                                     Wrapper_CODE;                                             // 0x0290(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UMaterialInstance*                           NPCMarkerMaterial;                                        // 0x0298(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x02A0(0x0008) MISSED OFFSET
	class UTexture2D*                                  NPCArrowTexture;                                          // 0x02A8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  MapLocArrowTexture;                                       // 0x02B0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  NPCAwareTexture;                                          // 0x02B8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  NPCAwareAboveTexture;                                     // 0x02C0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  NPCAwareBelowTexture;                                     // 0x02C8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  NPCSemiAwareTexture;                                      // 0x02D0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  NPCSemiAwareAboveTexture;                                 // 0x02D8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  NPCSemiAwareBelowTexture;                                 // 0x02E0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  NPCUnawareTexture;                                        // 0x02E8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  NPCUnawareAboveTexture;                                   // 0x02F0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  NPCUnawareBelowTexture;                                   // 0x02F8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  NPCZeroAwareTexture;                                      // 0x0300(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  NPCZeroAwareAboveTexture;                                 // 0x0308(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  NPCZeroAwareBelowTexture;                                 // 0x0310(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  NPCFriendlyTexture;                                       // 0x0318(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  DefaultIconTexture;                                       // 0x0320(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                FriendlyColor;                                            // 0x0328(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FLinearColor                                EnemyColor;                                               // 0x0338(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0348(0x0008) MISSED OFFSET
	float                                              PerimeterMaxPixels;                                       // 0x0350(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ScaleOnBike;                                              // 0x0354(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ScaleOnFoot;                                              // 0x0358(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ScaleInEncampment;                                        // 0x035C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.StealthMeterEntry");
		return ptr;
	}


	bool STATIC_StealthMeterUsePlayerRotation();
};


// Class BendGame.StealthMeterEntries
// 0x0180 (0x03C8 - 0x0248)
class UStealthMeterEntries : public UUserWidget
{
public:
	bool                                               IsOnBike;                                                 // 0x0248(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IsInEncampment;                                           // 0x0249(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x024A(0x0006) MISSED OFFSET
	class UCanvasPanel*                                Container_CODE;                                           // 0x0250(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TMap<class UMapLocation*, class UStealthMeterEntry*> EntryMap;                                                 // 0x0258(0x0050) (ZeroConstructor)
	unsigned char                                      UnknownData01[0xA0];                                      // 0x02A8(0x00A0) MISSED OFFSET
	TArray<class UBendPingLocationComponent*>          PingLocsPrevFrame;                                        // 0x0348(0x0010) (Edit, BlueprintVisible, ExportObject, ZeroConstructor)
	TArray<class UBendPingLocationComponent*>          PingLocsCurFrame;                                         // 0x0358(0x0010) (Edit, BlueprintVisible, ExportObject, ZeroConstructor)
	TArray<class UStealthMeterEntry*>                  CachedStealthMeterWidgets;                                // 0x0368(0x0010) (ZeroConstructor)
	TArray<class UBendPingWidget*>                     PingWidgets;                                              // 0x0378(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	class UClass*                                      StealthMeterBPClass;                                      // 0x0388(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UClass*                                      PingWidgetBPClass;                                        // 0x0390(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x18];                                      // 0x0398(0x0018) MISSED OFFSET
	uint32_t                                           PingPoolDefaultSize;                                      // 0x03B0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x03B4(0x0004) MISSED OFFSET
	TArray<class UBendPingWidget*>                     AvailablePings;                                           // 0x03B8(0x0010) (ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.StealthMeterEntries");
		return ptr;
	}

};


// Class BendGame.StealthMeter
// 0x0110 (0x0358 - 0x0248)
class UStealthMeter : public UUserWidget
{
public:
	class UStealthMeterWedge*                          Center_CODE;                                              // 0x0248(0x0008) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	class UStealthMeterWedge*                          Wedge0_CODE;                                              // 0x0250(0x0008) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	class UStealthMeterWedge*                          Wedge00_CODE;                                             // 0x0258(0x0008) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	class UStealthMeterWedge*                          Wedge1_CODE;                                              // 0x0260(0x0008) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	class UStealthMeterWedge*                          Wedge11_CODE;                                             // 0x0268(0x0008) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	class UStealthMeterWedge*                          Wedge2_CODE;                                              // 0x0270(0x0008) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	class UStealthMeterWedge*                          Wedge22_CODE;                                             // 0x0278(0x0008) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	class UStealthMeterWedge*                          Wedge3_CODE;                                              // 0x0280(0x0008) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	class UStealthMeterWedge*                          Wedge33_CODE;                                             // 0x0288(0x0008) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	class UStealthMeterWedge*                          Wedge4_CODE;                                              // 0x0290(0x0008) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	class UStealthMeterWedge*                          Wedge44_CODE;                                             // 0x0298(0x0008) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	class UStealthMeterWedge*                          Wedge5_CODE;                                              // 0x02A0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	class UStealthMeterWedge*                          Wedge55_CODE;                                             // 0x02A8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	class UImage*                                      North_CODE;                                               // 0x02B0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	class UStealthMeterNavWidget*                      StealthMeterNav_CODE;                                     // 0x02B8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	class UStealthMeterEntries*                        StealthMeterEntries_CODE;                                 // 0x02C0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	class ABendPlayerController*                       PlayerController_CODE;                                    // 0x02C8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	class UImage*                                      MapWidget;                                                // 0x02D0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData)
	class UImage*                                      PlayerIconWidget;                                         // 0x02D8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData)
	class UImage*                                      SecondPlayerIconWidget;                                   // 0x02E0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData)
	class UMaterialInstanceDynamic*                    DMI;                                                      // 0x02E8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData)
	class UMaterialInstanceDynamic*                    DMIFocus;                                                 // 0x02F0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData)
	class UMaterialInstanceDynamic*                    DMIBike;                                                  // 0x02F8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       MaterialRegionAngleParam;                                 // 0x0300(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ColorAnimDuration;                                        // 0x0308(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FLinearColor                                SectorColor;                                              // 0x030C(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FLinearColor                                SectorEmptyColor;                                         // 0x031C(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PulseSpeed;                                               // 0x032C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PulseIntensity;                                           // 0x0330(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PulseHold;                                                // 0x0334(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0338(0x0010) MISSED OFFSET
	float                                              AwarenessLevel;                                           // 0x0348(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData)
	bool                                               IsFocused;                                                // 0x034C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	bool                                               IsStealthed;                                              // 0x034D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	bool                                               IsOnBike;                                                 // 0x034E(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	bool                                               IsInEncampment;                                           // 0x034F(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	bool                                               WasInEncampment_CODE;                                     // 0x0350(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	bool                                               IsPulsingNoise;                                           // 0x0351(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	bool                                               FirstPulse;                                               // 0x0352(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData)
	bool                                               bDisplaySectorState;                                      // 0x0353(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0354(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.StealthMeter");
		return ptr;
	}


	void UpdateSectorsFocus();
	void UpdateSectors();
	void SyncRotation(const struct FRotator& PlayerRotation, const struct FRotator& CameraRotation, bool UsePlayerRotation);
	bool SyncAwareness(float MaxAware);
	bool SetFocused(bool Focused);
	float GetMaxAwareness();
	bool CallBecameFound();
};


// Class BendGame.StreamedLevelActor
// 0x0000 (0x0348 - 0x0348)
class AStreamedLevelActor : public AActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.StreamedLevelActor");
		return ptr;
	}

};


// Class BendGame.SubtitleWidget
// 0x0018 (0x0260 - 0x0248)
class USubtitleWidget : public UUserWidget
{
public:
	int                                                ViewportZOrder;                                           // 0x0248(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x024C(0x0004) MISSED OFFSET
	struct FString                                     CurrentSubtitle;                                          // 0x0250(0x0010) (Edit, BlueprintVisible, ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.SubtitleWidget");
		return ptr;
	}


	void UpdateVisibility();
	void KillSubtitles();
	float GetSubtitlePlaybackTime(const struct FBendSubtitleCue& SubtitleCue);
	void DisplaySubtitleWithName(const struct FString& SubTitle, const struct FString& Name);
	void DisplaySubtitleWithDuration(const struct FString& SubTitle, float Duration);
	void DisplaySubtitleCueArray(TArray<struct FBendSubtitleCue> SubtitleCueArray, int Index);
	void DisplaySubtitleCue(const struct FBendSubtitleCue& SubtitleCue);
	void DisplaySubtitle(const struct FString& SubTitle);
	void ClearSubtitles();
};


// Class BendGame.SurvivalWheel
// 0x0200 (0x0448 - 0x0248)
class USurvivalWheel : public UUserWidget
{
public:
	unsigned char                                      UnknownData00[0x48];                                      // 0x0248(0x0048) MISSED OFFSET
	struct FVector2D                                   CurrentInput;                                             // 0x0290(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              CategoryExpansionDelay;                                   // 0x0298(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0xC];                                       // 0x029C(0x000C) MISSED OFFSET
	class UWidget*                                     ContainerReference;                                       // 0x02A8(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<class USurvivalWheelCategory*>              CategoryReferences;                                       // 0x02B0(0x0010) (BlueprintVisible, ZeroConstructor)
	class USurvivalWheelCategory*                      CurrentCategoryReference;                                 // 0x02C0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class USurvivalWheelItem*                          CurrentCategoryItemReference;                             // 0x02C8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UInventoryItem*                              CraftedItem;                                              // 0x02D0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x28];                                      // 0x02D8(0x0028) MISSED OFFSET
	struct FVector2D                                   MouseBoundsSize;                                          // 0x0300(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CategorySelectionDeadzoneMouse;                           // 0x0308(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CategorySelectionDeadzone;                                // 0x030C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              RightStickLocalDegrees;                                   // 0x0310(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              RightStickDegrees;                                        // 0x0314(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CategoryExpansionDeadzone;                                // 0x0318(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x031C(0x0004) MISSED OFFSET
	struct FInventoryItemStats                         PrimaryStats;                                             // 0x0320(0x0010) (Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                               bActive;                                                  // 0x0330(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x3];                                       // 0x0331(0x0003) MISSED OFFSET
	int                                                CurrentCategory;                                          // 0x0334(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                CurrentCategoryItem;                                      // 0x0338(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData05[0x4];                                       // 0x033C(0x0004) MISSED OFFSET
	TArray<struct FInventoryStorageWeaponPart>         CurrentWeaponParts;                                       // 0x0340(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	float                                              RightStickAngle;                                          // 0x0350(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bPositionLocked;                                          // 0x0354(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData06[0x3];                                       // 0x0355(0x0003) MISSED OFFSET
	struct FGameplayTagQuery                           TagQuery;                                                 // 0x0358(0x0048) (Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                               bSubitemsOpen;                                            // 0x03A0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bIsHoldingButton;                                         // 0x03A1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData07[0x2];                                       // 0x03A2(0x0002) MISSED OFFSET
	float                                              ConfirmHoldTime;                                          // 0x03A4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FString                                     HoldFunctionToCall;                                       // 0x03A8(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TEnumAsByte<EControllerInputButton>                ButtonHeld;                                               // 0x03B8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bAllowRightStickSubitemSelect;                            // 0x03B9(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bStickySubItems;                                          // 0x03BA(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bSelectSubItemAfterClose;                                 // 0x03BB(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              JoystickDebugDraw;                                        // 0x03BC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CategoryColapsedWidth;                                    // 0x03C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bPreviousSubItemsOpenState;                               // 0x03C4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData08[0x3];                                       // 0x03C5(0x0003) MISSED OFFSET
	float                                              SubItemSelectionBuffer;                                   // 0x03C8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   RightStickXY;                                             // 0x03CC(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   TargetPosition;                                           // 0x03D4(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   ResolutionTargetPosition;                                 // 0x03DC(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   TrackedPosition;                                          // 0x03E4(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   TrackedPositionStart;                                     // 0x03EC(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              OpenSubitemsDelay;                                        // 0x03F4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UMaterialInstanceDynamic*                    PlusProgress_DMI;                                         // 0x03F8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bDebugJoyStick;                                           // 0x0400(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bCloseSubMenuOutOfBounds;                                 // 0x0401(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData09[0x2];                                       // 0x0402(0x0002) MISSED OFFSET
	int                                                AddCount2;                                                // 0x0404(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                PreviousCategory;                                         // 0x0408(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bHadWeaponEquipped;                                       // 0x040C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData10[0x3];                                       // 0x040D(0x0003) MISSED OFFSET
	class ABendWeapon*                                 PreCraftingWeaponEquipped;                                // 0x0410(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bWasEquippableCrafted;                                    // 0x0418(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData11[0x7];                                       // 0x0419(0x0007) MISSED OFFSET
	class ABendWeapon*                                 WeaponOnCraftStart;                                       // 0x0420(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class ABendWeapon*                                 NewelyCraftedWeapon;                                      // 0x0428(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bHasValidEquipAnim;                                       // 0x0430(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bWasValidCraft;                                           // 0x0431(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bBeganEquippingCraftedWeapon;                             // 0x0432(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bShouldForceEquipCraftedItem;                             // 0x0433(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData12[0x4];                                       // 0x0434(0x0004) MISSED OFFSET
	class UInventoryItem*                              ItemPreLoaded;                                            // 0x0438(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bHasFreedPreloadedAsset;                                  // 0x0440(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData13[0x7];                                       // 0x0441(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.SurvivalWheel");
		return ptr;
	}


	void SetSelectedIndex(int CategoryIndex, int ItemIndex);
	void ResetWheelState();
	void ReceiveUseReleased();
	void ReceiveUsePressed();
	void ReceiveOnValidAnalogInput(float Distance, float angle);
	void ReceiveOnToggleCategoryPressed();
	void ReceiveOnOpenCategoryPressed();
	void ReceiveOnInvalidAnalogInput(float Distance, float angle);
	void ReceiveOnCloseCategoryPressed();
	void ReceiveCraftReleased();
	void ReceiveCraftPressed();
	void OpenSelectedCategory();
	void OnSurvivalWheelOpened();
	void OnSurvivalWheelClosed();
	bool IsCategoryOpen();
	void InputChanged(float Distance, float angle);
	float GetCategoryExpansionPercent();
	void CloseSelectedCategory();
	void CategorySelected(int CategoryIndex, class USurvivalWheelCategory* Category);
	void CategoryItemSelected(int CategoryIndex, class USurvivalWheelCategory* Category, int CategoryItemIndex, class USurvivalWheelItem* Item);
	void CategoryHighlighted(int CategoryIndex, class USurvivalWheelCategory* Category);
};


// Class BendGame.SurvivalWheelCategory
// 0x0058 (0x02A0 - 0x0248)
class USurvivalWheelCategory : public UUserWidget
{
public:
	TEnumAsByte<ESurvivalWheelCategoryState>           ExpansionState;                                           // 0x0248(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bSelected;                                                // 0x0249(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x024A(0x0006) MISSED OFFSET
	TArray<class USurvivalWheelItem*>                  ItemReferences;                                           // 0x0250(0x0010) (BlueprintVisible, ZeroConstructor)
	struct FText                                       CategoryName;                                             // 0x0260(0x0018) (Edit, BlueprintVisible, DisableEditOnTemplate)
	int                                                ActiveItemIndex;                                          // 0x0278(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                CurrentItemIndex;                                         // 0x027C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class USurvivalWheelItem*                          CurrentItemReference;                                     // 0x0280(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class USurvivalWheelItem*                          LastValidItem;                                            // 0x0288(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                PositionIndex;                                            // 0x0290(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	float                                              ItemWidth;                                                // 0x0294(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MinimumItemWidth;                                         // 0x0298(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x029C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.SurvivalWheelCategory");
		return ptr;
	}


	void SetSelectedItem(int Value);
	bool Select();
	bool Preview();
	bool Open();
	void OnSelected();
	void OnPreviewed();
	void OnOpened();
	void OnItemSelected();
	void OnInputModeChanged(bool bUsingMouseInput);
	void OnDeselected();
	void OnClosed();
	bool IsSelected();
	bool HasItems();
	float GetItemWidth();
	class USurvivalWheelItem* GetItemForWeapon(class ABendWeapon* Weapon);
	int GetItemCount();
	TEnumAsByte<ESurvivalWheelCategoryState> GetExpansionState();
	float GetExpandedWidth();
	float GetCategoryAngle();
	bool Deselect();
	bool ContainsAngle(float InAngle);
	bool Close();
	bool CanOpen();
	void CalculateItemWidth();
};


// Class BendGame.SurvivalWheelItem
// 0x0008 (0x0250 - 0x0248)
class USurvivalWheelItem : public UUserWidget
{
public:
	class UInventoryItem*                              InventoryItem;                                            // 0x0248(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.SurvivalWheelItem");
		return ptr;
	}


	void SetDetails(class UInventoryItem* InInventoryItem);
	void RefreshDetails();
	void ItemSelected();
	void ItemDeselected();
	bool IsValidForSelection();
	bool IsEmpty();
};


// Class BendGame.TelemetryFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UTelemetryFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.TelemetryFunctionLibrary");
		return ptr;
	}


	struct FTelemetryEventTypedAttr STATIC_MakeVectorTelemetryAttribute(const struct FString& Name, const struct FVector& Value);
	struct FTelemetryEventTypedAttr STATIC_MakeTextTelemetryAttribute(const struct FString& Name, const struct FText& Value);
	struct FTelemetryEventTypedAttr STATIC_MakeTextArrayTelemetryAttribute(const struct FString& Name, TArray<struct FText> Value);
	struct FTelemetryEventTypedAttr STATIC_MakeStringTelemetryAttribute(const struct FString& Name, const struct FString& Value);
	struct FTelemetryEventTypedAttr STATIC_MakeStringArrayTelemetryAttribute(const struct FString& Name, TArray<struct FString> Value);
	struct FTelemetryEventTypedAttr STATIC_MakeIntTelemetryAttribute(const struct FString& Name, int Value);
	struct FTelemetryEventTypedAttr STATIC_MakeIntArrayTelemetryAttribute(const struct FString& Name, TArray<int> Value);
	struct FTelemetryEventTypedAttr STATIC_MakeFloatTelemetryAttribute(const struct FString& Name, float Value);
	struct FTelemetryEventTypedAttr STATIC_MakeFloatArrayTelemetryAttribute(const struct FString& Name, TArray<float> Value);
	struct FTelemetryEventTypedAttr STATIC_MakeBoolTelemetryAttribute(const struct FString& Name, bool Value);
	struct FTelemetryEventTypedAttr STATIC_MakeBoolArrayTelemetryAttribute(const struct FString& Name, TArray<bool> Value);
	void STATIC_GetTelemetryMemoryStats(TArray<struct FTelemetryEventTypedAttr>* Attributes);
	void STATIC_GetStreamingStats(TArray<struct FTelemetryEventAttr>* Attributes);
	int STATIC_GetStreamingStat(TEnumAsByte<EBPStreamingStatId> StatId);
	int STATIC_GetNumLoadedPackages();
	int STATIC_GetNumAsyncPackages();
	void STATIC_GetMemoryStats(TArray<struct FTelemetryEventAttr>* Attributes);
	int STATIC_GetMallocTrackerUsageExternal(TEnumAsByte<EBPMallocTrackerGroupExternal> GroupId);
	int STATIC_GetMallocTrackerUsage(TEnumAsByte<EBPMallocTrackerGroup> GroupId);
	int STATIC_GetMallocTrackerBudgetExternal(TEnumAsByte<EBPMallocTrackerGroupExternal> GroupId);
	int STATIC_GetMallocTrackerBudget(TEnumAsByte<EBPMallocTrackerGroup> GroupId);
	float STATIC_GetAverageRenderThreadTime();
	float STATIC_GetAverageGPUFrameTime();
	float STATIC_GetAverageGameThreadTime();
	float STATIC_GetAverageFPS();
	void STATIC_BroadcastEventWithTypedAttributes(const struct FString& EventName, TArray<struct FTelemetryEventTypedAttr> Attributes, bool bBroadcastEvent, bool bPrintToScreen, const struct FLinearColor& TextColor, float Duration);
	void STATIC_BroadcastEventWithAttributes(const struct FText& EventName, TArray<struct FTelemetryEventAttr> Attributes, bool bBroadcastEvent, bool bPrintToScreen, const struct FLinearColor& TextColor, float Duration);
};


// Class BendGame.TestSkeletalMeshParts
// 0x0000 (0x0388 - 0x0388)
class ATestSkeletalMeshParts : public ASkeletalMeshActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.TestSkeletalMeshParts");
		return ptr;
	}

};


// Class BendGame.TouchpadDisplay
// 0x0048 (0x0070 - 0x0028)
class UTouchpadDisplay : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0028(0x0010) MISSED OFFSET
	class UTexture2D*                                  Tx;                                                       // 0x0038(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      FadeStrength;                                             // 0x0040(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	unsigned char                                      HighlightStrength;                                        // 0x0041(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2E];                                      // 0x0042(0x002E) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.TouchpadDisplay");
		return ptr;
	}


	void UpdateCanvas();
	void InitializeCanvas();
	void HighlightLocation(int X, int Y);
	void FadeCanvas();
	void ClearCanvas();
};


// Class BendGame.UI_TweenBorder
// 0x00B0 (0x02F8 - 0x0248)
class UUI_TweenBorder : public UUserWidget
{
public:
	struct FScriptMulticastDelegate                    OnOpacityEnd;                                             // 0x0248(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               TweenColorActive;                                         // 0x0258(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               TweenOpacityActive;                                       // 0x0259(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               TweenTranslationActive;                                   // 0x025A(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               TweenScaleActive;                                         // 0x025B(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               TweenAlignmentActive;                                     // 0x025C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               TweenAngleActive;                                         // 0x025D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               TweenOpacityPingPong;                                     // 0x025E(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               TweenOpacityLoop;                                         // 0x025F(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TweenColorDuration;                                       // 0x0260(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TweenColorProgress;                                       // 0x0264(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TweenOpacityDuration;                                     // 0x0268(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TweenOpacityProgress;                                     // 0x026C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TweenOpacityFrom;                                         // 0x0270(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TweenOpacityTo;                                           // 0x0274(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TweenTranslationDuration;                                 // 0x0278(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TweenTranslationProgress;                                 // 0x027C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TweenScaleDuration;                                       // 0x0280(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TweenScaleProgress;                                       // 0x0284(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TweenAlignmentDuration;                                   // 0x0288(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TweenAlignmentProgress;                                   // 0x028C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TweenAngleDuration;                                       // 0x0290(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TweenAngleProgress;                                       // 0x0294(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TweenAngleFrom;                                           // 0x0298(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TweenAngleTo;                                             // 0x029C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                TweenColorFrom;                                           // 0x02A0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                TweenColorTo;                                             // 0x02B0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector2D                                   TweenTranslationFrom;                                     // 0x02C0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector2D                                   TweenTranslationTo;                                       // 0x02C8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector2D                                   TweenScaleFrom;                                           // 0x02D0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector2D                                   TweenScaleTo;                                             // 0x02D8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector2D                                   TweenAlignmentFrom;                                       // 0x02E0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector2D                                   TweenAlignmentTo;                                         // 0x02E8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UBorder*                                     Wrapper_CODE;                                             // 0x02F0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.UI_TweenBorder");
		return ptr;
	}

};


// Class BendGame.UIAssetCacheManager
// 0x0090 (0x00B8 - 0x0028)
class UUIAssetCacheManager : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	TMap<uint32_t, struct FUIAssetCacheEntry>          AssetCacheMap;                                            // 0x0030(0x0050) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData01[0x38];                                      // 0x0080(0x0038) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.UIAssetCacheManager");
		return ptr;
	}

};


// Class BendGame.UIDesignerVariables
// 0x02B8 (0x02E0 - 0x0028)
class UUIDesignerVariables : public UDataAsset
{
public:
	float                                              HudMinInitialDisplayTime;                                 // 0x0028(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              HudAlphaFadeRate;                                         // 0x002C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              HudMinDisplayTimeBeforeFade;                              // 0x0030(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              HoldInteractTime;                                         // 0x0034(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TArray<class UTexture2D*>                          HudIconCorrespondingArray;                                // 0x0038(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TArray<class UTexture2D*>                          AdvertiseIconCorrespondingArray;                          // 0x0048(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TArray<class UTexture2D*>                          InteractButtonIconCorrespondingArray;                     // 0x0058(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FLinearColor>                        InteractButtonIconColorCorrespondingArray;                // 0x0068(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TArray<class UTexture2D*>                          InteractButtonTextureCorrespondingArray;                  // 0x0078(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FLinearColor>                        InteractButtonTextureColorCorrespondingArray;             // 0x0088(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	struct FMiniMapVariableDetails                     MiniMapVariables;                                         // 0x0098(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FMapMenuVariableDetails                     MapMenuVariables;                                         // 0x00B0(0x0030) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FMapIconStateDetails                        MapIconStateVariables;                                    // 0x00E0(0x0060) (Edit, BlueprintVisible, BlueprintReadOnly)
	class UClass*                                      InventoryDropTableManager;                                // 0x0140(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<TAssetPtr<class UTexture2D>>                StartupCookImageReferences;                               // 0x0148(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TAssetPtr<class UBlueprint>                        InventoryPickupAsset;                                     // 0x0158(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly)
	class UBlueprint*                                  InventoryPickupBlueprint;                                 // 0x0178(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TArray<struct FLanguageDetails>                    LanguageDetails;                                          // 0x0180(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FRegionLanguages                            All_Languages;                                            // 0x0190(0x0030) (Edit, BlueprintVisible)
	struct FRegionLanguages                            SIEA_Languages;                                           // 0x01C0(0x0030) (Edit, BlueprintVisible)
	struct FRegionLanguages                            SIEE1_Languages;                                          // 0x01F0(0x0030) (Edit, BlueprintVisible)
	struct FRegionLanguages                            SIEE2_Languages;                                          // 0x0220(0x0030) (Edit, BlueprintVisible)
	struct FRegionLanguages                            SIEE3_Languages;                                          // 0x0250(0x0030) (Edit, BlueprintVisible)
	struct FRegionLanguages                            SIEAsia_Languages;                                        // 0x0280(0x0030) (Edit, BlueprintVisible)
	struct FRegionLanguages                            SIEJ_Languages;                                           // 0x02B0(0x0030) (Edit, BlueprintVisible)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.UIDesignerVariables");
		return ptr;
	}

};


// Class BendGame.UIManager
// 0x01D0 (0x0518 - 0x0348)
class AUIManager : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0348(0x0008) MISSED OFFSET
	class UClass*                                      SavePlayerProfileClass;                                   // 0x0350(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TAssetPtr<class UUIDesignerVariables>              UIDesignerVariables;                                      // 0x0358(0x0020) (Edit, BlueprintVisible, DisableEditOnInstance)
	TAssetPtr<class UClass>                            SoundManagerClass;                                        // 0x0378(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	TAssetPtr<class UClass>                            WorldMapSectorClass;                                      // 0x0398(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	TAssetPtr<class UClass>                            SubtitleWidgetClass;                                      // 0x03B8(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	TAssetPtr<class UClass>                            TutorialManagerClass;                                     // 0x03D8(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	TAssetPtr<class UClass>                            Menu3DClass;                                              // 0x03F8(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	TAssetPtr<class UClass>                            Map3DClass;                                               // 0x0418(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	TArray<TAssetPtr<class UClass>>                    MenuWidgetClass;                                          // 0x0438(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0448(0x0004) MISSED OFFSET
	int                                                FrameCount;                                               // 0x044C(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	TArray<class UBaseMenu*>                           HudMenus;                                                 // 0x0450(0x0010) (ZeroConstructor, Transient)
	TArray<class UBaseMenu*>                           Menus;                                                    // 0x0460(0x0010) (ZeroConstructor, Transient)
	TArray<class UBaseMenu*>                           MenusCreatedThisFrame;                                    // 0x0470(0x0010) (ZeroConstructor, Transient)
	class UUISoundManager*                             SoundManager;                                             // 0x0480(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UUIDesignerVariables*                        DesignerVariables;                                        // 0x0488(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UWorldMapSectors*                            WorldMapSectors;                                          // 0x0490(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UBendTutorialManager*                        TutorialManager;                                          // 0x0498(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TWeakObjectPtr<class APostProcessVolume>           PostProcessUI;                                            // 0x04A0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x50];                                      // 0x04A8(0x0050) MISSED OFFSET
	class USubtitleWidget*                             SubtitleWidget;                                           // 0x04F8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               IsOptionsMenuActive;                                      // 0x0500(0x0001) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData03[0x7];                                       // 0x0501(0x0007) MISSED OFFSET
	class AMenu3D*                                     Menu3D;                                                   // 0x0508(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class AMap3D*                                      Map3D;                                                    // 0x0510(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.UIManager");
		return ptr;
	}


	class AMenu3D* SpawnMenu3D();
	class AMap3D* SpawnMap3D(const struct FVector& Location, const struct FRotator& Rotator);
	void SetUse3DMenu(bool bEnable);
	void SetUIPostProcessEnabled(bool Enabled);
	void SetSubtitlesForceHidden(bool bForceHidden);
	void SetSubtitlesEnabled(bool Enabled);
	void SetSubtitles(TArray<struct FBendSubtitleCue> Subtitles, float TotalDuration);
	void SetPauseMenuDisabled(bool IsDisabled);
	void SetControllerDisconnectHandled();
	void KillAllSubtitles();
	bool IsUsing3DMenu();
	bool IsSubtitlesForceHidden();
	bool IsSubtitlesEnabled();
	bool IsPauseMenuDisabled();
	bool IsPauseMenuActive();
	bool IsDebugSubtitles();
	bool IsControllerDisconnected();
	class UUIDesignerVariables* GetUIVariables();
	class AUIManager* STATIC_GetUIManager();
	class UBendTutorialManager* GetTutorialManager();
	class USubtitleWidget* GetSubtitleWidget();
	class AMenu3D* GetMenu3D();
	class AMap3D* GetMap3D();
	void ForceGCNextTick();
	void EnableHighFPS(bool bEnable);
	class UBaseMenuWidget* ConstructMenuWidgetBase(TEnumAsByte<EWidgetMenuClass> MenuClass, bool ShouldAddToViewport);
};


// Class BendGame.UIStreamManager
// 0x00A8 (0x00D0 - 0x0028)
class UUIStreamManager : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	struct FStreamableManager                          StreamManager;                                            // 0x0030(0x00A0)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.UIStreamManager");
		return ptr;
	}

};


// Class BendGame.VehicleAwarenessObject
// 0x0020 (0x0048 - 0x0028)
class UVehicleAwarenessObject : public UObject
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0028(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.VehicleAwarenessObject");
		return ptr;
	}

};


// Class BendGame.VehicleController
// 0x0010 (0x03B8 - 0x03A8)
class AVehicleController : public AController
{
public:
	class UWheeledVehicleMovementComponent*            VehicleSim;                                               // 0x03A8(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class AController*                                 ParentController;                                         // 0x03B0(0x0008) (Net, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.VehicleController");
		return ptr;
	}

};


// Class BendGame.VehicleDamageInfo
// 0x0440 (0x0468 - 0x0028)
class UVehicleDamageInfo : public UDataAsset
{
public:
	bool                                               DamageEnabled;                                            // 0x0028(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0029(0x0003) MISSED OFFSET
	float                                              MaxHealth;                                                // 0x002C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               UsePartHealths;                                           // 0x0030(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0031(0x0003) MISSED OFFSET
	float                                              MissionHealthPercent;                                     // 0x0034(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DamageReductionModifier;                                  // 0x0038(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              BulletDamageModifier;                                     // 0x003C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bCanTopSpeedBeNerfed;                                     // 0x0040(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0041(0x0003) MISSED OFFSET
	float                                              NerfAtHealthPercentRemaining;                             // 0x0044(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SpeedPenaltyPercentage;                                   // 0x0048(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x004C(0x0004) MISSED OFFSET
	struct FRuntimeFloatCurve                          HealthVsSpeedPenaltyGraph;                                // 0x0050(0x0080) (Edit, DisableEditOnInstance)
	bool                                               bCanSmoke;                                                // 0x00D0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x7];                                       // 0x00D1(0x0007) MISSED OFFSET
	class UParticleSystem*                             SmokePFX;                                                 // 0x00D8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bCanBeDestroyed;                                          // 0x00E0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData05[0x7];                                       // 0x00E1(0x0007) MISSED OFFSET
	class UParticleSystem*                             DestroyedPFX;                                             // 0x00E8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVehicleHitDamageInfo                       mHitDamageInfo;                                           // 0x00F0(0x0090) (Edit, DisableEditOnInstance)
	struct FVehicleSurfaceDamaegInfo                   mSurfaceDamageInfo;                                       // 0x0180(0x0018) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVehicleJumpDamageInfo                      mJumpDamageInfo;                                          // 0x0198(0x0190) (Edit, DisableEditOnInstance)
	struct FVehicleRamDamageInfo                       mRamDamageInfo;                                           // 0x0328(0x0018) (Edit, DisableEditOnInstance)
	struct FVehicleWaterDamageInfo                     mWaterDamageInfo;                                         // 0x0340(0x0098) (Edit, DisableEditOnInstance)
	struct FVehicleDamageVsPawnInfo                    mVehicleVsPawnDamageInfo;                                 // 0x03D8(0x0088) (Edit, DisableEditOnInstance)
	bool                                               DebugEnabled;                                             // 0x0460(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x7];                                       // 0x0461(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.VehicleDamageInfo");
		return ptr;
	}

};


// Class BendGame.VehicleInputListener
// 0x0040 (0x0388 - 0x0348)
class AVehicleInputListener : public AActor
{
public:
	unsigned char                                      UnknownData00[0x40];                                      // 0x0348(0x0040) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.VehicleInputListener");
		return ptr;
	}


	void ToggleRideAssist();
	void SurvivalWheelReleased();
	void SurvivalWheelPressed();
	void OnWeaponFireReleased();
	void OnWeaponFirePressed();
	void OnWalkModifierTogglePressed();
	void OnWalkBackward(float Val);
	void OnWalkAxisTurn_RightKeyboard(float Val);
	void OnWalkAxisTurn_LeftKeyboard(float Val);
	void OnWalkAxisTurn_GamePad(float Val);
	void OnWalkAxisForward(float Val);
	void OnVehicleEnterExitedReleased();
	void OnVehicleEnterExitedPressed();
	void OnTurnRight(float Val);
	void OnTurnLeft(float Val);
	void OnTireSlipOn();
	void OnTireSlipOff();
	void OnTiltForwardKey(float Val);
	void OnTiltForward(float Val);
	void OnTiltBackwardKey(float Val);
	void OnStopAiming();
	void OnStartAiming();
	void OnMoveRight(float Val);
	void OnMoveForward(float Val);
	void OnMoveBackward(float Val);
	void OnHandbrakePressed(float Val);
	void OnDisengageClutchOn();
	void OnDisengageClutchOff();
	void OnBoostTogglePressed();
	void OnBoostReleased();
	void OnBoostPressed();
	void OnBlindFireReleased();
	void OnBlindFirePressed();
	void OnBlindFireCycleTarget();
	void FireReleased();
	void FirePressed();
	void CycleReleased();
	void CyclePressed();
	void ConsumeInput();
};


// Class BendGame.VehicleMeshActor
// 0x0000 (0x0348 - 0x0348)
class AVehicleMeshActor : public AActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.VehicleMeshActor");
		return ptr;
	}


	void SetMobility_Vehicle(class USceneComponent* SceneComponent, TEnumAsByte<EComponentMobility> NewMobility);
};


// Class BendGame.VehiclePlayerController
// 0x0008 (0x06B0 - 0x06A8)
class AVehiclePlayerController : public APlayerController
{
public:
	class UWheeledVehicleMovementComponent*            VehicleSim;                                               // 0x06A8(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.VehiclePlayerController");
		return ptr;
	}

};


// Class BendGame.WaveSpawnerData
// 0x0028 (0x0050 - 0x0028)
class UWaveSpawnerData : public UDataAsset
{
public:
	TArray<struct FBendAmbientSpawnType>               SpawnTypes;                                               // 0x0028(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	float                                              MinTimeUntilNextWave;                                     // 0x0038(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MaxTimeUntilNextWave;                                     // 0x003C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MaxBaseSpawns;                                            // 0x0040(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MinSpawnRadius;                                           // 0x0044(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MaxSpawnRadius;                                           // 0x0048(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               UseOneSpawnLocation;                                      // 0x004C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               UseSpecificSpawnLocationsThisWave;                        // 0x004D(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x004E(0x0002) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.WaveSpawnerData");
		return ptr;
	}

};


// Class BendGame.WaypointWidget
// 0x0008 (0x0350 - 0x0348)
class AWaypointWidget : public AActor
{
public:
	int                                                Distance;                                                 // 0x0348(0x0004) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	int                                                NotifyDistance;                                           // 0x034C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.WaypointWidget");
		return ptr;
	}


	void SyncDistance(bool ForceUpdate);
	void OnDistanceChanged(const struct FText& DistanceText);
	struct FText GetDistanceText();
};


// Class BendGame.WeaponComparisonDataAggregator
// 0x00D8 (0x0420 - 0x0348)
class AWeaponComparisonDataAggregator : public AActor
{
public:
	class UDataTable*                                  WeaponData;                                               // 0x0348(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UDataTable*                                  AmmoData;                                                 // 0x0350(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UDataTable*                                  WeaponPartData;                                           // 0x0358(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      WeaponPartTagSetsClass;                                   // 0x0360(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                CurrentStep;                                              // 0x0368(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bPerformWeaponGeneration;                                 // 0x036C(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xB3];                                      // 0x036D(0x00B3) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.WeaponComparisonDataAggregator");
		return ptr;
	}


	void PerformWeaponGenerationStep(int Items);
	void GenerateComparisonDataForWeapons();
	void GenerateComparisonDataForWeaponParts();
};


// Class BendGame.WeatherLibrary
// 0x0000 (0x0028 - 0x0028)
class UWeatherLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.WeatherLibrary");
		return ptr;
	}


	int STATIC_WeightedSelection(TArray<float> Weights, float fZeroToOne);
	void STATIC_SetWindValues(class AWindDirectionalSource* WindActor, float InStrength, float InSpeed);
	void STATIC_SetWindDirection(class AWindDirectionalSource* WindActor, float ZRotation);
	void STATIC_GetWindValues(class AWindDirectionalSource* WindActor, struct FVector* Direction, float* InStrength, float* InSpeed);
};


// Class BendGame.WorldQueryNodes
// 0x0000 (0x0028 - 0x0028)
class UWorldQueryNodes : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.WorldQueryNodes");
		return ptr;
	}


	struct FString STATIC_GetWorldName();
	struct FString STATIC_GetWorldMapRoot();
};


// Class BendGame.XpecAnimNotifyStateLockScenario
// 0x0010 (0x0040 - 0x0030)
class UXpecAnimNotifyStateLockScenario : public UAnimNotifyState
{
public:
	struct FName                                       LockEventName;                                            // 0x0030(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       UnlockEventName;                                          // 0x0038(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.XpecAnimNotifyStateLockScenario");
		return ptr;
	}

};


// Class BendGame.XpecAnimNotifyToPOI
// 0x0018 (0x0048 - 0x0030)
class UXpecAnimNotifyToPOI : public UAnimNotify
{
public:
	struct FName                                       EventName;                                                // 0x0030(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      useDistanceCheck : 1;                                     // 0x0038(0x0001) (Edit, BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0039(0x0003) MISSED OFFSET
	float                                              allowedDistance;                                          // 0x003C(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               isNotifyToDummy;                                          // 0x0040(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0041(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.XpecAnimNotifyToPOI");
		return ptr;
	}

};


// Class BendGame.XpecRestrictArea
// 0x0008 (0x0390 - 0x0388)
class AXpecRestrictArea : public AVolume
{
public:
	class UBoxComponent*                               BoxComponent;                                             // 0x0388(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.XpecRestrictArea");
		return ptr;
	}


	void OnBoxBeginOverlap(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
};


// Class BendGame.XpecBlockingPawnSpawnLocation
// 0x00E8 (0x0430 - 0x0348)
class AXpecBlockingPawnSpawnLocation : public AXpecBase
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0348(0x0008) MISSED OFFSET
	TEnumAsByte<EXpecBlockingPawnState>                m_currentState;                                           // 0x0350(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	TEnumAsByte<EXpecBlockingPawnState>                m_nextState;                                              // 0x0351(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData01[0x26];                                      // 0x0352(0x0026) MISSED OFFSET
	TEnumAsByte<EXpecBlockingPawnType>                 animType;                                                 // 0x0378(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0379(0x0003) MISSED OFFSET
	float                                              detectRadius;                                             // 0x037C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UBendSkeletalMeshArrayData*                  pawnMeshList;                                             // 0x0380(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EInventoryWeaponID>                    WeaponID;                                                 // 0x0388(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x7];                                       // 0x0389(0x0007) MISSED OFFSET
	class USkeletalMesh*                               weaponMesh;                                               // 0x0390(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              warnigCooldown;                                           // 0x0398(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EXpecBlockingPawnLeaveDirection>       leaveDirection;                                           // 0x039C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x3];                                       // 0x039D(0x0003) MISSED OFFSET
	class AXpecRestrictArea*                           restrictArea;                                             // 0x03A0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<struct FXpecHourInterval>                   blockingHour;                                             // 0x03A8(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	class USoundClass*                                 SoundClass;                                               // 0x03B8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       VOName;                                                   // 0x03C0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           IdleAnim;                                                 // 0x03C8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	class UAnimMontage*                                warnAnimMontage;                                          // 0x03D0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	class UAnimMontage*                                warnAnimMontage_L_46;                                     // 0x03D8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	class UAnimMontage*                                warnAnimMontage_L_91;                                     // 0x03E0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	class UAnimMontage*                                warnAnimMontage_R_46;                                     // 0x03E8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	class UAnimMontage*                                warnAnimMontage_R_91;                                     // 0x03F0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	class UAnimMontage*                                openAnimMontage;                                          // 0x03F8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	class UAnimMontage*                                closeAnimMontage;                                         // 0x0400(0x0008) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              m_openingTime;                                            // 0x0408(0x0004) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              m_closingTime;                                            // 0x040C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData)
	class AXpecPopulation*                             population;                                               // 0x0410(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class AXpecDummySkeletalMeshActor*                 DummyPawn;                                                // 0x0418(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class ASkeletalMeshActor*                          m_pWeapon;                                                // 0x0420(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UBendSphereComponent*                        BendSphereComp;                                           // 0x0428(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.XpecBlockingPawnSpawnLocation");
		return ptr;
	}


	bool UpdateAnimationData();
	class AXpecDummySkeletalMeshActor* SpawnDummyPawn(const struct FTransform& Transform);
	bool SetupAnimBP();
	float PlayMontage(class UAnimMontage* anim, float PlayRate, const struct FName& StartSectionName);
	void OnTriggerEndOverlap();
	void OnTriggerBeginOverlap();
	bool IUntrigger(const struct FName& EventName, class AActor* pSource);
	bool ITrigger(const struct FName& EventName, class AActor* pSource);
	struct FTransform GetSpawnTransform(const struct FTransform& Transform);
	void FinishedLoadingLook(int Index);
	void ExitedVehicle(class AVehiclePawn* VehiclePawn, TEnumAsByte<EBendVehicleExitReason> VehicleExitReason);
	bool EnableBlocking();
	bool DisableBlocking();
};


// Class BendGame.XpecEventManager
// 0x02B8 (0x0600 - 0x0348)
class AXpecEventManager : public AXpecBase
{
public:
	class AXpecPopulation*                             m_pPopulation;                                            // 0x0348(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class AXpecActionPool*                             m_pActionPool;                                            // 0x0350(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class AXpecZoneManager*                            m_pTransitionZone;                                        // 0x0358(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class AXpecVODataManager*                          m_pVODataManager;                                         // 0x0360(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TArray<struct FXpecEventDesc>                      m_events;                                                 // 0x0368(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<class AXpecZoneManager*>                    m_zones;                                                  // 0x0378(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	int                                                m_iNumEventLaunched;                                      // 0x0388(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EXpecTimeZone>                         m_ePreviousTimeZone;                                      // 0x038C(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EXpecTimeZone>                         m_eCurrentTimeZone;                                       // 0x038D(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x038E(0x0002) MISSED OFFSET
	int                                                m_iPreviousTimeHour;                                      // 0x0390(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                m_iCurrentTimeHour;                                       // 0x0394(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EWeatherType>                          m_ePreviousWeather;                                       // 0x0398(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EWeatherType>                          m_eCurrentWeather;                                        // 0x0399(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EWeatherType>                          m_eFakeWeather;                                           // 0x039A(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_bInitialized;                                           // 0x039B(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x224];                                     // 0x039C(0x0224) MISSED OFFSET
	class AXpecZoneManager*                            m_pSelectedZone;                                          // 0x05C0(0x0008) (ZeroConstructor, IsPlainOldData)
	class ABendPawn*                                   m_pSelectedPawn;                                          // 0x05C8(0x0008) (ZeroConstructor, IsPlainOldData)
	class ABendPOI*                                    m_pSelectedPOI;                                           // 0x05D0(0x0008) (ZeroConstructor, IsPlainOldData)
	class AXpecScenarioInstance*                       m_pSelectedScenario;                                      // 0x05D8(0x0008) (ZeroConstructor, IsPlainOldData)
	class ABendPOI*                                    m_pPOIToUse;                                              // 0x05E0(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x18];                                      // 0x05E8(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.XpecEventManager");
		return ptr;
	}


	class AXpecScenarioInstance* SpawnScenarioInstance();
	class AXpecPOISlot* SpawnScenarioActorSlot();
	bool SetRandomWaitTime(const struct FName& evetName, float RandomMin, float RandomMax);
	void OnPlayerLeavingEncampment(class UBendEncampmentData* Encampment);
	void OnPlayerEnteredEncampment(class UBendEncampmentData* Encampment);
	class AXpecZoneManager* GetZoneManagerById(const struct FName& zoneId);
	TEnumAsByte<EXpecTimeZone> GetTimeZone();
	void DebugPrintInfo(struct FString* line);
	void DebugOnZonePreview(const struct FName& zoneName, int iIndex, const struct FVector& Position);
	void DebugOnWeatherSelected(const struct FName& NodeName, int iIndex);
	void DebugOnUsePOISelected(const struct FName& ItemName, int iIndex);
	void DebugOnTimeSelected(const struct FName& NodeName, int iIndex);
	void DebugOnSpawnSelected(const struct FName& pawnName, int iIndex);
	void DebugOnSendEventSelected(const struct FName& EventName, int iIndex);
	void DebugOnPOIPreview(const struct FName& POIName, int iIndex, const struct FVector& Position);
	void DebugOnPOIFocused(const struct FName& POIName, int iIndex);
	void DebugOnPawnPreview(const struct FName& pawnName, int iIndex, const struct FVector& Position);
	void DebugOnPawnFocused(const struct FName& pawnName, int iIndex);
	void DebugOnKillSelected(const struct FName& pawnName, int iIndex);
	void DebugOnInfoZoneSelected(const struct FName& zoneName, int iIndex);
	void DebugOnInfoPOISelected(const struct FName& POIName, int iIndex);
	void DebugOnInfoPawnSelected(const struct FName& pawnName, int iIndex);
	void DebugDeleteInfos(const struct FName& ItemName, int iIndex);
	void DebugAddInfos(const struct FName& ItemName, int iIndex);
};


// Class BendGame.XpecPopulation
// 0x0208 (0x0550 - 0x0348)
class AXpecPopulation : public AXpecBase
{
public:
	unsigned char                                      UnknownData00[0x58];                                      // 0x0348(0x0058) MISSED OFFSET
	TArray<struct FXpecLODPawn>                        m_pawns;                                                  // 0x03A0(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<class AXpecPawnSpawnLocation*>              m_morningSpawners;                                        // 0x03B0(0x0010) (ZeroConstructor)
	TArray<class AXpecPawnSpawnLocation*>              m_afternoonSpawners;                                      // 0x03C0(0x0010) (ZeroConstructor)
	TArray<class AXpecPawnSpawnLocation*>              m_eveningSpawners;                                        // 0x03D0(0x0010) (ZeroConstructor)
	TArray<class AXpecPawnSpawnLocation*>              m_nightSpawners;                                          // 0x03E0(0x0010) (ZeroConstructor)
	float                                              m_fHighLODQuickSwitchDistance;                            // 0x03F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_fMinCooldownWithoutQuickSwitch;                         // 0x03F4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_fOrphanDespawnDistanceWithoutCameraCheck;               // 0x03F8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_fOrphanDespawnDistance;                                 // 0x03FC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_fOrphanDespawnTimer;                                    // 0x0400(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_fDummyAnchorMinDistance;                                // 0x0404(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_fDummyAnchorMaxDistance;                                // 0x0408(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_bCanTurnoverPawnType;                                   // 0x040C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x80];                                      // 0x040D(0x0080) MISSED OFFSET
	bool                                               m_bUsePawnLOD;                                            // 0x048D(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x2A];                                      // 0x048E(0x002A) MISSED OFFSET
	class UDataTable*                                  m_PopulationTable;                                        // 0x04B8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UDataTable*                                  m_LoadoutTable;                                           // 0x04C0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x04C8(0x0004) MISSED OFFSET
	float                                              m_GuardRatio;                                             // 0x04CC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_DynamicUpdateGuardRatio;                                // 0x04D0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x3];                                       // 0x04D1(0x0003) MISSED OFFSET
	int                                                m_nightTimePawnNum;                                       // 0x04D4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                m_PawnControlStartHour;                                   // 0x04D8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                m_PawnControlEndHour;                                     // 0x04DC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x54];                                      // 0x04E0(0x0054) MISSED OFFSET
	bool                                               m_bUseEventPawn;                                          // 0x0534(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x3];                                       // 0x0535(0x0003) MISSED OFFSET
	class UXpecEventPawnManagerComponent*              eventPawnComponent;                                       // 0x0538(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	TArray<class AActor*>                              m_rayCastIgnores;                                         // 0x0540(0x0010) (Edit, BlueprintVisible, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.XpecPopulation");
		return ptr;
	}


	void ZoneActivated(class AXpecZoneManager* zoneManager, bool Activated);
	bool UpdateLook(const struct FName& nameToOverride);
	bool SetLODLevel(class ABendPawnSpawnLocation* pSpawner, int iSN, TEnumAsByte<EXpecPawnLODLevel> eLevel, float fDistance);
	void SetLODBoxManager(class AXpecLODBoxManager* mgr);
	class USkeletalMeshComponent* SetInitPOIForDummy(int iSN, const struct FXpecScenarioSave& poiData);
	void ResetSpawnerLODBoxUpdate(int sn);
	class ASkeletalMeshActor* RequestSpawnLowLOD(class ABendPawnSpawnLocation* pSpawner);
	bool RequestActivateSpawner(TEnumAsByte<EXpecPOIUserType> pawnType, bool currentActivate, bool isImportant);
	bool RemoveOverrideLook(const struct FName& nameToOverride);
	void RemoveEventPawn(class AActor* eventPawn);
	void RemoveDummyPawn(class AActor* DummyPawn);
	bool RegisterSpawner(class ABendPawnSpawnLocation* pSpawner);
	bool RegisterPawn(class ABendPawnSpawnLocation* pSpwaner, class ABendPawn* pPawn, class ABendAIController* pController);
	bool RegisterEventPawn(class ABendPawn* pPawn, class ABendAIController* pController);
	void RecycleKilledPawn(class ABendPawn* KilledPawn);
	bool RecoverPawnInfoLook(const struct FName& nameToOverride);
	void PawnWeaponAdded(class ABendWeapon* pWeapon);
	bool OverridePawnInfoLook(const struct FName& nameToOverride);
	void NotifyDeactivateSpawner(TEnumAsByte<EXpecPOIUserType> pawnType);
	bool LoadDataTable();
	bool Load(bool bForceReload);
	struct FXpecPawnInfo STATIC_GetPopulationRowByName(class UDataTable* DataTable, const struct FName& pName, bool* Result);
	struct FString GetPawnInfoString(int sn, bool showPOIName);
	struct FXpecLODPawn GetPawnInfo(int iSN);
	void FreezeDummyTick(class ABendPawnSpawnLocation* pSpawner, bool freeze);
	bool FindSecondaryMovingTargetForEventPawn(class AActor* eventPawn, struct FTransform* pNewTransform);
	int FindPawnInfo(const struct FName& Name, struct FXpecPawnInfo* pawnInfo);
	bool FindMovingTargetForEventPawn(const struct FXpecLODPawn& pawnInfo, struct FTransform* pNewTransform);
	void EventFromRallySystem(TEnumAsByte<EXpecRallyEvent> eventType);
	void DespawnLowLODBySN(int iSN);
	bool DespawnLowLOD(class ABendPawnSpawnLocation* pSpawner, class ABendPawn* pPawn);
	bool DeactivateEventPawn(class ABendPawn* pEventPawn);
	class ASkeletalMeshActor* CreateDummy(const struct FVector& Position, const struct FRotator& Rotation);
	bool CheckPawnLODBoxOverlap(class AActor* currentActor, int iSN, bool* isInImportantBlock, bool* isInUnseenBlock, bool* isInIsolateArea);
	bool AddOverrideLook(const struct FName& nameToOverride, class UBendSkeletalMeshLookBase* overridelook);
	void AddEventPawn(class AActor* eventPawn);
	void AddDummyPawn(class AActor* DummyPawn);
	bool Add(const struct FXpecPawnInfo& pawnInfo);
	void ActivateSpawnersOnAdjust(class AXpecEventManager* m_EventMgr);
	class ABendPawn* ActivateEventPawn(const struct FXpecLODPawn& pPawnInfo);
};


// Class BendGame.XpecRallySystem
// 0x01D8 (0x0520 - 0x0348)
class AXpecRallySystem : public AXpecBase
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0348(0x0008) MISSED OFFSET
	class AXpecPopulation*                             population;                                               // 0x0350(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FScriptMulticastDelegate                    onRallyEventTrigger;                                      // 0x0358(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0368(0x0010) MISSED OFFSET
	bool                                               m_bUpdatePawnToZoneIDMapping;                             // 0x0378(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0379(0x0007) MISSED OFFSET
	struct FName                                       ListenerAnimationGroupName;                               // 0x0380(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<struct FBendLocationReference>              TeleportProxies;                                          // 0x0388(0x0010) (Edit, ZeroConstructor)
	TArray<struct FBendLocationReference>              ListenerProxies;                                          // 0x0398(0x0010) (Edit, ZeroConstructor)
	struct FBendLocationReference                      RallyPoint;                                               // 0x03A8(0x0010) (Edit)
	float                                              m_fRallyRadiusAroundPlayer;                               // 0x03B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x03BC(0x0004) MISSED OFFSET
	TArray<struct FXpecZoneDismissLocation>            m_ZoneDismissLocations;                                   // 0x03C0(0x0010) (Edit, ZeroConstructor)
	TArray<struct FBendLocationReference>              MiddlePointsForLongRandeMove;                             // 0x03D0(0x0010) (Edit, ZeroConstructor)
	TArray<struct FXpecPawnToZoneIDMappings>           m_PawnToZoneIDMappings;                                   // 0x03E0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, EditConst)
	TArray<struct FName>                               NonRallyPawnNames;                                        // 0x03F0(0x0010) (Edit, ZeroConstructor)
	float                                              m_fMiddlePointMinDistThreshold;                           // 0x0400(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              m_fMiddlePointMaxDistThreshold;                           // 0x0404(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              m_fMiddlePointZDistThreshold;                             // 0x0408(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              m_fCloseToMiddlePointThreshold;                           // 0x040C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              m_fMiddlePointHiddenThreshold;                            // 0x0410(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                m_iMaxTeleportSpawnPerPoint;                              // 0x0414(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                m_iDisableOptimizeUncompletedMovingPawnCounts;            // 0x0418(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x041C(0x0004) MISSED OFFSET
	struct FString                                     MissionActivateString;                                    // 0x0420(0x0010) (Edit, ZeroConstructor)
	struct FString                                     MissionDeactivateString;                                  // 0x0430(0x0010) (Edit, ZeroConstructor)
	bool                                               m_bUseTimeslicing;                                        // 0x0440(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x3];                                       // 0x0441(0x0003) MISSED OFFSET
	float                                              m_fMinDelaySeconds;                                       // 0x0444(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              m_fMaxDelaySeconds;                                       // 0x0448(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0xD4];                                      // 0x044C(0x00D4) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.XpecRallySystem");
		return ptr;
	}


	void RequestRally(bool bSkipRally);
	void RequestDismiss();
	void OnPawnMoveComplete(class ABendPawn* pPawn, TEnumAsByte<EPathFollowingResult> Result);
	void OnPawnEnterSpeechArea(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void OnMissionSpecialEvent(const struct FString& CustomMessage, TEnumAsByte<EMissionIDs> MissionID);
	bool FillPawnToZoneIDMappings(bool outputResultToLog);
};


// Class BendGame.XpecShiftController
// 0x0050 (0x0398 - 0x0348)
class AXpecShiftController : public AXpecBase
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0348(0x0008) MISSED OFFSET
	TArray<class AXpecPOI*>                            UpAreaPOI;                                                // 0x0350(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<class AXpecPOI*>                            DownAreaPOI;                                              // 0x0360(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	class AXpecPOI*                                    ShiftPOI;                                                 // 0x0370(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<struct FXpecShiftData>                      ShiftSetting;                                             // 0x0378(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TEnumAsByte<EXpecShiftState>                       m_currentState;                                           // 0x0388(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	TEnumAsByte<EXpecShiftState>                       m_nextState;                                              // 0x0389(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData01[0xE];                                       // 0x038A(0x000E) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.XpecShiftController");
		return ptr;
	}


	bool SetUpAreaPawnName(TArray<struct FName> pawnName);
	bool SetShiftPOIPawnName(TArray<struct FName> upAreaPawnName, TArray<struct FName> downAreaPawnName);
	bool SetDownAreaPawnName(TArray<struct FName> pawnName);
	bool IUntrigger(const struct FName& EventName, class AActor* pSource);
	bool ITrigger(const struct FName& EventName, class AActor* pSource);
};


// Class BendGame.XpecTalkingPawnSpawnerInterface
// 0x0000 (0x0028 - 0x0028)
class UXpecTalkingPawnSpawnerInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.XpecTalkingPawnSpawnerInterface");
		return ptr;
	}


	bool IIsActivated();
	struct FTransform IGetSpawnTransform(class AActor* pPOI);
};


// Class BendGame.XpecTalkingPawnSpawnLocation
// 0x0120 (0x0468 - 0x0348)
class AXpecTalkingPawnSpawnLocation : public AXpecBase
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0348(0x0010) MISSED OFFSET
	struct FBendLocationReference                      fleePoint;                                                // 0x0358(0x0010) (Edit, BlueprintVisible)
	class UXpecDummyPawnTrustAnim*                     trustAnim;                                                // 0x0368(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UBendEncampmentData*                         Encampment;                                               // 0x0370(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EXpecPOIUserGender>                    Gender;                                                   // 0x0378(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0379(0x0007) MISSED OFFSET
	class USoundClass*                                 SoundClass;                                               // 0x0380(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EXpecTalkingPawnVOType>                voType;                                                   // 0x0388(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0389(0x0007) MISSED OFFSET
	struct FName                                       meatDatabaseName;                                         // 0x0390(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               enableMorning;                                            // 0x0398(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               enableAfternoon;                                          // 0x0399(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               enableEvening;                                            // 0x039A(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               enableNight;                                              // 0x039B(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              fleeCheckingDistance;                                     // 0x039C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              hiddenCheckingDistance;                                   // 0x03A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x03A4(0x0004) MISSED OFFSET
	class UBendSkeletalMeshArrayData*                  maleMeshList;                                             // 0x03A8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UBendSkeletalMeshArrayData*                  femaleMeshList;                                           // 0x03B0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               disableUpdate;                                            // 0x03B8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x7];                                       // 0x03B9(0x0007) MISSED OFFSET
	class AXpecTalkingPawnSpawnLocation*               updateTarget;                                             // 0x03C0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               useDummyDuel;                                             // 0x03C8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x7];                                       // 0x03C9(0x0007) MISSED OFFSET
	struct FBendLocationReference                      duelSpawnPoint;                                           // 0x03D0(0x0010) (Edit, BlueprintVisible)
	struct FBendLocationReference                      duelFleePoint;                                            // 0x03E0(0x0010) (Edit, BlueprintVisible)
	class UXpecDummyPawnTrustAnim*                     duelTrustAnim;                                            // 0x03F0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EXpecPOIUserGender>                    duelGender;                                               // 0x03F8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x7];                                       // 0x03F9(0x0007) MISSED OFFSET
	class USoundClass*                                 duelSoundClass;                                           // 0x0400(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EXpecTalkingPawnVOType>                duelVoType;                                               // 0x0408(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0x7];                                       // 0x0409(0x0007) MISSED OFFSET
	class UBendSkeletalMeshArrayData*                  duelMaleMeshList;                                         // 0x0410(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UBendSkeletalMeshArrayData*                  duelFemaleMeshList;                                       // 0x0418(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class AXpecPopulation*                             population;                                               // 0x0420(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class ABendPawn*                                   SpawnedPawn;                                              // 0x0428(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class ASkeletalMeshActor*                          DummyPawn;                                                // 0x0430(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class ABendPawn*                                   duelSpawnedPawn;                                          // 0x0438(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class ASkeletalMeshActor*                          duelDummyPawn;                                            // 0x0440(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                lookIndex;                                                // 0x0448(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EXpecEventPawnState>                   m_currentState;                                           // 0x044C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	TEnumAsByte<EXpecEventPawnState>                   m_nextState;                                              // 0x044D(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData08[0x1A];                                      // 0x044E(0x001A) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.XpecTalkingPawnSpawnLocation");
		return ptr;
	}


	class ABendPawn* SpawnEventPawn(const struct FTransform& Transform);
	class ASkeletalMeshActor* SpawnDummyPawn(const struct FTransform& Transform);
	void OnTrustChanged(class UBendEncampmentData* encamp, TEnumAsByte<ETrustTier> PreviousTier, TEnumAsByte<ETrustTier> NewTier);
	bool IIsActivated();
	struct FTransform IGetSpawnTransform(class AActor* pPOI);
	TAssetPtr<class USoundClass> GetVOClassC(TEnumAsByte<EXpecVOClass> Index);
	struct FName GetNormalVOTag();
	struct FName GetMeatVOTag();
	void FinishedLoadingLook(int Index);
	void FinishedLoadingDuelLook(int Index);
};


// Class BendGame.XpecTalkingPawnController
// 0x0070 (0x03B8 - 0x0348)
class AXpecTalkingPawnController : public AXpecBase
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0348(0x0008) MISSED OFFSET
	TEnumAsByte<EXpecTimeZone>                         m_eCurrentTimeZone;                                       // 0x0350(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EWeatherType>                          m_eCurrentWeatherType;                                    // 0x0351(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x36];                                      // 0x0352(0x0036) MISSED OFFSET
	TArray<struct FTalkingDummySpawnerArray>           m_spawnerGroup;                                           // 0x0388(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	float                                              voRadius;                                                 // 0x0398(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              voHeight;                                                 // 0x039C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              voCooldown;                                               // 0x03A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x03A4(0x0004) MISSED OFFSET
	struct FName                                       meatDatabaseName;                                         // 0x03A8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class AXpecVOManager*                              m_pVOManager;                                             // 0x03B0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.XpecTalkingPawnController");
		return ptr;
	}


	void OnVOComplete(class ABendPawn* PawnSpeaking, const struct FName& SoundName, int ConversationID, TEnumAsByte<EDonePlayVocalReason> SuccessOrFail);
	bool IUntrigger(const struct FName& EventName, class AActor* pSource);
	bool ITrigger(const struct FName& EventName, class AActor* pSource);
};


// Class BendGame.XpecDebugActor
// 0x0000 (0x0348 - 0x0348)
class AXpecDebugActor : public AActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.XpecDebugActor");
		return ptr;
	}


	void Tick_BP(float DeltaSeconds);
	void HelpTickPoseInEditor(class USkeletalMeshComponent* SkeletalMeshComp);
};


// Class BendGame.XpecPopulationDetailModifier
// 0x0020 (0x0110 - 0x00F0)
class UXpecPopulationDetailModifier : public UXpecDebugComponent
{
public:
	bool                                               doExportCurrentData;                                      // 0x00F0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               doSetDataFromTable;                                       // 0x00F1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x00F2(0x0006) MISSED OFFSET
	class UDataTable*                                  m_PopulationTable;                                        // 0x00F8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UDataTable*                                  m_SpawnerTable;                                           // 0x0100(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UDataTable*                                  m_PopulationDetailTable;                                  // 0x0108(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.XpecPopulationDetailModifier");
		return ptr;
	}

};


// Class BendGame.XpecDummyMovementComponent
// 0x0050 (0x0170 - 0x0120)
class UXpecDummyMovementComponent : public UMovementComponent
{
public:
	struct FRootMotionMovementParams                   RootMotionParams;                                         // 0x0120(0x0040) (Transient)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0160(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.XpecDummyMovementComponent");
		return ptr;
	}


	bool SetSkeletalMeshForRootMotion(class USkeletalMeshComponent* pInSkeletalMeshComponent);
};


// Class BendGame.XpecDummySpawnInterface
// 0x0000 (0x0028 - 0x0028)
class UXpecDummySpawnInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.XpecDummySpawnInterface");
		return ptr;
	}


	TArray<struct FTransform> IGetDummySpawnLocationCandidates();
};


// Class BendGame.XpecEvent
// 0x0050 (0x0398 - 0x0348)
class AXpecEvent : public AActor
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0348(0x0020) MISSED OFFSET
	class AXpecZoneManager*                            m_pZoneManager;                                           // 0x0368(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TArray<class ABendPawn*>                           m_actors;                                                 // 0x0370(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	class ABendPOI*                                    m_pClient;                                                // 0x0380(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class AXpecScenarioInstance*                       m_pScenario;                                              // 0x0388(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0390(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.XpecEvent");
		return ptr;
	}


	class AXpecScenarioInstance* ITryResumeScenario(class ABendPawn* pUser, class ABendPOISlot* pSlot);
	bool IScenarioCondition(class AXpecScenarioInstance* pScenario, const struct FName& scenarioName, const struct FName& ActionName, const struct FName& conditionName);
	float IOverrideTimerTime(class AXpecScenarioInstance* pScenario, const struct FName& scenarioName, const struct FName& ActionName, float defaultTimerTime);
	struct FVector IOverrideRotateAlignTarget(class AXpecScenarioInstance* pScenario, const struct FName& scenarioName, const struct FName& ActionName);
	void IOverridePerformActionParameter(class AXpecScenarioInstance* pScenario, const struct FName& scenarioName, const struct FName& ActionName, const struct FName& defaultAnimGroup, const struct FTransform& defaultAnchorTransform, bool defaultUseAnchor, float defaultBlendInTime, float defaultBlendOutTime, float DefaultPlayRate, TEnumAsByte<EUnaimedAnimMoveStyle> defaultWeaponType, struct FName* animGroup, struct FTransform* AnchorTransform, bool* bUseAnchor, float* fBlendInTime, float* fBlendOutTime, float* fPlayRate, TEnumAsByte<EUnaimedAnimMoveStyle>* EWeaponType);
	void IOverrideMoveToParameter(class AXpecScenarioInstance* pScenario, const struct FName& scenarioName, const struct FName& ActionName, float defaultMoveToSpeed, bool defaultApplySpeedMultiply, float defaultRadius, float defaultApproachOuterRadius, bool defaultSlowApproach, struct FTransform* TargetTransform, float* fMoveToSpeed, bool* bApplySpeedMultiply, float* fRadius, float* fApproachOuterRadius, bool* bSlowApproach);
	void IOverrideLookAtParameter(class AXpecScenarioInstance* pScenario, const struct FName& scenarioName, const struct FName& ActionName, bool bDefaultOverrideAngleLimits, const struct FRotator& rDefaultAngleLimitsOverride, TEnumAsByte<EBendCharacterLookPartialSet> eDefaultPartialSet, float fDefaultInterpolationRate, float fDefaultDuration, bool* bOverrideAngleLimits, struct FRotator* rAngleLimitsOverride, TEnumAsByte<EBendCharacterLookPartialSet>* ePartialSet, float* fInterpolationRate, float* fDuration);
	void IOverrideGateParameter(class AXpecScenarioInstance* pScenario, const struct FName& scenarioName, const struct FName& ActionName, int defaultGateMin, int defaultGateMax, int* iGateMin, int* iGateMax);
	float IOverrideDelayParameter(class AXpecScenarioInstance* pScenario, const struct FName& scenarioName, const struct FName& ActionName, float defaultDelayTime);
	bool IOnScenarioSetup(class AXpecScenarioInstance* pScenario, const struct FName& scenarioName);
	bool IOnScenarioCleanup(class AXpecScenarioInstance* pScenario, const struct FName& scenarioName);
	struct FName IOnRunScenario(class AXpecScenarioInstance* pScenario, const struct FName& scenarioName, const struct FName& ActionName, class ABendPawn* pMainActor, const struct FName& defaultScenarioName);
	bool IGrant(float fRewardPercentage, float fCostPercentage);
	struct FName IGetVO(class AXpecScenarioInstance* pScenario, const struct FName& scenarioName, const struct FName& ActionName, class ABendPawn* pActor, int iActorIndex, const struct FName& defaultVOName);
	struct FVector IGetSearchCenterForScenarioActor(class AXpecScenarioInstance* pScenario, const struct FName& scenarioName, int iNewActorIndex);
	int IGetScenarioActorCandidates(class AXpecScenarioInstance* pScenario, const struct FName& scenarioName, TArray<class ABendPawn*>* candidates);
	class AXpecScenarioInstance* IGetNextScenario(class ABendPawn* pUser, class ABendPOISlot* pSlot, const struct FName& lastScenarioName, TEnumAsByte<EXpecScenarioExecuteResult> eLastScenarioResult);
	class AXpecScenarioInstance* IGetFirstScenario(class ABendPawn* pUser, class ABendPOISlot* pSlot);
	TArray<struct FVocalConversationData> IGetConversationData(class AXpecScenarioInstance* pScenario, const struct FName& scenarioName, const struct FName& ActionName, class ABendPawn* pTalkPawn, class ABendPawn* pTalkToPawn);
	struct FTransform IGetAnchorTransform(class AXpecScenarioInstance* pScenario, const struct FName& scenarioName, const struct FName& ActionName, const struct FName& AnimGroupName);
	bool ICanActorJoinScenario(class AXpecScenarioInstance* pScenario, const struct FName& scenarioName, class ABendPawn* pNewActor, int iNewActorIndex);
	bool IAboutToSwitchToLowLOD(class AXpecScenarioInstance* pScenario, class USkeletalMeshComponent* dummyMesh, const struct FName& scenarioName, const struct FName& ActionName);
};


// Class BendGame.XpecEventPawnManagerComponent
// 0x0038 (0x0108 - 0x00D0)
class UXpecEventPawnManagerComponent : public UActorComponent
{
public:
	class UClass*                                      eventPawnClass;                                           // 0x00D0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x30];                                      // 0x00D8(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.XpecEventPawnManagerComponent");
		return ptr;
	}


	class ABendPawn* RequestEventPawn(struct FXpecLODPawn* pawnInfo);
	bool Initialize(int numEventPawn);
	bool DeactivateEventPawn(class ABendPawn* Pawn);
	class ABendPawn* ActivateEventPawn(struct FXpecLODPawn* pawnInfo);
};


// Class BendGame.XpecExtendedAllowedToUseInterface
// 0x0000 (0x0028 - 0x0028)
class UXpecExtendedAllowedToUseInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.XpecExtendedAllowedToUseInterface");
		return ptr;
	}


	bool IIsAllowedToUse(TEnumAsByte<EXpecPOIUserType> userType, TEnumAsByte<EXpecPOIUserGender> userGender, const struct FName& pawnName);
};


// Class BendGame.XpecExtendedAllowedToUseComponent
// 0x0008 (0x00D8 - 0x00D0)
class UXpecExtendedAllowedToUseComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x00D0(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.XpecExtendedAllowedToUseComponent");
		return ptr;
	}


	bool IIsAllowedToUse(TEnumAsByte<EXpecPOIUserType> userType, TEnumAsByte<EXpecPOIUserGender> userGender, const struct FName& pawnName);
};


// Class BendGame.XpecLODBoxInstance
// 0x0028 (0x0050 - 0x0028)
class UXpecLODBoxInstance : public UObject
{
public:
	struct FScriptMulticastDelegate                    OnOverlapBegin;                                           // 0x0028(0x0010) (ZeroConstructor, InstancedReference)
	struct FScriptMulticastDelegate                    OnOverlapEnd;                                             // 0x0038(0x0010) (ZeroConstructor, InstancedReference)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0048(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.XpecLODBoxInstance");
		return ptr;
	}


	void SetBoxComponent(class UPrimitiveComponent* B);
	void OnLODBoxOverlapEnd(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex);
	void OnLODBoxOverlapBegin(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
};


// Class BendGame.XpecLODBoxManager
// 0x0128 (0x0470 - 0x0348)
class AXpecLODBoxManager : public AActor
{
public:
	struct FScriptMulticastDelegate                    OnNPCNeedLODBoxReset;                                     // 0x0348(0x0010) (ZeroConstructor, InstancedReference)
	bool                                               m_bDebugLODBox;                                           // 0x0358(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_bDebugIsolateArea;                                      // 0x0359(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xE6];                                      // 0x035A(0x00E6) MISSED OFFSET
	TArray<class UXpecLODBoxInstance*>                 m_LODBoxInstances;                                        // 0x0440(0x0010) (ZeroConstructor)
	TArray<class UXpecLODBoxInstance*>                 m_IsolateAreaInstances;                                   // 0x0450(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0460(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.XpecLODBoxManager");
		return ptr;
	}


	void RegisterLODBox(class UPrimitiveComponent* Box, TArray<class UPrimitiveComponent*> visibleBoxes, TArray<class UPrimitiveComponent*> invisibleBoxes);
	void RegisterIsolateArea(class UPrimitiveComponent* Box);
	void OnPlayerLeaveIsolatedArea(class UPrimitiveComponent* Box);
	void OnPlayerLeaveBox(class UPrimitiveComponent* Box);
	void OnPlayerEnterIsolatedArea(class UPrimitiveComponent* Box);
	void OnPlayerEnterBox(class UPrimitiveComponent* Box);
	void OnOtherActorChangeIsolatedArea(class AActor* Other);
	void OnOtherActorChangeBox(class AActor* Other);
	void onIsolateEndOverlap(class UPrimitiveComponent* Box, class AActor* Target);
	void onIsolateBeginOverlap(class UPrimitiveComponent* Box, class AActor* Target);
	void onBoxEndOverlap(class UPrimitiveComponent* Box, class AActor* Target);
	void OnBoxBeginOverlap(class UPrimitiveComponent* Box, class AActor* Target);
	void DrawDebugBoxes();
	bool CheckActorWithLODBox(int iSN, class AActor* Target, bool* isImportant, bool* isInvisible, bool* isInIsolateArea);
};


// Class BendGame.XpecMapExporter
// 0x0038 (0x0108 - 0x00D0)
class UXpecMapExporter : public UActorComponent
{
public:
	bool                                               doExport;                                                 // 0x00D0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               doLoadMapNames;                                           // 0x00D1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               includeChildActors;                                       // 0x00D2(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x5];                                       // 0x00D3(0x0005) MISSED OFFSET
	TArray<struct FString>                             candidateMapName;                                         // 0x00D8(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FString                                     directoryName;                                            // 0x00E8(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<class UClass*>                              skippedClass;                                             // 0x00F8(0x0010) (Edit, BlueprintVisible, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.XpecMapExporter");
		return ptr;
	}


	bool IOnConstructionScript();
};


// Class BendGame.XpecMissionBlockingInterface
// 0x0000 (0x0028 - 0x0028)
class UXpecMissionBlockingInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.XpecMissionBlockingInterface");
		return ptr;
	}


	bool IHiddenByMissionBlockingVolume(bool bShouldHide, bool bOnlyHidePawn);
};


// Class BendGame.XpecMissionBlockingVolume
// 0x0060 (0x03A8 - 0x0348)
class AXpecMissionBlockingVolume : public AActor
{
public:
	class UXpecAmbientBlockerBoxComp*                  AmbientBlockerBoxComponent;                               // 0x0348(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UBoxComponent*                               BoxComponent;                                             // 0x0350(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	bool                                               m_bBlockImportantSpawn;                                   // 0x0358(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               m_bShowDummy;                                             // 0x0359(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4E];                                      // 0x035A(0x004E) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.XpecMissionBlockingVolume");
		return ptr;
	}


	void SetPawnsAvoidRoad(bool bActivate);
	void RemoveActorFromHidden(class AActor* ActorToRemove, bool bIsInEndPlay);
	void HideActorInVolume(class AActor* ActorToHide);
	TArray<class AXpecMissionBlockingVolume*> STATIC_GetActiveVolumes();
	void DisablePOIInVolume(class AXpecPOI* POIToDisable);
	void DeactivateVolume();
	bool CheckPawnMovingToVolume(class UXpecPawnComponent* InXpecPawnComp);
	bool CheckActorOverlapVolume(class AActor* InActor);
	void BlockImportantSpawner(class AXpecPawnSpawnLocation* SpawnerToBlock);
	void ActivateVolume();
};


// Class BendGame.XpecNeedComponent
// 0x0048 (0x0118 - 0x00D0)
class UXpecNeedComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x00D0(0x0018) MISSED OFFSET
	TArray<struct FXpecNeedData>                       m_needs;                                                  // 0x00E8(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	unsigned char                                      UnknownData01[0x20];                                      // 0x00F8(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.XpecNeedComponent");
		return ptr;
	}


	void SetNeedValue(const struct FName& Name, float fValue);
	void InitNeed(const struct FName& Name, float FMin, float FMax, float fValue, class UCurveFloat* pWeightTbl);
	void AddNeedValue(const struct FName& Name, float fValue);
};


// Class BendGame.XpecPath
// 0x0020 (0x0368 - 0x0348)
class AXpecPath : public AActor
{
public:
	TArray<class AActor*>                              m_WayPoints;                                              // 0x0348(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FBendLocationReference>              m_aWaypoints;                                             // 0x0358(0x0010) (Edit, BlueprintVisible, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.XpecPath");
		return ptr;
	}


	void SetShowDebugPath(bool inputShowDebugPath);
	struct FVector GetLocation(int iIndex);
};


// Class BendGame.XpecPawnComponent
// 0x0118 (0x01E8 - 0x00D0)
class UXpecPawnComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x00D0(0x0018) MISSED OFFSET
	struct FName                                       m_name;                                                   // 0x00E8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EXpecPawnState>                        m_eState;                                                 // 0x00F0(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EXpecPOIUserType>                      m_eType;                                                  // 0x00F1(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EXpecPOIUserGender>                    m_eGender;                                                // 0x00F2(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EePOIUserType>                         m_eBendPOIUserType;                                       // 0x00F3(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00F4(0x0004) MISSED OFFSET
	class ABendPawn*                                   m_pPawn;                                                  // 0x00F8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class AXpecZoneManager*                            m_pZoneManager;                                           // 0x0100(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class AXpecPopulation*                             m_pPopulation;                                            // 0x0108(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class ARecastNavMesh*                              m_pNavMesh;                                               // 0x0110(0x0008) (ZeroConstructor, IsPlainOldData)
	class AActor*                                      m_pMoveToTarget;                                          // 0x0118(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class AActor*                                      m_pTargetObstacle;                                        // 0x0120(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TArray<class AActor*>                              m_obstacles;                                              // 0x0128(0x0010) (BlueprintVisible, ZeroConstructor)
	TArray<class AActor*>                              m_ignoreAvoidance;                                        // 0x0138(0x0010) (BlueprintVisible, ZeroConstructor)
	TArray<class AActor*>                              m_collisions;                                             // 0x0148(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	struct FVector                                     m_avoidancePosition;                                      // 0x0158(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector                                     m_currentTargetPosition;                                  // 0x0164(0x000C) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class ABendPOI*                                    m_pCurrentPOI;                                            // 0x0170(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class ABendPOISlot*                                m_pCurrentSlot;                                           // 0x0178(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class AXpecScenarioInstance*                       m_pCurrentScenario;                                       // 0x0180(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class ABendPOI*                                    m_pNextPOI;                                               // 0x0188(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TArray<class ABendPOI*>                            m_favoredPOIs;                                            // 0x0190(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	struct FName                                       m_lowLODAnimGroup;                                        // 0x01A0(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_bRandomInGroup;                                         // 0x01A8(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x01A9(0x0003) MISSED OFFSET
	float                                              m_fCurrentPOIPriority;                                    // 0x01AC(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                m_iSN;                                                    // 0x01B0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               m_bIsAvoiding;                                            // 0x01B4(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               m_bLowLODRequested;                                       // 0x01B5(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x2];                                       // 0x01B6(0x0002) MISSED OFFSET
	float                                              m_fSpeedMultiply;                                         // 0x01B8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              m_fAdditionalRadiusForAvoidance;                          // 0x01BC(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UAnimMontage*                                m_upperbodyMontage;                                       // 0x01C0(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       m_montageSection;                                         // 0x01C8(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x18];                                      // 0x01D0(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.XpecPawnComponent");
		return ptr;
	}


	bool SetNextPOI(class ABendPOI* pNextPOI);
	void SetLowLOD(bool bLowLOD);
	bool SetCurrentScenario(class AXpecScenarioInstance* pScenario);
	bool RemoveScenarioFromSchedule(class AXpecScenarioInstance* pScenario);
	bool OnUsePOI(class ABendPOI* pPOI, class ABendPOISlot* pSlot);
	bool OnShowHighLOD();
	class ABendPOISlot* OnRequestUsePOI(class ABendPOI* pPOI, TEnumAsByte<EePOIUserType> eBendPOIUserType, class ABendPOISlot* pDefaultSlot);
	bool OnLeavePOI(class ABendPOI* pPOI);
	float OnGetPOIPriority(class ABendPOI* pPOI, TEnumAsByte<EePOIUserType> eBendPOIUserType, float fDefaultPriority);
	bool MoveToZone(class AXpecZoneManager* pNewZoneManager);
	bool Initialize(class ABendPawn* pPawn, class AXpecPopulation* pPopulation);
	float GetRadiusForAvoidance();
	class AXpecScenarioInstance* GetNextScenario();
	class AXpecScenarioInstance* GetCurrentScenario();
	struct FVector GetAvoidancePosition(bool bAvoidanceWait, bool* bNeedToAvoid, bool* bNeedToUpdate);
	class ABendPOI* FindPOI();
	void DebugPrintInfo(struct FString* line);
	bool DeactivatePawn();
	bool AddScenarioToSchedule(class AXpecScenarioInstance* pScenario, class AXpecScenarioInstance* pInsert, bool bInterrupt);
	void AddIgnoreAvoidance(class AActor* Other);
	bool AddFavoredPOI(class ABendPOI* pPOI);
	bool ActivatePawn(const struct FXpecPawnInfo& pawnInfo, int iSN, class AXpecZoneManager* pZoneManager);
};


// Class BendGame.XpecPOICount
// 0x0038 (0x0108 - 0x00D0)
class UXpecPOICount : public UActorComponent
{
public:
	TArray<struct FXpecPOICountData>                   m_data;                                                   // 0x00D0(0x0010) (BlueprintVisible, ZeroConstructor)
	struct FDateTime                                   m_CountStartTime;                                         // 0x00E0(0x0008) (BlueprintVisible, ZeroConstructor)
	unsigned char                                      UnknownData00[0x20];                                      // 0x00E8(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.XpecPOICount");
		return ptr;
	}


	void ResetCount();
	void Reported(class ABendPOI* POI, TEnumAsByte<EXpecPOICountReport> reportType, const struct FName& userName);
	void EventMgrEndPlay();
	struct FString DumpLogAndReset();
};


// Class BendGame.XpecPOIMigrationInterface
// 0x0000 (0x0028 - 0x0028)
class UXpecPOIMigrationInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.XpecPOIMigrationInterface");
		return ptr;
	}


	bool IVoTriggerEventEnable();
	bool IUpdateMoving();
	bool ITriggerVoEvent(class AXpecScenarioInstance* pScenario);
	bool IShouldIgnoreWeatherChangedInterrupt();
	bool IIsForceHighLOD(class ABendPawn* pUser);
	struct FName IGetUsagePawnName();
	TArray<struct FTransform> IGetDummySpawnTransforms();
	bool ICanUse(const struct FName& Name);
};


// Class BendGame.XpecPOISlotInterface
// 0x0000 (0x0028 - 0x0028)
class UXpecPOISlotInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.XpecPOISlotInterface");
		return ptr;
	}


	bool SetPropVisible(bool bVisible);
	bool IScenarioCondition(class AXpecScenarioInstance* pScenario, const struct FName& scenarioName, const struct FName& ActionName, const struct FName& conditionName, bool* DoesConditionHandled);
	float IOverrideTimerTime(class AXpecScenarioInstance* pScenario, const struct FName& scenarioName, const struct FName& ActionName, float defaultTimerTime);
	struct FVector IOverrideRotateAlignTarget(class AXpecScenarioInstance* pScenario, const struct FName& scenarioName, const struct FName& ActionName);
	void IOverrideMoveToParameter(class AXpecScenarioInstance* pScenario, const struct FName& scenarioName, const struct FName& ActionName, float defaultMoveToSpeed, bool defaultApplySpeedMultiply, float defaultRadius, float defaultApproachOuterRadius, bool defaultSlowApproach, struct FTransform* TargetTransform, float* fMoveToSpeed, bool* bApplySpeedMultiply, float* fRadius, float* fApproachOuterRadius, bool* bSlowApproach);
	void IOverrideLookAtParameter(class AXpecScenarioInstance* pScenario, const struct FName& scenarioName, const struct FName& ActionName, bool bDefaultOverrideAngleLimits, const struct FRotator& rDefaultAngleLimitsOverride, TEnumAsByte<EBendCharacterLookPartialSet> eDefaultPartialSet, float fDefaultInterpolationRate, float fDefaultDuration, bool* bOverrideAngleLimits, struct FRotator* rAngleLimitsOverride, TEnumAsByte<EBendCharacterLookPartialSet>* ePartialSet, float* fInterpolationRate, float* fDuration);
	void IOverrideGateParameter(class AXpecScenarioInstance* pScenario, const struct FName& scenarioName, const struct FName& ActionName, int defaultGateMin, int defaultGateMax, int* iGateMin, int* iGateMax);
	float IOverrideDelayParameter(class AXpecScenarioInstance* pScenario, const struct FName& scenarioName, const struct FName& ActionName, float defaultDelayTime);
	bool IOnScenarioSetup(class AXpecScenarioInstance* pScenario, const struct FName& scenarioName);
	bool IOnReceiveAnimNotify(const struct FName& EventName, class AActor* pSource);
	bool IOnLODStateChanged(const struct FXpecLODPawn& pPawnInfo, TEnumAsByte<EXpecPawnLODChangeState> ChangeState);
	bool IOnLeaveSlot(class ABendPawn* pUser, class ABendPOISlot* pSlot);
	TArray<struct FName> IGetUsageAnimGroups();
	struct FName IGetMainScenarioName();
	struct FName IGetLowLODAnimGroup();
	bool IGetDummyInfo(TEnumAsByte<EXpecPOIUserType> eUserType, TEnumAsByte<EXpecPOIUserGender> dummyGender, TEnumAsByte<EXpecVOClass> eUserVOClass, class USkeletalMeshComponent* dummyMesh, struct FTransform* loopPosition, struct FName* scenarioName, int* commandIndex, struct FName* lowLODAnimGroup, float* fTransitionTime, TEnumAsByte<EUnaimedAnimMoveStyle>* m_eWeaponType);
	bool DetachProp(const struct FName& pawnName, class USkeletalMeshComponent* pMeshToDetach);
	bool AttachProp(const struct FName& pawnName, TEnumAsByte<EXpecPOIUserType> eUserType, TEnumAsByte<EXpecPOIUserGender> eUserGender, class USkeletalMeshComponent* pMeshToAttach, const struct FName& AttachSocketName);
};


// Class BendGame.XpecPOIStandInLineComponent
// 0x0250 (0x0320 - 0x00D0)
class UXpecPOIStandInLineComponent : public UActorComponent
{
public:
	bool                                               m_inPooTime;                                              // 0x00D0(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               m_bUseChatInLine;                                         // 0x00D1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x00D2(0x0006) MISSED OFFSET
	struct FName                                       m_MainScenarioName;                                       // 0x00D8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       m_CommandScenarioName;                                    // 0x00E0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       m_CommandSummonScenarioName;                              // 0x00E8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       m_MoveToEntryActionName;                                  // 0x00F0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       m_MoveToLinePositionActionName;                           // 0x00F8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       m_MoveToPerformActionName;                                // 0x0100(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       m_MoveToDestinationActionName;                            // 0x0108(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<class AActor*>                              m_IgnoreActorList;                                        // 0x0110(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	unsigned char                                      UnknownData01[0x1F0];                                     // 0x0120(0x01F0) MISSED OFFSET
	TArray<TWeakObjectPtr<class ABendPawn>>            enteringPawns;                                            // 0x0310(0x0010) (ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.XpecPOIStandInLineComponent");
		return ptr;
	}


	bool SetPerformPawn(class ABendPawn* Pawn);
	void SetPawnInLine(int Id, class ABendPawn* Pawn);
	bool SetMovingTargetLocation(class AXpecScenarioInstance* scenario, class ABendPOISlot* Anchor);
	bool SetEventOnScenario(class ABendPawn* Pawn, const struct FName& EventName, bool isSet);
	bool ScenarioCondition(class AXpecScenarioInstance* scenario, const struct FName& conditionName);
	void RemovePawnFromPOI(class ABendPawn* Pawn);
	void RemoveDummyFromPOI(const struct FName& dummy, class AXpecScenarioInstance* scenario);
	bool ReadyToRelease();
	void POITrigger(const struct FName& EventName, class ABendPawn* triggerPawn, class AXpecScenarioInstance* scenario);
	struct FVector OverrideRotateAlignTarget(class AXpecScenarioInstance* scenario, const struct FName& scenarioName, const struct FName& ActionName);
	struct FTransform OverrideMoveToParameter(class AXpecScenarioInstance* scenario, const struct FName& scenarioName, const struct FName& ActionName);
	void OrderLinePosition(class AXpecScenarioInstance* scenario, bool findNewPosition);
	void OnPerformDone();
	bool OnLODStateChanged(const struct FXpecLODPawn& pPawnInfo, TEnumAsByte<EXpecPawnLODChangeState> ChangeState);
	bool IsAllowedToUse(class ABendPawn* Pawn);
	bool IsAllowDummyToUse(const struct FName& userName);
	void InterruptOnWeatherChange();
	void Initialize(class ABendPOI* POI, const struct FTransform& perform, const struct FTransform& Destination, const struct FTransform& Entry, TArray<struct FTransform> lineAnchors, TArray<struct FTransform> alterLineAnchors, class ATriggerBox* advanceDetectVolume, class ABendPOI* ignorePOI, int animType, int dummyNum, float entryDist);
	void InitCommandTrigger(int minimalUserToStart, class AXpecPOI* commandPOI);
	void GetRandomScenario(float first, float second, float third, float forth);
	class ABendPawn* GetPerformPawn();
	int GetPawnNumInLine();
	class ABendPawn* GetPawnInLine(int Id);
	bool GetDummyLocation(struct FTransform* Transform, bool* isPerform, bool* isChat);
	int GetCurrentScenarioType();
	void FindVOCandidate(TArray<class ABendPawn*>* candidates);
	bool FindDummyInPOI(const struct FName& userName, bool* onPerform, int* idx);
	void DrawDebugInfo();
	void CommandPOITrigger(const struct FName& EventName);
	bool CheckDummiesInPOI();
	void CheckAdvance();
};


// Class BendGame.XpecPOIUserInterface
// 0x0000 (0x0028 - 0x0028)
class UXpecPOIUserInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.XpecPOIUserInterface");
		return ptr;
	}


	bool ISetUpperbodyMontageInfo(class UAnimMontage* Montage, const struct FName& Section);
	bool ISetNextPOI(class ABendPOI* pNextPOI);
	bool ISetMoveToTarget(class AActor* pTarget);
	bool ISetLowLODAnimGroup(const struct FName& GroupName, bool bRandomInGroup);
	bool ISetLowLOD(bool bLowLOD);
	bool ISetCurrentScenario(class AXpecScenarioInstance* pScenario);
	bool IRemoveScenarioFromSchedule(class AXpecScenarioInstance* pScenario);
	bool IOnUsePOI(class ABendPOI* pPOI, class ABendPOISlot* pSlot);
	class ABendPOISlot* IOnRequestUsePOI(class ABendPOI* pPOI, TEnumAsByte<EePOIUserType> eBendPOIUserType, class ABendPOISlot* pDefaultSlot);
	bool IOnLeavePOI(class ABendPOI* pPOI);
	float IOnGetPOIPriority(class ABendPOI* pPOI, TEnumAsByte<EePOIUserType> eBendPOIUserType, float fDefaultPriority);
	bool IMoveToZone(class AXpecZoneManager* pNewZoneManager);
	bool IIsLowLODRequested();
	bool IInitialize(class AXpecPopulation* pPopulation);
	class AXpecZoneManager* IGetZoneManager();
	class UAnimMontage* IGetUpperbodyMontage(struct FName* Section);
	TEnumAsByte<EXpecPOIUserType> IGetType();
	float IGetSpeedMultiply();
	int IGetSN();
	float IGetRadiusForAvoidance();
	class AXpecScenarioInstance* IGetNextScenario();
	class ABendPOI* IGetNextPOI();
	struct FName IGetName();
	class AActor* IGetMoveToTargetObstacle();
	struct FName IGetLowLODAnimGroup();
	TEnumAsByte<EXpecPOIUserGender> IGetGender();
	class ABendPOISlot* IGetCurrentSlot();
	class AXpecScenarioInstance* IGetCurrentScenario();
	class ABendPOI* IGetCurrentPOI();
	struct FVector IGetAvoidancePosition(bool bAvoidanceWait, bool* bNeedToAvoid, bool* bNeedToUpdate);
	class ABendPOI* IFindPOI();
	bool IEnableTurnToIdle(bool bEnable);
	bool IEnableMoveToIdleAnchor(bool bEnable);
	bool IEnableMoveToIdle(bool bEnable);
	bool IAddScenarioToSchedule(class AXpecScenarioInstance* pScenario, class AXpecScenarioInstance* pInsert, bool bInterrupt);
	bool IAddFavoredPOI(class ABendPOI* pPOI);
};


// Class BendGame.XpecRewardComponent
// 0x0050 (0x0120 - 0x00D0)
class UXpecRewardComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x50];                                      // 0x00D0(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.XpecRewardComponent");
		return ptr;
	}


	float GetRewardValue(const struct FName& Name);
	float GetRewardScore();
	float GetBaseScore();
	void ApplyReward(float fScale);
	void ApplyCost(float fScale);
	void AddReward(const struct FName& Name, float fValue);
	void AddCost(const struct FName& Name, float fValue);
};


// Class BendGame.XpecScenario
// 0x0018 (0x00E8 - 0x00D0)
class UXpecScenario : public UActorComponent
{
public:
	struct FName                                       m_name;                                                   // 0x00D0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                m_iPriority;                                              // 0x00D8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EXpecPOIUserType>                      m_eActorType;                                             // 0x00DC(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EXpecPOIUserGender>                    m_eActorGender;                                           // 0x00DD(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xA];                                       // 0x00DE(0x000A) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.XpecScenario");
		return ptr;
	}


	void WaitForEvent(int iActorIndex, const struct FName& ActionName, const struct FName& EventName, float fLimitTime, bool bAutoReset);
	void WaitForAction(int iActorIndex, const struct FName& ActionName, int iWaitForActorIndex, const struct FName& waitForActionName, bool bWaitForBeginning, float fLimitTime);
	void UntriggerSingle(int iActorIndex, const struct FName& ActionName, const struct FName& EventName, const struct FName& TargetName, bool bSync);
	void UntriggerMultiple(int iActorIndex, const struct FName& ActionName, const struct FName& EventName, TArray<struct FName> targetNames, bool bSync);
	void Unlock(int iActorIndex, const struct FName& ActionName, int iTargetActorIndex, bool bSync);
	void StopTimer(int iActorIndex, const struct FName& ActionName, const struct FName& EventName, bool bSync);
	void StartTimer(int iActorIndex, const struct FName& ActionName, const struct FName& EventName, float fTime, bool bRepeat, bool bSync);
	void SetLookBlendPart(int iActorIndex, const struct FName& ActionName, TEnumAsByte<EBendCharacterLookPartialSet> eBlendPart, bool bSync);
	void SetIdleGroup(int iActorIndex, const struct FName& ActionName, const struct FName& GroupName, float fBlendInTime, float fBlendOutTime, bool bUseAnchor);
	void SetEvent(int iActorIndex, const struct FName& ActionName, const struct FName& EventName, bool bSync);
	void SendEventSingle(int iActorIndex, const struct FName& ActionName, const struct FName& EventName, const struct FName& TargetName, bool bSync);
	void SendEventMultiple(int iActorIndex, const struct FName& ActionName, const struct FName& EventName, TArray<struct FName> targetNames, bool bSync);
	void RunScenario(int iActorIndex, const struct FName& ActionName, const struct FName& scenarioName, int iInterruptLevel, const struct FName& failName, const struct FName& returnName, bool bSync);
	void RotateTo(int iActorIndex, const struct FName& ActionName, const struct FName& AnchorName, bool bUseLocationAsTarget, float fTolerableAngle, bool bSync);
	void Return(int iActorIndex, const struct FName& ActionName, bool bSync);
	void RequestClientScenario(TArray<struct FName> requiredScenarios, TEnumAsByte<EXpecPOIUserType> eActorType, TEnumAsByte<EXpecPOIUserGender> eActorGender, float fMinJoinDistance, float fMaxJoinDistance, const struct FName& eventScenario);
	void ReleaseEvent(int iActorIndex, const struct FName& ActionName, bool bSync);
	void PlayVO(int iActorIndex, const struct FName& ActionName, const struct FName& VOName, bool bResponse, bool bSync);
	void PlayConversation(int iActorIndex, const struct FName& ActionName, const struct FName& TargetName, bool bSync);
	void PerformAction(int iActorIndex, const struct FName& ActionName, const struct FName& GroupName, const struct FName& AnchorName, bool bUseAnchorTransform, float fPlayRate, float fBlendInTime, float fBlendOutTime, TEnumAsByte<EUnaimedAnimMoveStyle> EWeaponType, bool bUseCurrentWeaponType, bool bIgnoreCollision, bool bEnableFootLocking, bool bAutoLock, bool bRandomInGroup, bool bSync);
	void MoveTo(int iActorIndex, const struct FName& ActionName, const struct FName& TargetName, bool bUseTransformAsTarget, float fSpeed, bool bApplySpeedMultiply, float fRadius, float fApproachOuterRadius, bool bSlowApproach, bool bSkipDefendZoneCheck, bool bEnableTurnToIdleInMovement, bool bEnableMoveToIdleAnchor, float fAvoidanceMaxWaitTime, bool bChangeWeaponWhileMoving, float fChangeWeaponDistance, float fChangeWeaponPlayRate, TEnumAsByte<EUnaimedAnimMoveStyle> EWeaponType, bool bSync);
	bool MakeScenario();
	void LookAt(int iActorIndex, const struct FName& ActionName, const struct FName& TargetName, bool bSync);
	void Lock(int iActorIndex, const struct FName& ActionName, int iTargetActorIndex, bool bSync);
	void Jump(int iActorIndex, const struct FName& ActionName, const struct FName& conditionName, const struct FName& negativeTargetName, const struct FName& positiveTargetName, bool bSync);
	void HandleReplySimpleVOEvent(const struct FName& stateEvent);
	void HandleReplyConversationEvent(const struct FName& stateEvent);
	void HandlePlayVOToPlayerEvent();
	void Goto(int iActorIndex, const struct FName& ActionName, const struct FName& TargetName);
	void Gate(int iActorIndex, const struct FName& ActionName, const struct FName& returnName, int iMin, int iMax);
	void Finish(int iActorIndex, const struct FName& ActionName, const struct FName& nextPOIName, bool bChangeWeaponWhileFinishing, TEnumAsByte<EUnaimedAnimMoveStyle> EWeaponType, float fChangeWeaponPlayRate, int iRewardPercentage, int iCostPercentage, bool bSync);
	void EventJump(int iActorIndex, const struct FName& ActionName, const struct FName& EventName, const struct FName& negativeTargetName, const struct FName& positiveTargetName, bool bSync);
	void EndScenario();
	void EndEventHandle();
	void EnableLODSwitch(int iActorIndex, const struct FName& ActionName, const struct FName& lowLODAnimGroup, float fTransitionTime, bool bRandomInGroup, bool bSync);
	void DisableLODSwitch(int iActorIndex, const struct FName& ActionName, bool bSync);
	void Delay(int iActorIndex, const struct FName& ActionName, float fDelay, bool bSync);
	void ClearEvent(int iActorIndex, const struct FName& ActionName, const struct FName& EventName, bool bSync);
	void Checkpoint(int iActorIndex, const struct FName& ActionName, bool bSync);
	void Cancel(int iActorIndex, const struct FName& ActionName);
	void BeginScenario(const struct FName& scenarioName, int iPriority, TEnumAsByte<EXpecPOIUserType> eActorType, TEnumAsByte<EXpecPOIUserGender> eActorGender);
	void BeginEventHandle(const struct FName& EventName);
	void AlignWith(int iActorIndex, const struct FName& ActionName, const struct FName& AnchorName, bool bUseForwardVector, float fTolerableAngle, bool bSync);
	void AddGroup(const struct FName& GroupName);
	void AddActor(TEnumAsByte<EXpecPOIUserType> eActorType, TEnumAsByte<EXpecPOIUserGender> eActorGender, float fMinJoinDistance, float fMaxJoinDistance);
};


// Class BendGame.XpecSoundFXInterface
// 0x0000 (0x0028 - 0x0028)
class UXpecSoundFXInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.XpecSoundFXInterface");
		return ptr;
	}


	class USoundClass* IGetVocalEventSoundClass(class AActor* Actor);
	class UAudioComponent* IGetVocalEventAudioComponent(class AActor* Actor);
	bool IGetImpactEventInfo(class AActor* Actor, TEnumAsByte<EPhysicalSurface>* SurfaceType);
	bool ICanPlayVO();
};


// Class BendGame.XpecSpotLightComponent
// 0x0030 (0x04A0 - 0x0470)
class UXpecSpotLightComponent : public USpotLightComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0470(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnToggleComplete;                                         // 0x0478(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0488(0x0008) MISSED OFFSET
	float                                              MaxIntensity;                                             // 0x0490(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FadeSpeed;                                                // 0x0494(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0498(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.XpecSpotLightComponent");
		return ptr;
	}


	void ToggleLightImmediate(bool On);
	void ToggleLight(bool On);
	bool IUntrigger(const struct FName& EventName, class AActor* pSource);
	bool ITrigger(const struct FName& EventName, class AActor* pSource);
};


// Class BendGame.XpecStreamingComponent
// 0x0038 (0x0108 - 0x00D0)
class UXpecStreamingComponent : public UActorComponent
{
public:
	struct FScriptMulticastDelegate                    onSingleStreamAssetLoaded;                                // 0x00D0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    onStreamAssetsLoaded;                                     // 0x00E0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	TArray<TAssetPtr<class UObject>>                   weakPointerToObjects;                                     // 0x00F0(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0100(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.XpecStreamingComponent");
		return ptr;
	}


	bool LoadStreamingAssets();
	bool LoadSingleStreamingAsset(int indexToLoad);
};


// Class BendGame.XpecTalkingPawnPOIInterface
// 0x0000 (0x0028 - 0x0028)
class UXpecTalkingPawnPOIInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.XpecTalkingPawnPOIInterface");
		return ptr;
	}


	bool IRegisterSpawner(class AActor* pSpawner);
	bool IIsValid();
	class ABendPawn* IGetCurrentPawn();
};


// Class BendGame.XpecVODataManager
// 0x0040 (0x0388 - 0x0348)
class AXpecVODataManager : public AActor
{
public:
	TArray<struct FXpecVOData>                         m_ConversationVOData;                                     // 0x0348(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<struct FXpecVOData>                         m_MonologueVOData;                                        // 0x0358(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0368(0x0008) MISSED OFFSET
	class UDataTable*                                  m_VOFlowTable;                                            // 0x0370(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TArray<struct FXpecVODebugData>                    m_DebugData;                                              // 0x0378(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.XpecVODataManager");
		return ptr;
	}


	bool SaveDebugData();
	TArray<struct FXpecVOData> GetMonologueVOData();
	TArray<struct FXpecVODebugData> GetDebugData(TArray<struct FName> _POITags, TArray<struct FName> _ZoneTags);
	TArray<struct FXpecVOData> GetConversationVOData();
	bool ClearDebugData();
};


// Class BendGame.XpecVOManager
// 0x0090 (0x03D8 - 0x0348)
class AXpecVOManager : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0348(0x0008) MISSED OFFSET
	TArray<struct FXpecVOData>                         m_AvailableConversationVOData;                            // 0x0350(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<struct FXpecVOData>                         m_AvailableMonologueVOData;                               // 0x0360(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<struct FXpecVOData>                         m_AvailableRepeatableVOData;                              // 0x0370(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	bool                                               m_bCanTalkToPlayer;                                       // 0x0380(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0xB];                                       // 0x0381(0x000B) MISSED OFFSET
	struct FTimerHandle                                m_GlobalTimerHandle;                                      // 0x038C(0x0004) (BlueprintVisible, BlueprintReadOnly)
	struct FTimerHandle                                m_ConversationTimerHandle;                                // 0x0390(0x0004) (BlueprintVisible, BlueprintReadOnly)
	struct FTimerHandle                                m_MonologueTimerHandle;                                   // 0x0394(0x0004) (BlueprintVisible, BlueprintReadOnly)
	struct FTimerHandle                                m_RepeatableTimerHandle;                                  // 0x0398(0x0004) (BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData02[0x4];                                       // 0x039C(0x0004) MISSED OFFSET
	class AXpecZoneManager*                            m_pZoneManager;                                           // 0x03A0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class AXpecVODataManager*                          m_pVODataManager;                                         // 0x03A8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x03B0(0x0004) MISSED OFFSET
	float                                              m_fRequestGlobalCooldown;                                 // 0x03B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_fRequestConversationCooldown;                           // 0x03B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_fRequestMonologueCooldown;                              // 0x03BC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_fRequestRepeatableCooldown;                             // 0x03C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              m_fRequestTalkToPlayerCooldown;                           // 0x03C4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<TAssetPtr<class AXpecVOManager>>            m_coopVOManager;                                          // 0x03C8(0x0010) (Edit, BlueprintVisible, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BendGame.XpecVOManager");
		return ptr;
	}


	void TriggerRepeatableCooldown(float fTimeScale);
	void TriggerMonologueCooldown(float fTimeScale);
	void TriggerGlobalCooldown(float fTimeScale);
	void TriggerConversationCooldown(float fTimeScale);
	void ResetMonologue();
	void ResetConversation();
	void Reset();
	struct FXpecVOData RequestMonologue(const struct FName& POIName, const struct FName& zoneId, TEnumAsByte<EXpecPOIUserType> pawnType, const struct FName& Actor0SndClass, bool* Success);
	struct FXpecVOData RequestConversation(const struct FName& POIName, const struct FName& zoneId, TEnumAsByte<EXpecPOIUserType> pawnType, const struct FName& Actor0SndClass, const struct FName& Actor1SndClass, bool* Success);
	bool RegisterVODebugData(const struct FXpecVOData& VOData, bool increaseCount);
	void OnDeactivate();
	void OnActivate();
	bool IUntrigger(const struct FName& EventName, class AActor* pSource);
	bool ITrigger(const struct FName& EventName, class AActor* pSource);
	bool IsInCinematic();
	struct FXpecVOData STATIC_GetVOFlowRowByName(class UDataTable* DataTable, const struct FName& pName, bool* Result);
	bool CanTalkToPlayer();
	bool CanStartVO();
	bool CanStartRepeatable();
	bool CanStartMonologue();
	bool CanStartConversation();
	bool CanPlayConversation(const struct FName& POIName, const struct FName& zoneId, TEnumAsByte<EXpecPOIUserType> pawnType, const struct FName& Actor0SndClass, const struct FName& Actor1SndClass);
};


}

#ifdef _MSC_VER
	#pragma pack(pop)
#endif
